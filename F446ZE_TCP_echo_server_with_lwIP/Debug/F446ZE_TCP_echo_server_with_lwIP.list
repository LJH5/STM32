
F446ZE_TCP_echo_server_with_lwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001036c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c18  0801051c  0801051c  0001151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013134  08013134  00015088  2**0
                  CONTENTS
  4 .ARM          00000008  08013134  08013134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801313c  0801313c  00015088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801313c  0801313c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013140  08013140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08013144  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015088  2**0
                  CONTENTS
 10 .bss          00008990  20000088  20000088  00015088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a18  20008a18  00015088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e75b  00000000  00000000  000150b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054fc  00000000  00000000  00033813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  00038d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123a  00000000  00000000  0003a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030741  00000000  00000000  0003b61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000279a4  00000000  00000000  0006bd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed810  00000000  00000000  000936ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00180f0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000661c  00000000  00000000  00180f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00187570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010504 	.word	0x08010504

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08010504 	.word	0x08010504

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fee4 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f80e 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8ce 	bl	800072c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f874 	bl	800067c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000594:	f000 f89c 	bl	80006d0 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000598:	f003 fe88 	bl	80042ac <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 800059c:	f000 fb50 	bl	8000c40 <tcp_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	MX_LWIP_Process();
 80005a0:	f003 ffc4 	bl	800452c <MX_LWIP_Process>
 80005a4:	e7fc      	b.n	80005a0 <main+0x20>
	...

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	@ 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00f f8ff 	bl	800f7ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000608:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800061c:	23a8      	movs	r3, #168	@ 0xa8
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fbe1 	bl	8002df4 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f926 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fe42 	bl	80032e4 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000666:	f000 f90f 	bl	8000888 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	@ 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_USART3_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART3_UART_Init+0x4c>)
 80006b4:	f003 f836 	bl	8003724 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f8e3 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000a4 	.word	0x200000a4
 80006cc:	40004800 	.word	0x40004800

080006d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006de:	2204      	movs	r2, #4
 80006e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000708:	2201      	movs	r2, #1
 800070a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000714:	f002 fa5f 	bl	8002bd6 <HAL_PCD_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f8b3 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000ec 	.word	0x200000ec

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	@ 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a4b      	ldr	r2, [pc, #300]	@ (8000878 <MX_GPIO_Init+0x14c>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b49      	ldr	r3, [pc, #292]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a44      	ldr	r2, [pc, #272]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a36      	ldr	r2, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a28      	ldr	r2, [pc, #160]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007f0:	4822      	ldr	r0, [pc, #136]	@ (800087c <MX_GPIO_Init+0x150>)
 80007f2:	f002 f9d7 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2140      	movs	r1, #64	@ 0x40
 80007fa:	4821      	ldr	r0, [pc, #132]	@ (8000880 <MX_GPIO_Init+0x154>)
 80007fc:	f002 f9d2 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	481b      	ldr	r0, [pc, #108]	@ (8000884 <MX_GPIO_Init+0x158>)
 8000818:	f002 f818 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800081c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	@ (800087c <MX_GPIO_Init+0x150>)
 8000836:	f002 f809 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083a:	2340      	movs	r3, #64	@ 0x40
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <MX_GPIO_Init+0x154>)
 8000852:	f001 fffb 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000856:	2380      	movs	r3, #128	@ 0x80
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_GPIO_Init+0x154>)
 800086a:	f001 ffef 	bl	800284c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	3730      	adds	r7, #48	@ 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400
 8000880:	40021800 	.word	0x40021800
 8000884:	40020800 	.word	0x40020800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <HAL_UART_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12c      	bne.n	8000960 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_UART_MspInit+0x88>)
 8000910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a10      	ldr	r2, [pc, #64]	@ (800096c <HAL_UART_MspInit+0x88>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800093e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000950:	2307      	movs	r3, #7
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <HAL_UART_MspInit+0x8c>)
 800095c:	f001 ff76 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40004800 	.word	0x40004800
 800096c:	40023800 	.word	0x40023800
 8000970:	40020c00 	.word	0x40020c00

08000974 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000994:	d13f      	bne.n	8000a16 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a20      	ldr	r2, [pc, #128]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009b2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c4:	230a      	movs	r3, #10
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4815      	ldr	r0, [pc, #84]	@ (8000a24 <HAL_PCD_MspInit+0xb0>)
 80009d0:	f001 ff3c 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	480e      	ldr	r0, [pc, #56]	@ (8000a24 <HAL_PCD_MspInit+0xb0>)
 80009ea:	f001 ff2f 	bl	800284c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	6353      	str	r3, [r2, #52]	@ 0x34
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_PCD_MspInit+0xac>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 fcb9 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <_kill>:

int _kill(int pid, int sig)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <_kill+0x20>)
 8000aa4:	2216      	movs	r2, #22
 8000aa6:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20008a08 	.word	0x20008a08

08000abc <_exit>:

void _exit (int status)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffe5 	bl	8000a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ace:	bf00      	nop
 8000ad0:	e7fd      	b.n	8000ace <_exit+0x12>

08000ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e00a      	b.n	8000afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae4:	f3af 8000 	nop.w
 8000ae8:	4601      	mov	r1, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	60ba      	str	r2, [r7, #8]
 8000af0:	b2ca      	uxtb	r2, r1
 8000af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbf0      	blt.n	8000ae4 <_read+0x12>
  }

  return len;
 8000b02:	687b      	ldr	r3, [r7, #4]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	e009      	b.n	8000b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dbf1      	blt.n	8000b1e <_write+0x12>
  }
  return len;
 8000b3a:	687b      	ldr	r3, [r7, #4]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_close>:

int _close(int file)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_isatty>:

int _isatty(int file)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d205      	bcs.n	8000be8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <_sbrk+0x6c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20030000 	.word	0x20030000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200005d0 	.word	0x200005d0
 8000c14:	20008a18 	.word	0x20008a18
 8000c18:	20008a08 	.word	0x20008a08

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8000c46:	f007 f9e5 	bl	8008014 <tcp_new>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <tcp_echoserver_init+0x6c>)
 8000c4e:	6013      	str	r3, [r2, #0]
  int tcp_port = 7;
 8000c50:	2307      	movs	r3, #7
 8000c52:	607b      	str	r3, [r7, #4]

  if (tcp_echoserver_pcb != NULL)
 8000c54:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <tcp_echoserver_init+0x6c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d023      	beq.n	8000ca4 <tcp_echoserver_init+0x64>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, tcp_port);
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <tcp_echoserver_init+0x6c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	b292      	uxth	r2, r2
 8000c64:	4912      	ldr	r1, [pc, #72]	@ (8000cb0 <tcp_echoserver_init+0x70>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f006 f92e 	bl	8006ec8 <tcp_bind>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	70fb      	strb	r3, [r7, #3]
    
    if (err == ERR_OK)
 8000c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10f      	bne.n	8000c98 <tcp_echoserver_init+0x58>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <tcp_echoserver_init+0x6c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	21ff      	movs	r1, #255	@ 0xff
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f006 f9da 	bl	8007038 <tcp_listen_with_backlog>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <tcp_echoserver_init+0x6c>)
 8000c88:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <tcp_echoserver_init+0x6c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4909      	ldr	r1, [pc, #36]	@ (8000cb4 <tcp_echoserver_init+0x74>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f007 fa3f 	bl	8008114 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8000c96:	e005      	b.n	8000ca4 <tcp_echoserver_init+0x64>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <tcp_echoserver_init+0x6c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f004 fcf8 	bl	8005694 <memp_free>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200005d4 	.word	0x200005d4
 8000cb0:	08013044 	.word	0x08013044
 8000cb4:	08000cb9 	.word	0x08000cb9

08000cb8 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	68b8      	ldr	r0, [r7, #8]
 8000cca:	f006 ffb1 	bl	8007c30 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8000cce:	200c      	movs	r0, #12
 8000cd0:	f004 fae0 	bl	8005294 <mem_malloc>
 8000cd4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01f      	beq.n	8000d1c <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2200      	movs	r2, #0
 8000cec:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000cf4:	6939      	ldr	r1, [r7, #16]
 8000cf6:	68b8      	ldr	r0, [r7, #8]
 8000cf8:	f007 f994 	bl	8008024 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000cfc:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <tcp_echoserver_accept+0x7c>)
 8000cfe:	68b8      	ldr	r0, [r7, #8]
 8000d00:	f007 f9a2 	bl	8008048 <tcp_recv>
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000d04:	490c      	ldr	r1, [pc, #48]	@ (8000d38 <tcp_echoserver_accept+0x80>)
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f007 f9e2 	bl	80080d0 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	490b      	ldr	r1, [pc, #44]	@ (8000d3c <tcp_echoserver_accept+0x84>)
 8000d10:	68b8      	ldr	r0, [r7, #8]
 8000d12:	f007 fa17 	bl	8008144 <tcp_poll>
    
    ret_err = ERR_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	75fb      	strb	r3, [r7, #23]
 8000d1a:	e005      	b.n	8000d28 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	f000 f965 	bl	8000fee <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000d24:	23ff      	movs	r3, #255	@ 0xff
 8000d26:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08000d41 	.word	0x08000d41
 8000d38:	08000e75 	.word	0x08000e75
 8000d3c:	08000e99 	.word	0x08000e99

08000d40 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <tcp_echoserver_recv+0x20>
 8000d54:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <tcp_echoserver_recv+0x124>)
 8000d56:	22ad      	movs	r2, #173	@ 0xad
 8000d58:	4943      	ldr	r1, [pc, #268]	@ (8000e68 <tcp_echoserver_recv+0x128>)
 8000d5a:	4844      	ldr	r0, [pc, #272]	@ (8000e6c <tcp_echoserver_recv+0x12c>)
 8000d5c:	f00e fcc8 	bl	800f6f0 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d116      	bne.n	8000d98 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000d78:	69b9      	ldr	r1, [r7, #24]
 8000d7a:	68b8      	ldr	r0, [r7, #8]
 8000d7c:	f000 f937 	bl	8000fee <tcp_echoserver_connection_close>
 8000d80:	e007      	b.n	8000d92 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000d82:	493b      	ldr	r1, [pc, #236]	@ (8000e70 <tcp_echoserver_recv+0x130>)
 8000d84:	68b8      	ldr	r0, [r7, #8]
 8000d86:	f007 f981 	bl	800808c <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000d8a:	69b9      	ldr	r1, [r7, #24]
 8000d8c:	68b8      	ldr	r0, [r7, #8]
 8000d8e:	f000 f8db 	bl	8000f48 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	77fb      	strb	r3, [r7, #31]
 8000d96:	e05f      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f005 fae7 	bl	8006380 <pbuf_free>
    }
    ret_err = err;
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	77fb      	strb	r3, [r7, #31]
 8000db6:	e04f      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d110      	bne.n	8000de2 <tcp_echoserver_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000dcc:	4928      	ldr	r1, [pc, #160]	@ (8000e70 <tcp_echoserver_recv+0x130>)
 8000dce:	68b8      	ldr	r0, [r7, #8]
 8000dd0:	f007 f95c 	bl	800808c <tcp_sent>
    
    /* send back the received data (echo) */
    tcp_echoserver_send(tpcb, es);
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	68b8      	ldr	r0, [r7, #8]
 8000dd8:	f000 f8b6 	bl	8000f48 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	77fb      	strb	r3, [r7, #31]
 8000de0:	e03a      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d115      	bne.n	8000e16 <tcp_echoserver_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d107      	bne.n	8000e02 <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      tcp_echoserver_send(tpcb, es);
 8000df8:	69b9      	ldr	r1, [r7, #24]
 8000dfa:	68b8      	ldr	r0, [r7, #8]
 8000dfc:	f000 f8a4 	bl	8000f48 <tcp_echoserver_send>
 8000e00:	e006      	b.n	8000e10 <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f005 fbd0 	bl	80065b0 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	77fb      	strb	r3, [r7, #31]
 8000e14:	e020      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d10e      	bne.n	8000e3c <tcp_echoserver_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	891b      	ldrh	r3, [r3, #8]
 8000e22:	4619      	mov	r1, r3
 8000e24:	68b8      	ldr	r0, [r7, #8]
 8000e26:	f006 fa1d 	bl	8007264 <tcp_recved>
    es->p = NULL;
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f005 faa5 	bl	8006380 <pbuf_free>
    ret_err = ERR_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	77fb      	strb	r3, [r7, #31]
 8000e3a:	e00d      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	891b      	ldrh	r3, [r3, #8]
 8000e40:	4619      	mov	r1, r3
 8000e42:	68b8      	ldr	r0, [r7, #8]
 8000e44:	f006 fa0e 	bl	8007264 <tcp_recved>
    es->p = NULL;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f005 fa96 	bl	8006380 <pbuf_free>
    ret_err = ERR_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000e58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0801051c 	.word	0x0801051c
 8000e68:	0801053c 	.word	0x0801053c
 8000e6c:	08010548 	.word	0x08010548
 8000e70:	08000ef9 	.word	0x08000ef9

08000e74 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f004 f89c 	bl	8004fc8 <mem_free>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d017      	beq.n	8000edc <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d008      	beq.n	8000ec6 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000eb4:	490f      	ldr	r1, [pc, #60]	@ (8000ef4 <tcp_echoserver_poll+0x5c>)
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f007 f8e8 	bl	800808c <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6838      	ldr	r0, [r7, #0]
 8000ec0:	f000 f842 	bl	8000f48 <tcp_echoserver_send>
 8000ec4:	e007      	b.n	8000ed6 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d103      	bne.n	8000ed6 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f000 f88c 	bl	8000fee <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e004      	b.n	8000ee6 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f005 ffe7 	bl	8006eb0 <tcp_abort>
    ret_err = ERR_ABRT;
 8000ee2:	23f3      	movs	r3, #243	@ 0xf3
 8000ee4:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08000ef9 	.word	0x08000ef9

08000ef8 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4613      	mov	r3, r2
 8000f04:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000f18:	490a      	ldr	r1, [pc, #40]	@ (8000f44 <tcp_echoserver_sent+0x4c>)
 8000f1a:	68b8      	ldr	r0, [r7, #8]
 8000f1c:	f007 f8b6 	bl	800808c <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000f20:	6979      	ldr	r1, [r7, #20]
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f000 f810 	bl	8000f48 <tcp_echoserver_send>
 8000f28:	e007      	b.n	8000f3a <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d103      	bne.n	8000f3a <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000f32:	6979      	ldr	r1, [r7, #20]
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f000 f85a 	bl	8000fee <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08000ef9 	.word	0x08000ef9

08000f48 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000f56:	e036      	b.n	8000fc6 <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6859      	ldr	r1, [r3, #4]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	895a      	ldrh	r2, [r3, #10]
 8000f66:	2301      	movs	r3, #1
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f009 ff97 	bl	800ae9c <tcp_write>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d11d      	bne.n	8000fb6 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 fa93 	bl	80064c0 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000f9a:	6938      	ldr	r0, [r7, #16]
 8000f9c:	f005 f9f0 	bl	8006380 <pbuf_free>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f7      	beq.n	8000f9a <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f006 f958 	bl	8007264 <tcp_recved>
 8000fb4:	e007      	b.n	8000fc6 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbe:	d102      	bne.n	8000fc6 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	609a      	str	r2, [r3, #8]
         (es->p != NULL) && 
 8000fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10b      	bne.n	8000fe6 <tcp_echoserver_send+0x9e>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	895a      	ldrh	r2, [r3, #10]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
         (es->p != NULL) && 
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d9b8      	bls.n	8000f58 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f007 f812 	bl	8008024 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f007 f842 	bl	800808c <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001008:	2100      	movs	r1, #0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f007 f81c 	bl	8008048 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f007 f85c 	bl	80080d0 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f007 f891 	bl	8008144 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f003 ffcd 	bl	8004fc8 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f005 fe54 	bl	8006cdc <tcp_close>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001040:	f7ff fdec 	bl	8000c1c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800106a:	f00e fbf5 	bl	800f858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fa87 	bl	8000580 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001074:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001080:	08013144 	.word	0x08013144
  ldr r2, =_sbss
 8001084:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001088:	20008a18 	.word	0x20008a18

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>

0800108e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <LAN8742_RegisterBusIO+0x28>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <LAN8742_RegisterBusIO+0x28>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <LAN8742_RegisterBusIO+0x28>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e014      	b.n	80010e6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d17c      	bne.n	800120c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2220      	movs	r2, #32
 8001124:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e01c      	b.n	8001166 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	2112      	movs	r1, #18
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	4798      	blx	r3
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	da03      	bge.n	8001148 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001140:	f06f 0304 	mvn.w	r3, #4
 8001144:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001146:	e00b      	b.n	8001160 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	d105      	bne.n	8001160 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
         break;
 800115e:	e005      	b.n	800116c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b1f      	cmp	r3, #31
 800116a:	d9df      	bls.n	800112c <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b1f      	cmp	r3, #31
 8001172:	d902      	bls.n	800117a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001174:	f06f 0302 	mvn.w	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d145      	bne.n	800120c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6810      	ldr	r0, [r2, #0]
 8001188:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800118c:	2100      	movs	r1, #0
 800118e:	4798      	blx	r3
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	db37      	blt.n	8001206 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6810      	ldr	r0, [r2, #0]
 800119e:	f107 0208 	add.w	r2, r7, #8
 80011a2:	2100      	movs	r1, #0
 80011a4:	4798      	blx	r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db28      	blt.n	80011fe <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4798      	blx	r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011b6:	e01c      	b.n	80011f2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4798      	blx	r3
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ca:	d80e      	bhi.n	80011ea <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6810      	ldr	r0, [r2, #0]
 80011d4:	f107 0208 	add.w	r2, r7, #8
 80011d8:	2100      	movs	r1, #0
 80011da:	4798      	blx	r3
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da07      	bge.n	80011f2 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80011e2:	f06f 0304 	mvn.w	r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
                 break;
 80011e8:	e010      	b.n	800120c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80011ea:	f06f 0301 	mvn.w	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
               break;
 80011f0:	e00c      	b.n	800120c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1dd      	bne.n	80011b8 <LAN8742_Init+0xc6>
 80011fc:	e006      	b.n	800120c <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80011fe:	f06f 0304 	mvn.w	r3, #4
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	e002      	b.n	800120c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001206:	f06f 0303 	mvn.w	r3, #3
 800120a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d112      	bne.n	8001238 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4798      	blx	r3
 8001218:	4603      	mov	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800121c:	bf00      	nop
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001230:	d9f5      	bls.n	800121e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001238:	693b      	ldr	r3, [r7, #16]
 }
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6810      	ldr	r0, [r2, #0]
 8001256:	f107 020c 	add.w	r2, r7, #12
 800125a:	2101      	movs	r1, #1
 800125c:	4798      	blx	r3
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	da02      	bge.n	800126a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001264:	f06f 0304 	mvn.w	r3, #4
 8001268:	e06e      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6810      	ldr	r0, [r2, #0]
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	2101      	movs	r1, #1
 8001278:	4798      	blx	r3
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	da02      	bge.n	8001286 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001280:	f06f 0304 	mvn.w	r3, #4
 8001284:	e060      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001290:	2301      	movs	r3, #1
 8001292:	e059      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6810      	ldr	r0, [r2, #0]
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	2100      	movs	r1, #0
 80012a2:	4798      	blx	r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da02      	bge.n	80012b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012aa:	f06f 0304 	mvn.w	r3, #4
 80012ae:	e04b      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d11b      	bne.n	80012f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <LAN8742_GetLinkState+0x90>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ce:	2302      	movs	r3, #2
 80012d0:	e03a      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012dc:	2303      	movs	r3, #3
 80012de:	e033      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012ea:	2304      	movs	r3, #4
 80012ec:	e02c      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012ee:	2305      	movs	r3, #5
 80012f0:	e02a      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	211f      	movs	r1, #31
 8001300:	4798      	blx	r3
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	da02      	bge.n	800130e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001308:	f06f 0304 	mvn.w	r3, #4
 800130c:	e01c      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001318:	2306      	movs	r3, #6
 800131a:	e015      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 031c 	and.w	r3, r3, #28
 8001322:	2b18      	cmp	r3, #24
 8001324:	d101      	bne.n	800132a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001326:	2302      	movs	r3, #2
 8001328:	e00e      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 031c 	and.w	r3, r3, #28
 8001330:	2b08      	cmp	r3, #8
 8001332:	d101      	bne.n	8001338 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001334:	2303      	movs	r3, #3
 8001336:	e007      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 031c 	and.w	r3, r3, #28
 800133e:	2b14      	cmp	r3, #20
 8001340:	d101      	bne.n	8001346 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001342:	2304      	movs	r3, #4
 8001344:	e000      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001346:	2305      	movs	r3, #5
    }
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <HAL_Init+0x40>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <HAL_Init+0x40>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	@ (8001390 <HAL_Init+0x40>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f931 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fa86 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f93b 	bl	800162e <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f911 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	200005d8 	.word	0x200005d8

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200005d8 	.word	0x200005d8

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	@ (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	@ (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	@ 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	@ 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff47 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff5c 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff8e 	bl	8001534 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffb0 	bl	800159c <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06c      	b.n	8001734 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001660:	2b00      	cmp	r3, #0
 8001662:	d106      	bne.n	8001672 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2223      	movs	r2, #35	@ 0x23
 8001668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f003 f919 	bl	80048a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <HAL_ETH_Init+0xf4>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	4a30      	ldr	r2, [pc, #192]	@ (800173c <HAL_ETH_Init+0xf4>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001680:	6453      	str	r3, [r2, #68]	@ 0x44
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_ETH_Init+0xf4>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800168e:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <HAL_ETH_Init+0xf8>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <HAL_ETH_Init+0xf8>)
 8001694:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001698:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800169a:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <HAL_ETH_Init+0xf8>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4927      	ldr	r1, [pc, #156]	@ (8001740 <HAL_ETH_Init+0xf8>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <HAL_ETH_Init+0xf8>)
 80016aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c4:	f7ff feaa 	bl	800141c <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016ca:	e011      	b.n	80016f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016cc:	f7ff fea6 	bl	800141c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016da:	d909      	bls.n	80016f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	22e0      	movs	r2, #224	@ 0xe0
 80016e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e021      	b.n	8001734 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1e4      	bne.n	80016cc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fdfc 	bl	8002300 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fea3 	bl	8002454 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fef9 	bl	8002506 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	461a      	mov	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fe61 	bl	80023e4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2210      	movs	r2, #16
 800172e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800

08001744 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001752:	2b10      	cmp	r3, #16
 8001754:	d150      	bne.n	80017f8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2223      	movs	r2, #35	@ 0x23
 800175a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2204      	movs	r2, #4
 8001762:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f9fd 	bl	8001b64 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0208 	orr.w	r2, r2, #8
 8001778:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff fe56 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0204 	orr.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fe43 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fc42 	bl	8002040 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017d2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ea:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2223      	movs	r2, #35	@ 0x23
 80017f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001810:	2b23      	cmp	r3, #35	@ 0x23
 8001812:	d14a      	bne.n	80018aa <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2223      	movs	r2, #35	@ 0x23
 8001818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800182e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001832:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	f023 0302 	bic.w	r3, r3, #2
 8001846:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800184a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0204 	bic.w	r2, r2, #4
 800185a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001864:	2001      	movs	r0, #1
 8001866:	f7ff fde5 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fbe4 	bl	8002040 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0208 	bic.w	r2, r2, #8
 8001886:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fdcf 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2210      	movs	r2, #16
 80018a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07c      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018e0:	2b23      	cmp	r3, #35	@ 0x23
 80018e2:	d176      	bne.n	80019d2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80018e4:	2200      	movs	r2, #0
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fe79 	bl	80025e0 <ETH_Prepare_Tx_Descriptors>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fa:	f043 0202 	orr.w	r2, r3, #2
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e065      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001908:	f3bf 8f4f 	dsb	sy
}
 800190c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3206      	adds	r2, #6
 8001916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	2b03      	cmp	r3, #3
 800192c:	d904      	bls.n	8001938 <HAL_ETH_Transmit+0x84>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	1f1a      	subs	r2, r3, #4
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3106      	adds	r1, #6
 8001944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001948:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800194c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800194e:	f7ff fd65 	bl	800141c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001954:	e037      	b.n	80019c6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d011      	beq.n	800198c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196e:	f043 0208 	orr.w	r2, r3, #8
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e023      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001992:	d018      	beq.n	80019c6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001994:	f7ff fd42 	bl	800141c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d302      	bcc.n	80019aa <HAL_ETH_Transmit+0xf6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80019c0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e006      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dbc3      	blt.n	8001956 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0a8      	b.n	8001b5a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a0e:	2b23      	cmp	r3, #35	@ 0x23
 8001a10:	d001      	beq.n	8001a16 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0a1      	b.n	8001b5a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	3212      	adds	r2, #18
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a2c:	f1c3 0304 	rsb	r3, r3, #4
 8001a30:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a32:	e06a      	b.n	8001b0a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <HAL_ETH_ReadData+0x88>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d040      	beq.n	8001ae6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00c      	beq.n	8001aa8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a98:	3b04      	subs	r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f003 f8bd 	bl	8004c44 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	441a      	add	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d902      	bls.n	8001af8 <HAL_ETH_ReadData+0x11c>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b04      	subs	r3, #4
 8001af6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	3212      	adds	r2, #18
 8001afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db06      	blt.n	8001b20 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d202      	bcs.n	8001b20 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d089      	beq.n	8001a34 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	441a      	add	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f815 	bl	8001b64 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001b70:	2301      	movs	r3, #1
 8001b72:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b78:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	3212      	adds	r2, #18
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b8a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b8c:	e03d      	b.n	8001c0a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d112      	bne.n	8001bbc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f822 	bl	8004be4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	74fb      	strb	r3, [r7, #19]
 8001baa:	e007      	b.n	8001bbc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001bbc:	7cfb      	ldrb	r3, [r7, #19]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d023      	beq.n	8001c0a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	@ (8001c60 <ETH_UpdateDescriptor+0xfc>)
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	e003      	b.n	8001bda <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001bd8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d902      	bls.n	8001bf8 <ETH_UpdateDescriptor+0x94>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b04      	subs	r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	3212      	adds	r2, #18
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <ETH_UpdateDescriptor+0xb2>
 8001c10:	7cfb      	ldrb	r3, [r7, #19]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1bb      	bne.n	8001b8e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d01a      	beq.n	8001c56 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c2a:	f3bf 8f5f 	dmb	sy
}
 8001c2e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	18ca      	adds	r2, r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c48:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	80004600 	.word	0x80004600

08001c64 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 031c 	and.w	r3, r3, #28
 8001c80:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	02db      	lsls	r3, r3, #11
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	019b      	lsls	r3, r3, #6
 8001c92:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f023 0302 	bic.w	r3, r3, #2
 8001ca2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001cb4:	f7ff fbb2 	bl	800141c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cba:	e00d      	b.n	8001cd8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001cbc:	f7ff fbae 	bl	800141c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cca:	d301      	bcc.n	8001cd0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e010      	b.n	8001cf2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ec      	bne.n	8001cbc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 031c 	and.w	r3, r3, #28
 8001d16:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	02db      	lsls	r3, r3, #11
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	019b      	lsls	r3, r3, #6
 8001d28:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d54:	f7ff fb62 	bl	800141c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5a:	e00d      	b.n	8001d78 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d5c:	f7ff fb5e 	bl	800141c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6a:	d301      	bcc.n	8001d70 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e009      	b.n	8001d84 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ec      	bne.n	8001d5c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d9      	b.n	8001f54 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e00b      	b.n	8001f8c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d105      	bne.n	8001f8a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f883 	bl	800208c <ETH_SetMACConfig>

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 031c 	bic.w	r3, r3, #28
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fac:	f001 fb86 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 8001fb0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d908      	bls.n	8001fcc <HAL_ETH_SetMDIOClockRange+0x38>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d804      	bhi.n	8001fcc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e027      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4a18      	ldr	r2, [pc, #96]	@ (8002030 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d908      	bls.n	8001fe6 <HAL_ETH_SetMDIOClockRange+0x52>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d204      	bcs.n	8001fe6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f043 030c 	orr.w	r3, r3, #12
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e01a      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d303      	bcc.n	8001ff6 <HAL_ETH_SetMDIOClockRange+0x62>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d911      	bls.n	800201a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8002038 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d908      	bls.n	8002010 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4a0e      	ldr	r2, [pc, #56]	@ (800203c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d804      	bhi.n	8002010 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	e005      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e000      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800201a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	611a      	str	r2, [r3, #16]
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	01312cff 	.word	0x01312cff
 8002030:	02160ebf 	.word	0x02160ebf
 8002034:	03938700 	.word	0x03938700
 8002038:	05f5e0ff 	.word	0x05f5e0ff
 800203c:	08f0d17f 	.word	0x08f0d17f

08002040 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800205e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002062:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff f9df 	bl	8001434 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002080:	6193      	str	r3, [r2, #24]
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4b51      	ldr	r3, [pc, #324]	@ (80021e8 <ETH_SetMACConfig+0x15c>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7c1b      	ldrb	r3, [r3, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <ETH_SetMACConfig+0x28>
 80020ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020b2:	e000      	b.n	80020b6 <ETH_SetMACConfig+0x2a>
 80020b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7c5b      	ldrb	r3, [r3, #17]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <ETH_SetMACConfig+0x38>
 80020be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020c2:	e000      	b.n	80020c6 <ETH_SetMACConfig+0x3a>
 80020c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7fdb      	ldrb	r3, [r3, #31]
 80020d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	7f92      	ldrb	r2, [r2, #30]
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	d102      	bne.n	80020ea <ETH_SetMACConfig+0x5e>
 80020e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e8:	e000      	b.n	80020ec <ETH_SetMACConfig+0x60>
 80020ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80020ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	7f1b      	ldrb	r3, [r3, #28]
 80020f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002102:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	f892 2020 	ldrb.w	r2, [r2, #32]
 800210a:	2a00      	cmp	r2, #0
 800210c:	d102      	bne.n	8002114 <ETH_SetMACConfig+0x88>
 800210e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002112:	e000      	b.n	8002116 <ETH_SetMACConfig+0x8a>
 8002114:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002116:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	7bdb      	ldrb	r3, [r3, #15]
 800211c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800211e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002124:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800212c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800212e:	4313      	orrs	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff f974 	bl	8001434 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002172:	2a00      	cmp	r2, #0
 8002174:	d101      	bne.n	800217a <ETH_SetMACConfig+0xee>
 8002176:	2280      	movs	r2, #128	@ 0x80
 8002178:	e000      	b.n	800217c <ETH_SetMACConfig+0xf0>
 800217a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002182:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800218a:	2a01      	cmp	r2, #1
 800218c:	d101      	bne.n	8002192 <ETH_SetMACConfig+0x106>
 800218e:	2208      	movs	r2, #8
 8002190:	e000      	b.n	8002194 <ETH_SetMACConfig+0x108>
 8002192:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002194:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800219c:	2a01      	cmp	r2, #1
 800219e:	d101      	bne.n	80021a4 <ETH_SetMACConfig+0x118>
 80021a0:	2204      	movs	r2, #4
 80021a2:	e000      	b.n	80021a6 <ETH_SetMACConfig+0x11a>
 80021a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d101      	bne.n	80021b6 <ETH_SetMACConfig+0x12a>
 80021b2:	2202      	movs	r2, #2
 80021b4:	e000      	b.n	80021b8 <ETH_SetMACConfig+0x12c>
 80021b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7ff f92f 	bl	8001434 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	ff20810f 	.word	0xff20810f

080021ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <ETH_SetDMAConfig+0x110>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7b1b      	ldrb	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <ETH_SetDMAConfig+0x2c>
 8002212:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002216:	e000      	b.n	800221a <ETH_SetDMAConfig+0x2e>
 8002218:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7b5b      	ldrb	r3, [r3, #13]
 800221e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002220:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	7f52      	ldrb	r2, [r2, #29]
 8002226:	2a00      	cmp	r2, #0
 8002228:	d102      	bne.n	8002230 <ETH_SetDMAConfig+0x44>
 800222a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800222e:	e000      	b.n	8002232 <ETH_SetDMAConfig+0x46>
 8002230:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002232:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7b9b      	ldrb	r3, [r3, #14]
 8002238:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800223a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002240:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	7f1b      	ldrb	r3, [r3, #28]
 8002246:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002248:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7f9b      	ldrb	r3, [r3, #30]
 800224e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002250:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002256:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800225e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002260:	4313      	orrs	r3, r2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff f8d6 	bl	8001434 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002290:	461a      	mov	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff f8a7 	bl	8001434 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	f8de3f23 	.word	0xf8de3f23

08002300 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0a6      	sub	sp, #152	@ 0x98
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002314:	2300      	movs	r3, #0
 8002316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800233c:	2300      	movs	r3, #0
 800233e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002346:	2300      	movs	r3, #0
 8002348:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002362:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002366:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800236c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002374:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fe86 	bl	800208c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002380:	2301      	movs	r3, #1
 8002382:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002384:	2301      	movs	r3, #1
 8002386:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023b4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff08 	bl	80021ec <ETH_SetDMAConfig>
}
 80023dc:	bf00      	nop
 80023de:	3798      	adds	r7, #152	@ 0x98
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3305      	adds	r3, #5
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	3204      	adds	r2, #4
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <ETH_MACAddressConfig+0x68>)
 8002406:	4413      	add	r3, r2
 8002408:	461a      	mov	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3303      	adds	r3, #3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	061a      	lsls	r2, r3, #24
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3302      	adds	r3, #2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	4313      	orrs	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <ETH_MACAddressConfig+0x6c>)
 8002436:	4413      	add	r3, r2
 8002438:	461a      	mov	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	6013      	str	r3, [r2, #0]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40028040 	.word	0x40028040
 8002450:	40028044 	.word	0x40028044

08002454 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e03e      	b.n	80024e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	3206      	adds	r2, #6
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d80c      	bhi.n	80024c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	e004      	b.n	80024ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d9bd      	bls.n	8002462 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f8:	611a      	str	r2, [r3, #16]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e046      	b.n	80025a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6919      	ldr	r1, [r3, #16]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002550:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002558:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	3212      	adds	r2, #18
 800256e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d80c      	bhi.n	8002592 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6919      	ldr	r1, [r3, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	e004      	b.n	800259c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d9b5      	bls.n	8002514 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d2:	60da      	str	r2, [r3, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b08d      	sub	sp, #52	@ 0x34
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3318      	adds	r3, #24
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800261e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002622:	d007      	beq.n	8002634 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002628:	3304      	adds	r3, #4
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	e103      	b.n	8002840 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	3301      	adds	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002650:	f023 031f 	bic.w	r3, r3, #31
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	6852      	ldr	r2, [r2, #4]
 8002658:	431a      	orrs	r2, r3
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	431a      	orrs	r2, r3
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80026be:	f3bf 8f5f 	dmb	sy
}
 80026c2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80026d0:	e084      	b.n	80027dc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e005      	b.n	80026fe <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002700:	3301      	adds	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002706:	2b03      	cmp	r3, #3
 8002708:	d902      	bls.n	8002710 <ETH_Prepare_Tx_Descriptors+0x130>
 800270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270c:	3b04      	subs	r3, #4
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800272e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002732:	d007      	beq.n	8002744 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002738:	3304      	adds	r3, #4
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d029      	beq.n	8002798 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002752:	2300      	movs	r3, #0
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002756:	e019      	b.n	800278c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002758:	f3bf 8f5f 	dmb	sy
}
 800275c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800276a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276c:	3301      	adds	r3, #1
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002772:	2b03      	cmp	r3, #3
 8002774:	d902      	bls.n	800277c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002778:	3b04      	subs	r3, #4
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002788:	3301      	adds	r3, #1
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800278c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	429a      	cmp	r2, r3
 8002792:	d3e1      	bcc.n	8002758 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002794:	2302      	movs	r3, #2
 8002796:	e053      	b.n	8002840 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	3301      	adds	r3, #1
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80027b6:	f023 031f 	bic.w	r3, r3, #31
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	6852      	ldr	r2, [r2, #4]
 80027be:	431a      	orrs	r2, r3
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	3301      	adds	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80027ca:	f3bf 8f5f 	dmb	sy
}
 80027ce:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f47f af76 	bne.w	80026d2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e005      	b.n	8002806 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281a:	3304      	adds	r3, #4
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002826:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
}
 800282a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800283a:	b662      	cpsie	i
}
 800283c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3734      	adds	r7, #52	@ 0x34
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e177      	b.n	8002b58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002868:	2201      	movs	r2, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8166 	bne.w	8002b52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d005      	beq.n	800289e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	2b02      	cmp	r3, #2
 800289c:	d130      	bne.n	8002900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d4:	2201      	movs	r2, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 0201 	and.w	r2, r3, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d017      	beq.n	800293c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d123      	bne.n	8002990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0203 	and.w	r2, r3, #3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80c0 	beq.w	8002b52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	4a65      	ldr	r2, [pc, #404]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 80029dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e2:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <HAL_GPIO_Init+0x324>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ee:	4a61      	ldr	r2, [pc, #388]	@ (8002b74 <HAL_GPIO_Init+0x328>)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a58      	ldr	r2, [pc, #352]	@ (8002b78 <HAL_GPIO_Init+0x32c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d037      	beq.n	8002a8a <HAL_GPIO_Init+0x23e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a57      	ldr	r2, [pc, #348]	@ (8002b7c <HAL_GPIO_Init+0x330>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d031      	beq.n	8002a86 <HAL_GPIO_Init+0x23a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a56      	ldr	r2, [pc, #344]	@ (8002b80 <HAL_GPIO_Init+0x334>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d02b      	beq.n	8002a82 <HAL_GPIO_Init+0x236>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a55      	ldr	r2, [pc, #340]	@ (8002b84 <HAL_GPIO_Init+0x338>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d025      	beq.n	8002a7e <HAL_GPIO_Init+0x232>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a54      	ldr	r2, [pc, #336]	@ (8002b88 <HAL_GPIO_Init+0x33c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <HAL_GPIO_Init+0x22e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a53      	ldr	r2, [pc, #332]	@ (8002b8c <HAL_GPIO_Init+0x340>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x22a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a52      	ldr	r2, [pc, #328]	@ (8002b90 <HAL_GPIO_Init+0x344>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x226>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a51      	ldr	r2, [pc, #324]	@ (8002b94 <HAL_GPIO_Init+0x348>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x222>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a50      	ldr	r2, [pc, #320]	@ (8002b98 <HAL_GPIO_Init+0x34c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x21e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002b9c <HAL_GPIO_Init+0x350>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x21a>
 8002a62:	2309      	movs	r3, #9
 8002a64:	e012      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a66:	230a      	movs	r3, #10
 8002a68:	e010      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e00e      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e00c      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a72:	2306      	movs	r3, #6
 8002a74:	e00a      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9c:	4935      	ldr	r1, [pc, #212]	@ (8002b74 <HAL_GPIO_Init+0x328>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ace:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad4:	4b32      	ldr	r3, [pc, #200]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af8:	4a29      	ldr	r2, [pc, #164]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afe:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f ae84 	bls.w	8002868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40021400 	.word	0x40021400
 8002b90:	40021800 	.word	0x40021800
 8002b94:	40021c00 	.word	0x40021c00
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40022400 	.word	0x40022400
 8002ba0:	40013c00 	.word	0x40013c00

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc0:	e003      	b.n	8002bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bc2:	887b      	ldrh	r3, [r7, #2]
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	619a      	str	r2, [r3, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af02      	add	r7, sp, #8
 8002bdc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e101      	b.n	8002dec <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fd feb6 	bl	8000974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c16:	d102      	bne.n	8002c1e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 f8a6 	bl	8003d74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7c1a      	ldrb	r2, [r3, #16]
 8002c30:	f88d 2000 	strb.w	r2, [sp]
 8002c34:	3304      	adds	r3, #4
 8002c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c38:	f001 f838 	bl	8003cac <USB_CoreInit>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0ce      	b.n	8002dec <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 f89e 	bl	8003d96 <USB_SetCurrentMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0bf      	b.n	8002dec <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e04a      	b.n	8002d08 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3315      	adds	r3, #21
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3314      	adds	r3, #20
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	b298      	uxth	r0, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	332e      	adds	r3, #46	@ 0x2e
 8002cae:	4602      	mov	r2, r0
 8002cb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	331c      	adds	r3, #28
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3320      	adds	r3, #32
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3324      	adds	r3, #36	@ 0x24
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	3301      	adds	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	791b      	ldrb	r3, [r3, #4]
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3af      	bcc.n	8002c72 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e044      	b.n	8002da2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	791b      	ldrb	r3, [r3, #4]
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d3b5      	bcc.n	8002d18 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7c1a      	ldrb	r2, [r3, #16]
 8002db4:	f88d 2000 	strb.w	r2, [sp]
 8002db8:	3304      	adds	r3, #4
 8002dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dbc:	f001 f838 	bl	8003e30 <USB_DevInit>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00c      	b.n	8002dec <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 fa00 	bl	80041ea <USB_DevDisconnect>

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e267      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d075      	beq.n	8002efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e12:	4b88      	ldr	r3, [pc, #544]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d00c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1e:	4b85      	ldr	r3, [pc, #532]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d112      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2a:	4b82      	ldr	r3, [pc, #520]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	4b7e      	ldr	r3, [pc, #504]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05b      	beq.n	8002efc <HAL_RCC_OscConfig+0x108>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d157      	bne.n	8002efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e242      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x74>
 8002e5a:	4b76      	ldr	r3, [pc, #472]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a75      	ldr	r2, [pc, #468]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x98>
 8002e72:	4b70      	ldr	r3, [pc, #448]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6f      	ldr	r2, [pc, #444]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6c      	ldr	r2, [pc, #432]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e8c:	4b69      	ldr	r3, [pc, #420]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a68      	ldr	r2, [pc, #416]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b66      	ldr	r3, [pc, #408]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a65      	ldr	r2, [pc, #404]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fab6 	bl	800141c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fab2 	bl	800141c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	@ 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e207      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xc0>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe faa2 	bl	800141c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fa9e 	bl	800141c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1f3      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b51      	ldr	r3, [pc, #324]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0xe8>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b47      	ldr	r3, [pc, #284]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f22:	4b44      	ldr	r3, [pc, #272]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1c7      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4937      	ldr	r1, [pc, #220]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b34      	ldr	r3, [pc, #208]	@ (8003038 <HAL_RCC_OscConfig+0x244>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fa57 	bl	800141c <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fa53 	bl	800141c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1a8      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4925      	ldr	r1, [pc, #148]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_RCC_OscConfig+0x244>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fa36 	bl	800141c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fa32 	bl	800141c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e187      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d036      	beq.n	800304c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_RCC_OscConfig+0x248>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe fa16 	bl	800141c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fa12 	bl	800141c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e167      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_RCC_OscConfig+0x240>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x200>
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	4b09      	ldr	r3, [pc, #36]	@ (800303c <HAL_RCC_OscConfig+0x248>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe f9ff 	bl	800141c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	e00e      	b.n	8003040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003022:	f7fe f9fb 	bl	800141c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d907      	bls.n	8003040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e150      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003034:	40023800 	.word	0x40023800
 8003038:	42470000 	.word	0x42470000
 800303c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b88      	ldr	r3, [pc, #544]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ea      	bne.n	8003022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8097 	beq.w	8003188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b81      	ldr	r3, [pc, #516]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	4b7d      	ldr	r3, [pc, #500]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	4a7c      	ldr	r2, [pc, #496]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003078:	6413      	str	r3, [r2, #64]	@ 0x40
 800307a:	4b7a      	ldr	r3, [pc, #488]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b77      	ldr	r3, [pc, #476]	@ (8003268 <HAL_RCC_OscConfig+0x474>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b74      	ldr	r3, [pc, #464]	@ (8003268 <HAL_RCC_OscConfig+0x474>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a73      	ldr	r2, [pc, #460]	@ (8003268 <HAL_RCC_OscConfig+0x474>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f9bb 	bl	800141c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe f9b7 	bl	800141c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e10c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003268 <HAL_RCC_OscConfig+0x474>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x2ea>
 80030d0:	4b64      	ldr	r3, [pc, #400]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d4:	4a63      	ldr	r2, [pc, #396]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	@ 0x70
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x30c>
 80030e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 8003100:	4b58      	ldr	r3, [pc, #352]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003104:	4a57      	ldr	r2, [pc, #348]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	@ 0x70
 800310c:	4b55      	ldr	r3, [pc, #340]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003110:	4a54      	ldr	r2, [pc, #336]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe f97c 	bl	800141c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe f978 	bl	800141c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0cb      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	4b49      	ldr	r3, [pc, #292]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RCC_OscConfig+0x334>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe f966 	bl	800141c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe f962 	bl	800141c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0b5      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	4b3e      	ldr	r3, [pc, #248]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ee      	bne.n	8003154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b39      	ldr	r3, [pc, #228]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	4a38      	ldr	r2, [pc, #224]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003186:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a1 	beq.w	80032d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003192:	4b34      	ldr	r3, [pc, #208]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	d05c      	beq.n	8003258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d141      	bne.n	800322a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b31      	ldr	r3, [pc, #196]	@ (800326c <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe f936 	bl	800141c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe f932 	bl	800141c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e087      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b27      	ldr	r3, [pc, #156]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	019b      	lsls	r3, r3, #6
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	491b      	ldr	r1, [pc, #108]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <HAL_RCC_OscConfig+0x478>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe f90b 	bl	800141c <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe f907 	bl	800141c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e05c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x416>
 8003228:	e054      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b10      	ldr	r3, [pc, #64]	@ (800326c <HAL_RCC_OscConfig+0x478>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe f8f4 	bl	800141c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe f8f0 	bl	800141c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e045      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_RCC_OscConfig+0x470>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x444>
 8003256:	e03d      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e038      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003264:	40023800 	.word	0x40023800
 8003268:	40007000 	.word	0x40007000
 800326c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003270:	4b1b      	ldr	r3, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x4ec>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d028      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d121      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d11a      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d111      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0cc      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b68      	ldr	r3, [pc, #416]	@ (800349c <HAL_RCC_ClockConfig+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d90c      	bls.n	8003320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b65      	ldr	r3, [pc, #404]	@ (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b63      	ldr	r3, [pc, #396]	@ (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0b8      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003338:	4b59      	ldr	r3, [pc, #356]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a58      	ldr	r2, [pc, #352]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003350:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a52      	ldr	r2, [pc, #328]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800335a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b50      	ldr	r3, [pc, #320]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	494d      	ldr	r1, [pc, #308]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d044      	beq.n	8003404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b47      	ldr	r3, [pc, #284]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d119      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a2:	4b3f      	ldr	r3, [pc, #252]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4b3b      	ldr	r3, [pc, #236]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e067      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	4b37      	ldr	r3, [pc, #220]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 0203 	bic.w	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4934      	ldr	r1, [pc, #208]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fe f822 	bl	800141c <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033dc:	f7fe f81e 	bl	800141c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e04f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	4b2b      	ldr	r3, [pc, #172]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 020c 	and.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	429a      	cmp	r2, r3
 8003402:	d1eb      	bne.n	80033dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003404:	4b25      	ldr	r3, [pc, #148]	@ (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d20c      	bcs.n	800342c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b22      	ldr	r3, [pc, #136]	@ (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b20      	ldr	r3, [pc, #128]	@ (800349c <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e032      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003438:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4916      	ldr	r1, [pc, #88]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003456:	4b12      	ldr	r3, [pc, #72]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	490e      	ldr	r1, [pc, #56]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346a:	f000 f821 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800346e:	4602      	mov	r2, r0
 8003470:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	490a      	ldr	r1, [pc, #40]	@ (80034a4 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	5ccb      	ldrb	r3, [r1, r3]
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	4a09      	ldr	r2, [pc, #36]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003486:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd ff82 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023c00 	.word	0x40023c00
 80034a0:	40023800 	.word	0x40023800
 80034a4:	08012f50 	.word	0x08012f50
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b4:	b094      	sub	sp, #80	@ 0x50
 80034b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80034bc:	2300      	movs	r3, #0
 80034be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c0:	2300      	movs	r3, #0
 80034c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c8:	4b79      	ldr	r3, [pc, #484]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d00d      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x40>
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	f200 80e1 	bhi.w	800369c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x34>
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x3a>
 80034e2:	e0db      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b73      	ldr	r3, [pc, #460]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034e6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80034e8:	e0db      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ea:	4b73      	ldr	r3, [pc, #460]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80034ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ee:	e0d8      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f0:	4b6f      	ldr	r3, [pc, #444]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fa:	4b6d      	ldr	r3, [pc, #436]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d063      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003506:	4b6a      	ldr	r3, [pc, #424]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	2200      	movs	r2, #0
 800350e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003510:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003518:	633b      	str	r3, [r7, #48]	@ 0x30
 800351a:	2300      	movs	r3, #0
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
 800351e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003534:	0150      	lsls	r0, r2, #5
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4621      	mov	r1, r4
 800353c:	1a51      	subs	r1, r2, r1
 800353e:	6139      	str	r1, [r7, #16]
 8003540:	4629      	mov	r1, r5
 8003542:	eb63 0301 	sbc.w	r3, r3, r1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003554:	4659      	mov	r1, fp
 8003556:	018b      	lsls	r3, r1, #6
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800355e:	4651      	mov	r1, sl
 8003560:	018a      	lsls	r2, r1, #6
 8003562:	4651      	mov	r1, sl
 8003564:	ebb2 0801 	subs.w	r8, r2, r1
 8003568:	4659      	mov	r1, fp
 800356a:	eb63 0901 	sbc.w	r9, r3, r1
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800357a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800357e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003582:	4690      	mov	r8, r2
 8003584:	4699      	mov	r9, r3
 8003586:	4623      	mov	r3, r4
 8003588:	eb18 0303 	adds.w	r3, r8, r3
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	462b      	mov	r3, r5
 8003590:	eb49 0303 	adc.w	r3, r9, r3
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035a2:	4629      	mov	r1, r5
 80035a4:	024b      	lsls	r3, r1, #9
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ac:	4621      	mov	r1, r4
 80035ae:	024a      	lsls	r2, r1, #9
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035c0:	f7fc fe66 	bl	8000290 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035cc:	e058      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	4b38      	ldr	r3, [pc, #224]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	2200      	movs	r2, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	4611      	mov	r1, r2
 80035da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	f04f 0000 	mov.w	r0, #0
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	0159      	lsls	r1, r3, #5
 80035f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fa:	0150      	lsls	r0, r2, #5
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4641      	mov	r1, r8
 8003602:	ebb2 0a01 	subs.w	sl, r2, r1
 8003606:	4649      	mov	r1, r9
 8003608:	eb63 0b01 	sbc.w	fp, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003618:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800361c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003620:	ebb2 040a 	subs.w	r4, r2, sl
 8003624:	eb63 050b 	sbc.w	r5, r3, fp
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	00eb      	lsls	r3, r5, #3
 8003632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003636:	00e2      	lsls	r2, r4, #3
 8003638:	4614      	mov	r4, r2
 800363a:	461d      	mov	r5, r3
 800363c:	4643      	mov	r3, r8
 800363e:	18e3      	adds	r3, r4, r3
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	464b      	mov	r3, r9
 8003644:	eb45 0303 	adc.w	r3, r5, r3
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003656:	4629      	mov	r1, r5
 8003658:	028b      	lsls	r3, r1, #10
 800365a:	4621      	mov	r1, r4
 800365c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003660:	4621      	mov	r1, r4
 8003662:	028a      	lsls	r2, r1, #10
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366a:	2200      	movs	r2, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	61fa      	str	r2, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	f7fc fe0c 	bl	8000290 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003680:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	3301      	adds	r3, #1
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800369a:	e002      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800369e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3750      	adds	r7, #80	@ 0x50
 80036a8:	46bd      	mov	sp, r7
 80036aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	007a1200 	.word	0x007a1200

080036bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c0:	4b03      	ldr	r3, [pc, #12]	@ (80036d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000

080036d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d8:	f7ff fff0 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0a9b      	lsrs	r3, r3, #10
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	@ (80036f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08012f60 	.word	0x08012f60

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003700:	f7ff ffdc 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	@ (800371c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0b5b      	lsrs	r3, r3, #13
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	@ (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	08012f60 	.word	0x08012f60

08003724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e042      	b.n	80037bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd f8ca 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	@ 0x24
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f82b 	bl	80037c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800379c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b0c0      	sub	sp, #256	@ 0x100
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	ea40 0301 	orr.w	r3, r0, r1
 80037ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	431a      	orrs	r2, r3
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800381c:	f021 010c 	bic.w	r1, r1, #12
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800382a:	430b      	orrs	r3, r1
 800382c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383e:	6999      	ldr	r1, [r3, #24]
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	ea40 0301 	orr.w	r3, r0, r1
 800384a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b8f      	ldr	r3, [pc, #572]	@ (8003a90 <UART_SetConfig+0x2cc>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d005      	beq.n	8003864 <UART_SetConfig+0xa0>
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a94 <UART_SetConfig+0x2d0>)
 8003860:	429a      	cmp	r2, r3
 8003862:	d104      	bne.n	800386e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7ff ff4a 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8003868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800386c:	e003      	b.n	8003876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800386e:	f7ff ff31 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8003872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003880:	f040 810c 	bne.w	8003a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800388e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003896:	4622      	mov	r2, r4
 8003898:	462b      	mov	r3, r5
 800389a:	1891      	adds	r1, r2, r2
 800389c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800389e:	415b      	adcs	r3, r3
 80038a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038a6:	4621      	mov	r1, r4
 80038a8:	eb12 0801 	adds.w	r8, r2, r1
 80038ac:	4629      	mov	r1, r5
 80038ae:	eb43 0901 	adc.w	r9, r3, r1
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	4690      	mov	r8, r2
 80038c8:	4699      	mov	r9, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	eb18 0303 	adds.w	r3, r8, r3
 80038d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038d4:	462b      	mov	r3, r5
 80038d6:	eb49 0303 	adc.w	r3, r9, r3
 80038da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038f2:	460b      	mov	r3, r1
 80038f4:	18db      	adds	r3, r3, r3
 80038f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038f8:	4613      	mov	r3, r2
 80038fa:	eb42 0303 	adc.w	r3, r2, r3
 80038fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003908:	f7fc fcc2 	bl	8000290 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <UART_SetConfig+0x2d4>)
 8003912:	fba3 2302 	umull	r2, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	011c      	lsls	r4, r3, #4
 800391a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	1891      	adds	r1, r2, r2
 8003932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003934:	415b      	adcs	r3, r3
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800393c:	4641      	mov	r1, r8
 800393e:	eb12 0a01 	adds.w	sl, r2, r1
 8003942:	4649      	mov	r1, r9
 8003944:	eb43 0b01 	adc.w	fp, r3, r1
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800395c:	4692      	mov	sl, r2
 800395e:	469b      	mov	fp, r3
 8003960:	4643      	mov	r3, r8
 8003962:	eb1a 0303 	adds.w	r3, sl, r3
 8003966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800396a:	464b      	mov	r3, r9
 800396c:	eb4b 0303 	adc.w	r3, fp, r3
 8003970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003988:	460b      	mov	r3, r1
 800398a:	18db      	adds	r3, r3, r3
 800398c:	643b      	str	r3, [r7, #64]	@ 0x40
 800398e:	4613      	mov	r3, r2
 8003990:	eb42 0303 	adc.w	r3, r2, r3
 8003994:	647b      	str	r3, [r7, #68]	@ 0x44
 8003996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800399a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800399e:	f7fc fc77 	bl	8000290 <__aeabi_uldivmod>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <UART_SetConfig+0x2d4>)
 80039aa:	fba3 2301 	umull	r2, r3, r3, r1
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2264      	movs	r2, #100	@ 0x64
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	1acb      	subs	r3, r1, r3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039be:	4b36      	ldr	r3, [pc, #216]	@ (8003a98 <UART_SetConfig+0x2d4>)
 80039c0:	fba3 2302 	umull	r2, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039cc:	441c      	add	r4, r3
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039e8:	415b      	adcs	r3, r3
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039f0:	4641      	mov	r1, r8
 80039f2:	1851      	adds	r1, r2, r1
 80039f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80039f6:	4649      	mov	r1, r9
 80039f8:	414b      	adcs	r3, r1
 80039fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a08:	4659      	mov	r1, fp
 8003a0a:	00cb      	lsls	r3, r1, #3
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a12:	4651      	mov	r1, sl
 8003a14:	00ca      	lsls	r2, r1, #3
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a24:	464b      	mov	r3, r9
 8003a26:	460a      	mov	r2, r1
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a44:	460b      	mov	r3, r1
 8003a46:	18db      	adds	r3, r3, r3
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	eb42 0303 	adc.w	r3, r2, r3
 8003a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a5a:	f7fc fc19 	bl	8000290 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <UART_SetConfig+0x2d4>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	@ 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3332      	adds	r3, #50	@ 0x32
 8003a76:	4a08      	ldr	r2, [pc, #32]	@ (8003a98 <UART_SetConfig+0x2d4>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 0207 	and.w	r2, r3, #7
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4422      	add	r2, r4
 8003a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a8c:	e106      	b.n	8003c9c <UART_SetConfig+0x4d8>
 8003a8e:	bf00      	nop
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40011400 	.word	0x40011400
 8003a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aae:	4642      	mov	r2, r8
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	1891      	adds	r1, r2, r2
 8003ab4:	6239      	str	r1, [r7, #32]
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003abe:	4641      	mov	r1, r8
 8003ac0:	1854      	adds	r4, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0501 	adc.w	r5, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	00eb      	lsls	r3, r5, #3
 8003ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad6:	00e2      	lsls	r2, r4, #3
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	4643      	mov	r3, r8
 8003ade:	18e3      	adds	r3, r4, r3
 8003ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	eb45 0303 	adc.w	r3, r5, r3
 8003aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	008b      	lsls	r3, r1, #2
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b14:	4621      	mov	r1, r4
 8003b16:	008a      	lsls	r2, r1, #2
 8003b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b1c:	f7fc fbb8 	bl	8000290 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b60      	ldr	r3, [pc, #384]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003b26:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	011c      	lsls	r4, r3, #4
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	61b9      	str	r1, [r7, #24]
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b50:	4641      	mov	r1, r8
 8003b52:	1851      	adds	r1, r2, r1
 8003b54:	6139      	str	r1, [r7, #16]
 8003b56:	4649      	mov	r1, r9
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b68:	4659      	mov	r1, fp
 8003b6a:	00cb      	lsls	r3, r1, #3
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b72:	4651      	mov	r1, sl
 8003b74:	00ca      	lsls	r2, r1, #3
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b84:	464b      	mov	r3, r9
 8003b86:	460a      	mov	r2, r1
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ba8:	4649      	mov	r1, r9
 8003baa:	008b      	lsls	r3, r1, #2
 8003bac:	4641      	mov	r1, r8
 8003bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	008a      	lsls	r2, r1, #2
 8003bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bba:	f7fc fb69 	bl	8000290 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4b38      	ldr	r3, [pc, #224]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2264      	movs	r2, #100	@ 0x64
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	1acb      	subs	r3, r1, r3
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	3332      	adds	r3, #50	@ 0x32
 8003bd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be4:	441c      	add	r4, r3
 8003be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bea:	2200      	movs	r2, #0
 8003bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c36:	464b      	mov	r3, r9
 8003c38:	460a      	mov	r2, r1
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c58:	4649      	mov	r1, r9
 8003c5a:	008b      	lsls	r3, r1, #2
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c62:	4641      	mov	r1, r8
 8003c64:	008a      	lsls	r2, r1, #2
 8003c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c6a:	f7fc fb11 	bl	8000290 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	@ 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	@ 0x32
 8003c86:	4a08      	ldr	r2, [pc, #32]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4422      	add	r2, r4
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	f107 001c 	add.w	r0, r7, #28
 8003cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d123      	bne.n	8003d0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 faa0 	bl	8004248 <USB_CoreReset>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e01b      	b.n	8003d46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fa94 	bl	8004248 <USB_CoreReset>
 8003d20:	4603      	mov	r3, r0
 8003d22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d38:	e005      	b.n	8003d46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d46:	7fbb      	ldrb	r3, [r7, #30]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10b      	bne.n	8003d64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f043 0206 	orr.w	r2, r3, #6
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d70:	b004      	add	sp, #16
 8003d72:	4770      	bx	lr

08003d74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 0201 	bic.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d115      	bne.n	8003de4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003dc4:	200a      	movs	r0, #10
 8003dc6:	f7fd fb35 	bl	8001434 <HAL_Delay>
      ms += 10U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	330a      	adds	r3, #10
 8003dce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fa2b 	bl	800422c <USB_GetMode>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d01e      	beq.n	8003e1a <USB_SetCurrentMode+0x84>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2bc7      	cmp	r3, #199	@ 0xc7
 8003de0:	d9f0      	bls.n	8003dc4 <USB_SetCurrentMode+0x2e>
 8003de2:	e01a      	b.n	8003e1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d115      	bne.n	8003e16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003df6:	200a      	movs	r0, #10
 8003df8:	f7fd fb1c 	bl	8001434 <HAL_Delay>
      ms += 10U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	330a      	adds	r3, #10
 8003e00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa12 	bl	800422c <USB_GetMode>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <USB_SetCurrentMode+0x84>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e12:	d9f0      	bls.n	8003df6 <USB_SetCurrentMode+0x60>
 8003e14:	e001      	b.n	8003e1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e005      	b.n	8003e26 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2bc8      	cmp	r3, #200	@ 0xc8
 8003e1e:	d101      	bne.n	8003e24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e30:	b084      	sub	sp, #16
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e009      	b.n	8003e64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	3340      	adds	r3, #64	@ 0x40
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3301      	adds	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b0e      	cmp	r3, #14
 8003e68:	d9f2      	bls.n	8003e50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d11c      	bne.n	8003eac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003eaa:	e00b      	b.n	8003ec4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ed0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d10d      	bne.n	8003ef4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f968 	bl	80041b8 <USB_SetDevSpeed>
 8003ee8:	e008      	b.n	8003efc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f963 	bl	80041b8 <USB_SetDevSpeed>
 8003ef2:	e003      	b.n	8003efc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ef4:	2103      	movs	r1, #3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f95e 	bl	80041b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003efc:	2110      	movs	r1, #16
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f8fa 	bl	80040f8 <USB_FlushTxFifo>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f924 	bl	800415c <USB_FlushRxFifo>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f30:	461a      	mov	r2, r3
 8003f32:	2300      	movs	r3, #0
 8003f34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e043      	b.n	8003fd0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f5e:	d118      	bne.n	8003f92 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f72:	461a      	mov	r2, r3
 8003f74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e013      	b.n	8003fa4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e008      	b.n	8003fa4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d3b5      	bcc.n	8003f48 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e043      	b.n	800406a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ff8:	d118      	bne.n	800402c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e013      	b.n	800403e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004022:	461a      	mov	r2, r3
 8004024:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e008      	b.n	800403e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004038:	461a      	mov	r2, r3
 800403a:	2300      	movs	r3, #0
 800403c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	3301      	adds	r3, #1
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800406e:	461a      	mov	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4293      	cmp	r3, r2
 8004074:	d3b5      	bcc.n	8003fe2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004088:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004096:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004098:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <USB_DevInit+0x2c4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f043 0208 	orr.w	r2, r3, #8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f0:	b004      	add	sp, #16
 80040f2:	4770      	bx	lr
 80040f4:	803c3800 	.word	0x803c3800

080040f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004112:	d901      	bls.n	8004118 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e01b      	b.n	8004150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	daf2      	bge.n	8004106 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	019b      	lsls	r3, r3, #6
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800413c:	d901      	bls.n	8004142 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e006      	b.n	8004150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b20      	cmp	r3, #32
 800414c:	d0f0      	beq.n	8004130 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004174:	d901      	bls.n	800417a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e018      	b.n	80041ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	daf2      	bge.n	8004168 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2210      	movs	r2, #16
 800418a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004198:	d901      	bls.n	800419e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e006      	b.n	80041ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d0f0      	beq.n	800418c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004204:	f023 0303 	bic.w	r3, r3, #3
 8004208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0301 	and.w	r3, r3, #1
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004260:	d901      	bls.n	8004266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e01b      	b.n	800429e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	daf2      	bge.n	8004254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800428a:	d901      	bls.n	8004290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e006      	b.n	800429e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d0f0      	beq.n	800427e <USB_CoreReset+0x36>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80042b2:	4b87      	ldr	r3, [pc, #540]	@ (80044d0 <MX_LWIP_Init+0x224>)
 80042b4:	22c0      	movs	r2, #192	@ 0xc0
 80042b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80042b8:	4b85      	ldr	r3, [pc, #532]	@ (80044d0 <MX_LWIP_Init+0x224>)
 80042ba:	22a8      	movs	r2, #168	@ 0xa8
 80042bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80042be:	4b84      	ldr	r3, [pc, #528]	@ (80044d0 <MX_LWIP_Init+0x224>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 194;
 80042c4:	4b82      	ldr	r3, [pc, #520]	@ (80044d0 <MX_LWIP_Init+0x224>)
 80042c6:	22c2      	movs	r2, #194	@ 0xc2
 80042c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80042ca:	4b82      	ldr	r3, [pc, #520]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80042cc:	22ff      	movs	r2, #255	@ 0xff
 80042ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80042d0:	4b80      	ldr	r3, [pc, #512]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80042d2:	22ff      	movs	r2, #255	@ 0xff
 80042d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80042d6:	4b7f      	ldr	r3, [pc, #508]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80042d8:	22ff      	movs	r2, #255	@ 0xff
 80042da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80042dc:	4b7d      	ldr	r3, [pc, #500]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80042de:	2200      	movs	r2, #0
 80042e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80042e2:	4b7d      	ldr	r3, [pc, #500]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 80042e4:	22c0      	movs	r2, #192	@ 0xc0
 80042e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80042e8:	4b7b      	ldr	r3, [pc, #492]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 80042ea:	22a8      	movs	r2, #168	@ 0xa8
 80042ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80042ee:	4b7a      	ldr	r3, [pc, #488]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80042f4:	4b78      	ldr	r3, [pc, #480]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80042fa:	f000 fd11 	bl	8004d20 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80042fe:	4b74      	ldr	r3, [pc, #464]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	061a      	lsls	r2, r3, #24
 8004304:	4b72      	ldr	r3, [pc, #456]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	041b      	lsls	r3, r3, #16
 800430a:	431a      	orrs	r2, r3
 800430c:	4b70      	ldr	r3, [pc, #448]	@ (80044d0 <MX_LWIP_Init+0x224>)
 800430e:	789b      	ldrb	r3, [r3, #2]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	4313      	orrs	r3, r2
 8004314:	4a6e      	ldr	r2, [pc, #440]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004316:	78d2      	ldrb	r2, [r2, #3]
 8004318:	4313      	orrs	r3, r2
 800431a:	061a      	lsls	r2, r3, #24
 800431c:	4b6c      	ldr	r3, [pc, #432]	@ (80044d0 <MX_LWIP_Init+0x224>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	0619      	lsls	r1, r3, #24
 8004322:	4b6b      	ldr	r3, [pc, #428]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	4319      	orrs	r1, r3
 800432a:	4b69      	ldr	r3, [pc, #420]	@ (80044d0 <MX_LWIP_Init+0x224>)
 800432c:	789b      	ldrb	r3, [r3, #2]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	430b      	orrs	r3, r1
 8004332:	4967      	ldr	r1, [pc, #412]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004334:	78c9      	ldrb	r1, [r1, #3]
 8004336:	430b      	orrs	r3, r1
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800433e:	431a      	orrs	r2, r3
 8004340:	4b63      	ldr	r3, [pc, #396]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	0619      	lsls	r1, r3, #24
 8004346:	4b62      	ldr	r3, [pc, #392]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	041b      	lsls	r3, r3, #16
 800434c:	4319      	orrs	r1, r3
 800434e:	4b60      	ldr	r3, [pc, #384]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004350:	789b      	ldrb	r3, [r3, #2]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	430b      	orrs	r3, r1
 8004356:	495e      	ldr	r1, [pc, #376]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004358:	78c9      	ldrb	r1, [r1, #3]
 800435a:	430b      	orrs	r3, r1
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004362:	431a      	orrs	r2, r3
 8004364:	4b5a      	ldr	r3, [pc, #360]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	0619      	lsls	r1, r3, #24
 800436a:	4b59      	ldr	r3, [pc, #356]	@ (80044d0 <MX_LWIP_Init+0x224>)
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	4319      	orrs	r1, r3
 8004372:	4b57      	ldr	r3, [pc, #348]	@ (80044d0 <MX_LWIP_Init+0x224>)
 8004374:	789b      	ldrb	r3, [r3, #2]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	430b      	orrs	r3, r1
 800437a:	4955      	ldr	r1, [pc, #340]	@ (80044d0 <MX_LWIP_Init+0x224>)
 800437c:	78c9      	ldrb	r1, [r1, #3]
 800437e:	430b      	orrs	r3, r1
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	4313      	orrs	r3, r2
 8004384:	4a55      	ldr	r2, [pc, #340]	@ (80044dc <MX_LWIP_Init+0x230>)
 8004386:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004388:	4b52      	ldr	r3, [pc, #328]	@ (80044d4 <MX_LWIP_Init+0x228>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	061a      	lsls	r2, r3, #24
 800438e:	4b51      	ldr	r3, [pc, #324]	@ (80044d4 <MX_LWIP_Init+0x228>)
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	4b4f      	ldr	r3, [pc, #316]	@ (80044d4 <MX_LWIP_Init+0x228>)
 8004398:	789b      	ldrb	r3, [r3, #2]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	4313      	orrs	r3, r2
 800439e:	4a4d      	ldr	r2, [pc, #308]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043a0:	78d2      	ldrb	r2, [r2, #3]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	061a      	lsls	r2, r3, #24
 80043a6:	4b4b      	ldr	r3, [pc, #300]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	0619      	lsls	r1, r3, #24
 80043ac:	4b49      	ldr	r3, [pc, #292]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	4319      	orrs	r1, r3
 80043b4:	4b47      	ldr	r3, [pc, #284]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043b6:	789b      	ldrb	r3, [r3, #2]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	430b      	orrs	r3, r1
 80043bc:	4945      	ldr	r1, [pc, #276]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043be:	78c9      	ldrb	r1, [r1, #3]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80043c8:	431a      	orrs	r2, r3
 80043ca:	4b42      	ldr	r3, [pc, #264]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	0619      	lsls	r1, r3, #24
 80043d0:	4b40      	ldr	r3, [pc, #256]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	4319      	orrs	r1, r3
 80043d8:	4b3e      	ldr	r3, [pc, #248]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043da:	789b      	ldrb	r3, [r3, #2]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	430b      	orrs	r3, r1
 80043e0:	493c      	ldr	r1, [pc, #240]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043e2:	78c9      	ldrb	r1, [r1, #3]
 80043e4:	430b      	orrs	r3, r1
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80043ec:	431a      	orrs	r2, r3
 80043ee:	4b39      	ldr	r3, [pc, #228]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	0619      	lsls	r1, r3, #24
 80043f4:	4b37      	ldr	r3, [pc, #220]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	4319      	orrs	r1, r3
 80043fc:	4b35      	ldr	r3, [pc, #212]	@ (80044d4 <MX_LWIP_Init+0x228>)
 80043fe:	789b      	ldrb	r3, [r3, #2]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	430b      	orrs	r3, r1
 8004404:	4933      	ldr	r1, [pc, #204]	@ (80044d4 <MX_LWIP_Init+0x228>)
 8004406:	78c9      	ldrb	r1, [r1, #3]
 8004408:	430b      	orrs	r3, r1
 800440a:	0e1b      	lsrs	r3, r3, #24
 800440c:	4313      	orrs	r3, r2
 800440e:	4a34      	ldr	r2, [pc, #208]	@ (80044e0 <MX_LWIP_Init+0x234>)
 8004410:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	061a      	lsls	r2, r3, #24
 8004418:	4b2f      	ldr	r3, [pc, #188]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	431a      	orrs	r2, r3
 8004420:	4b2d      	ldr	r3, [pc, #180]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004422:	789b      	ldrb	r3, [r3, #2]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	4313      	orrs	r3, r2
 8004428:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 800442a:	78d2      	ldrb	r2, [r2, #3]
 800442c:	4313      	orrs	r3, r2
 800442e:	061a      	lsls	r2, r3, #24
 8004430:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	0619      	lsls	r1, r3, #24
 8004436:	4b28      	ldr	r3, [pc, #160]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	4319      	orrs	r1, r3
 800443e:	4b26      	ldr	r3, [pc, #152]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004440:	789b      	ldrb	r3, [r3, #2]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	430b      	orrs	r3, r1
 8004446:	4924      	ldr	r1, [pc, #144]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004448:	78c9      	ldrb	r1, [r1, #3]
 800444a:	430b      	orrs	r3, r1
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004452:	431a      	orrs	r2, r3
 8004454:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	0619      	lsls	r1, r3, #24
 800445a:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	4319      	orrs	r1, r3
 8004462:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004464:	789b      	ldrb	r3, [r3, #2]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	430b      	orrs	r3, r1
 800446a:	491b      	ldr	r1, [pc, #108]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 800446c:	78c9      	ldrb	r1, [r1, #3]
 800446e:	430b      	orrs	r3, r1
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004476:	431a      	orrs	r2, r3
 8004478:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	0619      	lsls	r1, r3, #24
 800447e:	4b16      	ldr	r3, [pc, #88]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	4319      	orrs	r1, r3
 8004486:	4b14      	ldr	r3, [pc, #80]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004488:	789b      	ldrb	r3, [r3, #2]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	430b      	orrs	r3, r1
 800448e:	4912      	ldr	r1, [pc, #72]	@ (80044d8 <MX_LWIP_Init+0x22c>)
 8004490:	78c9      	ldrb	r1, [r1, #3]
 8004492:	430b      	orrs	r3, r1
 8004494:	0e1b      	lsrs	r3, r3, #24
 8004496:	4313      	orrs	r3, r2
 8004498:	4a12      	ldr	r2, [pc, #72]	@ (80044e4 <MX_LWIP_Init+0x238>)
 800449a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800449c:	4b12      	ldr	r3, [pc, #72]	@ (80044e8 <MX_LWIP_Init+0x23c>)
 800449e:	9302      	str	r3, [sp, #8]
 80044a0:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <MX_LWIP_Init+0x240>)
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	2300      	movs	r3, #0
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <MX_LWIP_Init+0x238>)
 80044aa:	4a0d      	ldr	r2, [pc, #52]	@ (80044e0 <MX_LWIP_Init+0x234>)
 80044ac:	490b      	ldr	r1, [pc, #44]	@ (80044dc <MX_LWIP_Init+0x230>)
 80044ae:	4810      	ldr	r0, [pc, #64]	@ (80044f0 <MX_LWIP_Init+0x244>)
 80044b0:	f001 f922 	bl	80056f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80044b4:	480e      	ldr	r0, [pc, #56]	@ (80044f0 <MX_LWIP_Init+0x244>)
 80044b6:	f001 fad1 	bl	8005a5c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80044ba:	480d      	ldr	r0, [pc, #52]	@ (80044f0 <MX_LWIP_Init+0x244>)
 80044bc:	f001 fade 	bl	8005a7c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80044c0:	490c      	ldr	r1, [pc, #48]	@ (80044f4 <MX_LWIP_Init+0x248>)
 80044c2:	480b      	ldr	r0, [pc, #44]	@ (80044f0 <MX_LWIP_Init+0x244>)
 80044c4:	f001 fbdc 	bl	8005c80 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000620 	.word	0x20000620
 80044d4:	20000624 	.word	0x20000624
 80044d8:	20000628 	.word	0x20000628
 80044dc:	20000614 	.word	0x20000614
 80044e0:	20000618 	.word	0x20000618
 80044e4:	2000061c 	.word	0x2000061c
 80044e8:	0800f345 	.word	0x0800f345
 80044ec:	08004805 	.word	0x08004805
 80044f0:	200005e0 	.word	0x200005e0
 80044f4:	08004549 	.word	0x08004549

080044f8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004500:	f7fc ff8c 	bl	800141c <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	4b08      	ldr	r3, [pc, #32]	@ (8004528 <Ethernet_Link_Periodic_Handle+0x30>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b63      	cmp	r3, #99	@ 0x63
 800450e:	d907      	bls.n	8004520 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004510:	f7fc ff84 	bl	800141c <HAL_GetTick>
 8004514:	4603      	mov	r3, r0
 8004516:	4a04      	ldr	r2, [pc, #16]	@ (8004528 <Ethernet_Link_Periodic_Handle+0x30>)
 8004518:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fad6 	bl	8004acc <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	200005dc 	.word	0x200005dc

0800452c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004530:	4804      	ldr	r0, [pc, #16]	@ (8004544 <MX_LWIP_Process+0x18>)
 8004532:	f000 f947 	bl	80047c4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004536:	f008 fb19 	bl	800cb6c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800453a:	4802      	ldr	r0, [pc, #8]	@ (8004544 <MX_LWIP_Process+0x18>)
 800453c:	f7ff ffdc 	bl	80044f8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200005e0 	.word	0x200005e0

08004548 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004568:	4b40      	ldr	r3, [pc, #256]	@ (800466c <low_level_init+0x110>)
 800456a:	4a41      	ldr	r2, [pc, #260]	@ (8004670 <low_level_init+0x114>)
 800456c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800456e:	2300      	movs	r3, #0
 8004570:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004576:	23e1      	movs	r3, #225	@ 0xe1
 8004578:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800457a:	2300      	movs	r3, #0
 800457c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800457e:	2300      	movs	r3, #0
 8004580:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004582:	2300      	movs	r3, #0
 8004584:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004586:	4a39      	ldr	r2, [pc, #228]	@ (800466c <low_level_init+0x110>)
 8004588:	f107 0308 	add.w	r3, r7, #8
 800458c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800458e:	4b37      	ldr	r3, [pc, #220]	@ (800466c <low_level_init+0x110>)
 8004590:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004594:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004596:	4b35      	ldr	r3, [pc, #212]	@ (800466c <low_level_init+0x110>)
 8004598:	4a36      	ldr	r2, [pc, #216]	@ (8004674 <low_level_init+0x118>)
 800459a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800459c:	4b33      	ldr	r3, [pc, #204]	@ (800466c <low_level_init+0x110>)
 800459e:	4a36      	ldr	r2, [pc, #216]	@ (8004678 <low_level_init+0x11c>)
 80045a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80045a2:	4b32      	ldr	r3, [pc, #200]	@ (800466c <low_level_init+0x110>)
 80045a4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80045a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80045aa:	4830      	ldr	r0, [pc, #192]	@ (800466c <low_level_init+0x110>)
 80045ac:	f7fd f84c 	bl	8001648 <HAL_ETH_Init>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80045b4:	2238      	movs	r2, #56	@ 0x38
 80045b6:	2100      	movs	r1, #0
 80045b8:	4830      	ldr	r0, [pc, #192]	@ (800467c <low_level_init+0x120>)
 80045ba:	f00b f8fe 	bl	800f7ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80045be:	4b2f      	ldr	r3, [pc, #188]	@ (800467c <low_level_init+0x120>)
 80045c0:	2221      	movs	r2, #33	@ 0x21
 80045c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80045c4:	4b2d      	ldr	r3, [pc, #180]	@ (800467c <low_level_init+0x120>)
 80045c6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80045ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80045cc:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <low_level_init+0x120>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80045d2:	482b      	ldr	r0, [pc, #172]	@ (8004680 <low_level_init+0x124>)
 80045d4:	f000 ff58 	bl	8005488 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2206      	movs	r2, #6
 80045dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <low_level_init+0x110>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80045ec:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <low_level_init+0x110>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	785a      	ldrb	r2, [r3, #1]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80045f8:	4b1c      	ldr	r3, [pc, #112]	@ (800466c <low_level_init+0x110>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	789a      	ldrb	r2, [r3, #2]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <low_level_init+0x110>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	78da      	ldrb	r2, [r3, #3]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004610:	4b16      	ldr	r3, [pc, #88]	@ (800466c <low_level_init+0x110>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	791a      	ldrb	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800461c:	4b13      	ldr	r3, [pc, #76]	@ (800466c <low_level_init+0x110>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	795a      	ldrb	r2, [r3, #5]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800462e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004636:	f043 030a 	orr.w	r3, r3, #10
 800463a:	b2da      	uxtb	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004642:	4910      	ldr	r1, [pc, #64]	@ (8004684 <low_level_init+0x128>)
 8004644:	4810      	ldr	r0, [pc, #64]	@ (8004688 <low_level_init+0x12c>)
 8004646:	f7fc fd22 	bl	800108e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800464a:	480f      	ldr	r0, [pc, #60]	@ (8004688 <low_level_init+0x12c>)
 800464c:	f7fc fd51 	bl	80010f2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa38 	bl	8004acc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800465c:	e001      	b.n	8004662 <low_level_init+0x106>
    Error_Handler();
 800465e:	f7fc f913 	bl	8000888 <Error_Handler>
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200050f8 	.word	0x200050f8
 8004670:	40028000 	.word	0x40028000
 8004674:	20005058 	.word	0x20005058
 8004678:	20004fb8 	.word	0x20004fb8
 800467c:	200051a8 	.word	0x200051a8
 8004680:	08012f68 	.word	0x08012f68
 8004684:	2000000c 	.word	0x2000000c
 8004688:	200051e0 	.word	0x200051e0

0800468c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b092      	sub	sp, #72	@ 0x48
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	2230      	movs	r2, #48	@ 0x30
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f00b f884 	bl	800f7ba <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80046b2:	f107 030c 	add.w	r3, r7, #12
 80046b6:	2230      	movs	r2, #48	@ 0x30
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f00b f87d 	bl	800f7ba <memset>

  for(q = p; q != NULL; q = q->next)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c4:	e045      	b.n	8004752 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80046c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d902      	bls.n	80046d2 <low_level_output+0x46>
      return ERR_IF;
 80046cc:	f06f 030b 	mvn.w	r3, #11
 80046d0:	e055      	b.n	800477e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80046d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046d8:	4613      	mov	r3, r2
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	3348      	adds	r3, #72	@ 0x48
 80046e2:	443b      	add	r3, r7
 80046e4:	3b3c      	subs	r3, #60	@ 0x3c
 80046e6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80046e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ea:	895b      	ldrh	r3, [r3, #10]
 80046ec:	4619      	mov	r1, r3
 80046ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046f0:	4613      	mov	r3, r2
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	3348      	adds	r3, #72	@ 0x48
 80046fa:	443b      	add	r3, r7
 80046fc:	3b38      	subs	r3, #56	@ 0x38
 80046fe:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004702:	2b00      	cmp	r3, #0
 8004704:	d011      	beq.n	800472a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	f107 000c 	add.w	r0, r7, #12
 800470e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004710:	460b      	mov	r3, r1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	440b      	add	r3, r1
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	18c1      	adds	r1, r0, r3
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3348      	adds	r3, #72	@ 0x48
 8004724:	443b      	add	r3, r7
 8004726:	3b34      	subs	r3, #52	@ 0x34
 8004728:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800472a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	3348      	adds	r3, #72	@ 0x48
 800473e:	443b      	add	r3, r7
 8004740:	3b34      	subs	r3, #52	@ 0x34
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004748:	3301      	adds	r3, #1
 800474a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800474c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	643b      	str	r3, [r7, #64]	@ 0x40
 8004752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1b6      	bne.n	80046c6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	891b      	ldrh	r3, [r3, #8]
 800475c:	461a      	mov	r2, r3
 800475e:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <low_level_output+0xfc>)
 8004760:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004762:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <low_level_output+0xfc>)
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800476a:	4a07      	ldr	r2, [pc, #28]	@ (8004788 <low_level_output+0xfc>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004770:	2214      	movs	r2, #20
 8004772:	4905      	ldr	r1, [pc, #20]	@ (8004788 <low_level_output+0xfc>)
 8004774:	4805      	ldr	r0, [pc, #20]	@ (800478c <low_level_output+0x100>)
 8004776:	f7fd f89d 	bl	80018b4 <HAL_ETH_Transmit>

  return errval;
 800477a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800477e:	4618      	mov	r0, r3
 8004780:	3748      	adds	r7, #72	@ 0x48
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200051a8 	.word	0x200051a8
 800478c:	200050f8 	.word	0x200050f8

08004790 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800479c:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <low_level_input+0x2c>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	4619      	mov	r1, r3
 80047aa:	4805      	ldr	r0, [pc, #20]	@ (80047c0 <low_level_input+0x30>)
 80047ac:	f7fd f916 	bl	80019dc <HAL_ETH_ReadData>
  }

  return p;
 80047b0:	68fb      	ldr	r3, [r7, #12]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20004fb4 	.word	0x20004fb4
 80047c0:	200050f8 	.word	0x200050f8

080047c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ffdd 	bl	8004790 <low_level_input>
 80047d6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	4798      	blx	r3
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f001 fdc6 	bl	8006380 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ea      	bne.n	80047d0 <ethernetif_input+0xc>
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <ethernetif_init+0x1c>
 8004812:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <ethernetif_init+0x48>)
 8004814:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8004818:	490d      	ldr	r1, [pc, #52]	@ (8004850 <ethernetif_init+0x4c>)
 800481a:	480e      	ldr	r0, [pc, #56]	@ (8004854 <ethernetif_init+0x50>)
 800481c:	f00a ff68 	bl	800f6f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2273      	movs	r2, #115	@ 0x73
 8004824:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2274      	movs	r2, #116	@ 0x74
 800482c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a09      	ldr	r2, [pc, #36]	@ (8004858 <ethernetif_init+0x54>)
 8004834:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a08      	ldr	r2, [pc, #32]	@ (800485c <ethernetif_init+0x58>)
 800483a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fe8d 	bl	800455c <low_level_init>

  return ERR_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	08010570 	.word	0x08010570
 8004850:	0801058c 	.word	0x0801058c
 8004854:	0801059c 	.word	0x0801059c
 8004858:	0800d7fd 	.word	0x0800d7fd
 800485c:	0800468d 	.word	0x0800468d

08004860 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	4807      	ldr	r0, [pc, #28]	@ (800488c <pbuf_free_custom+0x2c>)
 8004870:	f000 feec 	bl	800564c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004874:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <pbuf_free_custom+0x30>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d102      	bne.n	8004882 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800487c:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <pbuf_free_custom+0x30>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
  }
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	08012f68 	.word	0x08012f68
 8004890:	20004fb4 	.word	0x20004fb4

08004894 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004898:	f7fc fdc0 	bl	800141c <HAL_GetTick>
 800489c:	4603      	mov	r3, r0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08e      	sub	sp, #56	@ 0x38
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a55      	ldr	r2, [pc, #340]	@ (8004a18 <HAL_ETH_MspInit+0x174>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f040 80a4 	bne.w	8004a10 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80048c8:	2300      	movs	r3, #0
 80048ca:	623b      	str	r3, [r7, #32]
 80048cc:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 80048ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d0:	4a52      	ldr	r2, [pc, #328]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 80048d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d8:	4b50      	ldr	r3, [pc, #320]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	4b4c      	ldr	r3, [pc, #304]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	4a4b      	ldr	r2, [pc, #300]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 80048ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80048f4:	4b49      	ldr	r3, [pc, #292]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2300      	movs	r3, #0
 8004902:	61bb      	str	r3, [r7, #24]
 8004904:	4b45      	ldr	r3, [pc, #276]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	4a44      	ldr	r2, [pc, #272]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 800490a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800490e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004910:	4b42      	ldr	r3, [pc, #264]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	4b3e      	ldr	r3, [pc, #248]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	4a3d      	ldr	r2, [pc, #244]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004926:	f043 0304 	orr.w	r3, r3, #4
 800492a:	6313      	str	r3, [r2, #48]	@ 0x30
 800492c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004938:	2300      	movs	r3, #0
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	4b37      	ldr	r3, [pc, #220]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	4a36      	ldr	r2, [pc, #216]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6313      	str	r3, [r2, #48]	@ 0x30
 8004948:	4b34      	ldr	r3, [pc, #208]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	6313      	str	r3, [r2, #48]	@ 0x30
 8004964:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	4a28      	ldr	r2, [pc, #160]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 800497a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800497e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004980:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <HAL_ETH_MspInit+0x178>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800498c:	2332      	movs	r3, #50	@ 0x32
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004998:	2303      	movs	r3, #3
 800499a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800499c:	230b      	movs	r3, #11
 800499e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049a4:	4619      	mov	r1, r3
 80049a6:	481e      	ldr	r0, [pc, #120]	@ (8004a20 <HAL_ETH_MspInit+0x17c>)
 80049a8:	f7fd ff50 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80049ac:	2386      	movs	r3, #134	@ 0x86
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b0:	2302      	movs	r3, #2
 80049b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b8:	2303      	movs	r3, #3
 80049ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049bc:	230b      	movs	r3, #11
 80049be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049c4:	4619      	mov	r1, r3
 80049c6:	4817      	ldr	r0, [pc, #92]	@ (8004a24 <HAL_ETH_MspInit+0x180>)
 80049c8:	f7fd ff40 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80049cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d2:	2302      	movs	r3, #2
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049de:	230b      	movs	r3, #11
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80049e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049e6:	4619      	mov	r1, r3
 80049e8:	480f      	ldr	r0, [pc, #60]	@ (8004a28 <HAL_ETH_MspInit+0x184>)
 80049ea:	f7fd ff2f 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80049ee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f4:	2302      	movs	r3, #2
 80049f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fc:	2303      	movs	r3, #3
 80049fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a00:	230b      	movs	r3, #11
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4808      	ldr	r0, [pc, #32]	@ (8004a2c <HAL_ETH_MspInit+0x188>)
 8004a0c:	f7fd ff1e 	bl	800284c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004a10:	bf00      	nop
 8004a12:	3738      	adds	r7, #56	@ 0x38
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40028000 	.word	0x40028000
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40020800 	.word	0x40020800
 8004a24:	40020000 	.word	0x40020000
 8004a28:	40020400 	.word	0x40020400
 8004a2c:	40021800 	.word	0x40021800

08004a30 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004a34:	4802      	ldr	r0, [pc, #8]	@ (8004a40 <ETH_PHY_IO_Init+0x10>)
 8004a36:	f7fd faad 	bl	8001f94 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	200050f8 	.word	0x200050f8

08004a44 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return 0;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	68f9      	ldr	r1, [r7, #12]
 8004a66:	4807      	ldr	r0, [pc, #28]	@ (8004a84 <ETH_PHY_IO_ReadReg+0x30>)
 8004a68:	f7fd f8fc 	bl	8001c64 <HAL_ETH_ReadPHYRegister>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004a72:	f04f 33ff 	mov.w	r3, #4294967295
 8004a76:	e000      	b.n	8004a7a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200050f8 	.word	0x200050f8

08004a88 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	68f9      	ldr	r1, [r7, #12]
 8004a9a:	4807      	ldr	r0, [pc, #28]	@ (8004ab8 <ETH_PHY_IO_WriteReg+0x30>)
 8004a9c:	f7fd f92d 	bl	8001cfa <HAL_ETH_WritePHYRegister>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	e000      	b.n	8004aae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200050f8 	.word	0x200050f8

08004abc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ac0:	f7fc fcac 	bl	800141c <HAL_GetTick>
 8004ac4:	4603      	mov	r3, r0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b0a0      	sub	sp, #128	@ 0x80
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	2264      	movs	r2, #100	@ 0x64
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f00a fe6c 	bl	800f7ba <memset>
  int32_t PHYLinkState = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aea:	2300      	movs	r3, #0
 8004aec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004aee:	2300      	movs	r3, #0
 8004af0:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004af2:	483a      	ldr	r0, [pc, #232]	@ (8004bdc <ethernet_link_check_state+0x110>)
 8004af4:	f7fc fba5 	bl	8001242 <LAN8742_GetLinkState>
 8004af8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b00:	089b      	lsrs	r3, r3, #2
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <ethernet_link_check_state+0x5a>
 8004b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	dc09      	bgt.n	8004b26 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004b12:	4833      	ldr	r0, [pc, #204]	@ (8004be0 <ethernet_link_check_state+0x114>)
 8004b14:	f7fc fe75 	bl	8001802 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f001 f81b 	bl	8005b54 <netif_set_down>
    netif_set_link_down(netif);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f001 f87e 	bl	8005c20 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004b24:	e055      	b.n	8004bd2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d14e      	bne.n	8004bd2 <ethernet_link_check_state+0x106>
 8004b34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	dd4b      	ble.n	8004bd2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b3c:	3b02      	subs	r3, #2
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d82a      	bhi.n	8004b98 <ethernet_link_check_state+0xcc>
 8004b42:	a201      	add	r2, pc, #4	@ (adr r2, 8004b48 <ethernet_link_check_state+0x7c>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b6b 	.word	0x08004b6b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b8b 	.word	0x08004b8b
      duplex = ETH_FULLDUPLEX_MODE;
 8004b58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b5c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004b5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b62:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b64:	2301      	movs	r3, #1
 8004b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b68:	e017      	b.n	8004b9a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004b6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b72:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b74:	2301      	movs	r3, #1
 8004b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b78:	e00f      	b.n	8004b9a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004b7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b7e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004b80:	2300      	movs	r3, #0
 8004b82:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b88:	e007      	b.n	8004b9a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004b96:	e000      	b.n	8004b9a <ethernet_link_check_state+0xce>
      break;
 8004b98:	bf00      	nop
    if(linkchanged)
 8004b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d018      	beq.n	8004bd2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ba0:	f107 030c 	add.w	r3, r7, #12
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	480e      	ldr	r0, [pc, #56]	@ (8004be0 <ethernet_link_check_state+0x114>)
 8004ba8:	f7fd f8f0 	bl	8001d8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004bb4:	f107 030c 	add.w	r3, r7, #12
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4809      	ldr	r0, [pc, #36]	@ (8004be0 <ethernet_link_check_state+0x114>)
 8004bbc:	f7fd f9d0 	bl	8001f60 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004bc0:	4807      	ldr	r0, [pc, #28]	@ (8004be0 <ethernet_link_check_state+0x114>)
 8004bc2:	f7fc fdbf 	bl	8001744 <HAL_ETH_Start>
      netif_set_up(netif);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 ff58 	bl	8005a7c <netif_set_up>
      netif_set_link_up(netif);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fff3 	bl	8005bb8 <netif_set_link_up>
}
 8004bd2:	bf00      	nop
 8004bd4:	3780      	adds	r7, #128	@ 0x80
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	200051e0 	.word	0x200051e0
 8004be0:	200050f8 	.word	0x200050f8

08004be4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004bec:	4812      	ldr	r0, [pc, #72]	@ (8004c38 <HAL_ETH_RxAllocateCallback+0x54>)
 8004bee:	f000 fcbf 	bl	8005570 <memp_malloc_pool>
 8004bf2:	60f8      	str	r0, [r7, #12]
  if (p)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d014      	beq.n	8004c24 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f103 0220 	add.w	r2, r3, #32
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a0d      	ldr	r2, [pc, #52]	@ (8004c3c <HAL_ETH_RxAllocateCallback+0x58>)
 8004c08:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004c12:	9201      	str	r2, [sp, #4]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2241      	movs	r2, #65	@ 0x41
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f001 f9f5 	bl	800600c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004c22:	e005      	b.n	8004c30 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004c24:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	08012f68 	.word	0x08012f68
 8004c3c:	08004861 	.word	0x08004861
 8004c40:	20004fb4 	.word	0x20004fb4

08004c44 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	@ 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3b20      	subs	r3, #32
 8004c62:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	887a      	ldrh	r2, [r7, #2]
 8004c74:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e003      	b.n	8004c8e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e009      	b.n	8004cb0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	891a      	ldrh	r2, [r3, #8]
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f2      	bne.n	8004c9c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
 8004cba:	3724      	adds	r7, #36	@ 0x24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	b21a      	sxth	r2, r3
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b21b      	sxth	r3, r3
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b21b      	sxth	r3, r3
 8004ce0:	b29b      	uxth	r3, r3
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	061a      	lsls	r2, r3, #24
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0e1b      	lsrs	r3, r3, #24
 8004d12:	4313      	orrs	r3, r2
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004d2a:	f000 f8d5 	bl	8004ed8 <mem_init>
  memp_init();
 8004d2e:	f000 fbdb 	bl	80054e8 <memp_init>
  pbuf_init();
  netif_init();
 8004d32:	f000 fcd9 	bl	80056e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004d36:	f007 ff5b 	bl	800cbf0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004d3a:	f001 fdbf 	bl	80068bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004d3e:	f007 fecd 	bl	800cadc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004d56:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <ptr_to_mem+0x20>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	4413      	add	r3, r2
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	2000586c 	.word	0x2000586c

08004d70 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004d78:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <mem_to_ptr+0x20>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	b29b      	uxth	r3, r3
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	2000586c 	.word	0x2000586c

08004d94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004d9c:	4b45      	ldr	r3, [pc, #276]	@ (8004eb4 <plug_holes+0x120>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d206      	bcs.n	8004db4 <plug_holes+0x20>
 8004da6:	4b44      	ldr	r3, [pc, #272]	@ (8004eb8 <plug_holes+0x124>)
 8004da8:	f240 12df 	movw	r2, #479	@ 0x1df
 8004dac:	4943      	ldr	r1, [pc, #268]	@ (8004ebc <plug_holes+0x128>)
 8004dae:	4844      	ldr	r0, [pc, #272]	@ (8004ec0 <plug_holes+0x12c>)
 8004db0:	f00a fc9e 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004db4:	4b43      	ldr	r3, [pc, #268]	@ (8004ec4 <plug_holes+0x130>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d306      	bcc.n	8004dcc <plug_holes+0x38>
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <plug_holes+0x124>)
 8004dc0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004dc4:	4940      	ldr	r1, [pc, #256]	@ (8004ec8 <plug_holes+0x134>)
 8004dc6:	483e      	ldr	r0, [pc, #248]	@ (8004ec0 <plug_holes+0x12c>)
 8004dc8:	f00a fc92 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	791b      	ldrb	r3, [r3, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d006      	beq.n	8004de2 <plug_holes+0x4e>
 8004dd4:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <plug_holes+0x124>)
 8004dd6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8004dda:	493c      	ldr	r1, [pc, #240]	@ (8004ecc <plug_holes+0x138>)
 8004ddc:	4838      	ldr	r0, [pc, #224]	@ (8004ec0 <plug_holes+0x12c>)
 8004dde:	f00a fc87 	bl	800f6f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004dea:	d906      	bls.n	8004dfa <plug_holes+0x66>
 8004dec:	4b32      	ldr	r3, [pc, #200]	@ (8004eb8 <plug_holes+0x124>)
 8004dee:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004df2:	4937      	ldr	r1, [pc, #220]	@ (8004ed0 <plug_holes+0x13c>)
 8004df4:	4832      	ldr	r0, [pc, #200]	@ (8004ec0 <plug_holes+0x12c>)
 8004df6:	f00a fc7b 	bl	800f6f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ffa4 	bl	8004d4c <ptr_to_mem>
 8004e04:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d024      	beq.n	8004e58 <plug_holes+0xc4>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	791b      	ldrb	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d120      	bne.n	8004e58 <plug_holes+0xc4>
 8004e16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec4 <plug_holes+0x130>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d01b      	beq.n	8004e58 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004e20:	4b2c      	ldr	r3, [pc, #176]	@ (8004ed4 <plug_holes+0x140>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d102      	bne.n	8004e30 <plug_holes+0x9c>
      lfree = mem;
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed4 <plug_holes+0x140>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	881a      	ldrh	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e40:	d00a      	beq.n	8004e58 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ff80 	bl	8004d4c <ptr_to_mem>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff ff8e 	bl	8004d70 <mem_to_ptr>
 8004e54:	4603      	mov	r3, r0
 8004e56:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	885b      	ldrh	r3, [r3, #2]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff ff75 	bl	8004d4c <ptr_to_mem>
 8004e62:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d01f      	beq.n	8004eac <plug_holes+0x118>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	791b      	ldrb	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11b      	bne.n	8004eac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004e74:	4b17      	ldr	r3, [pc, #92]	@ (8004ed4 <plug_holes+0x140>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d102      	bne.n	8004e84 <plug_holes+0xf0>
      lfree = pmem;
 8004e7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <plug_holes+0x140>)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	881a      	ldrh	r2, [r3, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e94:	d00a      	beq.n	8004eac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff ff56 	bl	8004d4c <ptr_to_mem>
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	68b8      	ldr	r0, [r7, #8]
 8004ea4:	f7ff ff64 	bl	8004d70 <mem_to_ptr>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd90      	pop	{r4, r7, pc}
 8004eb4:	2000586c 	.word	0x2000586c
 8004eb8:	080105c4 	.word	0x080105c4
 8004ebc:	080105f4 	.word	0x080105f4
 8004ec0:	0801060c 	.word	0x0801060c
 8004ec4:	20005870 	.word	0x20005870
 8004ec8:	08010634 	.word	0x08010634
 8004ecc:	08010650 	.word	0x08010650
 8004ed0:	0801066c 	.word	0x0801066c
 8004ed4:	20005874 	.word	0x20005874

08004ed8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004ede:	4b18      	ldr	r3, [pc, #96]	@ (8004f40 <mem_init+0x68>)
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4b16      	ldr	r3, [pc, #88]	@ (8004f44 <mem_init+0x6c>)
 8004eea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004eec:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <mem_init+0x6c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ef8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004f06:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004f0a:	f7ff ff1f 	bl	8004d4c <ptr_to_mem>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4a0d      	ldr	r2, [pc, #52]	@ (8004f48 <mem_init+0x70>)
 8004f12:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <mem_init+0x70>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <mem_init+0x70>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004f24:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004f26:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <mem_init+0x70>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004f2e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <mem_init+0x6c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a05      	ldr	r2, [pc, #20]	@ (8004f4c <mem_init+0x74>)
 8004f36:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20005218 	.word	0x20005218
 8004f44:	2000586c 	.word	0x2000586c
 8004f48:	20005870 	.word	0x20005870
 8004f4c:	20005874 	.word	0x20005874

08004f50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff09 	bl	8004d70 <mem_to_ptr>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fef0 	bl	8004d4c <ptr_to_mem>
 8004f6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	885b      	ldrh	r3, [r3, #2]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff feea 	bl	8004d4c <ptr_to_mem>
 8004f78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f82:	d818      	bhi.n	8004fb6 <mem_link_valid+0x66>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	885b      	ldrh	r3, [r3, #2]
 8004f88:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f8c:	d813      	bhi.n	8004fb6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004f92:	8afa      	ldrh	r2, [r7, #22]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d004      	beq.n	8004fa2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	8afa      	ldrh	r2, [r7, #22]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d109      	bne.n	8004fb6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004fa2:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <mem_link_valid+0x74>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d006      	beq.n	8004fba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	885b      	ldrh	r3, [r3, #2]
 8004fb0:	8afa      	ldrh	r2, [r7, #22]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d001      	beq.n	8004fba <mem_link_valid+0x6a>
    return 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e000      	b.n	8004fbc <mem_link_valid+0x6c>
  }
  return 1;
 8004fba:	2301      	movs	r3, #1
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20005870 	.word	0x20005870

08004fc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d04c      	beq.n	8005070 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004fe0:	4b25      	ldr	r3, [pc, #148]	@ (8005078 <mem_free+0xb0>)
 8004fe2:	f240 2273 	movw	r2, #627	@ 0x273
 8004fe6:	4925      	ldr	r1, [pc, #148]	@ (800507c <mem_free+0xb4>)
 8004fe8:	4825      	ldr	r0, [pc, #148]	@ (8005080 <mem_free+0xb8>)
 8004fea:	f00a fb81 	bl	800f6f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004fee:	e040      	b.n	8005072 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3b08      	subs	r3, #8
 8004ff4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004ff6:	4b23      	ldr	r3, [pc, #140]	@ (8005084 <mem_free+0xbc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d306      	bcc.n	800500e <mem_free+0x46>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f103 020c 	add.w	r2, r3, #12
 8005006:	4b20      	ldr	r3, [pc, #128]	@ (8005088 <mem_free+0xc0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d907      	bls.n	800501e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800500e:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <mem_free+0xb0>)
 8005010:	f240 227f 	movw	r2, #639	@ 0x27f
 8005014:	491d      	ldr	r1, [pc, #116]	@ (800508c <mem_free+0xc4>)
 8005016:	481a      	ldr	r0, [pc, #104]	@ (8005080 <mem_free+0xb8>)
 8005018:	f00a fb6a 	bl	800f6f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800501c:	e029      	b.n	8005072 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	791b      	ldrb	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005026:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <mem_free+0xb0>)
 8005028:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800502c:	4918      	ldr	r1, [pc, #96]	@ (8005090 <mem_free+0xc8>)
 800502e:	4814      	ldr	r0, [pc, #80]	@ (8005080 <mem_free+0xb8>)
 8005030:	f00a fb5e 	bl	800f6f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005034:	e01d      	b.n	8005072 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7ff ff8a 	bl	8004f50 <mem_link_valid>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005042:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <mem_free+0xb0>)
 8005044:	f240 2295 	movw	r2, #661	@ 0x295
 8005048:	4912      	ldr	r1, [pc, #72]	@ (8005094 <mem_free+0xcc>)
 800504a:	480d      	ldr	r0, [pc, #52]	@ (8005080 <mem_free+0xb8>)
 800504c:	f00a fb50 	bl	800f6f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005050:	e00f      	b.n	8005072 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005058:	4b0f      	ldr	r3, [pc, #60]	@ (8005098 <mem_free+0xd0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	429a      	cmp	r2, r3
 8005060:	d202      	bcs.n	8005068 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005062:	4a0d      	ldr	r2, [pc, #52]	@ (8005098 <mem_free+0xd0>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff fe93 	bl	8004d94 <plug_holes>
 800506e:	e000      	b.n	8005072 <mem_free+0xaa>
    return;
 8005070:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	080105c4 	.word	0x080105c4
 800507c:	08010698 	.word	0x08010698
 8005080:	0801060c 	.word	0x0801060c
 8005084:	2000586c 	.word	0x2000586c
 8005088:	20005870 	.word	0x20005870
 800508c:	080106bc 	.word	0x080106bc
 8005090:	080106d8 	.word	0x080106d8
 8005094:	08010700 	.word	0x08010700
 8005098:	20005874 	.word	0x20005874

0800509c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80050a8:	887b      	ldrh	r3, [r7, #2]
 80050aa:	3303      	adds	r3, #3
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80050b4:	8bfb      	ldrh	r3, [r7, #30]
 80050b6:	2b0b      	cmp	r3, #11
 80050b8:	d801      	bhi.n	80050be <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80050ba:	230c      	movs	r3, #12
 80050bc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80050be:	8bfb      	ldrh	r3, [r7, #30]
 80050c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80050c4:	d803      	bhi.n	80050ce <mem_trim+0x32>
 80050c6:	8bfa      	ldrh	r2, [r7, #30]
 80050c8:	887b      	ldrh	r3, [r7, #2]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d201      	bcs.n	80050d2 <mem_trim+0x36>
    return NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e0cc      	b.n	800526c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80050d2:	4b68      	ldr	r3, [pc, #416]	@ (8005274 <mem_trim+0x1d8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d304      	bcc.n	80050e6 <mem_trim+0x4a>
 80050dc:	4b66      	ldr	r3, [pc, #408]	@ (8005278 <mem_trim+0x1dc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d306      	bcc.n	80050f4 <mem_trim+0x58>
 80050e6:	4b65      	ldr	r3, [pc, #404]	@ (800527c <mem_trim+0x1e0>)
 80050e8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80050ec:	4964      	ldr	r1, [pc, #400]	@ (8005280 <mem_trim+0x1e4>)
 80050ee:	4865      	ldr	r0, [pc, #404]	@ (8005284 <mem_trim+0x1e8>)
 80050f0:	f00a fafe 	bl	800f6f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80050f4:	4b5f      	ldr	r3, [pc, #380]	@ (8005274 <mem_trim+0x1d8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d304      	bcc.n	8005108 <mem_trim+0x6c>
 80050fe:	4b5e      	ldr	r3, [pc, #376]	@ (8005278 <mem_trim+0x1dc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d301      	bcc.n	800510c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	e0af      	b.n	800526c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3b08      	subs	r3, #8
 8005110:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005112:	69b8      	ldr	r0, [r7, #24]
 8005114:	f7ff fe2c 	bl	8004d70 <mem_to_ptr>
 8005118:	4603      	mov	r3, r0
 800511a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	881a      	ldrh	r2, [r3, #0]
 8005120:	8afb      	ldrh	r3, [r7, #22]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b08      	subs	r3, #8
 8005128:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800512a:	8bfa      	ldrh	r2, [r7, #30]
 800512c:	8abb      	ldrh	r3, [r7, #20]
 800512e:	429a      	cmp	r2, r3
 8005130:	d906      	bls.n	8005140 <mem_trim+0xa4>
 8005132:	4b52      	ldr	r3, [pc, #328]	@ (800527c <mem_trim+0x1e0>)
 8005134:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005138:	4953      	ldr	r1, [pc, #332]	@ (8005288 <mem_trim+0x1ec>)
 800513a:	4852      	ldr	r0, [pc, #328]	@ (8005284 <mem_trim+0x1e8>)
 800513c:	f00a fad8 	bl	800f6f0 <iprintf>
  if (newsize > size) {
 8005140:	8bfa      	ldrh	r2, [r7, #30]
 8005142:	8abb      	ldrh	r3, [r7, #20]
 8005144:	429a      	cmp	r2, r3
 8005146:	d901      	bls.n	800514c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	e08f      	b.n	800526c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800514c:	8bfa      	ldrh	r2, [r7, #30]
 800514e:	8abb      	ldrh	r3, [r7, #20]
 8005150:	429a      	cmp	r2, r3
 8005152:	d101      	bne.n	8005158 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	e089      	b.n	800526c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fdf5 	bl	8004d4c <ptr_to_mem>
 8005162:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	791b      	ldrb	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d13f      	bne.n	80051ec <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005174:	d106      	bne.n	8005184 <mem_trim+0xe8>
 8005176:	4b41      	ldr	r3, [pc, #260]	@ (800527c <mem_trim+0x1e0>)
 8005178:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800517c:	4943      	ldr	r1, [pc, #268]	@ (800528c <mem_trim+0x1f0>)
 800517e:	4841      	ldr	r0, [pc, #260]	@ (8005284 <mem_trim+0x1e8>)
 8005180:	f00a fab6 	bl	800f6f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800518a:	8afa      	ldrh	r2, [r7, #22]
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	4413      	add	r3, r2
 8005190:	b29b      	uxth	r3, r3
 8005192:	3308      	adds	r3, #8
 8005194:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005196:	4b3e      	ldr	r3, [pc, #248]	@ (8005290 <mem_trim+0x1f4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d106      	bne.n	80051ae <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fdd2 	bl	8004d4c <ptr_to_mem>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4a39      	ldr	r2, [pc, #228]	@ (8005290 <mem_trim+0x1f4>)
 80051ac:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80051ae:	89fb      	ldrh	r3, [r7, #14]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fdcb 	bl	8004d4c <ptr_to_mem>
 80051b6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2200      	movs	r2, #0
 80051bc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	89ba      	ldrh	r2, [r7, #12]
 80051c2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	8afa      	ldrh	r2, [r7, #22]
 80051c8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	89fa      	ldrh	r2, [r7, #14]
 80051ce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80051d8:	d047      	beq.n	800526a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fdb4 	bl	8004d4c <ptr_to_mem>
 80051e4:	4602      	mov	r2, r0
 80051e6:	89fb      	ldrh	r3, [r7, #14]
 80051e8:	8053      	strh	r3, [r2, #2]
 80051ea:	e03e      	b.n	800526a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80051ec:	8bfb      	ldrh	r3, [r7, #30]
 80051ee:	f103 0214 	add.w	r2, r3, #20
 80051f2:	8abb      	ldrh	r3, [r7, #20]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d838      	bhi.n	800526a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80051f8:	8afa      	ldrh	r2, [r7, #22]
 80051fa:	8bfb      	ldrh	r3, [r7, #30]
 80051fc:	4413      	add	r3, r2
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3308      	adds	r3, #8
 8005202:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800520c:	d106      	bne.n	800521c <mem_trim+0x180>
 800520e:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <mem_trim+0x1e0>)
 8005210:	f240 3216 	movw	r2, #790	@ 0x316
 8005214:	491d      	ldr	r1, [pc, #116]	@ (800528c <mem_trim+0x1f0>)
 8005216:	481b      	ldr	r0, [pc, #108]	@ (8005284 <mem_trim+0x1e8>)
 8005218:	f00a fa6a 	bl	800f6f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800521c:	89fb      	ldrh	r3, [r7, #14]
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fd94 	bl	8004d4c <ptr_to_mem>
 8005224:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005226:	4b1a      	ldr	r3, [pc, #104]	@ (8005290 <mem_trim+0x1f4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d202      	bcs.n	8005236 <mem_trim+0x19a>
      lfree = mem2;
 8005230:	4a17      	ldr	r2, [pc, #92]	@ (8005290 <mem_trim+0x1f4>)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2200      	movs	r2, #0
 800523a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	881a      	ldrh	r2, [r3, #0]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	8afa      	ldrh	r2, [r7, #22]
 8005248:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	89fa      	ldrh	r2, [r7, #14]
 800524e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005258:	d007      	beq.n	800526a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fd74 	bl	8004d4c <ptr_to_mem>
 8005264:	4602      	mov	r2, r0
 8005266:	89fb      	ldrh	r3, [r7, #14]
 8005268:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800526a:	687b      	ldr	r3, [r7, #4]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	2000586c 	.word	0x2000586c
 8005278:	20005870 	.word	0x20005870
 800527c:	080105c4 	.word	0x080105c4
 8005280:	08010734 	.word	0x08010734
 8005284:	0801060c 	.word	0x0801060c
 8005288:	0801074c 	.word	0x0801074c
 800528c:	0801076c 	.word	0x0801076c
 8005290:	20005874 	.word	0x20005874

08005294 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <mem_malloc+0x14>
    return NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e0d9      	b.n	800545c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	3303      	adds	r3, #3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80052b4:	8bbb      	ldrh	r3, [r7, #28]
 80052b6:	2b0b      	cmp	r3, #11
 80052b8:	d801      	bhi.n	80052be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80052ba:	230c      	movs	r3, #12
 80052bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80052be:	8bbb      	ldrh	r3, [r7, #28]
 80052c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80052c4:	d803      	bhi.n	80052ce <mem_malloc+0x3a>
 80052c6:	8bba      	ldrh	r2, [r7, #28]
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d201      	bcs.n	80052d2 <mem_malloc+0x3e>
    return NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e0c4      	b.n	800545c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80052d2:	4b64      	ldr	r3, [pc, #400]	@ (8005464 <mem_malloc+0x1d0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fd4a 	bl	8004d70 <mem_to_ptr>
 80052dc:	4603      	mov	r3, r0
 80052de:	83fb      	strh	r3, [r7, #30]
 80052e0:	e0b4      	b.n	800544c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80052e2:	8bfb      	ldrh	r3, [r7, #30]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fd31 	bl	8004d4c <ptr_to_mem>
 80052ea:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	791b      	ldrb	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 80a4 	bne.w	800543e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	8bfb      	ldrh	r3, [r7, #30]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f1a3 0208 	sub.w	r2, r3, #8
 8005304:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005306:	429a      	cmp	r2, r3
 8005308:	f0c0 8099 	bcc.w	800543e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	8bfb      	ldrh	r3, [r7, #30]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f1a3 0208 	sub.w	r2, r3, #8
 800531a:	8bbb      	ldrh	r3, [r7, #28]
 800531c:	3314      	adds	r3, #20
 800531e:	429a      	cmp	r2, r3
 8005320:	d333      	bcc.n	800538a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005322:	8bfa      	ldrh	r2, [r7, #30]
 8005324:	8bbb      	ldrh	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	3308      	adds	r3, #8
 800532c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800532e:	8a7b      	ldrh	r3, [r7, #18]
 8005330:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005334:	d106      	bne.n	8005344 <mem_malloc+0xb0>
 8005336:	4b4c      	ldr	r3, [pc, #304]	@ (8005468 <mem_malloc+0x1d4>)
 8005338:	f240 3287 	movw	r2, #903	@ 0x387
 800533c:	494b      	ldr	r1, [pc, #300]	@ (800546c <mem_malloc+0x1d8>)
 800533e:	484c      	ldr	r0, [pc, #304]	@ (8005470 <mem_malloc+0x1dc>)
 8005340:	f00a f9d6 	bl	800f6f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005344:	8a7b      	ldrh	r3, [r7, #18]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fd00 	bl	8004d4c <ptr_to_mem>
 800534c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8bfa      	ldrh	r2, [r7, #30]
 8005360:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	8a7a      	ldrh	r2, [r7, #18]
 8005366:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2201      	movs	r2, #1
 800536c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005376:	d00b      	beq.n	8005390 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff fce5 	bl	8004d4c <ptr_to_mem>
 8005382:	4602      	mov	r2, r0
 8005384:	8a7b      	ldrh	r3, [r7, #18]
 8005386:	8053      	strh	r3, [r2, #2]
 8005388:	e002      	b.n	8005390 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2201      	movs	r2, #1
 800538e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005390:	4b34      	ldr	r3, [pc, #208]	@ (8005464 <mem_malloc+0x1d0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	429a      	cmp	r2, r3
 8005398:	d127      	bne.n	80053ea <mem_malloc+0x156>
          struct mem *cur = lfree;
 800539a:	4b32      	ldr	r3, [pc, #200]	@ (8005464 <mem_malloc+0x1d0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80053a0:	e005      	b.n	80053ae <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fcd0 	bl	8004d4c <ptr_to_mem>
 80053ac:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	791b      	ldrb	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <mem_malloc+0x12c>
 80053b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005474 <mem_malloc+0x1e0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d1f0      	bne.n	80053a2 <mem_malloc+0x10e>
          }
          lfree = cur;
 80053c0:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <mem_malloc+0x1d0>)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80053c6:	4b27      	ldr	r3, [pc, #156]	@ (8005464 <mem_malloc+0x1d0>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005474 <mem_malloc+0x1e0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d00b      	beq.n	80053ea <mem_malloc+0x156>
 80053d2:	4b24      	ldr	r3, [pc, #144]	@ (8005464 <mem_malloc+0x1d0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	791b      	ldrb	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <mem_malloc+0x156>
 80053dc:	4b22      	ldr	r3, [pc, #136]	@ (8005468 <mem_malloc+0x1d4>)
 80053de:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80053e2:	4925      	ldr	r1, [pc, #148]	@ (8005478 <mem_malloc+0x1e4>)
 80053e4:	4822      	ldr	r0, [pc, #136]	@ (8005470 <mem_malloc+0x1dc>)
 80053e6:	f00a f983 	bl	800f6f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80053ea:	8bba      	ldrh	r2, [r7, #28]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	3308      	adds	r3, #8
 80053f2:	4a20      	ldr	r2, [pc, #128]	@ (8005474 <mem_malloc+0x1e0>)
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d906      	bls.n	8005408 <mem_malloc+0x174>
 80053fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005468 <mem_malloc+0x1d4>)
 80053fc:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005400:	491e      	ldr	r1, [pc, #120]	@ (800547c <mem_malloc+0x1e8>)
 8005402:	481b      	ldr	r0, [pc, #108]	@ (8005470 <mem_malloc+0x1dc>)
 8005404:	f00a f974 	bl	800f6f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d006      	beq.n	8005420 <mem_malloc+0x18c>
 8005412:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <mem_malloc+0x1d4>)
 8005414:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005418:	4919      	ldr	r1, [pc, #100]	@ (8005480 <mem_malloc+0x1ec>)
 800541a:	4815      	ldr	r0, [pc, #84]	@ (8005470 <mem_malloc+0x1dc>)
 800541c:	f00a f968 	bl	800f6f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d006      	beq.n	8005438 <mem_malloc+0x1a4>
 800542a:	4b0f      	ldr	r3, [pc, #60]	@ (8005468 <mem_malloc+0x1d4>)
 800542c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005430:	4914      	ldr	r1, [pc, #80]	@ (8005484 <mem_malloc+0x1f0>)
 8005432:	480f      	ldr	r0, [pc, #60]	@ (8005470 <mem_malloc+0x1dc>)
 8005434:	f00a f95c 	bl	800f6f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3308      	adds	r3, #8
 800543c:	e00e      	b.n	800545c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800543e:	8bfb      	ldrh	r3, [r7, #30]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fc83 	bl	8004d4c <ptr_to_mem>
 8005446:	4603      	mov	r3, r0
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800544c:	8bfa      	ldrh	r2, [r7, #30]
 800544e:	8bbb      	ldrh	r3, [r7, #28]
 8005450:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005454:	429a      	cmp	r2, r3
 8005456:	f4ff af44 	bcc.w	80052e2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3720      	adds	r7, #32
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20005874 	.word	0x20005874
 8005468:	080105c4 	.word	0x080105c4
 800546c:	0801076c 	.word	0x0801076c
 8005470:	0801060c 	.word	0x0801060c
 8005474:	20005870 	.word	0x20005870
 8005478:	08010780 	.word	0x08010780
 800547c:	0801079c 	.word	0x0801079c
 8005480:	080107cc 	.word	0x080107cc
 8005484:	080107fc 	.word	0x080107fc

08005488 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	3303      	adds	r3, #3
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e011      	b.n	80054ce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4413      	add	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	885b      	ldrh	r3, [r3, #2]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4293      	cmp	r3, r2
 80054d8:	dbe7      	blt.n	80054aa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80054ee:	2300      	movs	r3, #0
 80054f0:	80fb      	strh	r3, [r7, #6]
 80054f2:	e009      	b.n	8005508 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	4a08      	ldr	r2, [pc, #32]	@ (8005518 <memp_init+0x30>)
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ffc3 	bl	8005488 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	3301      	adds	r3, #1
 8005506:	80fb      	strh	r3, [r7, #6]
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b08      	cmp	r3, #8
 800550c:	d9f2      	bls.n	80054f4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800550e:	bf00      	nop
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	08012fe0 	.word	0x08012fe0

0800551c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d012      	beq.n	8005558 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d006      	beq.n	8005554 <do_memp_malloc_pool+0x38>
 8005546:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <do_memp_malloc_pool+0x48>)
 8005548:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800554c:	4906      	ldr	r1, [pc, #24]	@ (8005568 <do_memp_malloc_pool+0x4c>)
 800554e:	4807      	ldr	r0, [pc, #28]	@ (800556c <do_memp_malloc_pool+0x50>)
 8005550:	f00a f8ce 	bl	800f6f0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	e000      	b.n	800555a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	08010820 	.word	0x08010820
 8005568:	08010850 	.word	0x08010850
 800556c:	08010874 	.word	0x08010874

08005570 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <memp_malloc_pool+0x1c>
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <memp_malloc_pool+0x38>)
 8005580:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005584:	4909      	ldr	r1, [pc, #36]	@ (80055ac <memp_malloc_pool+0x3c>)
 8005586:	480a      	ldr	r0, [pc, #40]	@ (80055b0 <memp_malloc_pool+0x40>)
 8005588:	f00a f8b2 	bl	800f6f0 <iprintf>
  if (desc == NULL) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <memp_malloc_pool+0x26>
    return NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	e003      	b.n	800559e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff ffc0 	bl	800551c <do_memp_malloc_pool>
 800559c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	08010820 	.word	0x08010820
 80055ac:	0801089c 	.word	0x0801089c
 80055b0:	08010874 	.word	0x08010874

080055b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d908      	bls.n	80055d6 <memp_malloc+0x22>
 80055c4:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <memp_malloc+0x3c>)
 80055c6:	f240 1257 	movw	r2, #343	@ 0x157
 80055ca:	490a      	ldr	r1, [pc, #40]	@ (80055f4 <memp_malloc+0x40>)
 80055cc:	480a      	ldr	r0, [pc, #40]	@ (80055f8 <memp_malloc+0x44>)
 80055ce:	f00a f88f 	bl	800f6f0 <iprintf>
 80055d2:	2300      	movs	r3, #0
 80055d4:	e008      	b.n	80055e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	4a08      	ldr	r2, [pc, #32]	@ (80055fc <memp_malloc+0x48>)
 80055da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff ff9c 	bl	800551c <do_memp_malloc_pool>
 80055e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	08010820 	.word	0x08010820
 80055f4:	080108b0 	.word	0x080108b0
 80055f8:	08010874 	.word	0x08010874
 80055fc:	08012fe0 	.word	0x08012fe0

08005600 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d006      	beq.n	8005622 <do_memp_free_pool+0x22>
 8005614:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <do_memp_free_pool+0x40>)
 8005616:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800561a:	490a      	ldr	r1, [pc, #40]	@ (8005644 <do_memp_free_pool+0x44>)
 800561c:	480a      	ldr	r0, [pc, #40]	@ (8005648 <do_memp_free_pool+0x48>)
 800561e:	f00a f867 	bl	800f6f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	08010820 	.word	0x08010820
 8005644:	080108d0 	.word	0x080108d0
 8005648:	08010874 	.word	0x08010874

0800564c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <memp_free_pool+0x1e>
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <memp_free_pool+0x3c>)
 800565e:	f240 1295 	movw	r2, #405	@ 0x195
 8005662:	490a      	ldr	r1, [pc, #40]	@ (800568c <memp_free_pool+0x40>)
 8005664:	480a      	ldr	r0, [pc, #40]	@ (8005690 <memp_free_pool+0x44>)
 8005666:	f00a f843 	bl	800f6f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <memp_free_pool+0x34>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ffc1 	bl	8005600 <do_memp_free_pool>
 800567e:	e000      	b.n	8005682 <memp_free_pool+0x36>
    return;
 8005680:	bf00      	nop
}
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	08010820 	.word	0x08010820
 800568c:	0801089c 	.word	0x0801089c
 8005690:	08010874 	.word	0x08010874

08005694 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	6039      	str	r1, [r7, #0]
 800569e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d907      	bls.n	80056b6 <memp_free+0x22>
 80056a6:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <memp_free+0x44>)
 80056a8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80056ac:	490b      	ldr	r1, [pc, #44]	@ (80056dc <memp_free+0x48>)
 80056ae:	480c      	ldr	r0, [pc, #48]	@ (80056e0 <memp_free+0x4c>)
 80056b0:	f00a f81e 	bl	800f6f0 <iprintf>
 80056b4:	e00c      	b.n	80056d0 <memp_free+0x3c>

  if (mem == NULL) {
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	4a09      	ldr	r2, [pc, #36]	@ (80056e4 <memp_free+0x50>)
 80056c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ff9a 	bl	8005600 <do_memp_free_pool>
 80056cc:	e000      	b.n	80056d0 <memp_free+0x3c>
    return;
 80056ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	08010820 	.word	0x08010820
 80056dc:	080108f0 	.word	0x080108f0
 80056e0:	08010874 	.word	0x08010874
 80056e4:	08012fe0 	.word	0x08012fe0

080056e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <netif_add+0x26>
 800570c:	4b57      	ldr	r3, [pc, #348]	@ (800586c <netif_add+0x174>)
 800570e:	f240 1227 	movw	r2, #295	@ 0x127
 8005712:	4957      	ldr	r1, [pc, #348]	@ (8005870 <netif_add+0x178>)
 8005714:	4857      	ldr	r0, [pc, #348]	@ (8005874 <netif_add+0x17c>)
 8005716:	f009 ffeb 	bl	800f6f0 <iprintf>
 800571a:	2300      	movs	r3, #0
 800571c:	e0a2      	b.n	8005864 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <netif_add+0x3e>
 8005724:	4b51      	ldr	r3, [pc, #324]	@ (800586c <netif_add+0x174>)
 8005726:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800572a:	4953      	ldr	r1, [pc, #332]	@ (8005878 <netif_add+0x180>)
 800572c:	4851      	ldr	r0, [pc, #324]	@ (8005874 <netif_add+0x17c>)
 800572e:	f009 ffdf 	bl	800f6f0 <iprintf>
 8005732:	2300      	movs	r3, #0
 8005734:	e096      	b.n	8005864 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800573c:	4b4f      	ldr	r3, [pc, #316]	@ (800587c <netif_add+0x184>)
 800573e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005746:	4b4d      	ldr	r3, [pc, #308]	@ (800587c <netif_add+0x184>)
 8005748:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005750:	4b4a      	ldr	r3, [pc, #296]	@ (800587c <netif_add+0x184>)
 8005752:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a45      	ldr	r2, [pc, #276]	@ (8005880 <netif_add+0x188>)
 800576a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005786:	4b3f      	ldr	r3, [pc, #252]	@ (8005884 <netif_add+0x18c>)
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005794:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f913 	bl	80059c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	4798      	blx	r3
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <netif_add+0xba>
    return NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e058      	b.n	8005864 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057b8:	2bff      	cmp	r3, #255	@ 0xff
 80057ba:	d103      	bne.n	80057c4 <netif_add+0xcc>
        netif->num = 0;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80057c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005888 <netif_add+0x190>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e02b      	b.n	8005828 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d106      	bne.n	80057e6 <netif_add+0xee>
 80057d8:	4b24      	ldr	r3, [pc, #144]	@ (800586c <netif_add+0x174>)
 80057da:	f240 128b 	movw	r2, #395	@ 0x18b
 80057de:	492b      	ldr	r1, [pc, #172]	@ (800588c <netif_add+0x194>)
 80057e0:	4824      	ldr	r0, [pc, #144]	@ (8005874 <netif_add+0x17c>)
 80057e2:	f009 ff85 	bl	800f6f0 <iprintf>
        num_netifs++;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	3301      	adds	r3, #1
 80057ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2bff      	cmp	r3, #255	@ 0xff
 80057f0:	dd06      	ble.n	8005800 <netif_add+0x108>
 80057f2:	4b1e      	ldr	r3, [pc, #120]	@ (800586c <netif_add+0x174>)
 80057f4:	f240 128d 	movw	r2, #397	@ 0x18d
 80057f8:	4925      	ldr	r1, [pc, #148]	@ (8005890 <netif_add+0x198>)
 80057fa:	481e      	ldr	r0, [pc, #120]	@ (8005874 <netif_add+0x17c>)
 80057fc:	f009 ff78 	bl	800f6f0 <iprintf>
        if (netif2->num == netif->num) {
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800580c:	429a      	cmp	r2, r3
 800580e:	d108      	bne.n	8005822 <netif_add+0x12a>
          netif->num++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005816:	3301      	adds	r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005820:	e005      	b.n	800582e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1d0      	bne.n	80057d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1be      	bne.n	80057b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800583a:	2bfe      	cmp	r3, #254	@ 0xfe
 800583c:	d103      	bne.n	8005846 <netif_add+0x14e>
    netif_num = 0;
 800583e:	4b11      	ldr	r3, [pc, #68]	@ (8005884 <netif_add+0x18c>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e006      	b.n	8005854 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800584c:	3301      	adds	r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	4b0c      	ldr	r3, [pc, #48]	@ (8005884 <netif_add+0x18c>)
 8005852:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005854:	4b0c      	ldr	r3, [pc, #48]	@ (8005888 <netif_add+0x190>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800585c:	4a0a      	ldr	r2, [pc, #40]	@ (8005888 <netif_add+0x190>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005862:	68fb      	ldr	r3, [r7, #12]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	0801090c 	.word	0x0801090c
 8005870:	080109a0 	.word	0x080109a0
 8005874:	0801095c 	.word	0x0801095c
 8005878:	080109bc 	.word	0x080109bc
 800587c:	08013044 	.word	0x08013044
 8005880:	08005ca3 	.word	0x08005ca3
 8005884:	2000876c 	.word	0x2000876c
 8005888:	20008764 	.word	0x20008764
 800588c:	080109e0 	.word	0x080109e0
 8005890:	080109f4 	.word	0x080109f4

08005894 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 fdf5 	bl	8008490 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f007 fb2b 	bl	800cf04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <netif_do_set_ipaddr+0x20>
 80058ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005940 <netif_do_set_ipaddr+0x88>)
 80058cc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80058d0:	491c      	ldr	r1, [pc, #112]	@ (8005944 <netif_do_set_ipaddr+0x8c>)
 80058d2:	481d      	ldr	r0, [pc, #116]	@ (8005948 <netif_do_set_ipaddr+0x90>)
 80058d4:	f009 ff0c 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <netif_do_set_ipaddr+0x34>
 80058de:	4b18      	ldr	r3, [pc, #96]	@ (8005940 <netif_do_set_ipaddr+0x88>)
 80058e0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80058e4:	4917      	ldr	r1, [pc, #92]	@ (8005944 <netif_do_set_ipaddr+0x8c>)
 80058e6:	4818      	ldr	r0, [pc, #96]	@ (8005948 <netif_do_set_ipaddr+0x90>)
 80058e8:	f009 ff02 	bl	800f6f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3304      	adds	r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d01c      	beq.n	8005934 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3304      	adds	r3, #4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800590a:	f107 0314 	add.w	r3, r7, #20
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ffbf 	bl	8005894 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <netif_do_set_ipaddr+0x6a>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	e000      	b.n	8005924 <netif_do_set_ipaddr+0x6c>
 8005922:	2300      	movs	r3, #0
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005928:	2101      	movs	r1, #1
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f8d2 	bl	8005ad4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	0801090c 	.word	0x0801090c
 8005944:	08010a24 	.word	0x08010a24
 8005948:	0801095c 	.word	0x0801095c

0800594c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3308      	adds	r3, #8
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d00a      	beq.n	800597c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <netif_do_set_netmask+0x26>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	e000      	b.n	8005974 <netif_do_set_netmask+0x28>
 8005972:	2300      	movs	r3, #0
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	330c      	adds	r3, #12
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d00a      	beq.n	80059ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <netif_do_set_gw+0x26>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	e000      	b.n	80059b2 <netif_do_set_gw+0x28>
 80059b0:	2300      	movs	r3, #0
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80059e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a58 <netif_set_addr+0x90>)
 80059e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80059ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <netif_set_addr+0x90>)
 80059f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80059f8:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <netif_set_addr+0x90>)
 80059fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <netif_set_addr+0x42>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <netif_set_addr+0x46>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <netif_set_addr+0x48>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005a18:	f107 0310 	add.w	r3, r7, #16
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff ff49 	bl	80058b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff ff8e 	bl	800594c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff ffa8 	bl	800598a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005a40:	f107 0310 	add.w	r3, r7, #16
 8005a44:	461a      	mov	r2, r3
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff ff35 	bl	80058b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005a4e:	bf00      	nop
 8005a50:	3720      	adds	r7, #32
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	08013044 	.word	0x08013044

08005a5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005a64:	4a04      	ldr	r2, [pc, #16]	@ (8005a78 <netif_set_default+0x1c>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20008768 	.word	0x20008768

08005a7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d107      	bne.n	8005a9a <netif_set_up+0x1e>
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac8 <netif_set_up+0x4c>)
 8005a8c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005a90:	490e      	ldr	r1, [pc, #56]	@ (8005acc <netif_set_up+0x50>)
 8005a92:	480f      	ldr	r0, [pc, #60]	@ (8005ad0 <netif_set_up+0x54>)
 8005a94:	f009 fe2c 	bl	800f6f0 <iprintf>
 8005a98:	e013      	b.n	8005ac2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10c      	bne.n	8005ac2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005aba:	2103      	movs	r1, #3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f809 	bl	8005ad4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	0801090c 	.word	0x0801090c
 8005acc:	08010a94 	.word	0x08010a94
 8005ad0:	0801095c 	.word	0x0801095c

08005ad4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <netif_issue_reports+0x20>
 8005ae6:	4b18      	ldr	r3, [pc, #96]	@ (8005b48 <netif_issue_reports+0x74>)
 8005ae8:	f240 326d 	movw	r2, #877	@ 0x36d
 8005aec:	4917      	ldr	r1, [pc, #92]	@ (8005b4c <netif_issue_reports+0x78>)
 8005aee:	4818      	ldr	r0, [pc, #96]	@ (8005b50 <netif_issue_reports+0x7c>)
 8005af0:	f009 fdfe 	bl	800f6f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01e      	beq.n	8005b40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00e      	beq.n	8005b42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f008 f94d 	bl	800ddd8 <etharp_request>
 8005b3e:	e000      	b.n	8005b42 <netif_issue_reports+0x6e>
    return;
 8005b40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	0801090c 	.word	0x0801090c
 8005b4c:	08010ab0 	.word	0x08010ab0
 8005b50:	0801095c 	.word	0x0801095c

08005b54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d107      	bne.n	8005b72 <netif_set_down+0x1e>
 8005b62:	4b12      	ldr	r3, [pc, #72]	@ (8005bac <netif_set_down+0x58>)
 8005b64:	f240 329b 	movw	r2, #923	@ 0x39b
 8005b68:	4911      	ldr	r1, [pc, #68]	@ (8005bb0 <netif_set_down+0x5c>)
 8005b6a:	4812      	ldr	r0, [pc, #72]	@ (8005bb4 <netif_set_down+0x60>)
 8005b6c:	f009 fdc0 	bl	800f6f0 <iprintf>
 8005b70:	e019      	b.n	8005ba6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f007 fcd7 	bl	800d554 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	0801090c 	.word	0x0801090c
 8005bb0:	08010ad4 	.word	0x08010ad4
 8005bb4:	0801095c 	.word	0x0801095c

08005bb8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d107      	bne.n	8005bd6 <netif_set_link_up+0x1e>
 8005bc6:	4b13      	ldr	r3, [pc, #76]	@ (8005c14 <netif_set_link_up+0x5c>)
 8005bc8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005bcc:	4912      	ldr	r1, [pc, #72]	@ (8005c18 <netif_set_link_up+0x60>)
 8005bce:	4813      	ldr	r0, [pc, #76]	@ (8005c1c <netif_set_link_up+0x64>)
 8005bd0:	f009 fd8e 	bl	800f6f0 <iprintf>
 8005bd4:	e01b      	b.n	8005c0e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d114      	bne.n	8005c0e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bea:	f043 0304 	orr.w	r3, r3, #4
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005bf6:	2103      	movs	r1, #3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff6b 	bl	8005ad4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <netif_set_link_up+0x56>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	0801090c 	.word	0x0801090c
 8005c18:	08010af4 	.word	0x08010af4
 8005c1c:	0801095c 	.word	0x0801095c

08005c20 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d107      	bne.n	8005c3e <netif_set_link_down+0x1e>
 8005c2e:	4b11      	ldr	r3, [pc, #68]	@ (8005c74 <netif_set_link_down+0x54>)
 8005c30:	f240 4206 	movw	r2, #1030	@ 0x406
 8005c34:	4910      	ldr	r1, [pc, #64]	@ (8005c78 <netif_set_link_down+0x58>)
 8005c36:	4811      	ldr	r0, [pc, #68]	@ (8005c7c <netif_set_link_down+0x5c>)
 8005c38:	f009 fd5a 	bl	800f6f0 <iprintf>
 8005c3c:	e017      	b.n	8005c6e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c52:	f023 0304 	bic.w	r3, r3, #4
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <netif_set_link_down+0x4e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	0801090c 	.word	0x0801090c
 8005c78:	08010b18 	.word	0x08010b18
 8005c7c:	0801095c 	.word	0x0801095c

08005c80 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	61da      	str	r2, [r3, #28]
  }
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005cae:	f06f 030b 	mvn.w	r3, #11
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <netif_get_by_index+0x48>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e00c      	b.n	8005cf2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cde:	3301      	adds	r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	79fa      	ldrb	r2, [r7, #7]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d101      	bne.n	8005cec <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	e006      	b.n	8005cfa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ef      	bne.n	8005cd8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20008764 	.word	0x20008764

08005d0c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005d12:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <pbuf_free_ooseq+0x38>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <pbuf_free_ooseq+0x3c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e00a      	b.n	8005d36 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f002 fbef 	bl	800850c <tcp_free_ooseq>
      return;
 8005d2e:	e005      	b.n	8005d3c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f1      	bne.n	8005d20 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	2000876d 	.word	0x2000876d
 8005d48:	2000877c 	.word	0x2000877c

08005d4c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005d50:	4b03      	ldr	r3, [pc, #12]	@ (8005d60 <pbuf_pool_is_empty+0x14>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	2000876d 	.word	0x2000876d

08005d64 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	460b      	mov	r3, r1
 8005d74:	80fb      	strh	r3, [r7, #6]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	88fa      	ldrh	r2, [r7, #6]
 8005d8a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88ba      	ldrh	r2, [r7, #4]
 8005d90:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005d92:	8b3b      	ldrh	r3, [r7, #24]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	7f3a      	ldrb	r2, [r7, #28]
 8005d9e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	73da      	strb	r2, [r3, #15]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08c      	sub	sp, #48	@ 0x30
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	80bb      	strh	r3, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005dce:	887b      	ldrh	r3, [r7, #2]
 8005dd0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005dd4:	d07f      	beq.n	8005ed6 <pbuf_alloc+0x11e>
 8005dd6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005dda:	f300 80c8 	bgt.w	8005f6e <pbuf_alloc+0x1b6>
 8005dde:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005de2:	d010      	beq.n	8005e06 <pbuf_alloc+0x4e>
 8005de4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005de8:	f300 80c1 	bgt.w	8005f6e <pbuf_alloc+0x1b6>
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d002      	beq.n	8005df6 <pbuf_alloc+0x3e>
 8005df0:	2b41      	cmp	r3, #65	@ 0x41
 8005df2:	f040 80bc 	bne.w	8005f6e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005df6:	887a      	ldrh	r2, [r7, #2]
 8005df8:	88bb      	ldrh	r3, [r7, #4]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	f000 f8d1 	bl	8005fa4 <pbuf_alloc_reference>
 8005e02:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005e04:	e0bd      	b.n	8005f82 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005e0e:	88bb      	ldrh	r3, [r7, #4]
 8005e10:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005e12:	2008      	movs	r0, #8
 8005e14:	f7ff fbce 	bl	80055b4 <memp_malloc>
 8005e18:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005e20:	f7ff ff94 	bl	8005d4c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005e2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e2c:	f000 faa8 	bl	8006380 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e0a7      	b.n	8005f84 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005e34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e36:	3303      	adds	r3, #3
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8b7a      	ldrh	r2, [r7, #26]
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	bf28      	it	cs
 8005e4c:	4613      	movcs	r3, r2
 8005e4e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005e50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e52:	3310      	adds	r3, #16
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	3303      	adds	r3, #3
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	4618      	mov	r0, r3
 8005e60:	89f9      	ldrh	r1, [r7, #14]
 8005e62:	8b7a      	ldrh	r2, [r7, #26]
 8005e64:	2300      	movs	r3, #0
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	887b      	ldrh	r3, [r7, #2]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4601      	mov	r1, r0
 8005e70:	6938      	ldr	r0, [r7, #16]
 8005e72:	f7ff ff77 	bl	8005d64 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <pbuf_alloc+0xd8>
 8005e82:	4b42      	ldr	r3, [pc, #264]	@ (8005f8c <pbuf_alloc+0x1d4>)
 8005e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e88:	4941      	ldr	r1, [pc, #260]	@ (8005f90 <pbuf_alloc+0x1d8>)
 8005e8a:	4842      	ldr	r0, [pc, #264]	@ (8005f94 <pbuf_alloc+0x1dc>)
 8005e8c:	f009 fc30 	bl	800f6f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005e90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e92:	3303      	adds	r3, #3
 8005e94:	f023 0303 	bic.w	r3, r3, #3
 8005e98:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005e9c:	d106      	bne.n	8005eac <pbuf_alloc+0xf4>
 8005e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005f8c <pbuf_alloc+0x1d4>)
 8005ea0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005ea4:	493c      	ldr	r1, [pc, #240]	@ (8005f98 <pbuf_alloc+0x1e0>)
 8005ea6:	483b      	ldr	r0, [pc, #236]	@ (8005f94 <pbuf_alloc+0x1dc>)
 8005ea8:	f009 fc22 	bl	800f6f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb6:	e002      	b.n	8005ebe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005ec2:	8b7a      	ldrh	r2, [r7, #26]
 8005ec4:	89fb      	ldrh	r3, [r7, #14]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8005ece:	8b7b      	ldrh	r3, [r7, #26]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d19e      	bne.n	8005e12 <pbuf_alloc+0x5a>
      break;
 8005ed4:	e055      	b.n	8005f82 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005ed6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ed8:	3303      	adds	r3, #3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f023 0303 	bic.w	r3, r3, #3
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	88bb      	ldrh	r3, [r7, #4]
 8005ee4:	3303      	adds	r3, #3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f023 0303 	bic.w	r3, r3, #3
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005ef2:	8b3b      	ldrh	r3, [r7, #24]
 8005ef4:	3310      	adds	r3, #16
 8005ef6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ef8:	8b3a      	ldrh	r2, [r7, #24]
 8005efa:	88bb      	ldrh	r3, [r7, #4]
 8005efc:	3303      	adds	r3, #3
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d306      	bcc.n	8005f14 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005f06:	8afa      	ldrh	r2, [r7, #22]
 8005f08:	88bb      	ldrh	r3, [r7, #4]
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d201      	bcs.n	8005f18 <pbuf_alloc+0x160>
        return NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e035      	b.n	8005f84 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005f18:	8afb      	ldrh	r3, [r7, #22]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff f9ba 	bl	8005294 <mem_malloc>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <pbuf_alloc+0x174>
        return NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e02b      	b.n	8005f84 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005f2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f2e:	3310      	adds	r3, #16
 8005f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f32:	4413      	add	r3, r2
 8005f34:	3303      	adds	r3, #3
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	88b9      	ldrh	r1, [r7, #4]
 8005f3e:	88ba      	ldrh	r2, [r7, #4]
 8005f40:	2300      	movs	r3, #0
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f4e:	f7ff ff09 	bl	8005d64 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d010      	beq.n	8005f80 <pbuf_alloc+0x1c8>
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <pbuf_alloc+0x1d4>)
 8005f60:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005f64:	490d      	ldr	r1, [pc, #52]	@ (8005f9c <pbuf_alloc+0x1e4>)
 8005f66:	480b      	ldr	r0, [pc, #44]	@ (8005f94 <pbuf_alloc+0x1dc>)
 8005f68:	f009 fbc2 	bl	800f6f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005f6c:	e008      	b.n	8005f80 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005f6e:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <pbuf_alloc+0x1d4>)
 8005f70:	f240 1227 	movw	r2, #295	@ 0x127
 8005f74:	490a      	ldr	r1, [pc, #40]	@ (8005fa0 <pbuf_alloc+0x1e8>)
 8005f76:	4807      	ldr	r0, [pc, #28]	@ (8005f94 <pbuf_alloc+0x1dc>)
 8005f78:	f009 fbba 	bl	800f6f0 <iprintf>
      return NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e001      	b.n	8005f84 <pbuf_alloc+0x1cc>
      break;
 8005f80:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3728      	adds	r7, #40	@ 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08010b3c 	.word	0x08010b3c
 8005f90:	08010b6c 	.word	0x08010b6c
 8005f94:	08010b9c 	.word	0x08010b9c
 8005f98:	08010bc4 	.word	0x08010bc4
 8005f9c:	08010bf8 	.word	0x08010bf8
 8005fa0:	08010c24 	.word	0x08010c24

08005fa4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005fb4:	883b      	ldrh	r3, [r7, #0]
 8005fb6:	2b41      	cmp	r3, #65	@ 0x41
 8005fb8:	d009      	beq.n	8005fce <pbuf_alloc_reference+0x2a>
 8005fba:	883b      	ldrh	r3, [r7, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d006      	beq.n	8005fce <pbuf_alloc_reference+0x2a>
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006000 <pbuf_alloc_reference+0x5c>)
 8005fc2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005fc6:	490f      	ldr	r1, [pc, #60]	@ (8006004 <pbuf_alloc_reference+0x60>)
 8005fc8:	480f      	ldr	r0, [pc, #60]	@ (8006008 <pbuf_alloc_reference+0x64>)
 8005fca:	f009 fb91 	bl	800f6f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005fce:	2007      	movs	r0, #7
 8005fd0:	f7ff faf0 	bl	80055b4 <memp_malloc>
 8005fd4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e00b      	b.n	8005ff8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005fe0:	8879      	ldrh	r1, [r7, #2]
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	883b      	ldrh	r3, [r7, #0]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	460b      	mov	r3, r1
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff feb7 	bl	8005d64 <pbuf_init_alloced_pbuf>
  return p;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	08010b3c 	.word	0x08010b3c
 8006004:	08010c40 	.word	0x08010c40
 8006008:	08010b9c 	.word	0x08010b9c

0800600c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8
 8006012:	607b      	str	r3, [r7, #4]
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	460b      	mov	r3, r1
 800601a:	81bb      	strh	r3, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006024:	8a7b      	ldrh	r3, [r7, #18]
 8006026:	3303      	adds	r3, #3
 8006028:	f023 0203 	bic.w	r2, r3, #3
 800602c:	89bb      	ldrh	r3, [r7, #12]
 800602e:	441a      	add	r2, r3
 8006030:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006032:	429a      	cmp	r2, r3
 8006034:	d901      	bls.n	800603a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	e018      	b.n	800606c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006040:	8a7b      	ldrh	r3, [r7, #18]
 8006042:	3303      	adds	r3, #3
 8006044:	f023 0303 	bic.w	r3, r3, #3
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	4413      	add	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e001      	b.n	8006054 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	89b9      	ldrh	r1, [r7, #12]
 8006058:	89ba      	ldrh	r2, [r7, #12]
 800605a:	2302      	movs	r3, #2
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	897b      	ldrh	r3, [r7, #10]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	460b      	mov	r3, r1
 8006064:	6979      	ldr	r1, [r7, #20]
 8006066:	f7ff fe7d 	bl	8005d64 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800606a:	687b      	ldr	r3, [r7, #4]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <pbuf_realloc+0x20>
 8006086:	4b3a      	ldr	r3, [pc, #232]	@ (8006170 <pbuf_realloc+0xfc>)
 8006088:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800608c:	4939      	ldr	r1, [pc, #228]	@ (8006174 <pbuf_realloc+0x100>)
 800608e:	483a      	ldr	r0, [pc, #232]	@ (8006178 <pbuf_realloc+0x104>)
 8006090:	f009 fb2e 	bl	800f6f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	891b      	ldrh	r3, [r3, #8]
 8006098:	887a      	ldrh	r2, [r7, #2]
 800609a:	429a      	cmp	r2, r3
 800609c:	d263      	bcs.n	8006166 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	891a      	ldrh	r2, [r3, #8]
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80060a8:	887b      	ldrh	r3, [r7, #2]
 80060aa:	817b      	strh	r3, [r7, #10]
  q = p;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80060b0:	e018      	b.n	80060e4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	895b      	ldrh	r3, [r3, #10]
 80060b6:	897a      	ldrh	r2, [r7, #10]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	891a      	ldrh	r2, [r3, #8]
 80060c0:	893b      	ldrh	r3, [r7, #8]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <pbuf_realloc+0x70>
 80060d6:	4b26      	ldr	r3, [pc, #152]	@ (8006170 <pbuf_realloc+0xfc>)
 80060d8:	f240 12af 	movw	r2, #431	@ 0x1af
 80060dc:	4927      	ldr	r1, [pc, #156]	@ (800617c <pbuf_realloc+0x108>)
 80060de:	4826      	ldr	r0, [pc, #152]	@ (8006178 <pbuf_realloc+0x104>)
 80060e0:	f009 fb06 	bl	800f6f0 <iprintf>
  while (rem_len > q->len) {
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	895b      	ldrh	r3, [r3, #10]
 80060e8:	897a      	ldrh	r2, [r7, #10]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d8e1      	bhi.n	80060b2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	7b1b      	ldrb	r3, [r3, #12]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d121      	bne.n	800613e <pbuf_realloc+0xca>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	895b      	ldrh	r3, [r3, #10]
 80060fe:	897a      	ldrh	r2, [r7, #10]
 8006100:	429a      	cmp	r2, r3
 8006102:	d01c      	beq.n	800613e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	7b5b      	ldrb	r3, [r3, #13]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	b29a      	uxth	r2, r3
 800611a:	897b      	ldrh	r3, [r7, #10]
 800611c:	4413      	add	r3, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7fe ffba 	bl	800509c <mem_trim>
 8006128:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <pbuf_realloc+0xca>
 8006130:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <pbuf_realloc+0xfc>)
 8006132:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8006136:	4912      	ldr	r1, [pc, #72]	@ (8006180 <pbuf_realloc+0x10c>)
 8006138:	480f      	ldr	r0, [pc, #60]	@ (8006178 <pbuf_realloc+0x104>)
 800613a:	f009 fad9 	bl	800f6f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	897a      	ldrh	r2, [r7, #10]
 8006142:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	895a      	ldrh	r2, [r3, #10]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f911 	bl	8006380 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e000      	b.n	8006168 <pbuf_realloc+0xf4>
    return;
 8006166:	bf00      	nop

}
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	08010b3c 	.word	0x08010b3c
 8006174:	08010c54 	.word	0x08010c54
 8006178:	08010b9c 	.word	0x08010b9c
 800617c:	08010c6c 	.word	0x08010c6c
 8006180:	08010c84 	.word	0x08010c84

08006184 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <pbuf_add_header_impl+0x22>
 8006198:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <pbuf_add_header_impl+0xc4>)
 800619a:	f240 12df 	movw	r2, #479	@ 0x1df
 800619e:	492b      	ldr	r1, [pc, #172]	@ (800624c <pbuf_add_header_impl+0xc8>)
 80061a0:	482b      	ldr	r0, [pc, #172]	@ (8006250 <pbuf_add_header_impl+0xcc>)
 80061a2:	f009 faa5 	bl	800f6f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <pbuf_add_header_impl+0x30>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b2:	d301      	bcc.n	80061b8 <pbuf_add_header_impl+0x34>
    return 1;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e043      	b.n	8006240 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <pbuf_add_header_impl+0x3e>
    return 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	e03e      	b.n	8006240 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	891a      	ldrh	r2, [r3, #8]
 80061ca:	8a7b      	ldrh	r3, [r7, #18]
 80061cc:	4413      	add	r3, r2
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	8a7a      	ldrh	r2, [r7, #18]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d901      	bls.n	80061da <pbuf_add_header_impl+0x56>
    return 1;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e032      	b.n	8006240 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	7b1b      	ldrb	r3, [r3, #12]
 80061de:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80061e0:	8a3b      	ldrh	r3, [r7, #16]
 80061e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	425b      	negs	r3, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3310      	adds	r3, #16
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d20d      	bcs.n	800621c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006200:	2301      	movs	r3, #1
 8006202:	e01d      	b.n	8006240 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d006      	beq.n	8006218 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	425b      	negs	r3, r3
 8006212:	4413      	add	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e001      	b.n	800621c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006218:	2301      	movs	r3, #1
 800621a:	e011      	b.n	8006240 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	895a      	ldrh	r2, [r3, #10]
 8006226:	8a7b      	ldrh	r3, [r7, #18]
 8006228:	4413      	add	r3, r2
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	891a      	ldrh	r2, [r3, #8]
 8006234:	8a7b      	ldrh	r3, [r7, #18]
 8006236:	4413      	add	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	811a      	strh	r2, [r3, #8]


  return 0;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	08010b3c 	.word	0x08010b3c
 800624c:	08010ca0 	.word	0x08010ca0
 8006250:	08010b9c 	.word	0x08010b9c

08006254 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800625e:	2200      	movs	r2, #0
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff ff8e 	bl	8006184 <pbuf_add_header_impl>
 8006268:	4603      	mov	r3, r0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <pbuf_remove_header+0x1e>
 8006284:	4b20      	ldr	r3, [pc, #128]	@ (8006308 <pbuf_remove_header+0x94>)
 8006286:	f240 224b 	movw	r2, #587	@ 0x24b
 800628a:	4920      	ldr	r1, [pc, #128]	@ (800630c <pbuf_remove_header+0x98>)
 800628c:	4820      	ldr	r0, [pc, #128]	@ (8006310 <pbuf_remove_header+0x9c>)
 800628e:	f009 fa2f 	bl	800f6f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <pbuf_remove_header+0x2c>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800629e:	d301      	bcc.n	80062a4 <pbuf_remove_header+0x30>
    return 1;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e02c      	b.n	80062fe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <pbuf_remove_header+0x3a>
    return 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	e027      	b.n	80062fe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	895b      	ldrh	r3, [r3, #10]
 80062b6:	89fa      	ldrh	r2, [r7, #14]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d908      	bls.n	80062ce <pbuf_remove_header+0x5a>
 80062bc:	4b12      	ldr	r3, [pc, #72]	@ (8006308 <pbuf_remove_header+0x94>)
 80062be:	f240 2255 	movw	r2, #597	@ 0x255
 80062c2:	4914      	ldr	r1, [pc, #80]	@ (8006314 <pbuf_remove_header+0xa0>)
 80062c4:	4812      	ldr	r0, [pc, #72]	@ (8006310 <pbuf_remove_header+0x9c>)
 80062c6:	f009 fa13 	bl	800f6f0 <iprintf>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e017      	b.n	80062fe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	441a      	add	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	895a      	ldrh	r2, [r3, #10]
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	891a      	ldrh	r2, [r3, #8]
 80062f2:	89fb      	ldrh	r3, [r7, #14]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	08010b3c 	.word	0x08010b3c
 800630c:	08010ca0 	.word	0x08010ca0
 8006310:	08010b9c 	.word	0x08010b9c
 8006314:	08010cac 	.word	0x08010cac

08006318 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	807b      	strh	r3, [r7, #2]
 8006324:	4613      	mov	r3, r2
 8006326:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006328:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800632c:	2b00      	cmp	r3, #0
 800632e:	da08      	bge.n	8006342 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006330:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006334:	425b      	negs	r3, r3
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ff9b 	bl	8006274 <pbuf_remove_header>
 800633e:	4603      	mov	r3, r0
 8006340:	e007      	b.n	8006352 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006342:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006346:	787a      	ldrb	r2, [r7, #1]
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff ff1a 	bl	8006184 <pbuf_add_header_impl>
 8006350:	4603      	mov	r3, r0
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006366:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800636a:	2201      	movs	r2, #1
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ffd2 	bl	8006318 <pbuf_header_impl>
 8006374:	4603      	mov	r3, r0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <pbuf_free+0x22>
 8006394:	4b38      	ldr	r3, [pc, #224]	@ (8006478 <pbuf_free+0xf8>)
 8006396:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800639a:	4938      	ldr	r1, [pc, #224]	@ (800647c <pbuf_free+0xfc>)
 800639c:	4838      	ldr	r0, [pc, #224]	@ (8006480 <pbuf_free+0x100>)
 800639e:	f009 f9a7 	bl	800f6f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e063      	b.n	800646e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80063aa:	e05c      	b.n	8006466 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7b9b      	ldrb	r3, [r3, #14]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <pbuf_free+0x42>
 80063b4:	4b30      	ldr	r3, [pc, #192]	@ (8006478 <pbuf_free+0xf8>)
 80063b6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80063ba:	4932      	ldr	r1, [pc, #200]	@ (8006484 <pbuf_free+0x104>)
 80063bc:	4830      	ldr	r0, [pc, #192]	@ (8006480 <pbuf_free+0x100>)
 80063be:	f009 f997 	bl	800f6f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7b9b      	ldrb	r3, [r3, #14]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	739a      	strb	r2, [r3, #14]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	7b9b      	ldrb	r3, [r3, #14]
 80063d2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80063d4:	7dbb      	ldrb	r3, [r7, #22]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d143      	bne.n	8006462 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	7b1b      	ldrb	r3, [r3, #12]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	7b5b      	ldrb	r3, [r3, #13]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d011      	beq.n	800641a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <pbuf_free+0x90>
 8006402:	4b1d      	ldr	r3, [pc, #116]	@ (8006478 <pbuf_free+0xf8>)
 8006404:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8006408:	491f      	ldr	r1, [pc, #124]	@ (8006488 <pbuf_free+0x108>)
 800640a:	481d      	ldr	r0, [pc, #116]	@ (8006480 <pbuf_free+0x100>)
 800640c:	f009 f970 	bl	800f6f0 <iprintf>
        pc->custom_free_function(p);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	4798      	blx	r3
 8006418:	e01d      	b.n	8006456 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d104      	bne.n	800642a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	2008      	movs	r0, #8
 8006424:	f7ff f936 	bl	8005694 <memp_free>
 8006428:	e015      	b.n	8006456 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d104      	bne.n	800643a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	2007      	movs	r0, #7
 8006434:	f7ff f92e 	bl	8005694 <memp_free>
 8006438:	e00d      	b.n	8006456 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <pbuf_free+0xc8>
          mem_free(p);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fe fdc1 	bl	8004fc8 <mem_free>
 8006446:	e006      	b.n	8006456 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006448:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <pbuf_free+0xf8>)
 800644a:	f240 320f 	movw	r2, #783	@ 0x30f
 800644e:	490f      	ldr	r1, [pc, #60]	@ (800648c <pbuf_free+0x10c>)
 8006450:	480b      	ldr	r0, [pc, #44]	@ (8006480 <pbuf_free+0x100>)
 8006452:	f009 f94d 	bl	800f6f0 <iprintf>
        }
      }
      count++;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	3301      	adds	r3, #1
 800645a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	607b      	str	r3, [r7, #4]
 8006460:	e001      	b.n	8006466 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d19f      	bne.n	80063ac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	08010b3c 	.word	0x08010b3c
 800647c:	08010ca0 	.word	0x08010ca0
 8006480:	08010b9c 	.word	0x08010b9c
 8006484:	08010ccc 	.word	0x08010ccc
 8006488:	08010ce4 	.word	0x08010ce4
 800648c:	08010d08 	.word	0x08010d08

08006490 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800649c:	e005      	b.n	80064aa <pbuf_clen+0x1a>
    ++len;
 800649e:	89fb      	ldrh	r3, [r7, #14]
 80064a0:	3301      	adds	r3, #1
 80064a2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f6      	bne.n	800649e <pbuf_clen+0xe>
  }
  return len;
 80064b0:	89fb      	ldrh	r3, [r7, #14]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d010      	beq.n	80064f0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7b9b      	ldrb	r3, [r3, #14]
 80064d2:	3301      	adds	r3, #1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	7b9b      	ldrb	r3, [r3, #14]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <pbuf_ref+0x30>
 80064e2:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <pbuf_ref+0x38>)
 80064e4:	f240 3242 	movw	r2, #834	@ 0x342
 80064e8:	4904      	ldr	r1, [pc, #16]	@ (80064fc <pbuf_ref+0x3c>)
 80064ea:	4805      	ldr	r0, [pc, #20]	@ (8006500 <pbuf_ref+0x40>)
 80064ec:	f009 f900 	bl	800f6f0 <iprintf>
  }
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	08010b3c 	.word	0x08010b3c
 80064fc:	08010d1c 	.word	0x08010d1c
 8006500:	08010b9c 	.word	0x08010b9c

08006504 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <pbuf_cat+0x16>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d107      	bne.n	800652a <pbuf_cat+0x26>
 800651a:	4b20      	ldr	r3, [pc, #128]	@ (800659c <pbuf_cat+0x98>)
 800651c:	f240 3259 	movw	r2, #857	@ 0x359
 8006520:	491f      	ldr	r1, [pc, #124]	@ (80065a0 <pbuf_cat+0x9c>)
 8006522:	4820      	ldr	r0, [pc, #128]	@ (80065a4 <pbuf_cat+0xa0>)
 8006524:	f009 f8e4 	bl	800f6f0 <iprintf>
 8006528:	e034      	b.n	8006594 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e00a      	b.n	8006546 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	891a      	ldrh	r2, [r3, #8]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	891b      	ldrh	r3, [r3, #8]
 8006538:	4413      	add	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	891a      	ldrh	r2, [r3, #8]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	895b      	ldrh	r3, [r3, #10]
 8006556:	429a      	cmp	r2, r3
 8006558:	d006      	beq.n	8006568 <pbuf_cat+0x64>
 800655a:	4b10      	ldr	r3, [pc, #64]	@ (800659c <pbuf_cat+0x98>)
 800655c:	f240 3262 	movw	r2, #866	@ 0x362
 8006560:	4911      	ldr	r1, [pc, #68]	@ (80065a8 <pbuf_cat+0xa4>)
 8006562:	4810      	ldr	r0, [pc, #64]	@ (80065a4 <pbuf_cat+0xa0>)
 8006564:	f009 f8c4 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d006      	beq.n	800657e <pbuf_cat+0x7a>
 8006570:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <pbuf_cat+0x98>)
 8006572:	f240 3263 	movw	r2, #867	@ 0x363
 8006576:	490d      	ldr	r1, [pc, #52]	@ (80065ac <pbuf_cat+0xa8>)
 8006578:	480a      	ldr	r0, [pc, #40]	@ (80065a4 <pbuf_cat+0xa0>)
 800657a:	f009 f8b9 	bl	800f6f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	891a      	ldrh	r2, [r3, #8]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	891b      	ldrh	r3, [r3, #8]
 8006586:	4413      	add	r3, r2
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	08010b3c 	.word	0x08010b3c
 80065a0:	08010d30 	.word	0x08010d30
 80065a4:	08010b9c 	.word	0x08010b9c
 80065a8:	08010d68 	.word	0x08010d68
 80065ac:	08010d98 	.word	0x08010d98

080065b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff ffa1 	bl	8006504 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80065c2:	6838      	ldr	r0, [r7, #0]
 80065c4:	f7ff ff7c 	bl	80064c0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d008      	beq.n	80065fa <pbuf_copy+0x2a>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <pbuf_copy+0x2a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	891a      	ldrh	r2, [r3, #8]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	891b      	ldrh	r3, [r3, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d209      	bcs.n	800660e <pbuf_copy+0x3e>
 80065fa:	4b57      	ldr	r3, [pc, #348]	@ (8006758 <pbuf_copy+0x188>)
 80065fc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006600:	4956      	ldr	r1, [pc, #344]	@ (800675c <pbuf_copy+0x18c>)
 8006602:	4857      	ldr	r0, [pc, #348]	@ (8006760 <pbuf_copy+0x190>)
 8006604:	f009 f874 	bl	800f6f0 <iprintf>
 8006608:	f06f 030f 	mvn.w	r3, #15
 800660c:	e09f      	b.n	800674e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	895b      	ldrh	r3, [r3, #10]
 8006612:	461a      	mov	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	895b      	ldrh	r3, [r3, #10]
 800661c:	4619      	mov	r1, r3
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1acb      	subs	r3, r1, r3
 8006622:	429a      	cmp	r2, r3
 8006624:	d306      	bcc.n	8006634 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	895b      	ldrh	r3, [r3, #10]
 800662a:	461a      	mov	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e005      	b.n	8006640 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	895b      	ldrh	r3, [r3, #10]
 8006638:	461a      	mov	r2, r3
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	18d0      	adds	r0, r2, r3
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4619      	mov	r1, r3
 8006654:	f009 f927 	bl	800f8a6 <memcpy>
    offset_to += len;
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	895b      	ldrh	r3, [r3, #10]
 800666c:	461a      	mov	r2, r3
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	4293      	cmp	r3, r2
 8006672:	d906      	bls.n	8006682 <pbuf_copy+0xb2>
 8006674:	4b38      	ldr	r3, [pc, #224]	@ (8006758 <pbuf_copy+0x188>)
 8006676:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800667a:	493a      	ldr	r1, [pc, #232]	@ (8006764 <pbuf_copy+0x194>)
 800667c:	4838      	ldr	r0, [pc, #224]	@ (8006760 <pbuf_copy+0x190>)
 800667e:	f009 f837 	bl	800f6f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	895b      	ldrh	r3, [r3, #10]
 8006686:	461a      	mov	r2, r3
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4293      	cmp	r3, r2
 800668c:	d906      	bls.n	800669c <pbuf_copy+0xcc>
 800668e:	4b32      	ldr	r3, [pc, #200]	@ (8006758 <pbuf_copy+0x188>)
 8006690:	f240 32da 	movw	r2, #986	@ 0x3da
 8006694:	4934      	ldr	r1, [pc, #208]	@ (8006768 <pbuf_copy+0x198>)
 8006696:	4832      	ldr	r0, [pc, #200]	@ (8006760 <pbuf_copy+0x190>)
 8006698:	f009 f82a 	bl	800f6f0 <iprintf>
    if (offset_from >= p_from->len) {
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	895b      	ldrh	r3, [r3, #10]
 80066a0:	461a      	mov	r2, r3
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d304      	bcc.n	80066b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	895b      	ldrh	r3, [r3, #10]
 80066b6:	461a      	mov	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d114      	bne.n	80066e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10c      	bne.n	80066e8 <pbuf_copy+0x118>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <pbuf_copy+0x118>
 80066d4:	4b20      	ldr	r3, [pc, #128]	@ (8006758 <pbuf_copy+0x188>)
 80066d6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80066da:	4924      	ldr	r1, [pc, #144]	@ (800676c <pbuf_copy+0x19c>)
 80066dc:	4820      	ldr	r0, [pc, #128]	@ (8006760 <pbuf_copy+0x190>)
 80066de:	f009 f807 	bl	800f6f0 <iprintf>
 80066e2:	f06f 030f 	mvn.w	r3, #15
 80066e6:	e032      	b.n	800674e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d013      	beq.n	8006716 <pbuf_copy+0x146>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	895a      	ldrh	r2, [r3, #10]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	891b      	ldrh	r3, [r3, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d10d      	bne.n	8006716 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <pbuf_copy+0x146>
 8006702:	4b15      	ldr	r3, [pc, #84]	@ (8006758 <pbuf_copy+0x188>)
 8006704:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006708:	4919      	ldr	r1, [pc, #100]	@ (8006770 <pbuf_copy+0x1a0>)
 800670a:	4815      	ldr	r0, [pc, #84]	@ (8006760 <pbuf_copy+0x190>)
 800670c:	f008 fff0 	bl	800f6f0 <iprintf>
 8006710:	f06f 0305 	mvn.w	r3, #5
 8006714:	e01b      	b.n	800674e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <pbuf_copy+0x174>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	895a      	ldrh	r2, [r3, #10]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	891b      	ldrh	r3, [r3, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	d10d      	bne.n	8006744 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <pbuf_copy+0x174>
 8006730:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <pbuf_copy+0x188>)
 8006732:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006736:	490e      	ldr	r1, [pc, #56]	@ (8006770 <pbuf_copy+0x1a0>)
 8006738:	4809      	ldr	r0, [pc, #36]	@ (8006760 <pbuf_copy+0x190>)
 800673a:	f008 ffd9 	bl	800f6f0 <iprintf>
 800673e:	f06f 0305 	mvn.w	r3, #5
 8006742:	e004      	b.n	800674e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f47f af61 	bne.w	800660e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	08010b3c 	.word	0x08010b3c
 800675c:	08010de4 	.word	0x08010de4
 8006760:	08010b9c 	.word	0x08010b9c
 8006764:	08010e14 	.word	0x08010e14
 8006768:	08010e2c 	.word	0x08010e2c
 800676c:	08010e48 	.word	0x08010e48
 8006770:	08010e58 	.word	0x08010e58

08006774 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4611      	mov	r1, r2
 8006780:	461a      	mov	r2, r3
 8006782:	460b      	mov	r3, r1
 8006784:	80fb      	strh	r3, [r7, #6]
 8006786:	4613      	mov	r3, r2
 8006788:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d108      	bne.n	80067aa <pbuf_copy_partial+0x36>
 8006798:	4b2b      	ldr	r3, [pc, #172]	@ (8006848 <pbuf_copy_partial+0xd4>)
 800679a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800679e:	492b      	ldr	r1, [pc, #172]	@ (800684c <pbuf_copy_partial+0xd8>)
 80067a0:	482b      	ldr	r0, [pc, #172]	@ (8006850 <pbuf_copy_partial+0xdc>)
 80067a2:	f008 ffa5 	bl	800f6f0 <iprintf>
 80067a6:	2300      	movs	r3, #0
 80067a8:	e04a      	b.n	8006840 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d108      	bne.n	80067c2 <pbuf_copy_partial+0x4e>
 80067b0:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <pbuf_copy_partial+0xd4>)
 80067b2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80067b6:	4927      	ldr	r1, [pc, #156]	@ (8006854 <pbuf_copy_partial+0xe0>)
 80067b8:	4825      	ldr	r0, [pc, #148]	@ (8006850 <pbuf_copy_partial+0xdc>)
 80067ba:	f008 ff99 	bl	800f6f0 <iprintf>
 80067be:	2300      	movs	r3, #0
 80067c0:	e03e      	b.n	8006840 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	e034      	b.n	8006832 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80067c8:	88bb      	ldrh	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <pbuf_copy_partial+0x70>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	895b      	ldrh	r3, [r3, #10]
 80067d2:	88ba      	ldrh	r2, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d305      	bcc.n	80067e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	895b      	ldrh	r3, [r3, #10]
 80067dc:	88ba      	ldrh	r2, [r7, #4]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	80bb      	strh	r3, [r7, #4]
 80067e2:	e023      	b.n	800682c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	895a      	ldrh	r2, [r3, #10]
 80067e8:	88bb      	ldrh	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80067ee:	8b3a      	ldrh	r2, [r7, #24]
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d901      	bls.n	80067fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80067fa:	8b7b      	ldrh	r3, [r7, #26]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	18d0      	adds	r0, r2, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	88bb      	ldrh	r3, [r7, #4]
 8006806:	4413      	add	r3, r2
 8006808:	8b3a      	ldrh	r2, [r7, #24]
 800680a:	4619      	mov	r1, r3
 800680c:	f009 f84b 	bl	800f8a6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006810:	8afa      	ldrh	r2, [r7, #22]
 8006812:	8b3b      	ldrh	r3, [r7, #24]
 8006814:	4413      	add	r3, r2
 8006816:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006818:	8b7a      	ldrh	r2, [r7, #26]
 800681a:	8b3b      	ldrh	r3, [r7, #24]
 800681c:	4413      	add	r3, r2
 800681e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006820:	88fa      	ldrh	r2, [r7, #6]
 8006822:	8b3b      	ldrh	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <pbuf_copy_partial+0xca>
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1c4      	bne.n	80067c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800683e:	8afb      	ldrh	r3, [r7, #22]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	08010b3c 	.word	0x08010b3c
 800684c:	08010e84 	.word	0x08010e84
 8006850:	08010b9c 	.word	0x08010b9c
 8006854:	08010ea4 	.word	0x08010ea4

08006858 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	603a      	str	r2, [r7, #0]
 8006862:	71fb      	strb	r3, [r7, #7]
 8006864:	460b      	mov	r3, r1
 8006866:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	8919      	ldrh	r1, [r3, #8]
 800686c:	88ba      	ldrh	r2, [r7, #4]
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff faa1 	bl	8005db8 <pbuf_alloc>
 8006876:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <pbuf_clone+0x2a>
    return NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	e011      	b.n	80068a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fea3 	bl	80065d0 <pbuf_copy>
 800688a:	4603      	mov	r3, r0
 800688c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800688e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d006      	beq.n	80068a4 <pbuf_clone+0x4c>
 8006896:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <pbuf_clone+0x58>)
 8006898:	f240 5224 	movw	r2, #1316	@ 0x524
 800689c:	4905      	ldr	r1, [pc, #20]	@ (80068b4 <pbuf_clone+0x5c>)
 800689e:	4806      	ldr	r0, [pc, #24]	@ (80068b8 <pbuf_clone+0x60>)
 80068a0:	f008 ff26 	bl	800f6f0 <iprintf>
  return q;
 80068a4:	68fb      	ldr	r3, [r7, #12]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	08010b3c 	.word	0x08010b3c
 80068b4:	08010fb0 	.word	0x08010fb0
 80068b8:	08010b9c 	.word	0x08010b9c

080068bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80068c0:	f008 fe16 	bl	800f4f0 <rand>
 80068c4:	4603      	mov	r3, r0
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	4b01      	ldr	r3, [pc, #4]	@ (80068dc <tcp_init+0x20>)
 80068d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000020 	.word	0x20000020

080068e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7d1b      	ldrb	r3, [r3, #20]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d105      	bne.n	80068fc <tcp_free+0x1c>
 80068f0:	4b06      	ldr	r3, [pc, #24]	@ (800690c <tcp_free+0x2c>)
 80068f2:	22d4      	movs	r2, #212	@ 0xd4
 80068f4:	4906      	ldr	r1, [pc, #24]	@ (8006910 <tcp_free+0x30>)
 80068f6:	4807      	ldr	r0, [pc, #28]	@ (8006914 <tcp_free+0x34>)
 80068f8:	f008 fefa 	bl	800f6f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	2001      	movs	r0, #1
 8006900:	f7fe fec8 	bl	8005694 <memp_free>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	0801103c 	.word	0x0801103c
 8006910:	0801106c 	.word	0x0801106c
 8006914:	08011080 	.word	0x08011080

08006918 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	7d1b      	ldrb	r3, [r3, #20]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d105      	bne.n	8006934 <tcp_free_listen+0x1c>
 8006928:	4b06      	ldr	r3, [pc, #24]	@ (8006944 <tcp_free_listen+0x2c>)
 800692a:	22df      	movs	r2, #223	@ 0xdf
 800692c:	4906      	ldr	r1, [pc, #24]	@ (8006948 <tcp_free_listen+0x30>)
 800692e:	4807      	ldr	r0, [pc, #28]	@ (800694c <tcp_free_listen+0x34>)
 8006930:	f008 fede 	bl	800f6f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	2002      	movs	r0, #2
 8006938:	f7fe feac 	bl	8005694 <memp_free>
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	0801103c 	.word	0x0801103c
 8006948:	080110a8 	.word	0x080110a8
 800694c:	08011080 	.word	0x08011080

08006950 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006954:	f001 f85e 	bl	8007a14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006958:	4b07      	ldr	r3, [pc, #28]	@ (8006978 <tcp_tmr+0x28>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <tcp_tmr+0x28>)
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	4b04      	ldr	r3, [pc, #16]	@ (8006978 <tcp_tmr+0x28>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006970:	f000 fd0e 	bl	8007390 <tcp_slowtmr>
  }
}
 8006974:	bf00      	nop
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20008785 	.word	0x20008785

0800697c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <tcp_remove_listener+0x1c>
 800698c:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <tcp_remove_listener+0x48>)
 800698e:	22ff      	movs	r2, #255	@ 0xff
 8006990:	490d      	ldr	r1, [pc, #52]	@ (80069c8 <tcp_remove_listener+0x4c>)
 8006992:	480e      	ldr	r0, [pc, #56]	@ (80069cc <tcp_remove_listener+0x50>)
 8006994:	f008 feac 	bl	800f6f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e00a      	b.n	80069b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d102      	bne.n	80069ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f1      	bne.n	800699e <tcp_remove_listener+0x22>
    }
  }
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	0801103c 	.word	0x0801103c
 80069c8:	080110c4 	.word	0x080110c4
 80069cc:	08011080 	.word	0x08011080

080069d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <tcp_listen_closed+0x1c>
 80069de:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <tcp_listen_closed+0x60>)
 80069e0:	f240 1211 	movw	r2, #273	@ 0x111
 80069e4:	4913      	ldr	r1, [pc, #76]	@ (8006a34 <tcp_listen_closed+0x64>)
 80069e6:	4814      	ldr	r0, [pc, #80]	@ (8006a38 <tcp_listen_closed+0x68>)
 80069e8:	f008 fe82 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7d1b      	ldrb	r3, [r3, #20]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d006      	beq.n	8006a02 <tcp_listen_closed+0x32>
 80069f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a30 <tcp_listen_closed+0x60>)
 80069f6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80069fa:	4910      	ldr	r1, [pc, #64]	@ (8006a3c <tcp_listen_closed+0x6c>)
 80069fc:	480e      	ldr	r0, [pc, #56]	@ (8006a38 <tcp_listen_closed+0x68>)
 80069fe:	f008 fe77 	bl	800f6f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a02:	2301      	movs	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	e00b      	b.n	8006a20 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006a08:	4a0d      	ldr	r2, [pc, #52]	@ (8006a40 <tcp_listen_closed+0x70>)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff ffb1 	bl	800697c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d9f0      	bls.n	8006a08 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	0801103c 	.word	0x0801103c
 8006a34:	080110ec 	.word	0x080110ec
 8006a38:	08011080 	.word	0x08011080
 8006a3c:	080110f8 	.word	0x080110f8
 8006a40:	0801301c 	.word	0x0801301c

08006a44 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006a44:	b5b0      	push	{r4, r5, r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af04      	add	r7, sp, #16
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <tcp_close_shutdown+0x20>
 8006a56:	4b63      	ldr	r3, [pc, #396]	@ (8006be4 <tcp_close_shutdown+0x1a0>)
 8006a58:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006a5c:	4962      	ldr	r1, [pc, #392]	@ (8006be8 <tcp_close_shutdown+0x1a4>)
 8006a5e:	4863      	ldr	r0, [pc, #396]	@ (8006bec <tcp_close_shutdown+0x1a8>)
 8006a60:	f008 fe46 	bl	800f6f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d066      	beq.n	8006b38 <tcp_close_shutdown+0xf4>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7d1b      	ldrb	r3, [r3, #20]
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d003      	beq.n	8006a7a <tcp_close_shutdown+0x36>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7d1b      	ldrb	r3, [r3, #20]
 8006a76:	2b07      	cmp	r3, #7
 8006a78:	d15e      	bne.n	8006b38 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <tcp_close_shutdown+0x48>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a86:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006a8a:	d055      	beq.n	8006b38 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8b5b      	ldrh	r3, [r3, #26]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <tcp_close_shutdown+0x62>
 8006a98:	4b52      	ldr	r3, [pc, #328]	@ (8006be4 <tcp_close_shutdown+0x1a0>)
 8006a9a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8006a9e:	4954      	ldr	r1, [pc, #336]	@ (8006bf0 <tcp_close_shutdown+0x1ac>)
 8006aa0:	4852      	ldr	r0, [pc, #328]	@ (8006bec <tcp_close_shutdown+0x1a8>)
 8006aa2:	f008 fe25 	bl	800f6f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006aae:	687d      	ldr	r5, [r7, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	8ad2      	ldrh	r2, [r2, #22]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	8b09      	ldrh	r1, [r1, #24]
 8006abc:	9102      	str	r1, [sp, #8]
 8006abe:	9201      	str	r2, [sp, #4]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f005 fd85 	bl	800c5d8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fb68 	bl	80081a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006ad4:	4b47      	ldr	r3, [pc, #284]	@ (8006bf4 <tcp_close_shutdown+0x1b0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d105      	bne.n	8006aea <tcp_close_shutdown+0xa6>
 8006ade:	4b45      	ldr	r3, [pc, #276]	@ (8006bf4 <tcp_close_shutdown+0x1b0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4a43      	ldr	r2, [pc, #268]	@ (8006bf4 <tcp_close_shutdown+0x1b0>)
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e013      	b.n	8006b12 <tcp_close_shutdown+0xce>
 8006aea:	4b42      	ldr	r3, [pc, #264]	@ (8006bf4 <tcp_close_shutdown+0x1b0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e00c      	b.n	8006b0c <tcp_close_shutdown+0xc8>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d104      	bne.n	8006b06 <tcp_close_shutdown+0xc2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	60da      	str	r2, [r3, #12]
 8006b04:	e005      	b.n	8006b12 <tcp_close_shutdown+0xce>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1ef      	bne.n	8006af2 <tcp_close_shutdown+0xae>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	4b37      	ldr	r3, [pc, #220]	@ (8006bf8 <tcp_close_shutdown+0x1b4>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006b1e:	4b37      	ldr	r3, [pc, #220]	@ (8006bfc <tcp_close_shutdown+0x1b8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d102      	bne.n	8006b2e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006b28:	f003 fffc 	bl	800ab24 <tcp_trigger_input_pcb_close>
 8006b2c:	e002      	b.n	8006b34 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fed6 	bl	80068e0 <tcp_free>
      }
      return ERR_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	e050      	b.n	8006bda <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d03b      	beq.n	8006bb8 <tcp_close_shutdown+0x174>
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	dc44      	bgt.n	8006bce <tcp_close_shutdown+0x18a>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <tcp_close_shutdown+0x10a>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d02a      	beq.n	8006ba2 <tcp_close_shutdown+0x15e>
 8006b4c:	e03f      	b.n	8006bce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8adb      	ldrh	r3, [r3, #22]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d021      	beq.n	8006b9a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006b56:	4b2a      	ldr	r3, [pc, #168]	@ (8006c00 <tcp_close_shutdown+0x1bc>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d105      	bne.n	8006b6c <tcp_close_shutdown+0x128>
 8006b60:	4b27      	ldr	r3, [pc, #156]	@ (8006c00 <tcp_close_shutdown+0x1bc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	4a26      	ldr	r2, [pc, #152]	@ (8006c00 <tcp_close_shutdown+0x1bc>)
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e013      	b.n	8006b94 <tcp_close_shutdown+0x150>
 8006b6c:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <tcp_close_shutdown+0x1bc>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	e00c      	b.n	8006b8e <tcp_close_shutdown+0x14a>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d104      	bne.n	8006b88 <tcp_close_shutdown+0x144>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	e005      	b.n	8006b94 <tcp_close_shutdown+0x150>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ef      	bne.n	8006b74 <tcp_close_shutdown+0x130>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff fea0 	bl	80068e0 <tcp_free>
      break;
 8006ba0:	e01a      	b.n	8006bd8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff ff14 	bl	80069d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4816      	ldr	r0, [pc, #88]	@ (8006c04 <tcp_close_shutdown+0x1c0>)
 8006bac:	f001 fb4a 	bl	8008244 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff feb1 	bl	8006918 <tcp_free_listen>
      break;
 8006bb6:	e00f      	b.n	8006bd8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	480e      	ldr	r0, [pc, #56]	@ (8006bf4 <tcp_close_shutdown+0x1b0>)
 8006bbc:	f001 fb42 	bl	8008244 <tcp_pcb_remove>
 8006bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <tcp_close_shutdown+0x1b4>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff fe8a 	bl	80068e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006bcc:	e004      	b.n	8006bd8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f81a 	bl	8006c08 <tcp_close_shutdown_fin>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	e000      	b.n	8006bda <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bdb0      	pop	{r4, r5, r7, pc}
 8006be2:	bf00      	nop
 8006be4:	0801103c 	.word	0x0801103c
 8006be8:	08011110 	.word	0x08011110
 8006bec:	08011080 	.word	0x08011080
 8006bf0:	08011130 	.word	0x08011130
 8006bf4:	2000877c 	.word	0x2000877c
 8006bf8:	20008784 	.word	0x20008784
 8006bfc:	200087bc 	.word	0x200087bc
 8006c00:	20008774 	.word	0x20008774
 8006c04:	20008778 	.word	0x20008778

08006c08 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <tcp_close_shutdown_fin+0x1c>
 8006c16:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd0 <tcp_close_shutdown_fin+0xc8>)
 8006c18:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8006c1c:	492d      	ldr	r1, [pc, #180]	@ (8006cd4 <tcp_close_shutdown_fin+0xcc>)
 8006c1e:	482e      	ldr	r0, [pc, #184]	@ (8006cd8 <tcp_close_shutdown_fin+0xd0>)
 8006c20:	f008 fd66 	bl	800f6f0 <iprintf>

  switch (pcb->state) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7d1b      	ldrb	r3, [r3, #20]
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	d020      	beq.n	8006c6e <tcp_close_shutdown_fin+0x66>
 8006c2c:	2b07      	cmp	r3, #7
 8006c2e:	dc2b      	bgt.n	8006c88 <tcp_close_shutdown_fin+0x80>
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d002      	beq.n	8006c3a <tcp_close_shutdown_fin+0x32>
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d00d      	beq.n	8006c54 <tcp_close_shutdown_fin+0x4c>
 8006c38:	e026      	b.n	8006c88 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f004 fdda 	bl	800b7f4 <tcp_send_fin>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11f      	bne.n	8006c8c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2205      	movs	r2, #5
 8006c50:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c52:	e01b      	b.n	8006c8c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f004 fdcd 	bl	800b7f4 <tcp_send_fin>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d114      	bne.n	8006c90 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2205      	movs	r2, #5
 8006c6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c6c:	e010      	b.n	8006c90 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f004 fdc0 	bl	800b7f4 <tcp_send_fin>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2209      	movs	r2, #9
 8006c84:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c86:	e005      	b.n	8006c94 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e01c      	b.n	8006cc6 <tcp_close_shutdown_fin+0xbe>
      break;
 8006c8c:	bf00      	nop
 8006c8e:	e002      	b.n	8006c96 <tcp_close_shutdown_fin+0x8e>
      break;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <tcp_close_shutdown_fin+0x8e>
      break;
 8006c94:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f004 fee6 	bl	800ba70 <tcp_output>
 8006ca4:	e00d      	b.n	8006cc2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	d108      	bne.n	8006cc2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	8b5b      	ldrh	r3, [r3, #26]
 8006cb4:	f043 0308 	orr.w	r3, r3, #8
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e001      	b.n	8006cc6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	0801103c 	.word	0x0801103c
 8006cd4:	080110ec 	.word	0x080110ec
 8006cd8:	08011080 	.word	0x08011080

08006cdc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <tcp_close+0x22>
 8006cea:	4b0f      	ldr	r3, [pc, #60]	@ (8006d28 <tcp_close+0x4c>)
 8006cec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006cf0:	490e      	ldr	r1, [pc, #56]	@ (8006d2c <tcp_close+0x50>)
 8006cf2:	480f      	ldr	r0, [pc, #60]	@ (8006d30 <tcp_close+0x54>)
 8006cf4:	f008 fcfc 	bl	800f6f0 <iprintf>
 8006cf8:	f06f 030f 	mvn.w	r3, #15
 8006cfc:	e00f      	b.n	8006d1e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7d1b      	ldrb	r3, [r3, #20]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d006      	beq.n	8006d14 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8b5b      	ldrh	r3, [r3, #26]
 8006d0a:	f043 0310 	orr.w	r3, r3, #16
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006d14:	2101      	movs	r1, #1
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fe94 	bl	8006a44 <tcp_close_shutdown>
 8006d1c:	4603      	mov	r3, r0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	0801103c 	.word	0x0801103c
 8006d2c:	0801114c 	.word	0x0801114c
 8006d30:	08011080 	.word	0x08011080

08006d34 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08e      	sub	sp, #56	@ 0x38
 8006d38:	af04      	add	r7, sp, #16
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <tcp_abandon+0x20>
 8006d44:	4b52      	ldr	r3, [pc, #328]	@ (8006e90 <tcp_abandon+0x15c>)
 8006d46:	f240 223d 	movw	r2, #573	@ 0x23d
 8006d4a:	4952      	ldr	r1, [pc, #328]	@ (8006e94 <tcp_abandon+0x160>)
 8006d4c:	4852      	ldr	r0, [pc, #328]	@ (8006e98 <tcp_abandon+0x164>)
 8006d4e:	f008 fccf 	bl	800f6f0 <iprintf>
 8006d52:	e099      	b.n	8006e88 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7d1b      	ldrb	r3, [r3, #20]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d106      	bne.n	8006d6a <tcp_abandon+0x36>
 8006d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006e90 <tcp_abandon+0x15c>)
 8006d5e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006d62:	494e      	ldr	r1, [pc, #312]	@ (8006e9c <tcp_abandon+0x168>)
 8006d64:	484c      	ldr	r0, [pc, #304]	@ (8006e98 <tcp_abandon+0x164>)
 8006d66:	f008 fcc3 	bl	800f6f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7d1b      	ldrb	r3, [r3, #20]
 8006d6e:	2b0a      	cmp	r3, #10
 8006d70:	d107      	bne.n	8006d82 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	484a      	ldr	r0, [pc, #296]	@ (8006ea0 <tcp_abandon+0x16c>)
 8006d76:	f001 fa65 	bl	8008244 <tcp_pcb_remove>
    tcp_free(pcb);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fdb0 	bl	80068e0 <tcp_free>
 8006d80:	e082      	b.n	8006e88 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	7d1b      	ldrb	r3, [r3, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d126      	bne.n	8006dfa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8adb      	ldrh	r3, [r3, #22]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d02e      	beq.n	8006e12 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006db4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea4 <tcp_abandon+0x170>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d105      	bne.n	8006dca <tcp_abandon+0x96>
 8006dbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ea4 <tcp_abandon+0x170>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4a37      	ldr	r2, [pc, #220]	@ (8006ea4 <tcp_abandon+0x170>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	e013      	b.n	8006df2 <tcp_abandon+0xbe>
 8006dca:	4b36      	ldr	r3, [pc, #216]	@ (8006ea4 <tcp_abandon+0x170>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	61fb      	str	r3, [r7, #28]
 8006dd0:	e00c      	b.n	8006dec <tcp_abandon+0xb8>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d104      	bne.n	8006de6 <tcp_abandon+0xb2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	60da      	str	r2, [r3, #12]
 8006de4:	e005      	b.n	8006df2 <tcp_abandon+0xbe>
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	61fb      	str	r3, [r7, #28]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1ef      	bne.n	8006dd2 <tcp_abandon+0x9e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	60da      	str	r2, [r3, #12]
 8006df8:	e00b      	b.n	8006e12 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	8adb      	ldrh	r3, [r3, #22]
 8006e02:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4828      	ldr	r0, [pc, #160]	@ (8006ea8 <tcp_abandon+0x174>)
 8006e08:	f001 fa1c 	bl	8008244 <tcp_pcb_remove>
 8006e0c:	4b27      	ldr	r3, [pc, #156]	@ (8006eac <tcp_abandon+0x178>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fed8 	bl	8007bd4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fecf 	bl	8007bd4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fec6 	bl	8007bd4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00e      	beq.n	8006e6c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	8b12      	ldrh	r2, [r2, #24]
 8006e58:	9202      	str	r2, [sp, #8]
 8006e5a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006e5c:	9201      	str	r2, [sp, #4]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	460b      	mov	r3, r1
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	69b9      	ldr	r1, [r7, #24]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f005 fbb6 	bl	800c5d8 <tcp_rst>
    }
    last_state = pcb->state;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7d1b      	ldrb	r3, [r3, #20]
 8006e70:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fd34 	bl	80068e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <tcp_abandon+0x154>
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f06f 010c 	mvn.w	r1, #12
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	4798      	blx	r3
  }
}
 8006e88:	3728      	adds	r7, #40	@ 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	0801103c 	.word	0x0801103c
 8006e94:	08011180 	.word	0x08011180
 8006e98:	08011080 	.word	0x08011080
 8006e9c:	0801119c 	.word	0x0801119c
 8006ea0:	20008780 	.word	0x20008780
 8006ea4:	20008774 	.word	0x20008774
 8006ea8:	2000877c 	.word	0x2000877c
 8006eac:	20008784 	.word	0x20008784

08006eb0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006eb8:	2101      	movs	r1, #1
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff ff3a 	bl	8006d34 <tcp_abandon>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8006fdc <tcp_bind+0x114>)
 8006ee2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <tcp_bind+0x36>
 8006eea:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe0 <tcp_bind+0x118>)
 8006eec:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8006ef0:	493c      	ldr	r1, [pc, #240]	@ (8006fe4 <tcp_bind+0x11c>)
 8006ef2:	483d      	ldr	r0, [pc, #244]	@ (8006fe8 <tcp_bind+0x120>)
 8006ef4:	f008 fbfc 	bl	800f6f0 <iprintf>
 8006ef8:	f06f 030f 	mvn.w	r3, #15
 8006efc:	e06a      	b.n	8006fd4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	7d1b      	ldrb	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <tcp_bind+0x52>
 8006f06:	4b36      	ldr	r3, [pc, #216]	@ (8006fe0 <tcp_bind+0x118>)
 8006f08:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8006f0c:	4937      	ldr	r1, [pc, #220]	@ (8006fec <tcp_bind+0x124>)
 8006f0e:	4836      	ldr	r0, [pc, #216]	@ (8006fe8 <tcp_bind+0x120>)
 8006f10:	f008 fbee 	bl	800f6f0 <iprintf>
 8006f14:	f06f 0305 	mvn.w	r3, #5
 8006f18:	e05c      	b.n	8006fd4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006f20:	f000 f9f0 	bl	8007304 <tcp_new_port>
 8006f24:	4603      	mov	r3, r0
 8006f26:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d135      	bne.n	8006f9a <tcp_bind+0xd2>
      return ERR_BUF;
 8006f2e:	f06f 0301 	mvn.w	r3, #1
 8006f32:	e04f      	b.n	8006fd4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006f34:	2300      	movs	r3, #0
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	e02b      	b.n	8006f92 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff0 <tcp_bind+0x128>)
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	e01e      	b.n	8006f86 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	8adb      	ldrh	r3, [r3, #22]
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d116      	bne.n	8006f80 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006f52:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d010      	beq.n	8006f7a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00c      	beq.n	8006f7a <tcp_bind+0xb2>
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d102      	bne.n	8006f80 <tcp_bind+0xb8>
              return ERR_USE;
 8006f7a:	f06f 0307 	mvn.w	r3, #7
 8006f7e:	e029      	b.n	8006fd4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1dd      	bne.n	8006f48 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	dbcf      	blt.n	8006f3a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <tcp_bind+0xf2>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <tcp_bind+0xec>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	e000      	b.n	8006fb6 <tcp_bind+0xee>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <tcp_bind+0x12c>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	60da      	str	r2, [r3, #12]
 8006fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <tcp_bind+0x12c>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	f005 fcc5 	bl	800c95c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	08013044 	.word	0x08013044
 8006fe0:	0801103c 	.word	0x0801103c
 8006fe4:	080111d0 	.word	0x080111d0
 8006fe8:	08011080 	.word	0x08011080
 8006fec:	080111e8 	.word	0x080111e8
 8006ff0:	0801301c 	.word	0x0801301c
 8006ff4:	20008774 	.word	0x20008774

08006ff8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <tcp_accept_null+0x22>
 800700c:	4b07      	ldr	r3, [pc, #28]	@ (800702c <tcp_accept_null+0x34>)
 800700e:	f240 320f 	movw	r2, #783	@ 0x30f
 8007012:	4907      	ldr	r1, [pc, #28]	@ (8007030 <tcp_accept_null+0x38>)
 8007014:	4807      	ldr	r0, [pc, #28]	@ (8007034 <tcp_accept_null+0x3c>)
 8007016:	f008 fb6b 	bl	800f6f0 <iprintf>

  tcp_abort(pcb);
 800701a:	68b8      	ldr	r0, [r7, #8]
 800701c:	f7ff ff48 	bl	8006eb0 <tcp_abort>

  return ERR_ABRT;
 8007020:	f06f 030c 	mvn.w	r3, #12
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	0801103c 	.word	0x0801103c
 8007030:	08011210 	.word	0x08011210
 8007034:	08011080 	.word	0x08011080

08007038 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	2200      	movs	r2, #0
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f806 	bl	800705c <tcp_listen_with_backlog_and_err>
 8007050:	4603      	mov	r3, r0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	460b      	mov	r3, r1
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <tcp_listen_with_backlog_and_err+0x2c>
 8007074:	4b47      	ldr	r3, [pc, #284]	@ (8007194 <tcp_listen_with_backlog_and_err+0x138>)
 8007076:	f240 3259 	movw	r2, #857	@ 0x359
 800707a:	4947      	ldr	r1, [pc, #284]	@ (8007198 <tcp_listen_with_backlog_and_err+0x13c>)
 800707c:	4847      	ldr	r0, [pc, #284]	@ (800719c <tcp_listen_with_backlog_and_err+0x140>)
 800707e:	f008 fb37 	bl	800f6f0 <iprintf>
 8007082:	23f0      	movs	r3, #240	@ 0xf0
 8007084:	76fb      	strb	r3, [r7, #27]
 8007086:	e079      	b.n	800717c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	7d1b      	ldrb	r3, [r3, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <tcp_listen_with_backlog_and_err+0x48>
 8007090:	4b40      	ldr	r3, [pc, #256]	@ (8007194 <tcp_listen_with_backlog_and_err+0x138>)
 8007092:	f240 325a 	movw	r2, #858	@ 0x35a
 8007096:	4942      	ldr	r1, [pc, #264]	@ (80071a0 <tcp_listen_with_backlog_and_err+0x144>)
 8007098:	4840      	ldr	r0, [pc, #256]	@ (800719c <tcp_listen_with_backlog_and_err+0x140>)
 800709a:	f008 fb29 	bl	800f6f0 <iprintf>
 800709e:	23f1      	movs	r3, #241	@ 0xf1
 80070a0:	76fb      	strb	r3, [r7, #27]
 80070a2:	e06b      	b.n	800717c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	7d1b      	ldrb	r3, [r3, #20]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d104      	bne.n	80070b6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80070b0:	23f7      	movs	r3, #247	@ 0xf7
 80070b2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80070b4:	e062      	b.n	800717c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80070b6:	2002      	movs	r0, #2
 80070b8:	f7fe fa7c 	bl	80055b4 <memp_malloc>
 80070bc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80070c4:	23ff      	movs	r3, #255	@ 0xff
 80070c6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80070c8:	e058      	b.n	800717c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8ada      	ldrh	r2, [r3, #22]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2201      	movs	r2, #1
 80070de:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	7d5a      	ldrb	r2, [r3, #21]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	7a5a      	ldrb	r2, [r3, #9]
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	2200      	movs	r2, #0
 80070f4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	7ada      	ldrb	r2, [r3, #11]
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	7a9a      	ldrb	r2, [r3, #10]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8adb      	ldrh	r3, [r3, #22]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d021      	beq.n	800715a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007116:	4b23      	ldr	r3, [pc, #140]	@ (80071a4 <tcp_listen_with_backlog_and_err+0x148>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	429a      	cmp	r2, r3
 800711e:	d105      	bne.n	800712c <tcp_listen_with_backlog_and_err+0xd0>
 8007120:	4b20      	ldr	r3, [pc, #128]	@ (80071a4 <tcp_listen_with_backlog_and_err+0x148>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	4a1f      	ldr	r2, [pc, #124]	@ (80071a4 <tcp_listen_with_backlog_and_err+0x148>)
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	e013      	b.n	8007154 <tcp_listen_with_backlog_and_err+0xf8>
 800712c:	4b1d      	ldr	r3, [pc, #116]	@ (80071a4 <tcp_listen_with_backlog_and_err+0x148>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	e00c      	b.n	800714e <tcp_listen_with_backlog_and_err+0xf2>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	429a      	cmp	r2, r3
 800713c:	d104      	bne.n	8007148 <tcp_listen_with_backlog_and_err+0xec>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	e005      	b.n	8007154 <tcp_listen_with_backlog_and_err+0xf8>
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ef      	bne.n	8007134 <tcp_listen_with_backlog_and_err+0xd8>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7ff fbc0 	bl	80068e0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4a11      	ldr	r2, [pc, #68]	@ (80071a8 <tcp_listen_with_backlog_and_err+0x14c>)
 8007164:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007166:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <tcp_listen_with_backlog_and_err+0x150>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	4a0f      	ldr	r2, [pc, #60]	@ (80071ac <tcp_listen_with_backlog_and_err+0x150>)
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	f005 fbf2 	bl	800c95c <tcp_timer_needed>
  res = ERR_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7efa      	ldrb	r2, [r7, #27]
 8007186:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007188:	69fb      	ldr	r3, [r7, #28]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	0801103c 	.word	0x0801103c
 8007198:	08011230 	.word	0x08011230
 800719c:	08011080 	.word	0x08011080
 80071a0:	08011260 	.word	0x08011260
 80071a4:	20008774 	.word	0x20008774
 80071a8:	08006ff9 	.word	0x08006ff9
 80071ac:	20008778 	.word	0x20008778

080071b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <tcp_update_rcv_ann_wnd+0x1c>
 80071be:	4b25      	ldr	r3, [pc, #148]	@ (8007254 <tcp_update_rcv_ann_wnd+0xa4>)
 80071c0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80071c4:	4924      	ldr	r1, [pc, #144]	@ (8007258 <tcp_update_rcv_ann_wnd+0xa8>)
 80071c6:	4825      	ldr	r0, [pc, #148]	@ (800725c <tcp_update_rcv_ann_wnd+0xac>)
 80071c8:	f008 fa92 	bl	800f6f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80071d4:	4413      	add	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80071e0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80071e4:	bf28      	it	cs
 80071e6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80071ea:	b292      	uxth	r2, r2
 80071ec:	4413      	add	r3, r2
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	db08      	blt.n	8007208 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	e020      	b.n	800724a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	dd03      	ble.n	800721e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800721c:	e014      	b.n	8007248 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007230:	d306      	bcc.n	8007240 <tcp_update_rcv_ann_wnd+0x90>
 8007232:	4b08      	ldr	r3, [pc, #32]	@ (8007254 <tcp_update_rcv_ann_wnd+0xa4>)
 8007234:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8007238:	4909      	ldr	r1, [pc, #36]	@ (8007260 <tcp_update_rcv_ann_wnd+0xb0>)
 800723a:	4808      	ldr	r0, [pc, #32]	@ (800725c <tcp_update_rcv_ann_wnd+0xac>)
 800723c:	f008 fa58 	bl	800f6f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	b29a      	uxth	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8007248:	2300      	movs	r3, #0
  }
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	0801103c 	.word	0x0801103c
 8007258:	08011298 	.word	0x08011298
 800725c:	08011080 	.word	0x08011080
 8007260:	080112bc 	.word	0x080112bc

08007264 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d107      	bne.n	8007286 <tcp_recved+0x22>
 8007276:	4b1f      	ldr	r3, [pc, #124]	@ (80072f4 <tcp_recved+0x90>)
 8007278:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800727c:	491e      	ldr	r1, [pc, #120]	@ (80072f8 <tcp_recved+0x94>)
 800727e:	481f      	ldr	r0, [pc, #124]	@ (80072fc <tcp_recved+0x98>)
 8007280:	f008 fa36 	bl	800f6f0 <iprintf>
 8007284:	e032      	b.n	80072ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	7d1b      	ldrb	r3, [r3, #20]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d106      	bne.n	800729c <tcp_recved+0x38>
 800728e:	4b19      	ldr	r3, [pc, #100]	@ (80072f4 <tcp_recved+0x90>)
 8007290:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007294:	491a      	ldr	r1, [pc, #104]	@ (8007300 <tcp_recved+0x9c>)
 8007296:	4819      	ldr	r0, [pc, #100]	@ (80072fc <tcp_recved+0x98>)
 8007298:	f008 fa2a 	bl	800f6f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80072a0:	887b      	ldrh	r3, [r7, #2]
 80072a2:	4413      	add	r3, r2
 80072a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80072a6:	89fb      	ldrh	r3, [r7, #14]
 80072a8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80072ac:	d804      	bhi.n	80072b8 <tcp_recved+0x54>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b2:	89fa      	ldrh	r2, [r7, #14]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d204      	bcs.n	80072c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80072be:	851a      	strh	r2, [r3, #40]	@ 0x28
 80072c0:	e002      	b.n	80072c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	89fa      	ldrh	r2, [r7, #14]
 80072c6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ff71 	bl	80071b0 <tcp_update_rcv_ann_wnd>
 80072ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80072d6:	d309      	bcc.n	80072ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8b5b      	ldrh	r3, [r3, #26]
 80072dc:	f043 0302 	orr.w	r3, r3, #2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f004 fbc2 	bl	800ba70 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	0801103c 	.word	0x0801103c
 80072f8:	080112d8 	.word	0x080112d8
 80072fc:	08011080 	.word	0x08011080
 8007300:	080112f0 	.word	0x080112f0

08007304 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800730e:	4b1e      	ldr	r3, [pc, #120]	@ (8007388 <tcp_new_port+0x84>)
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	3301      	adds	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	4b1c      	ldr	r3, [pc, #112]	@ (8007388 <tcp_new_port+0x84>)
 8007318:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800731a:	4b1b      	ldr	r3, [pc, #108]	@ (8007388 <tcp_new_port+0x84>)
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007322:	4293      	cmp	r3, r2
 8007324:	d103      	bne.n	800732e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007326:	4b18      	ldr	r3, [pc, #96]	@ (8007388 <tcp_new_port+0x84>)
 8007328:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800732c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800732e:	2300      	movs	r3, #0
 8007330:	71fb      	strb	r3, [r7, #7]
 8007332:	e01e      	b.n	8007372 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	4a15      	ldr	r2, [pc, #84]	@ (800738c <tcp_new_port+0x88>)
 8007338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	e011      	b.n	8007366 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	8ada      	ldrh	r2, [r3, #22]
 8007346:	4b10      	ldr	r3, [pc, #64]	@ (8007388 <tcp_new_port+0x84>)
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d108      	bne.n	8007360 <tcp_new_port+0x5c>
        n++;
 800734e:	88bb      	ldrh	r3, [r7, #4]
 8007350:	3301      	adds	r3, #1
 8007352:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007354:	88bb      	ldrh	r3, [r7, #4]
 8007356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800735a:	d3d8      	bcc.n	800730e <tcp_new_port+0xa>
          return 0;
 800735c:	2300      	movs	r3, #0
 800735e:	e00d      	b.n	800737c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1ea      	bne.n	8007342 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	3301      	adds	r3, #1
 8007370:	71fb      	strb	r3, [r7, #7]
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d9dd      	bls.n	8007334 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007378:	4b03      	ldr	r3, [pc, #12]	@ (8007388 <tcp_new_port+0x84>)
 800737a:	881b      	ldrh	r3, [r3, #0]
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	20000020 	.word	0x20000020
 800738c:	0801301c 	.word	0x0801301c

08007390 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007390:	b5b0      	push	{r4, r5, r7, lr}
 8007392:	b090      	sub	sp, #64	@ 0x40
 8007394:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800739c:	4b95      	ldr	r3, [pc, #596]	@ (80075f4 <tcp_slowtmr+0x264>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	4a94      	ldr	r2, [pc, #592]	@ (80075f4 <tcp_slowtmr+0x264>)
 80073a4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80073a6:	4b94      	ldr	r3, [pc, #592]	@ (80075f8 <tcp_slowtmr+0x268>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	4b92      	ldr	r3, [pc, #584]	@ (80075f8 <tcp_slowtmr+0x268>)
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	e000      	b.n	80073b6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80073b4:	bf00      	nop
  prev = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80073ba:	4b90      	ldr	r3, [pc, #576]	@ (80075fc <tcp_slowtmr+0x26c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80073c0:	e29f      	b.n	8007902 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c4:	7d1b      	ldrb	r3, [r3, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <tcp_slowtmr+0x48>
 80073ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007600 <tcp_slowtmr+0x270>)
 80073cc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80073d0:	498c      	ldr	r1, [pc, #560]	@ (8007604 <tcp_slowtmr+0x274>)
 80073d2:	488d      	ldr	r0, [pc, #564]	@ (8007608 <tcp_slowtmr+0x278>)
 80073d4:	f008 f98c 	bl	800f6f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	7d1b      	ldrb	r3, [r3, #20]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d106      	bne.n	80073ee <tcp_slowtmr+0x5e>
 80073e0:	4b87      	ldr	r3, [pc, #540]	@ (8007600 <tcp_slowtmr+0x270>)
 80073e2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80073e6:	4989      	ldr	r1, [pc, #548]	@ (800760c <tcp_slowtmr+0x27c>)
 80073e8:	4887      	ldr	r0, [pc, #540]	@ (8007608 <tcp_slowtmr+0x278>)
 80073ea:	f008 f981 	bl	800f6f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80073ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f0:	7d1b      	ldrb	r3, [r3, #20]
 80073f2:	2b0a      	cmp	r3, #10
 80073f4:	d106      	bne.n	8007404 <tcp_slowtmr+0x74>
 80073f6:	4b82      	ldr	r3, [pc, #520]	@ (8007600 <tcp_slowtmr+0x270>)
 80073f8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80073fc:	4984      	ldr	r1, [pc, #528]	@ (8007610 <tcp_slowtmr+0x280>)
 80073fe:	4882      	ldr	r0, [pc, #520]	@ (8007608 <tcp_slowtmr+0x278>)
 8007400:	f008 f976 	bl	800f6f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007406:	7f9a      	ldrb	r2, [r3, #30]
 8007408:	4b7b      	ldr	r3, [pc, #492]	@ (80075f8 <tcp_slowtmr+0x268>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d105      	bne.n	800741c <tcp_slowtmr+0x8c>
      prev = pcb;
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800741a:	e272      	b.n	8007902 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800741c:	4b76      	ldr	r3, [pc, #472]	@ (80075f8 <tcp_slowtmr+0x268>)
 800741e:	781a      	ldrb	r2, [r3, #0]
 8007420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007422:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	7d1b      	ldrb	r3, [r3, #20]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d10a      	bne.n	800744e <tcp_slowtmr+0xbe>
 8007438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800743e:	2b05      	cmp	r3, #5
 8007440:	d905      	bls.n	800744e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007446:	3301      	adds	r3, #1
 8007448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800744c:	e11e      	b.n	800768c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800744e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007450:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007454:	2b0b      	cmp	r3, #11
 8007456:	d905      	bls.n	8007464 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800745c:	3301      	adds	r3, #1
 800745e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007462:	e113      	b.n	800768c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800746a:	2b00      	cmp	r3, #0
 800746c:	d075      	beq.n	800755a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800746e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <tcp_slowtmr+0xf4>
 8007476:	4b62      	ldr	r3, [pc, #392]	@ (8007600 <tcp_slowtmr+0x270>)
 8007478:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800747c:	4965      	ldr	r1, [pc, #404]	@ (8007614 <tcp_slowtmr+0x284>)
 800747e:	4862      	ldr	r0, [pc, #392]	@ (8007608 <tcp_slowtmr+0x278>)
 8007480:	f008 f936 	bl	800f6f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <tcp_slowtmr+0x10a>
 800748c:	4b5c      	ldr	r3, [pc, #368]	@ (8007600 <tcp_slowtmr+0x270>)
 800748e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8007492:	4961      	ldr	r1, [pc, #388]	@ (8007618 <tcp_slowtmr+0x288>)
 8007494:	485c      	ldr	r0, [pc, #368]	@ (8007608 <tcp_slowtmr+0x278>)
 8007496:	f008 f92b 	bl	800f6f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800749a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80074a0:	2b0b      	cmp	r3, #11
 80074a2:	d905      	bls.n	80074b0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80074a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074a8:	3301      	adds	r3, #1
 80074aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80074ae:	e0ed      	b.n	800768c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80074b6:	3b01      	subs	r3, #1
 80074b8:	4a58      	ldr	r2, [pc, #352]	@ (800761c <tcp_slowtmr+0x28c>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074c4:	7c7a      	ldrb	r2, [r7, #17]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d907      	bls.n	80074da <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80074ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074d0:	3301      	adds	r3, #1
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80074da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074e0:	7c7a      	ldrb	r2, [r7, #17]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	f200 80d2 	bhi.w	800768c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80074e8:	2301      	movs	r3, #1
 80074ea:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d108      	bne.n	8007508 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80074f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074f8:	f005 f962 	bl	800c7c0 <tcp_zero_window_probe>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d014      	beq.n	800752c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007502:	2300      	movs	r3, #0
 8007504:	623b      	str	r3, [r7, #32]
 8007506:	e011      	b.n	800752c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800750e:	4619      	mov	r1, r3
 8007510:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007512:	f004 f827 	bl	800b564 <tcp_split_unsent_seg>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d107      	bne.n	800752c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800751c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800751e:	f004 faa7 	bl	800ba70 <tcp_output>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80ac 	beq.w	800768c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007542:	2b06      	cmp	r3, #6
 8007544:	f200 80a2 	bhi.w	800768c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800754e:	3301      	adds	r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007554:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007558:	e098      	b.n	800768c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800755a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007560:	2b00      	cmp	r3, #0
 8007562:	db0f      	blt.n	8007584 <tcp_slowtmr+0x1f4>
 8007564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007566:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800756a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800756e:	4293      	cmp	r3, r2
 8007570:	d008      	beq.n	8007584 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007574:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007578:	b29b      	uxth	r3, r3
 800757a:	3301      	adds	r3, #1
 800757c:	b29b      	uxth	r3, r3
 800757e:	b21a      	sxth	r2, r3
 8007580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007582:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007586:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800758a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007590:	429a      	cmp	r2, r3
 8007592:	db7b      	blt.n	800768c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007596:	f004 fd5f 	bl	800c058 <tcp_rexmit_rto_prepare>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <tcp_slowtmr+0x220>
 80075a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d171      	bne.n	800768c <tcp_slowtmr+0x2fc>
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d06d      	beq.n	800768c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80075b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b2:	7d1b      	ldrb	r3, [r3, #20]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d03a      	beq.n	800762e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075be:	2b0c      	cmp	r3, #12
 80075c0:	bf28      	it	cs
 80075c2:	230c      	movcs	r3, #12
 80075c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80075c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80075cc:	10db      	asrs	r3, r3, #3
 80075ce:	b21b      	sxth	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80075d8:	4413      	add	r3, r2
 80075da:	7efa      	ldrb	r2, [r7, #27]
 80075dc:	4910      	ldr	r1, [pc, #64]	@ (8007620 <tcp_slowtmr+0x290>)
 80075de:	5c8a      	ldrb	r2, [r1, r2]
 80075e0:	4093      	lsls	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80075ea:	4293      	cmp	r3, r2
 80075ec:	dc1a      	bgt.n	8007624 <tcp_slowtmr+0x294>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	b21a      	sxth	r2, r3
 80075f2:	e019      	b.n	8007628 <tcp_slowtmr+0x298>
 80075f4:	20008770 	.word	0x20008770
 80075f8:	20008786 	.word	0x20008786
 80075fc:	2000877c 	.word	0x2000877c
 8007600:	0801103c 	.word	0x0801103c
 8007604:	08011380 	.word	0x08011380
 8007608:	08011080 	.word	0x08011080
 800760c:	080113ac 	.word	0x080113ac
 8007610:	080113d8 	.word	0x080113d8
 8007614:	08011408 	.word	0x08011408
 8007618:	0801143c 	.word	0x0801143c
 800761c:	08013014 	.word	0x08013014
 8007620:	08013004 	.word	0x08013004
 8007624:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800762e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007630:	2200      	movs	r2, #0
 8007632:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007640:	4293      	cmp	r3, r2
 8007642:	bf28      	it	cs
 8007644:	4613      	movcs	r3, r2
 8007646:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007648:	8a7b      	ldrh	r3, [r7, #18]
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007650:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007656:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800765a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	b29b      	uxth	r3, r3
 8007662:	429a      	cmp	r2, r3
 8007664:	d206      	bcs.n	8007674 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007668:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007670:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007676:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007680:	2200      	movs	r2, #0
 8007682:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007686:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007688:	f004 fd56 	bl	800c138 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	7d1b      	ldrb	r3, [r3, #20]
 8007690:	2b06      	cmp	r3, #6
 8007692:	d111      	bne.n	80076b8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8007694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007696:	8b5b      	ldrh	r3, [r3, #26]
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076a0:	4b9d      	ldr	r3, [pc, #628]	@ (8007918 <tcp_slowtmr+0x588>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b28      	cmp	r3, #40	@ 0x28
 80076ac:	d904      	bls.n	80076b8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80076ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076b2:	3301      	adds	r3, #1
 80076b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	7a5b      	ldrb	r3, [r3, #9]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d04c      	beq.n	800775e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80076c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d003      	beq.n	80076d4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80076cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80076d0:	2b07      	cmp	r3, #7
 80076d2:	d144      	bne.n	800775e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076d4:	4b90      	ldr	r3, [pc, #576]	@ (8007918 <tcp_slowtmr+0x588>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80076de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076e4:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80076e8:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80076ec:	498b      	ldr	r1, [pc, #556]	@ (800791c <tcp_slowtmr+0x58c>)
 80076ee:	fba1 1303 	umull	r1, r3, r1, r3
 80076f2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d90a      	bls.n	800770e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80076f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076fc:	3301      	adds	r3, #1
 80076fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007702:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007706:	3301      	adds	r3, #1
 8007708:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800770c:	e027      	b.n	800775e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800770e:	4b82      	ldr	r3, [pc, #520]	@ (8007918 <tcp_slowtmr+0x588>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800771e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007720:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007724:	4618      	mov	r0, r3
 8007726:	4b7e      	ldr	r3, [pc, #504]	@ (8007920 <tcp_slowtmr+0x590>)
 8007728:	fb00 f303 	mul.w	r3, r0, r3
 800772c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800772e:	497b      	ldr	r1, [pc, #492]	@ (800791c <tcp_slowtmr+0x58c>)
 8007730:	fba1 1303 	umull	r1, r3, r1, r3
 8007734:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007736:	429a      	cmp	r2, r3
 8007738:	d911      	bls.n	800775e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800773a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800773c:	f005 f800 	bl	800c740 <tcp_keepalive>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8007746:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800774a:	2b00      	cmp	r3, #0
 800774c:	d107      	bne.n	800775e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007754:	3301      	adds	r3, #1
 8007756:	b2da      	uxtb	r2, r3
 8007758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007762:	2b00      	cmp	r3, #0
 8007764:	d011      	beq.n	800778a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007766:	4b6c      	ldr	r3, [pc, #432]	@ (8007918 <tcp_slowtmr+0x588>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007776:	4619      	mov	r1, r3
 8007778:	460b      	mov	r3, r1
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	440b      	add	r3, r1
 800777e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007780:	429a      	cmp	r2, r3
 8007782:	d302      	bcc.n	800778a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8007784:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007786:	f000 fec1 	bl	800850c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800778a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778c:	7d1b      	ldrb	r3, [r3, #20]
 800778e:	2b03      	cmp	r3, #3
 8007790:	d10b      	bne.n	80077aa <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007792:	4b61      	ldr	r3, [pc, #388]	@ (8007918 <tcp_slowtmr+0x588>)
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b28      	cmp	r3, #40	@ 0x28
 800779e:	d904      	bls.n	80077aa <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80077a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077a4:	3301      	adds	r3, #1
 80077a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80077aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ac:	7d1b      	ldrb	r3, [r3, #20]
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	d10b      	bne.n	80077ca <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077b2:	4b59      	ldr	r3, [pc, #356]	@ (8007918 <tcp_slowtmr+0x588>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2bf0      	cmp	r3, #240	@ 0xf0
 80077be:	d904      	bls.n	80077ca <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80077c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077c4:	3301      	adds	r3, #1
 80077c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80077ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d060      	beq.n	8007894 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80077d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80077da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077dc:	f000 fce2 	bl	80081a4 <tcp_pcb_purge>
      if (prev != NULL) {
 80077e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d010      	beq.n	8007808 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80077e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007924 <tcp_slowtmr+0x594>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d106      	bne.n	80077fe <tcp_slowtmr+0x46e>
 80077f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007928 <tcp_slowtmr+0x598>)
 80077f2:	f240 526d 	movw	r2, #1389	@ 0x56d
 80077f6:	494d      	ldr	r1, [pc, #308]	@ (800792c <tcp_slowtmr+0x59c>)
 80077f8:	484d      	ldr	r0, [pc, #308]	@ (8007930 <tcp_slowtmr+0x5a0>)
 80077fa:	f007 ff79 	bl	800f6f0 <iprintf>
        prev->next = pcb->next;
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	e00f      	b.n	8007828 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007808:	4b46      	ldr	r3, [pc, #280]	@ (8007924 <tcp_slowtmr+0x594>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800780e:	429a      	cmp	r2, r3
 8007810:	d006      	beq.n	8007820 <tcp_slowtmr+0x490>
 8007812:	4b45      	ldr	r3, [pc, #276]	@ (8007928 <tcp_slowtmr+0x598>)
 8007814:	f240 5271 	movw	r2, #1393	@ 0x571
 8007818:	4946      	ldr	r1, [pc, #280]	@ (8007934 <tcp_slowtmr+0x5a4>)
 800781a:	4845      	ldr	r0, [pc, #276]	@ (8007930 <tcp_slowtmr+0x5a0>)
 800781c:	f007 ff68 	bl	800f6f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a3f      	ldr	r2, [pc, #252]	@ (8007924 <tcp_slowtmr+0x594>)
 8007826:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8007828:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800782c:	2b00      	cmp	r3, #0
 800782e:	d013      	beq.n	8007858 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007832:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007836:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007838:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800783a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783c:	3304      	adds	r3, #4
 800783e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007840:	8ad2      	ldrh	r2, [r2, #22]
 8007842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007844:	8b09      	ldrh	r1, [r1, #24]
 8007846:	9102      	str	r1, [sp, #8]
 8007848:	9201      	str	r2, [sp, #4]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	462b      	mov	r3, r5
 800784e:	4622      	mov	r2, r4
 8007850:	4601      	mov	r1, r0
 8007852:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007854:	f004 fec0 	bl	800c5d8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800785e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007860:	7d1b      	ldrb	r3, [r3, #20]
 8007862:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007866:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800786e:	6838      	ldr	r0, [r7, #0]
 8007870:	f7ff f836 	bl	80068e0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007874:	4b30      	ldr	r3, [pc, #192]	@ (8007938 <tcp_slowtmr+0x5a8>)
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <tcp_slowtmr+0x4fa>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f06f 010c 	mvn.w	r1, #12
 8007886:	68b8      	ldr	r0, [r7, #8]
 8007888:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800788a:	4b2b      	ldr	r3, [pc, #172]	@ (8007938 <tcp_slowtmr+0x5a8>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d037      	beq.n	8007902 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8007892:	e590      	b.n	80073b6 <tcp_slowtmr+0x26>
      prev = pcb;
 8007894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007896:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	7f1b      	ldrb	r3, [r3, #28]
 80078a2:	3301      	adds	r3, #1
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	7f1a      	ldrb	r2, [r3, #28]
 80078ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b0:	7f5b      	ldrb	r3, [r3, #29]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d325      	bcc.n	8007902 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80078b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80078bc:	4b1e      	ldr	r3, [pc, #120]	@ (8007938 <tcp_slowtmr+0x5a8>)
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <tcp_slowtmr+0x554>
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078d4:	6912      	ldr	r2, [r2, #16]
 80078d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80078e2:	e002      	b.n	80078ea <tcp_slowtmr+0x55a>
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80078ea:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <tcp_slowtmr+0x5a8>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f47f ad60 	bne.w	80073b4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80078f4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <tcp_slowtmr+0x572>
          tcp_output(prev);
 80078fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078fe:	f004 f8b7 	bl	800ba70 <tcp_output>
  while (pcb != NULL) {
 8007902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f47f ad5c 	bne.w	80073c2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800790e:	4b0b      	ldr	r3, [pc, #44]	@ (800793c <tcp_slowtmr+0x5ac>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007914:	e067      	b.n	80079e6 <tcp_slowtmr+0x656>
 8007916:	bf00      	nop
 8007918:	20008770 	.word	0x20008770
 800791c:	10624dd3 	.word	0x10624dd3
 8007920:	000124f8 	.word	0x000124f8
 8007924:	2000877c 	.word	0x2000877c
 8007928:	0801103c 	.word	0x0801103c
 800792c:	08011474 	.word	0x08011474
 8007930:	08011080 	.word	0x08011080
 8007934:	080114a0 	.word	0x080114a0
 8007938:	20008784 	.word	0x20008784
 800793c:	20008780 	.word	0x20008780
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	7d1b      	ldrb	r3, [r3, #20]
 8007944:	2b0a      	cmp	r3, #10
 8007946:	d006      	beq.n	8007956 <tcp_slowtmr+0x5c6>
 8007948:	4b2b      	ldr	r3, [pc, #172]	@ (80079f8 <tcp_slowtmr+0x668>)
 800794a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800794e:	492b      	ldr	r1, [pc, #172]	@ (80079fc <tcp_slowtmr+0x66c>)
 8007950:	482b      	ldr	r0, [pc, #172]	@ (8007a00 <tcp_slowtmr+0x670>)
 8007952:	f007 fecd 	bl	800f6f0 <iprintf>
    pcb_remove = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800795c:	4b29      	ldr	r3, [pc, #164]	@ (8007a04 <tcp_slowtmr+0x674>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2bf0      	cmp	r3, #240	@ 0xf0
 8007968:	d904      	bls.n	8007974 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800796a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800796e:	3301      	adds	r3, #1
 8007970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007978:	2b00      	cmp	r3, #0
 800797a:	d02f      	beq.n	80079dc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800797c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800797e:	f000 fc11 	bl	80081a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	2b00      	cmp	r3, #0
 8007986:	d010      	beq.n	80079aa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007988:	4b1f      	ldr	r3, [pc, #124]	@ (8007a08 <tcp_slowtmr+0x678>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800798e:	429a      	cmp	r2, r3
 8007990:	d106      	bne.n	80079a0 <tcp_slowtmr+0x610>
 8007992:	4b19      	ldr	r3, [pc, #100]	@ (80079f8 <tcp_slowtmr+0x668>)
 8007994:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007998:	491c      	ldr	r1, [pc, #112]	@ (8007a0c <tcp_slowtmr+0x67c>)
 800799a:	4819      	ldr	r0, [pc, #100]	@ (8007a00 <tcp_slowtmr+0x670>)
 800799c:	f007 fea8 	bl	800f6f0 <iprintf>
        prev->next = pcb->next;
 80079a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	60da      	str	r2, [r3, #12]
 80079a8:	e00f      	b.n	80079ca <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80079aa:	4b17      	ldr	r3, [pc, #92]	@ (8007a08 <tcp_slowtmr+0x678>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d006      	beq.n	80079c2 <tcp_slowtmr+0x632>
 80079b4:	4b10      	ldr	r3, [pc, #64]	@ (80079f8 <tcp_slowtmr+0x668>)
 80079b6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80079ba:	4915      	ldr	r1, [pc, #84]	@ (8007a10 <tcp_slowtmr+0x680>)
 80079bc:	4810      	ldr	r0, [pc, #64]	@ (8007a00 <tcp_slowtmr+0x670>)
 80079be:	f007 fe97 	bl	800f6f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	4a10      	ldr	r2, [pc, #64]	@ (8007a08 <tcp_slowtmr+0x678>)
 80079c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80079ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80079ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80079d4:	69f8      	ldr	r0, [r7, #28]
 80079d6:	f7fe ff83 	bl	80068e0 <tcp_free>
 80079da:	e004      	b.n	80079e6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80079dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80079e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80079e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1a9      	bne.n	8007940 <tcp_slowtmr+0x5b0>
    }
  }
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	3730      	adds	r7, #48	@ 0x30
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bdb0      	pop	{r4, r5, r7, pc}
 80079f6:	bf00      	nop
 80079f8:	0801103c 	.word	0x0801103c
 80079fc:	080114cc 	.word	0x080114cc
 8007a00:	08011080 	.word	0x08011080
 8007a04:	20008770 	.word	0x20008770
 8007a08:	20008780 	.word	0x20008780
 8007a0c:	080114fc 	.word	0x080114fc
 8007a10:	08011524 	.word	0x08011524

08007a14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad0 <tcp_fasttmr+0xbc>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad0 <tcp_fasttmr+0xbc>)
 8007a24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007a26:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad4 <tcp_fasttmr+0xc0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007a2c:	e048      	b.n	8007ac0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7f9a      	ldrb	r2, [r3, #30]
 8007a32:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <tcp_fasttmr+0xbc>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d03f      	beq.n	8007aba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007a3a:	4b25      	ldr	r3, [pc, #148]	@ (8007ad0 <tcp_fasttmr+0xbc>)
 8007a3c:	781a      	ldrb	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8b5b      	ldrh	r3, [r3, #26]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d010      	beq.n	8007a70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	8b5b      	ldrh	r3, [r3, #26]
 8007a52:	f043 0302 	orr.w	r3, r3, #2
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f004 f807 	bl	800ba70 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8b5b      	ldrh	r3, [r3, #26]
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8b5b      	ldrh	r3, [r3, #26]
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8b5b      	ldrh	r3, [r3, #26]
 8007a80:	f023 0308 	bic.w	r3, r3, #8
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff f8bc 	bl	8006c08 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad8 <tcp_fasttmr+0xc4>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f819 	bl	8007adc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <tcp_fasttmr+0xc4>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d000      	beq.n	8007ab4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007ab2:	e7b8      	b.n	8007a26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	e002      	b.n	8007ac0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1b3      	bne.n	8007a2e <tcp_fasttmr+0x1a>
    }
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20008786 	.word	0x20008786
 8007ad4:	2000877c 	.word	0x2000877c
 8007ad8:	20008784 	.word	0x20008784

08007adc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <tcp_process_refused_data+0x22>
 8007aea:	4b37      	ldr	r3, [pc, #220]	@ (8007bc8 <tcp_process_refused_data+0xec>)
 8007aec:	f240 6209 	movw	r2, #1545	@ 0x609
 8007af0:	4936      	ldr	r1, [pc, #216]	@ (8007bcc <tcp_process_refused_data+0xf0>)
 8007af2:	4837      	ldr	r0, [pc, #220]	@ (8007bd0 <tcp_process_refused_data+0xf4>)
 8007af4:	f007 fdfc 	bl	800f6f0 <iprintf>
 8007af8:	f06f 030f 	mvn.w	r3, #15
 8007afc:	e060      	b.n	8007bc0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b02:	7b5b      	ldrb	r3, [r3, #13]
 8007b04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <tcp_process_refused_data+0x58>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6918      	ldr	r0, [r3, #16]
 8007b26:	2300      	movs	r3, #0
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	47a0      	blx	r4
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]
 8007b32:	e007      	b.n	8007b44 <tcp_process_refused_data+0x68>
 8007b34:	2300      	movs	r3, #0
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	f000 f8c2 	bl	8007cc4 <tcp_recv_null>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d12a      	bne.n	8007ba2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d033      	beq.n	8007bbe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007b5e:	d005      	beq.n	8007b6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b64:	3301      	adds	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <tcp_process_refused_data+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6918      	ldr	r0, [r3, #16]
 8007b80:	2300      	movs	r3, #0
 8007b82:	2200      	movs	r2, #0
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	47a0      	blx	r4
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e001      	b.n	8007b92 <tcp_process_refused_data+0xb6>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b96:	f113 0f0d 	cmn.w	r3, #13
 8007b9a:	d110      	bne.n	8007bbe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007b9c:	f06f 030c 	mvn.w	r3, #12
 8007ba0:	e00e      	b.n	8007bc0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ba6:	f113 0f0d 	cmn.w	r3, #13
 8007baa:	d102      	bne.n	8007bb2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007bac:	f06f 030c 	mvn.w	r3, #12
 8007bb0:	e006      	b.n	8007bc0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007bb8:	f06f 0304 	mvn.w	r3, #4
 8007bbc:	e000      	b.n	8007bc0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd90      	pop	{r4, r7, pc}
 8007bc8:	0801103c 	.word	0x0801103c
 8007bcc:	0801154c 	.word	0x0801154c
 8007bd0:	08011080 	.word	0x08011080

08007bd4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007bdc:	e007      	b.n	8007bee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f80a 	bl	8007bfe <tcp_seg_free>
    seg = next;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1f4      	bne.n	8007bde <tcp_segs_free+0xa>
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00c      	beq.n	8007c26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fbb1 	bl	8006380 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	2003      	movs	r0, #3
 8007c22:	f7fd fd37 	bl	8005694 <memp_free>
  }
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <tcp_setprio+0x22>
 8007c42:	4b07      	ldr	r3, [pc, #28]	@ (8007c60 <tcp_setprio+0x30>)
 8007c44:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8007c48:	4906      	ldr	r1, [pc, #24]	@ (8007c64 <tcp_setprio+0x34>)
 8007c4a:	4807      	ldr	r0, [pc, #28]	@ (8007c68 <tcp_setprio+0x38>)
 8007c4c:	f007 fd50 	bl	800f6f0 <iprintf>
 8007c50:	e002      	b.n	8007c58 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	755a      	strb	r2, [r3, #21]
}
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	0801103c 	.word	0x0801103c
 8007c64:	08011574 	.word	0x08011574
 8007c68:	08011080 	.word	0x08011080

08007c6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d106      	bne.n	8007c88 <tcp_seg_copy+0x1c>
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <tcp_seg_copy+0x4c>)
 8007c7c:	f240 6282 	movw	r2, #1666	@ 0x682
 8007c80:	490e      	ldr	r1, [pc, #56]	@ (8007cbc <tcp_seg_copy+0x50>)
 8007c82:	480f      	ldr	r0, [pc, #60]	@ (8007cc0 <tcp_seg_copy+0x54>)
 8007c84:	f007 fd34 	bl	800f6f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007c88:	2003      	movs	r0, #3
 8007c8a:	f7fd fc93 	bl	80055b4 <memp_malloc>
 8007c8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <tcp_seg_copy+0x2e>
    return NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e00a      	b.n	8007cb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007c9a:	2210      	movs	r2, #16
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f007 fe01 	bl	800f8a6 <memcpy>
  pbuf_ref(cseg->p);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fc09 	bl	80064c0 <pbuf_ref>
  return cseg;
 8007cae:	68fb      	ldr	r3, [r7, #12]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	0801103c 	.word	0x0801103c
 8007cbc:	08011590 	.word	0x08011590
 8007cc0:	08011080 	.word	0x08011080

08007cc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <tcp_recv_null+0x28>
 8007cd8:	4b12      	ldr	r3, [pc, #72]	@ (8007d24 <tcp_recv_null+0x60>)
 8007cda:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8007cde:	4912      	ldr	r1, [pc, #72]	@ (8007d28 <tcp_recv_null+0x64>)
 8007ce0:	4812      	ldr	r0, [pc, #72]	@ (8007d2c <tcp_recv_null+0x68>)
 8007ce2:	f007 fd05 	bl	800f6f0 <iprintf>
 8007ce6:	f06f 030f 	mvn.w	r3, #15
 8007cea:	e016      	b.n	8007d1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d009      	beq.n	8007d06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	891b      	ldrh	r3, [r3, #8]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68b8      	ldr	r0, [r7, #8]
 8007cfa:	f7ff fab3 	bl	8007264 <tcp_recved>
    pbuf_free(p);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fe fb3e 	bl	8006380 <pbuf_free>
 8007d04:	e008      	b.n	8007d18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007d0e:	68b8      	ldr	r0, [r7, #8]
 8007d10:	f7fe ffe4 	bl	8006cdc <tcp_close>
 8007d14:	4603      	mov	r3, r0
 8007d16:	e000      	b.n	8007d1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	0801103c 	.word	0x0801103c
 8007d28:	080115ac 	.word	0x080115ac
 8007d2c:	08011080 	.word	0x08011080

08007d30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	db01      	blt.n	8007d46 <tcp_kill_prio+0x16>
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	e000      	b.n	8007d48 <tcp_kill_prio+0x18>
 8007d46:	237f      	movs	r3, #127	@ 0x7f
 8007d48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d034      	beq.n	8007dba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d5e:	4b19      	ldr	r3, [pc, #100]	@ (8007dc4 <tcp_kill_prio+0x94>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	e01f      	b.n	8007da6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	7d5b      	ldrb	r3, [r3, #21]
 8007d6a:	7afa      	ldrb	r2, [r7, #11]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d80c      	bhi.n	8007d8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007d74:	7afa      	ldrb	r2, [r7, #11]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d112      	bne.n	8007da0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007d7a:	4b13      	ldr	r3, [pc, #76]	@ (8007dc8 <tcp_kill_prio+0x98>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d80a      	bhi.n	8007da0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc8 <tcp_kill_prio+0x98>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	7d5b      	ldrb	r3, [r3, #21]
 8007d9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1dc      	bne.n	8007d66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d004      	beq.n	8007dbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007db2:	6938      	ldr	r0, [r7, #16]
 8007db4:	f7ff f87c 	bl	8006eb0 <tcp_abort>
 8007db8:	e000      	b.n	8007dbc <tcp_kill_prio+0x8c>
    return;
 8007dba:	bf00      	nop
  }
}
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	2000877c 	.word	0x2000877c
 8007dc8:	20008770 	.word	0x20008770

08007dcc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007dd6:	79fb      	ldrb	r3, [r7, #7]
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d009      	beq.n	8007df0 <tcp_kill_state+0x24>
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	d006      	beq.n	8007df0 <tcp_kill_state+0x24>
 8007de2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e4c <tcp_kill_state+0x80>)
 8007de4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007de8:	4919      	ldr	r1, [pc, #100]	@ (8007e50 <tcp_kill_state+0x84>)
 8007dea:	481a      	ldr	r0, [pc, #104]	@ (8007e54 <tcp_kill_state+0x88>)
 8007dec:	f007 fc80 	bl	800f6f0 <iprintf>

  inactivity = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007df8:	4b17      	ldr	r3, [pc, #92]	@ (8007e58 <tcp_kill_state+0x8c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	e017      	b.n	8007e30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	7d1b      	ldrb	r3, [r3, #20]
 8007e04:	79fa      	ldrb	r2, [r7, #7]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d10f      	bne.n	8007e2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e0a:	4b14      	ldr	r3, [pc, #80]	@ (8007e5c <tcp_kill_state+0x90>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d807      	bhi.n	8007e2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007e1a:	4b10      	ldr	r3, [pc, #64]	@ (8007e5c <tcp_kill_state+0x90>)
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e4      	bne.n	8007e00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6938      	ldr	r0, [r7, #16]
 8007e40:	f7fe ff78 	bl	8006d34 <tcp_abandon>
  }
}
 8007e44:	bf00      	nop
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	0801103c 	.word	0x0801103c
 8007e50:	080115c8 	.word	0x080115c8
 8007e54:	08011080 	.word	0x08011080
 8007e58:	2000877c 	.word	0x2000877c
 8007e5c:	20008770 	.word	0x20008770

08007e60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e6e:	4b12      	ldr	r3, [pc, #72]	@ (8007eb8 <tcp_kill_timewait+0x58>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e012      	b.n	8007e9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e76:	4b11      	ldr	r3, [pc, #68]	@ (8007ebc <tcp_kill_timewait+0x5c>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d807      	bhi.n	8007e96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007e86:	4b0d      	ldr	r3, [pc, #52]	@ (8007ebc <tcp_kill_timewait+0x5c>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e9      	bne.n	8007e76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ea8:	68b8      	ldr	r0, [r7, #8]
 8007eaa:	f7ff f801 	bl	8006eb0 <tcp_abort>
  }
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20008780 	.word	0x20008780
 8007ebc:	20008770 	.word	0x20008770

08007ec0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007ec6:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <tcp_handle_closepend+0x48>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ecc:	e014      	b.n	8007ef8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8b5b      	ldrh	r3, [r3, #26]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8b5b      	ldrh	r3, [r3, #26]
 8007ee4:	f023 0308 	bic.w	r3, r3, #8
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fe fe8a 	bl	8006c08 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e7      	bne.n	8007ece <tcp_handle_closepend+0xe>
  }
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	2000877c 	.word	0x2000877c

08007f0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f16:	2001      	movs	r0, #1
 8007f18:	f7fd fb4c 	bl	80055b4 <memp_malloc>
 8007f1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d126      	bne.n	8007f72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007f24:	f7ff ffcc 	bl	8007ec0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007f28:	f7ff ff9a 	bl	8007e60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f7fd fb41 	bl	80055b4 <memp_malloc>
 8007f32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d11b      	bne.n	8007f72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007f3a:	2009      	movs	r0, #9
 8007f3c:	f7ff ff46 	bl	8007dcc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f40:	2001      	movs	r0, #1
 8007f42:	f7fd fb37 	bl	80055b4 <memp_malloc>
 8007f46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d111      	bne.n	8007f72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007f4e:	2008      	movs	r0, #8
 8007f50:	f7ff ff3c 	bl	8007dcc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f54:	2001      	movs	r0, #1
 8007f56:	f7fd fb2d 	bl	80055b4 <memp_malloc>
 8007f5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d107      	bne.n	8007f72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff fee3 	bl	8007d30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	f7fd fb22 	bl	80055b4 <memp_malloc>
 8007f70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d03f      	beq.n	8007ff8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007f78:	229c      	movs	r2, #156	@ 0x9c
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f007 fc1c 	bl	800f7ba <memset>
    pcb->prio = prio;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	79fa      	ldrb	r2, [r7, #7]
 8007f86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007f8e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	22ff      	movs	r2, #255	@ 0xff
 8007fa6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007fae:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2206      	movs	r2, #6
 8007fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2206      	movs	r2, #6
 8007fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fc4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <tcp_alloc+0xf8>)
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <tcp_alloc+0xfc>)
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007fe4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4a08      	ldr	r2, [pc, #32]	@ (800800c <tcp_alloc+0x100>)
 8007fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a07      	ldr	r2, [pc, #28]	@ (8008010 <tcp_alloc+0x104>)
 8007ff4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20008770 	.word	0x20008770
 8008008:	20008786 	.word	0x20008786
 800800c:	08007cc5 	.word	0x08007cc5
 8008010:	006ddd00 	.word	0x006ddd00

08008014 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008018:	2040      	movs	r0, #64	@ 0x40
 800801a:	f7ff ff77 	bl	8007f0c <tcp_alloc>
 800801e:	4603      	mov	r3, r0
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}

08008024 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	611a      	str	r2, [r3, #16]
  }
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
	...

08008048 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00e      	beq.n	8008076 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	7d1b      	ldrb	r3, [r3, #20]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d106      	bne.n	800806e <tcp_recv+0x26>
 8008060:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <tcp_recv+0x38>)
 8008062:	f240 72df 	movw	r2, #2015	@ 0x7df
 8008066:	4907      	ldr	r1, [pc, #28]	@ (8008084 <tcp_recv+0x3c>)
 8008068:	4807      	ldr	r0, [pc, #28]	@ (8008088 <tcp_recv+0x40>)
 800806a:	f007 fb41 	bl	800f6f0 <iprintf>
    pcb->recv = recv;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	0801103c 	.word	0x0801103c
 8008084:	080115d8 	.word	0x080115d8
 8008088:	08011080 	.word	0x08011080

0800808c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00e      	beq.n	80080ba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	7d1b      	ldrb	r3, [r3, #20]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d106      	bne.n	80080b2 <tcp_sent+0x26>
 80080a4:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <tcp_sent+0x38>)
 80080a6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80080aa:	4907      	ldr	r1, [pc, #28]	@ (80080c8 <tcp_sent+0x3c>)
 80080ac:	4807      	ldr	r0, [pc, #28]	@ (80080cc <tcp_sent+0x40>)
 80080ae:	f007 fb1f 	bl	800f6f0 <iprintf>
    pcb->sent = sent;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	0801103c 	.word	0x0801103c
 80080c8:	08011600 	.word	0x08011600
 80080cc:	08011080 	.word	0x08011080

080080d0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00e      	beq.n	80080fe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7d1b      	ldrb	r3, [r3, #20]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d106      	bne.n	80080f6 <tcp_err+0x26>
 80080e8:	4b07      	ldr	r3, [pc, #28]	@ (8008108 <tcp_err+0x38>)
 80080ea:	f640 020d 	movw	r2, #2061	@ 0x80d
 80080ee:	4907      	ldr	r1, [pc, #28]	@ (800810c <tcp_err+0x3c>)
 80080f0:	4807      	ldr	r0, [pc, #28]	@ (8008110 <tcp_err+0x40>)
 80080f2:	f007 fafd 	bl	800f6f0 <iprintf>
    pcb->errf = err;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	0801103c 	.word	0x0801103c
 800810c:	08011628 	.word	0x08011628
 8008110:	08011080 	.word	0x08011080

08008114 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <tcp_accept+0x22>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7d1b      	ldrb	r3, [r3, #20]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d104      	bne.n	8008136 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	619a      	str	r2, [r3, #24]
  }
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d107      	bne.n	8008168 <tcp_poll+0x24>
 8008158:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <tcp_poll+0x50>)
 800815a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800815e:	490e      	ldr	r1, [pc, #56]	@ (8008198 <tcp_poll+0x54>)
 8008160:	480e      	ldr	r0, [pc, #56]	@ (800819c <tcp_poll+0x58>)
 8008162:	f007 fac5 	bl	800f6f0 <iprintf>
 8008166:	e011      	b.n	800818c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	7d1b      	ldrb	r3, [r3, #20]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d106      	bne.n	800817e <tcp_poll+0x3a>
 8008170:	4b08      	ldr	r3, [pc, #32]	@ (8008194 <tcp_poll+0x50>)
 8008172:	f640 023e 	movw	r2, #2110	@ 0x83e
 8008176:	490a      	ldr	r1, [pc, #40]	@ (80081a0 <tcp_poll+0x5c>)
 8008178:	4808      	ldr	r0, [pc, #32]	@ (800819c <tcp_poll+0x58>)
 800817a:	f007 fab9 	bl	800f6f0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	79fa      	ldrb	r2, [r7, #7]
 800818a:	775a      	strb	r2, [r3, #29]
}
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	0801103c 	.word	0x0801103c
 8008198:	08011650 	.word	0x08011650
 800819c:	08011080 	.word	0x08011080
 80081a0:	08011668 	.word	0x08011668

080081a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d107      	bne.n	80081c2 <tcp_pcb_purge+0x1e>
 80081b2:	4b21      	ldr	r3, [pc, #132]	@ (8008238 <tcp_pcb_purge+0x94>)
 80081b4:	f640 0251 	movw	r2, #2129	@ 0x851
 80081b8:	4920      	ldr	r1, [pc, #128]	@ (800823c <tcp_pcb_purge+0x98>)
 80081ba:	4821      	ldr	r0, [pc, #132]	@ (8008240 <tcp_pcb_purge+0x9c>)
 80081bc:	f007 fa98 	bl	800f6f0 <iprintf>
 80081c0:	e037      	b.n	8008232 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7d1b      	ldrb	r3, [r3, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d033      	beq.n	8008232 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80081ce:	2b0a      	cmp	r3, #10
 80081d0:	d02f      	beq.n	8008232 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d02b      	beq.n	8008232 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d007      	beq.n	80081f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe f8ca 	bl	8006380 <pbuf_free>
      pcb->refused_data = NULL;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f986 	bl	800850c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008206:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800820c:	4618      	mov	r0, r3
 800820e:	f7ff fce1 	bl	8007bd4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fcdc 	bl	8007bd4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	0801103c 	.word	0x0801103c
 800823c:	08011688 	.word	0x08011688
 8008240:	08011080 	.word	0x08011080

08008244 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <tcp_pcb_remove+0x1e>
 8008254:	4b3e      	ldr	r3, [pc, #248]	@ (8008350 <tcp_pcb_remove+0x10c>)
 8008256:	f640 0283 	movw	r2, #2179	@ 0x883
 800825a:	493e      	ldr	r1, [pc, #248]	@ (8008354 <tcp_pcb_remove+0x110>)
 800825c:	483e      	ldr	r0, [pc, #248]	@ (8008358 <tcp_pcb_remove+0x114>)
 800825e:	f007 fa47 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <tcp_pcb_remove+0x32>
 8008268:	4b39      	ldr	r3, [pc, #228]	@ (8008350 <tcp_pcb_remove+0x10c>)
 800826a:	f640 0284 	movw	r2, #2180	@ 0x884
 800826e:	493b      	ldr	r1, [pc, #236]	@ (800835c <tcp_pcb_remove+0x118>)
 8008270:	4839      	ldr	r0, [pc, #228]	@ (8008358 <tcp_pcb_remove+0x114>)
 8008272:	f007 fa3d 	bl	800f6f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d105      	bne.n	800828c <tcp_pcb_remove+0x48>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	e013      	b.n	80082b4 <tcp_pcb_remove+0x70>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	e00c      	b.n	80082ae <tcp_pcb_remove+0x6a>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d104      	bne.n	80082a8 <tcp_pcb_remove+0x64>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	e005      	b.n	80082b4 <tcp_pcb_remove+0x70>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1ef      	bne.n	8008294 <tcp_pcb_remove+0x50>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2200      	movs	r2, #0
 80082b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80082ba:	6838      	ldr	r0, [r7, #0]
 80082bc:	f7ff ff72 	bl	80081a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	7d1b      	ldrb	r3, [r3, #20]
 80082c4:	2b0a      	cmp	r3, #10
 80082c6:	d013      	beq.n	80082f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d00f      	beq.n	80082f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	8b5b      	ldrh	r3, [r3, #26]
 80082d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	8b5b      	ldrh	r3, [r3, #26]
 80082e0:	f043 0302 	orr.w	r3, r3, #2
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80082ea:	6838      	ldr	r0, [r7, #0]
 80082ec:	f003 fbc0 	bl	800ba70 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	7d1b      	ldrb	r3, [r3, #20]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d020      	beq.n	800833a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d006      	beq.n	800830e <tcp_pcb_remove+0xca>
 8008300:	4b13      	ldr	r3, [pc, #76]	@ (8008350 <tcp_pcb_remove+0x10c>)
 8008302:	f640 0293 	movw	r2, #2195	@ 0x893
 8008306:	4916      	ldr	r1, [pc, #88]	@ (8008360 <tcp_pcb_remove+0x11c>)
 8008308:	4813      	ldr	r0, [pc, #76]	@ (8008358 <tcp_pcb_remove+0x114>)
 800830a:	f007 f9f1 	bl	800f6f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008312:	2b00      	cmp	r3, #0
 8008314:	d006      	beq.n	8008324 <tcp_pcb_remove+0xe0>
 8008316:	4b0e      	ldr	r3, [pc, #56]	@ (8008350 <tcp_pcb_remove+0x10c>)
 8008318:	f640 0294 	movw	r2, #2196	@ 0x894
 800831c:	4911      	ldr	r1, [pc, #68]	@ (8008364 <tcp_pcb_remove+0x120>)
 800831e:	480e      	ldr	r0, [pc, #56]	@ (8008358 <tcp_pcb_remove+0x114>)
 8008320:	f007 f9e6 	bl	800f6f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <tcp_pcb_remove+0xf6>
 800832c:	4b08      	ldr	r3, [pc, #32]	@ (8008350 <tcp_pcb_remove+0x10c>)
 800832e:	f640 0296 	movw	r2, #2198	@ 0x896
 8008332:	490d      	ldr	r1, [pc, #52]	@ (8008368 <tcp_pcb_remove+0x124>)
 8008334:	4808      	ldr	r0, [pc, #32]	@ (8008358 <tcp_pcb_remove+0x114>)
 8008336:	f007 f9db 	bl	800f6f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2200      	movs	r2, #0
 800833e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	0801103c 	.word	0x0801103c
 8008354:	080116a4 	.word	0x080116a4
 8008358:	08011080 	.word	0x08011080
 800835c:	080116c0 	.word	0x080116c0
 8008360:	080116e0 	.word	0x080116e0
 8008364:	080116f8 	.word	0x080116f8
 8008368:	08011714 	.word	0x08011714

0800836c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d106      	bne.n	8008388 <tcp_next_iss+0x1c>
 800837a:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <tcp_next_iss+0x38>)
 800837c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8008380:	4909      	ldr	r1, [pc, #36]	@ (80083a8 <tcp_next_iss+0x3c>)
 8008382:	480a      	ldr	r0, [pc, #40]	@ (80083ac <tcp_next_iss+0x40>)
 8008384:	f007 f9b4 	bl	800f6f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008388:	4b09      	ldr	r3, [pc, #36]	@ (80083b0 <tcp_next_iss+0x44>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b09      	ldr	r3, [pc, #36]	@ (80083b4 <tcp_next_iss+0x48>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4413      	add	r3, r2
 8008392:	4a07      	ldr	r2, [pc, #28]	@ (80083b0 <tcp_next_iss+0x44>)
 8008394:	6013      	str	r3, [r2, #0]
  return iss;
 8008396:	4b06      	ldr	r3, [pc, #24]	@ (80083b0 <tcp_next_iss+0x44>)
 8008398:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	0801103c 	.word	0x0801103c
 80083a8:	0801172c 	.word	0x0801172c
 80083ac:	08011080 	.word	0x08011080
 80083b0:	20000024 	.word	0x20000024
 80083b4:	20008770 	.word	0x20008770

080083b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d106      	bne.n	80083da <tcp_eff_send_mss_netif+0x22>
 80083cc:	4b14      	ldr	r3, [pc, #80]	@ (8008420 <tcp_eff_send_mss_netif+0x68>)
 80083ce:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80083d2:	4914      	ldr	r1, [pc, #80]	@ (8008424 <tcp_eff_send_mss_netif+0x6c>)
 80083d4:	4814      	ldr	r0, [pc, #80]	@ (8008428 <tcp_eff_send_mss_netif+0x70>)
 80083d6:	f007 f98b 	bl	800f6f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80083e0:	89fb      	ldrh	r3, [r7, #14]
 80083e2:	e019      	b.n	8008418 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80083e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80083ea:	8afb      	ldrh	r3, [r7, #22]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d012      	beq.n	8008416 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80083f0:	2328      	movs	r3, #40	@ 0x28
 80083f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80083f4:	8afa      	ldrh	r2, [r7, #22]
 80083f6:	8abb      	ldrh	r3, [r7, #20]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d904      	bls.n	8008406 <tcp_eff_send_mss_netif+0x4e>
 80083fc:	8afa      	ldrh	r2, [r7, #22]
 80083fe:	8abb      	ldrh	r3, [r7, #20]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	b29b      	uxth	r3, r3
 8008404:	e000      	b.n	8008408 <tcp_eff_send_mss_netif+0x50>
 8008406:	2300      	movs	r3, #0
 8008408:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800840a:	8a7a      	ldrh	r2, [r7, #18]
 800840c:	89fb      	ldrh	r3, [r7, #14]
 800840e:	4293      	cmp	r3, r2
 8008410:	bf28      	it	cs
 8008412:	4613      	movcs	r3, r2
 8008414:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008416:	89fb      	ldrh	r3, [r7, #14]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	0801103c 	.word	0x0801103c
 8008424:	08011748 	.word	0x08011748
 8008428:	08011080 	.word	0x08011080

0800842c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d119      	bne.n	8008474 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008440:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008442:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008446:	4910      	ldr	r1, [pc, #64]	@ (8008488 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008448:	4810      	ldr	r0, [pc, #64]	@ (800848c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800844a:	f007 f951 	bl	800f6f0 <iprintf>

  while (pcb != NULL) {
 800844e:	e011      	b.n	8008474 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	429a      	cmp	r2, r3
 800845a:	d108      	bne.n	800846e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7fe fd24 	bl	8006eb0 <tcp_abort>
      pcb = next;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e002      	b.n	8008474 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1ea      	bne.n	8008450 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800847a:	bf00      	nop
 800847c:	bf00      	nop
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	0801103c 	.word	0x0801103c
 8008488:	08011770 	.word	0x08011770
 800848c:	08011080 	.word	0x08011080

08008490 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d02a      	beq.n	80084f6 <tcp_netif_ip_addr_changed+0x66>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d026      	beq.n	80084f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80084a8:	4b15      	ldr	r3, [pc, #84]	@ (8008500 <tcp_netif_ip_addr_changed+0x70>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff ffbc 	bl	800842c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80084b4:	4b13      	ldr	r3, [pc, #76]	@ (8008504 <tcp_netif_ip_addr_changed+0x74>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff ffb6 	bl	800842c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d017      	beq.n	80084f6 <tcp_netif_ip_addr_changed+0x66>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d013      	beq.n	80084f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80084ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008508 <tcp_netif_ip_addr_changed+0x78>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e00c      	b.n	80084f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d103      	bne.n	80084ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1ef      	bne.n	80084d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	2000877c 	.word	0x2000877c
 8008504:	20008774 	.word	0x20008774
 8008508:	20008778 	.word	0x20008778

0800850c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff fb57 	bl	8007bd4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008534:	b590      	push	{r4, r7, lr}
 8008536:	b08d      	sub	sp, #52	@ 0x34
 8008538:	af04      	add	r7, sp, #16
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <tcp_input+0x1c>
 8008544:	4b9b      	ldr	r3, [pc, #620]	@ (80087b4 <tcp_input+0x280>)
 8008546:	2283      	movs	r2, #131	@ 0x83
 8008548:	499b      	ldr	r1, [pc, #620]	@ (80087b8 <tcp_input+0x284>)
 800854a:	489c      	ldr	r0, [pc, #624]	@ (80087bc <tcp_input+0x288>)
 800854c:	f007 f8d0 	bl	800f6f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a9a      	ldr	r2, [pc, #616]	@ (80087c0 <tcp_input+0x28c>)
 8008556:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	895b      	ldrh	r3, [r3, #10]
 800855c:	2b13      	cmp	r3, #19
 800855e:	f240 83d1 	bls.w	8008d04 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008562:	4b98      	ldr	r3, [pc, #608]	@ (80087c4 <tcp_input+0x290>)
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	4a97      	ldr	r2, [pc, #604]	@ (80087c4 <tcp_input+0x290>)
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f006 f869 	bl	800e644 <ip4_addr_isbroadcast_u32>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	f040 83c7 	bne.w	8008d08 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800857a:	4b92      	ldr	r3, [pc, #584]	@ (80087c4 <tcp_input+0x290>)
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008582:	2be0      	cmp	r3, #224	@ 0xe0
 8008584:	f000 83c0 	beq.w	8008d08 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008588:	4b8d      	ldr	r3, [pc, #564]	@ (80087c0 <tcp_input+0x28c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	899b      	ldrh	r3, [r3, #12]
 800858e:	b29b      	uxth	r3, r3
 8008590:	4618      	mov	r0, r3
 8008592:	f7fc fb97 	bl	8004cc4 <lwip_htons>
 8008596:	4603      	mov	r3, r0
 8008598:	0b1b      	lsrs	r3, r3, #12
 800859a:	b29b      	uxth	r3, r3
 800859c:	b2db      	uxtb	r3, r3
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80085a2:	7cbb      	ldrb	r3, [r7, #18]
 80085a4:	2b13      	cmp	r3, #19
 80085a6:	f240 83b1 	bls.w	8008d0c <tcp_input+0x7d8>
 80085aa:	7cbb      	ldrb	r3, [r7, #18]
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	891b      	ldrh	r3, [r3, #8]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f200 83aa 	bhi.w	8008d0c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80085b8:	7cbb      	ldrb	r3, [r7, #18]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b14      	subs	r3, #20
 80085be:	b29a      	uxth	r2, r3
 80085c0:	4b81      	ldr	r3, [pc, #516]	@ (80087c8 <tcp_input+0x294>)
 80085c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80085c4:	4b81      	ldr	r3, [pc, #516]	@ (80087cc <tcp_input+0x298>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	895a      	ldrh	r2, [r3, #10]
 80085ce:	7cbb      	ldrb	r3, [r7, #18]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d309      	bcc.n	80085ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80085d6:	4b7c      	ldr	r3, [pc, #496]	@ (80087c8 <tcp_input+0x294>)
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	4b7d      	ldr	r3, [pc, #500]	@ (80087d0 <tcp_input+0x29c>)
 80085dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80085de:	7cbb      	ldrb	r3, [r7, #18]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fd fe46 	bl	8006274 <pbuf_remove_header>
 80085e8:	e04e      	b.n	8008688 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d105      	bne.n	80085fe <tcp_input+0xca>
 80085f2:	4b70      	ldr	r3, [pc, #448]	@ (80087b4 <tcp_input+0x280>)
 80085f4:	22c2      	movs	r2, #194	@ 0xc2
 80085f6:	4977      	ldr	r1, [pc, #476]	@ (80087d4 <tcp_input+0x2a0>)
 80085f8:	4870      	ldr	r0, [pc, #448]	@ (80087bc <tcp_input+0x288>)
 80085fa:	f007 f879 	bl	800f6f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80085fe:	2114      	movs	r1, #20
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7fd fe37 	bl	8006274 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	895a      	ldrh	r2, [r3, #10]
 800860a:	4b71      	ldr	r3, [pc, #452]	@ (80087d0 <tcp_input+0x29c>)
 800860c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800860e:	4b6e      	ldr	r3, [pc, #440]	@ (80087c8 <tcp_input+0x294>)
 8008610:	881a      	ldrh	r2, [r3, #0]
 8008612:	4b6f      	ldr	r3, [pc, #444]	@ (80087d0 <tcp_input+0x29c>)
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800861a:	4b6d      	ldr	r3, [pc, #436]	@ (80087d0 <tcp_input+0x29c>)
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7fd fe27 	bl	8006274 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	895b      	ldrh	r3, [r3, #10]
 800862c:	8a3a      	ldrh	r2, [r7, #16]
 800862e:	429a      	cmp	r2, r3
 8008630:	f200 836e 	bhi.w	8008d10 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	4a64      	ldr	r2, [pc, #400]	@ (80087cc <tcp_input+0x298>)
 800863c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	8a3a      	ldrh	r2, [r7, #16]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fe14 	bl	8006274 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	891a      	ldrh	r2, [r3, #8]
 8008650:	8a3b      	ldrh	r3, [r7, #16]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	895b      	ldrh	r3, [r3, #10]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <tcp_input+0x13a>
 8008662:	4b54      	ldr	r3, [pc, #336]	@ (80087b4 <tcp_input+0x280>)
 8008664:	22df      	movs	r2, #223	@ 0xdf
 8008666:	495c      	ldr	r1, [pc, #368]	@ (80087d8 <tcp_input+0x2a4>)
 8008668:	4854      	ldr	r0, [pc, #336]	@ (80087bc <tcp_input+0x288>)
 800866a:	f007 f841 	bl	800f6f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	891a      	ldrh	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	891b      	ldrh	r3, [r3, #8]
 8008678:	429a      	cmp	r2, r3
 800867a:	d005      	beq.n	8008688 <tcp_input+0x154>
 800867c:	4b4d      	ldr	r3, [pc, #308]	@ (80087b4 <tcp_input+0x280>)
 800867e:	22e0      	movs	r2, #224	@ 0xe0
 8008680:	4956      	ldr	r1, [pc, #344]	@ (80087dc <tcp_input+0x2a8>)
 8008682:	484e      	ldr	r0, [pc, #312]	@ (80087bc <tcp_input+0x288>)
 8008684:	f007 f834 	bl	800f6f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008688:	4b4d      	ldr	r3, [pc, #308]	@ (80087c0 <tcp_input+0x28c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	4a4b      	ldr	r2, [pc, #300]	@ (80087c0 <tcp_input+0x28c>)
 8008692:	6814      	ldr	r4, [r2, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f7fc fb15 	bl	8004cc4 <lwip_htons>
 800869a:	4603      	mov	r3, r0
 800869c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800869e:	4b48      	ldr	r3, [pc, #288]	@ (80087c0 <tcp_input+0x28c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	885b      	ldrh	r3, [r3, #2]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	4a46      	ldr	r2, [pc, #280]	@ (80087c0 <tcp_input+0x28c>)
 80086a8:	6814      	ldr	r4, [r2, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fc fb0a 	bl	8004cc4 <lwip_htons>
 80086b0:	4603      	mov	r3, r0
 80086b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80086b4:	4b42      	ldr	r3, [pc, #264]	@ (80087c0 <tcp_input+0x28c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	4a41      	ldr	r2, [pc, #260]	@ (80087c0 <tcp_input+0x28c>)
 80086bc:	6814      	ldr	r4, [r2, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fc fb15 	bl	8004cee <lwip_htonl>
 80086c4:	4603      	mov	r3, r0
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	4a45      	ldr	r2, [pc, #276]	@ (80087e0 <tcp_input+0x2ac>)
 80086cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80086ce:	4b3c      	ldr	r3, [pc, #240]	@ (80087c0 <tcp_input+0x28c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	4a3a      	ldr	r2, [pc, #232]	@ (80087c0 <tcp_input+0x28c>)
 80086d6:	6814      	ldr	r4, [r2, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fc fb08 	bl	8004cee <lwip_htonl>
 80086de:	4603      	mov	r3, r0
 80086e0:	60a3      	str	r3, [r4, #8]
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	4a3f      	ldr	r2, [pc, #252]	@ (80087e4 <tcp_input+0x2b0>)
 80086e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80086e8:	4b35      	ldr	r3, [pc, #212]	@ (80087c0 <tcp_input+0x28c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	89db      	ldrh	r3, [r3, #14]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	4a33      	ldr	r2, [pc, #204]	@ (80087c0 <tcp_input+0x28c>)
 80086f2:	6814      	ldr	r4, [r2, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fc fae5 	bl	8004cc4 <lwip_htons>
 80086fa:	4603      	mov	r3, r0
 80086fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80086fe:	4b30      	ldr	r3, [pc, #192]	@ (80087c0 <tcp_input+0x28c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	899b      	ldrh	r3, [r3, #12]
 8008704:	b29b      	uxth	r3, r3
 8008706:	4618      	mov	r0, r3
 8008708:	f7fc fadc 	bl	8004cc4 <lwip_htons>
 800870c:	4603      	mov	r3, r0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008714:	b2da      	uxtb	r2, r3
 8008716:	4b34      	ldr	r3, [pc, #208]	@ (80087e8 <tcp_input+0x2b4>)
 8008718:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	891a      	ldrh	r2, [r3, #8]
 800871e:	4b33      	ldr	r3, [pc, #204]	@ (80087ec <tcp_input+0x2b8>)
 8008720:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008722:	4b31      	ldr	r3, [pc, #196]	@ (80087e8 <tcp_input+0x2b4>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <tcp_input+0x214>
    tcplen++;
 800872e:	4b2f      	ldr	r3, [pc, #188]	@ (80087ec <tcp_input+0x2b8>)
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	3301      	adds	r3, #1
 8008734:	b29a      	uxth	r2, r3
 8008736:	4b2d      	ldr	r3, [pc, #180]	@ (80087ec <tcp_input+0x2b8>)
 8008738:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	891a      	ldrh	r2, [r3, #8]
 800873e:	4b2b      	ldr	r3, [pc, #172]	@ (80087ec <tcp_input+0x2b8>)
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	f200 82e6 	bhi.w	8008d14 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800874c:	4b28      	ldr	r3, [pc, #160]	@ (80087f0 <tcp_input+0x2bc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	61fb      	str	r3, [r7, #28]
 8008752:	e09d      	b.n	8008890 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	7d1b      	ldrb	r3, [r3, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d105      	bne.n	8008768 <tcp_input+0x234>
 800875c:	4b15      	ldr	r3, [pc, #84]	@ (80087b4 <tcp_input+0x280>)
 800875e:	22fb      	movs	r2, #251	@ 0xfb
 8008760:	4924      	ldr	r1, [pc, #144]	@ (80087f4 <tcp_input+0x2c0>)
 8008762:	4816      	ldr	r0, [pc, #88]	@ (80087bc <tcp_input+0x288>)
 8008764:	f006 ffc4 	bl	800f6f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	7d1b      	ldrb	r3, [r3, #20]
 800876c:	2b0a      	cmp	r3, #10
 800876e:	d105      	bne.n	800877c <tcp_input+0x248>
 8008770:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <tcp_input+0x280>)
 8008772:	22fc      	movs	r2, #252	@ 0xfc
 8008774:	4920      	ldr	r1, [pc, #128]	@ (80087f8 <tcp_input+0x2c4>)
 8008776:	4811      	ldr	r0, [pc, #68]	@ (80087bc <tcp_input+0x288>)
 8008778:	f006 ffba 	bl	800f6f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	7d1b      	ldrb	r3, [r3, #20]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <tcp_input+0x25c>
 8008784:	4b0b      	ldr	r3, [pc, #44]	@ (80087b4 <tcp_input+0x280>)
 8008786:	22fd      	movs	r2, #253	@ 0xfd
 8008788:	491c      	ldr	r1, [pc, #112]	@ (80087fc <tcp_input+0x2c8>)
 800878a:	480c      	ldr	r0, [pc, #48]	@ (80087bc <tcp_input+0x288>)
 800878c:	f006 ffb0 	bl	800f6f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	7a1b      	ldrb	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d033      	beq.n	8008800 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	7a1a      	ldrb	r2, [r3, #8]
 800879c:	4b09      	ldr	r3, [pc, #36]	@ (80087c4 <tcp_input+0x290>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80087a4:	3301      	adds	r3, #1
 80087a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d029      	beq.n	8008800 <tcp_input+0x2cc>
      prev = pcb;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	61bb      	str	r3, [r7, #24]
      continue;
 80087b0:	e06b      	b.n	800888a <tcp_input+0x356>
 80087b2:	bf00      	nop
 80087b4:	080117a4 	.word	0x080117a4
 80087b8:	080117d8 	.word	0x080117d8
 80087bc:	080117f0 	.word	0x080117f0
 80087c0:	20008798 	.word	0x20008798
 80087c4:	20005200 	.word	0x20005200
 80087c8:	2000879c 	.word	0x2000879c
 80087cc:	200087a0 	.word	0x200087a0
 80087d0:	2000879e 	.word	0x2000879e
 80087d4:	08011818 	.word	0x08011818
 80087d8:	08011828 	.word	0x08011828
 80087dc:	08011834 	.word	0x08011834
 80087e0:	200087a8 	.word	0x200087a8
 80087e4:	200087ac 	.word	0x200087ac
 80087e8:	200087b4 	.word	0x200087b4
 80087ec:	200087b2 	.word	0x200087b2
 80087f0:	2000877c 	.word	0x2000877c
 80087f4:	08011854 	.word	0x08011854
 80087f8:	0801187c 	.word	0x0801187c
 80087fc:	080118a8 	.word	0x080118a8
    }

    if (pcb->remote_port == tcphdr->src &&
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	8b1a      	ldrh	r2, [r3, #24]
 8008804:	4b72      	ldr	r3, [pc, #456]	@ (80089d0 <tcp_input+0x49c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	429a      	cmp	r2, r3
 800880e:	d13a      	bne.n	8008886 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	8ada      	ldrh	r2, [r3, #22]
 8008814:	4b6e      	ldr	r3, [pc, #440]	@ (80089d0 <tcp_input+0x49c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800881c:	429a      	cmp	r2, r3
 800881e:	d132      	bne.n	8008886 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	4b6b      	ldr	r3, [pc, #428]	@ (80089d4 <tcp_input+0x4a0>)
 8008826:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008828:	429a      	cmp	r2, r3
 800882a:	d12c      	bne.n	8008886 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	4b68      	ldr	r3, [pc, #416]	@ (80089d4 <tcp_input+0x4a0>)
 8008832:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008834:	429a      	cmp	r2, r3
 8008836:	d126      	bne.n	8008886 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	429a      	cmp	r2, r3
 8008840:	d106      	bne.n	8008850 <tcp_input+0x31c>
 8008842:	4b65      	ldr	r3, [pc, #404]	@ (80089d8 <tcp_input+0x4a4>)
 8008844:	f240 120d 	movw	r2, #269	@ 0x10d
 8008848:	4964      	ldr	r1, [pc, #400]	@ (80089dc <tcp_input+0x4a8>)
 800884a:	4865      	ldr	r0, [pc, #404]	@ (80089e0 <tcp_input+0x4ac>)
 800884c:	f006 ff50 	bl	800f6f0 <iprintf>
      if (prev != NULL) {
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <tcp_input+0x338>
        prev->next = pcb->next;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800885e:	4b61      	ldr	r3, [pc, #388]	@ (80089e4 <tcp_input+0x4b0>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008866:	4a5f      	ldr	r2, [pc, #380]	@ (80089e4 <tcp_input+0x4b0>)
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	429a      	cmp	r2, r3
 8008874:	d111      	bne.n	800889a <tcp_input+0x366>
 8008876:	4b58      	ldr	r3, [pc, #352]	@ (80089d8 <tcp_input+0x4a4>)
 8008878:	f240 1215 	movw	r2, #277	@ 0x115
 800887c:	495a      	ldr	r1, [pc, #360]	@ (80089e8 <tcp_input+0x4b4>)
 800887e:	4858      	ldr	r0, [pc, #352]	@ (80089e0 <tcp_input+0x4ac>)
 8008880:	f006 ff36 	bl	800f6f0 <iprintf>
      break;
 8008884:	e009      	b.n	800889a <tcp_input+0x366>
    }
    prev = pcb;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f47f af5e 	bne.w	8008754 <tcp_input+0x220>
 8008898:	e000      	b.n	800889c <tcp_input+0x368>
      break;
 800889a:	bf00      	nop
  }

  if (pcb == NULL) {
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 80aa 	bne.w	80089f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80088a4:	4b51      	ldr	r3, [pc, #324]	@ (80089ec <tcp_input+0x4b8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	61fb      	str	r3, [r7, #28]
 80088aa:	e03f      	b.n	800892c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	7d1b      	ldrb	r3, [r3, #20]
 80088b0:	2b0a      	cmp	r3, #10
 80088b2:	d006      	beq.n	80088c2 <tcp_input+0x38e>
 80088b4:	4b48      	ldr	r3, [pc, #288]	@ (80089d8 <tcp_input+0x4a4>)
 80088b6:	f240 121f 	movw	r2, #287	@ 0x11f
 80088ba:	494d      	ldr	r1, [pc, #308]	@ (80089f0 <tcp_input+0x4bc>)
 80088bc:	4848      	ldr	r0, [pc, #288]	@ (80089e0 <tcp_input+0x4ac>)
 80088be:	f006 ff17 	bl	800f6f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	7a1b      	ldrb	r3, [r3, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	7a1a      	ldrb	r2, [r3, #8]
 80088ce:	4b41      	ldr	r3, [pc, #260]	@ (80089d4 <tcp_input+0x4a0>)
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088d6:	3301      	adds	r3, #1
 80088d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80088da:	429a      	cmp	r2, r3
 80088dc:	d122      	bne.n	8008924 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	8b1a      	ldrh	r2, [r3, #24]
 80088e2:	4b3b      	ldr	r3, [pc, #236]	@ (80089d0 <tcp_input+0x49c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d11b      	bne.n	8008926 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	8ada      	ldrh	r2, [r3, #22]
 80088f2:	4b37      	ldr	r3, [pc, #220]	@ (80089d0 <tcp_input+0x49c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	885b      	ldrh	r3, [r3, #2]
 80088f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d113      	bne.n	8008926 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	4b34      	ldr	r3, [pc, #208]	@ (80089d4 <tcp_input+0x4a0>)
 8008904:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008906:	429a      	cmp	r2, r3
 8008908:	d10d      	bne.n	8008926 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b31      	ldr	r3, [pc, #196]	@ (80089d4 <tcp_input+0x4a0>)
 8008910:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008912:	429a      	cmp	r2, r3
 8008914:	d107      	bne.n	8008926 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008916:	69f8      	ldr	r0, [r7, #28]
 8008918:	f000 fb56 	bl	8008fc8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7fd fd2f 	bl	8006380 <pbuf_free>
        return;
 8008922:	e1fd      	b.n	8008d20 <tcp_input+0x7ec>
        continue;
 8008924:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	61fb      	str	r3, [r7, #28]
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1bc      	bne.n	80088ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008936:	4b2f      	ldr	r3, [pc, #188]	@ (80089f4 <tcp_input+0x4c0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e02a      	b.n	8008994 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	7a1b      	ldrb	r3, [r3, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00c      	beq.n	8008960 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	7a1a      	ldrb	r2, [r3, #8]
 800894a:	4b22      	ldr	r3, [pc, #136]	@ (80089d4 <tcp_input+0x4a0>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008952:	3301      	adds	r3, #1
 8008954:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008956:	429a      	cmp	r2, r3
 8008958:	d002      	beq.n	8008960 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	61bb      	str	r3, [r7, #24]
        continue;
 800895e:	e016      	b.n	800898e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	8ada      	ldrh	r2, [r3, #22]
 8008964:	4b1a      	ldr	r3, [pc, #104]	@ (80089d0 <tcp_input+0x49c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	885b      	ldrh	r3, [r3, #2]
 800896a:	b29b      	uxth	r3, r3
 800896c:	429a      	cmp	r2, r3
 800896e:	d10c      	bne.n	800898a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	4b17      	ldr	r3, [pc, #92]	@ (80089d4 <tcp_input+0x4a0>)
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	429a      	cmp	r2, r3
 800897a:	d00f      	beq.n	800899c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00d      	beq.n	800899e <tcp_input+0x46a>
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1d1      	bne.n	800893e <tcp_input+0x40a>
 800899a:	e000      	b.n	800899e <tcp_input+0x46a>
            break;
 800899c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d029      	beq.n	80089f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80089b2:	4b10      	ldr	r3, [pc, #64]	@ (80089f4 <tcp_input+0x4c0>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80089ba:	4a0e      	ldr	r2, [pc, #56]	@ (80089f4 <tcp_input+0x4c0>)
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80089c0:	6978      	ldr	r0, [r7, #20]
 80089c2:	f000 fa03 	bl	8008dcc <tcp_listen_input>
      }
      pbuf_free(p);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fd fcda 	bl	8006380 <pbuf_free>
      return;
 80089cc:	e1a8      	b.n	8008d20 <tcp_input+0x7ec>
 80089ce:	bf00      	nop
 80089d0:	20008798 	.word	0x20008798
 80089d4:	20005200 	.word	0x20005200
 80089d8:	080117a4 	.word	0x080117a4
 80089dc:	080118d0 	.word	0x080118d0
 80089e0:	080117f0 	.word	0x080117f0
 80089e4:	2000877c 	.word	0x2000877c
 80089e8:	080118fc 	.word	0x080118fc
 80089ec:	20008780 	.word	0x20008780
 80089f0:	08011928 	.word	0x08011928
 80089f4:	20008778 	.word	0x20008778
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 8158 	beq.w	8008cb0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008a00:	4b95      	ldr	r3, [pc, #596]	@ (8008c58 <tcp_input+0x724>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	891a      	ldrh	r2, [r3, #8]
 8008a0a:	4b93      	ldr	r3, [pc, #588]	@ (8008c58 <tcp_input+0x724>)
 8008a0c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008a0e:	4a92      	ldr	r2, [pc, #584]	@ (8008c58 <tcp_input+0x724>)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008a14:	4b91      	ldr	r3, [pc, #580]	@ (8008c5c <tcp_input+0x728>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a8f      	ldr	r2, [pc, #572]	@ (8008c58 <tcp_input+0x724>)
 8008a1a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008a1c:	4b90      	ldr	r3, [pc, #576]	@ (8008c60 <tcp_input+0x72c>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008a22:	4b90      	ldr	r3, [pc, #576]	@ (8008c64 <tcp_input+0x730>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008a28:	4b8f      	ldr	r3, [pc, #572]	@ (8008c68 <tcp_input+0x734>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8008c6c <tcp_input+0x738>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d006      	beq.n	8008a48 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7b5b      	ldrb	r3, [r3, #13]
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d017      	beq.n	8008a80 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008a50:	69f8      	ldr	r0, [r7, #28]
 8008a52:	f7ff f843 	bl	8007adc <tcp_process_refused_data>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f113 0f0d 	cmn.w	r3, #13
 8008a5c:	d007      	beq.n	8008a6e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00c      	beq.n	8008a80 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008a66:	4b82      	ldr	r3, [pc, #520]	@ (8008c70 <tcp_input+0x73c>)
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d008      	beq.n	8008a80 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 80e3 	bne.w	8008c3e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008a78:	69f8      	ldr	r0, [r7, #28]
 8008a7a:	f003 fdff 	bl	800c67c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008a7e:	e0de      	b.n	8008c3e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008a80:	4a7c      	ldr	r2, [pc, #496]	@ (8008c74 <tcp_input+0x740>)
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008a86:	69f8      	ldr	r0, [r7, #28]
 8008a88:	f000 fb18 	bl	80090bc <tcp_process>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a94:	f113 0f0d 	cmn.w	r3, #13
 8008a98:	f000 80d3 	beq.w	8008c42 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008a9c:	4b71      	ldr	r3, [pc, #452]	@ (8008c64 <tcp_input+0x730>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d015      	beq.n	8008ad4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d008      	beq.n	8008ac4 <tcp_input+0x590>
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab8:	69fa      	ldr	r2, [r7, #28]
 8008aba:	6912      	ldr	r2, [r2, #16]
 8008abc:	f06f 010d 	mvn.w	r1, #13
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008ac4:	69f9      	ldr	r1, [r7, #28]
 8008ac6:	486c      	ldr	r0, [pc, #432]	@ (8008c78 <tcp_input+0x744>)
 8008ac8:	f7ff fbbc 	bl	8008244 <tcp_pcb_remove>
        tcp_free(pcb);
 8008acc:	69f8      	ldr	r0, [r7, #28]
 8008ace:	f7fd ff07 	bl	80068e0 <tcp_free>
 8008ad2:	e0da      	b.n	8008c8a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008ad8:	4b63      	ldr	r3, [pc, #396]	@ (8008c68 <tcp_input+0x734>)
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01d      	beq.n	8008b1c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008ae0:	4b61      	ldr	r3, [pc, #388]	@ (8008c68 <tcp_input+0x734>)
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <tcp_input+0x5d2>
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	6910      	ldr	r0, [r2, #16]
 8008afa:	89fa      	ldrh	r2, [r7, #14]
 8008afc:	69f9      	ldr	r1, [r7, #28]
 8008afe:	4798      	blx	r3
 8008b00:	4603      	mov	r3, r0
 8008b02:	74fb      	strb	r3, [r7, #19]
 8008b04:	e001      	b.n	8008b0a <tcp_input+0x5d6>
 8008b06:	2300      	movs	r3, #0
 8008b08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b0e:	f113 0f0d 	cmn.w	r3, #13
 8008b12:	f000 8098 	beq.w	8008c46 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008b16:	4b54      	ldr	r3, [pc, #336]	@ (8008c68 <tcp_input+0x734>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008b1c:	69f8      	ldr	r0, [r7, #28]
 8008b1e:	f000 f915 	bl	8008d4c <tcp_input_delayed_close>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f040 8090 	bne.w	8008c4a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8008c60 <tcp_input+0x72c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d041      	beq.n	8008bb6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <tcp_input+0x614>
 8008b3a:	4b50      	ldr	r3, [pc, #320]	@ (8008c7c <tcp_input+0x748>)
 8008b3c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008b40:	494f      	ldr	r1, [pc, #316]	@ (8008c80 <tcp_input+0x74c>)
 8008b42:	4850      	ldr	r0, [pc, #320]	@ (8008c84 <tcp_input+0x750>)
 8008b44:	f006 fdd4 	bl	800f6f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	8b5b      	ldrh	r3, [r3, #26]
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d008      	beq.n	8008b66 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008b54:	4b42      	ldr	r3, [pc, #264]	@ (8008c60 <tcp_input+0x72c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fd fc11 	bl	8006380 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008b5e:	69f8      	ldr	r0, [r7, #28]
 8008b60:	f7fe f9a6 	bl	8006eb0 <tcp_abort>
            goto aborted;
 8008b64:	e091      	b.n	8008c8a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00c      	beq.n	8008b8a <tcp_input+0x656>
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	6918      	ldr	r0, [r3, #16]
 8008b7a:	4b39      	ldr	r3, [pc, #228]	@ (8008c60 <tcp_input+0x72c>)
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	69f9      	ldr	r1, [r7, #28]
 8008b82:	47a0      	blx	r4
 8008b84:	4603      	mov	r3, r0
 8008b86:	74fb      	strb	r3, [r7, #19]
 8008b88:	e008      	b.n	8008b9c <tcp_input+0x668>
 8008b8a:	4b35      	ldr	r3, [pc, #212]	@ (8008c60 <tcp_input+0x72c>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	69f9      	ldr	r1, [r7, #28]
 8008b92:	2000      	movs	r0, #0
 8008b94:	f7ff f896 	bl	8007cc4 <tcp_recv_null>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008b9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ba0:	f113 0f0d 	cmn.w	r3, #13
 8008ba4:	d053      	beq.n	8008c4e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008ba6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008bae:	4b2c      	ldr	r3, [pc, #176]	@ (8008c60 <tcp_input+0x72c>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c64 <tcp_input+0x730>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d030      	beq.n	8008c24 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bce:	7b5a      	ldrb	r2, [r3, #13]
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bd4:	f042 0220 	orr.w	r2, r2, #32
 8008bd8:	b2d2      	uxtb	r2, r2
 8008bda:	735a      	strb	r2, [r3, #13]
 8008bdc:	e022      	b.n	8008c24 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008be2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008be6:	d005      	beq.n	8008bf4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bec:	3301      	adds	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00b      	beq.n	8008c16 <tcp_input+0x6e2>
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	6918      	ldr	r0, [r3, #16]
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	69f9      	ldr	r1, [r7, #28]
 8008c0e:	47a0      	blx	r4
 8008c10:	4603      	mov	r3, r0
 8008c12:	74fb      	strb	r3, [r7, #19]
 8008c14:	e001      	b.n	8008c1a <tcp_input+0x6e6>
 8008c16:	2300      	movs	r3, #0
 8008c18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008c1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c1e:	f113 0f0d 	cmn.w	r3, #13
 8008c22:	d016      	beq.n	8008c52 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008c24:	4b13      	ldr	r3, [pc, #76]	@ (8008c74 <tcp_input+0x740>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008c2a:	69f8      	ldr	r0, [r7, #28]
 8008c2c:	f000 f88e 	bl	8008d4c <tcp_input_delayed_close>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d128      	bne.n	8008c88 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008c36:	69f8      	ldr	r0, [r7, #28]
 8008c38:	f002 ff1a 	bl	800ba70 <tcp_output>
 8008c3c:	e025      	b.n	8008c8a <tcp_input+0x756>
        goto aborted;
 8008c3e:	bf00      	nop
 8008c40:	e023      	b.n	8008c8a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008c42:	bf00      	nop
 8008c44:	e021      	b.n	8008c8a <tcp_input+0x756>
              goto aborted;
 8008c46:	bf00      	nop
 8008c48:	e01f      	b.n	8008c8a <tcp_input+0x756>
          goto aborted;
 8008c4a:	bf00      	nop
 8008c4c:	e01d      	b.n	8008c8a <tcp_input+0x756>
            goto aborted;
 8008c4e:	bf00      	nop
 8008c50:	e01b      	b.n	8008c8a <tcp_input+0x756>
              goto aborted;
 8008c52:	bf00      	nop
 8008c54:	e019      	b.n	8008c8a <tcp_input+0x756>
 8008c56:	bf00      	nop
 8008c58:	20008788 	.word	0x20008788
 8008c5c:	20008798 	.word	0x20008798
 8008c60:	200087b8 	.word	0x200087b8
 8008c64:	200087b5 	.word	0x200087b5
 8008c68:	200087b0 	.word	0x200087b0
 8008c6c:	200087b4 	.word	0x200087b4
 8008c70:	200087b2 	.word	0x200087b2
 8008c74:	200087bc 	.word	0x200087bc
 8008c78:	2000877c 	.word	0x2000877c
 8008c7c:	080117a4 	.word	0x080117a4
 8008c80:	08011958 	.word	0x08011958
 8008c84:	080117f0 	.word	0x080117f0
          goto aborted;
 8008c88:	bf00      	nop
    tcp_input_pcb = NULL;
 8008c8a:	4b27      	ldr	r3, [pc, #156]	@ (8008d28 <tcp_input+0x7f4>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008c90:	4b26      	ldr	r3, [pc, #152]	@ (8008d2c <tcp_input+0x7f8>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008c96:	4b26      	ldr	r3, [pc, #152]	@ (8008d30 <tcp_input+0x7fc>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d03f      	beq.n	8008d1e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008c9e:	4b24      	ldr	r3, [pc, #144]	@ (8008d30 <tcp_input+0x7fc>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fb6c 	bl	8006380 <pbuf_free>
      inseg.p = NULL;
 8008ca8:	4b21      	ldr	r3, [pc, #132]	@ (8008d30 <tcp_input+0x7fc>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008cae:	e036      	b.n	8008d1e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008cb0:	4b20      	ldr	r3, [pc, #128]	@ (8008d34 <tcp_input+0x800>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	899b      	ldrh	r3, [r3, #12]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fc f803 	bl	8004cc4 <lwip_htons>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d118      	bne.n	8008cfc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cca:	4b1b      	ldr	r3, [pc, #108]	@ (8008d38 <tcp_input+0x804>)
 8008ccc:	6819      	ldr	r1, [r3, #0]
 8008cce:	4b1b      	ldr	r3, [pc, #108]	@ (8008d3c <tcp_input+0x808>)
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d40 <tcp_input+0x80c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008cda:	4b16      	ldr	r3, [pc, #88]	@ (8008d34 <tcp_input+0x800>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008cde:	885b      	ldrh	r3, [r3, #2]
 8008ce0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ce2:	4a14      	ldr	r2, [pc, #80]	@ (8008d34 <tcp_input+0x800>)
 8008ce4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ce6:	8812      	ldrh	r2, [r2, #0]
 8008ce8:	b292      	uxth	r2, r2
 8008cea:	9202      	str	r2, [sp, #8]
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	4b15      	ldr	r3, [pc, #84]	@ (8008d44 <tcp_input+0x810>)
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	4b15      	ldr	r3, [pc, #84]	@ (8008d48 <tcp_input+0x814>)
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f003 fc6e 	bl	800c5d8 <tcp_rst>
    pbuf_free(p);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7fd fb3f 	bl	8006380 <pbuf_free>
  return;
 8008d02:	e00c      	b.n	8008d1e <tcp_input+0x7ea>
    goto dropped;
 8008d04:	bf00      	nop
 8008d06:	e006      	b.n	8008d16 <tcp_input+0x7e2>
    goto dropped;
 8008d08:	bf00      	nop
 8008d0a:	e004      	b.n	8008d16 <tcp_input+0x7e2>
    goto dropped;
 8008d0c:	bf00      	nop
 8008d0e:	e002      	b.n	8008d16 <tcp_input+0x7e2>
      goto dropped;
 8008d10:	bf00      	nop
 8008d12:	e000      	b.n	8008d16 <tcp_input+0x7e2>
      goto dropped;
 8008d14:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fd fb32 	bl	8006380 <pbuf_free>
 8008d1c:	e000      	b.n	8008d20 <tcp_input+0x7ec>
  return;
 8008d1e:	bf00      	nop
}
 8008d20:	3724      	adds	r7, #36	@ 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd90      	pop	{r4, r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200087bc 	.word	0x200087bc
 8008d2c:	200087b8 	.word	0x200087b8
 8008d30:	20008788 	.word	0x20008788
 8008d34:	20008798 	.word	0x20008798
 8008d38:	200087ac 	.word	0x200087ac
 8008d3c:	200087b2 	.word	0x200087b2
 8008d40:	200087a8 	.word	0x200087a8
 8008d44:	20005210 	.word	0x20005210
 8008d48:	20005214 	.word	0x20005214

08008d4c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <tcp_input_delayed_close+0x1c>
 8008d5a:	4b17      	ldr	r3, [pc, #92]	@ (8008db8 <tcp_input_delayed_close+0x6c>)
 8008d5c:	f240 225a 	movw	r2, #602	@ 0x25a
 8008d60:	4916      	ldr	r1, [pc, #88]	@ (8008dbc <tcp_input_delayed_close+0x70>)
 8008d62:	4817      	ldr	r0, [pc, #92]	@ (8008dc0 <tcp_input_delayed_close+0x74>)
 8008d64:	f006 fcc4 	bl	800f6f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008d68:	4b16      	ldr	r3, [pc, #88]	@ (8008dc4 <tcp_input_delayed_close+0x78>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f003 0310 	and.w	r3, r3, #16
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d01c      	beq.n	8008dae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	8b5b      	ldrh	r3, [r3, #26]
 8008d78:	f003 0310 	and.w	r3, r3, #16
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10d      	bne.n	8008d9c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d008      	beq.n	8008d9c <tcp_input_delayed_close+0x50>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6912      	ldr	r2, [r2, #16]
 8008d94:	f06f 010e 	mvn.w	r1, #14
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	480a      	ldr	r0, [pc, #40]	@ (8008dc8 <tcp_input_delayed_close+0x7c>)
 8008da0:	f7ff fa50 	bl	8008244 <tcp_pcb_remove>
    tcp_free(pcb);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7fd fd9b 	bl	80068e0 <tcp_free>
    return 1;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	080117a4 	.word	0x080117a4
 8008dbc:	08011974 	.word	0x08011974
 8008dc0:	080117f0 	.word	0x080117f0
 8008dc4:	200087b5 	.word	0x200087b5
 8008dc8:	2000877c 	.word	0x2000877c

08008dcc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008dcc:	b590      	push	{r4, r7, lr}
 8008dce:	b08b      	sub	sp, #44	@ 0x2c
 8008dd0:	af04      	add	r7, sp, #16
 8008dd2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8008f94 <tcp_listen_input+0x1c8>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 80d2 	bne.w	8008f86 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <tcp_listen_input+0x2a>
 8008de8:	4b6b      	ldr	r3, [pc, #428]	@ (8008f98 <tcp_listen_input+0x1cc>)
 8008dea:	f240 2281 	movw	r2, #641	@ 0x281
 8008dee:	496b      	ldr	r1, [pc, #428]	@ (8008f9c <tcp_listen_input+0x1d0>)
 8008df0:	486b      	ldr	r0, [pc, #428]	@ (8008fa0 <tcp_listen_input+0x1d4>)
 8008df2:	f006 fc7d 	bl	800f6f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008df6:	4b67      	ldr	r3, [pc, #412]	@ (8008f94 <tcp_listen_input+0x1c8>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d019      	beq.n	8008e36 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e02:	4b68      	ldr	r3, [pc, #416]	@ (8008fa4 <tcp_listen_input+0x1d8>)
 8008e04:	6819      	ldr	r1, [r3, #0]
 8008e06:	4b68      	ldr	r3, [pc, #416]	@ (8008fa8 <tcp_listen_input+0x1dc>)
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	4b67      	ldr	r3, [pc, #412]	@ (8008fac <tcp_listen_input+0x1e0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e12:	4b67      	ldr	r3, [pc, #412]	@ (8008fb0 <tcp_listen_input+0x1e4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e16:	885b      	ldrh	r3, [r3, #2]
 8008e18:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e1a:	4a65      	ldr	r2, [pc, #404]	@ (8008fb0 <tcp_listen_input+0x1e4>)
 8008e1c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e1e:	8812      	ldrh	r2, [r2, #0]
 8008e20:	b292      	uxth	r2, r2
 8008e22:	9202      	str	r2, [sp, #8]
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	4b63      	ldr	r3, [pc, #396]	@ (8008fb4 <tcp_listen_input+0x1e8>)
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	4b63      	ldr	r3, [pc, #396]	@ (8008fb8 <tcp_listen_input+0x1ec>)
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f003 fbd2 	bl	800c5d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008e34:	e0a9      	b.n	8008f8a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008e36:	4b57      	ldr	r3, [pc, #348]	@ (8008f94 <tcp_listen_input+0x1c8>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 80a3 	beq.w	8008f8a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7d5b      	ldrb	r3, [r3, #21]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff f85f 	bl	8007f0c <tcp_alloc>
 8008e4e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d111      	bne.n	8008e7a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <tcp_listen_input+0xa8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6910      	ldr	r0, [r2, #16]
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]
      return;
 8008e72:	e08b      	b.n	8008f8c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008e74:	23f0      	movs	r3, #240	@ 0xf0
 8008e76:	73bb      	strb	r3, [r7, #14]
      return;
 8008e78:	e088      	b.n	8008f8c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008e7a:	4b50      	ldr	r3, [pc, #320]	@ (8008fbc <tcp_listen_input+0x1f0>)
 8008e7c:	695a      	ldr	r2, [r3, #20]
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008e82:	4b4e      	ldr	r3, [pc, #312]	@ (8008fbc <tcp_listen_input+0x1f0>)
 8008e84:	691a      	ldr	r2, [r3, #16]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	8ada      	ldrh	r2, [r3, #22]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008e92:	4b47      	ldr	r3, [pc, #284]	@ (8008fb0 <tcp_listen_input+0x1e4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008ea4:	4b41      	ldr	r3, [pc, #260]	@ (8008fac <tcp_listen_input+0x1e0>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008eb6:	6978      	ldr	r0, [r7, #20]
 8008eb8:	f7ff fa58 	bl	800836c <tcp_next_iss>
 8008ebc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008ed6:	4b35      	ldr	r3, [pc, #212]	@ (8008fac <tcp_listen_input+0x1e0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	1e5a      	subs	r2, r3, #1
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691a      	ldr	r2, [r3, #16]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	7a5b      	ldrb	r3, [r3, #9]
 8008ef2:	f003 030c 	and.w	r3, r3, #12
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7a1a      	ldrb	r2, [r3, #8]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008f04:	4b2e      	ldr	r3, [pc, #184]	@ (8008fc0 <tcp_listen_input+0x1f4>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	60da      	str	r2, [r3, #12]
 8008f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8008fc0 <tcp_listen_input+0x1f4>)
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	f003 fd23 	bl	800c95c <tcp_timer_needed>
 8008f16:	4b2b      	ldr	r3, [pc, #172]	@ (8008fc4 <tcp_listen_input+0x1f8>)
 8008f18:	2201      	movs	r2, #1
 8008f1a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008f1c:	6978      	ldr	r0, [r7, #20]
 8008f1e:	f001 fd8b 	bl	800aa38 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008f22:	4b23      	ldr	r3, [pc, #140]	@ (8008fb0 <tcp_listen_input+0x1e4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	89db      	ldrh	r3, [r3, #14]
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f005 f8e7 	bl	800e118 <ip4_route>
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	461a      	mov	r2, r3
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff fa30 	bl	80083b8 <tcp_eff_send_mss_netif>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008f60:	2112      	movs	r1, #18
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f002 fc96 	bl	800b894 <tcp_enqueue_flags>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008f74:	2100      	movs	r1, #0
 8008f76:	6978      	ldr	r0, [r7, #20]
 8008f78:	f7fd fedc 	bl	8006d34 <tcp_abandon>
      return;
 8008f7c:	e006      	b.n	8008f8c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008f7e:	6978      	ldr	r0, [r7, #20]
 8008f80:	f002 fd76 	bl	800ba70 <tcp_output>
  return;
 8008f84:	e001      	b.n	8008f8a <tcp_listen_input+0x1be>
    return;
 8008f86:	bf00      	nop
 8008f88:	e000      	b.n	8008f8c <tcp_listen_input+0x1c0>
  return;
 8008f8a:	bf00      	nop
}
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd90      	pop	{r4, r7, pc}
 8008f92:	bf00      	nop
 8008f94:	200087b4 	.word	0x200087b4
 8008f98:	080117a4 	.word	0x080117a4
 8008f9c:	0801199c 	.word	0x0801199c
 8008fa0:	080117f0 	.word	0x080117f0
 8008fa4:	200087ac 	.word	0x200087ac
 8008fa8:	200087b2 	.word	0x200087b2
 8008fac:	200087a8 	.word	0x200087a8
 8008fb0:	20008798 	.word	0x20008798
 8008fb4:	20005210 	.word	0x20005210
 8008fb8:	20005214 	.word	0x20005214
 8008fbc:	20005200 	.word	0x20005200
 8008fc0:	2000877c 	.word	0x2000877c
 8008fc4:	20008784 	.word	0x20008784

08008fc8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af04      	add	r7, sp, #16
 8008fce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8009090 <tcp_timewait_input+0xc8>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d153      	bne.n	8009084 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <tcp_timewait_input+0x28>
 8008fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8009094 <tcp_timewait_input+0xcc>)
 8008fe4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008fe8:	492b      	ldr	r1, [pc, #172]	@ (8009098 <tcp_timewait_input+0xd0>)
 8008fea:	482c      	ldr	r0, [pc, #176]	@ (800909c <tcp_timewait_input+0xd4>)
 8008fec:	f006 fb80 	bl	800f6f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008ff0:	4b27      	ldr	r3, [pc, #156]	@ (8009090 <tcp_timewait_input+0xc8>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d02a      	beq.n	8009052 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008ffc:	4b28      	ldr	r3, [pc, #160]	@ (80090a0 <tcp_timewait_input+0xd8>)
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	db2d      	blt.n	8009066 <tcp_timewait_input+0x9e>
 800900a:	4b25      	ldr	r3, [pc, #148]	@ (80090a0 <tcp_timewait_input+0xd8>)
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009016:	440b      	add	r3, r1
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	dc23      	bgt.n	8009066 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800901e:	4b21      	ldr	r3, [pc, #132]	@ (80090a4 <tcp_timewait_input+0xdc>)
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	4b21      	ldr	r3, [pc, #132]	@ (80090a8 <tcp_timewait_input+0xe0>)
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	4b1d      	ldr	r3, [pc, #116]	@ (80090a0 <tcp_timewait_input+0xd8>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800902e:	4b1f      	ldr	r3, [pc, #124]	@ (80090ac <tcp_timewait_input+0xe4>)
 8009030:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009032:	885b      	ldrh	r3, [r3, #2]
 8009034:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009036:	4a1d      	ldr	r2, [pc, #116]	@ (80090ac <tcp_timewait_input+0xe4>)
 8009038:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800903a:	8812      	ldrh	r2, [r2, #0]
 800903c:	b292      	uxth	r2, r2
 800903e:	9202      	str	r2, [sp, #8]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	4b1b      	ldr	r3, [pc, #108]	@ (80090b0 <tcp_timewait_input+0xe8>)
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4b1b      	ldr	r3, [pc, #108]	@ (80090b4 <tcp_timewait_input+0xec>)
 8009048:	4602      	mov	r2, r0
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f003 fac4 	bl	800c5d8 <tcp_rst>
      return;
 8009050:	e01b      	b.n	800908a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009052:	4b0f      	ldr	r3, [pc, #60]	@ (8009090 <tcp_timewait_input+0xc8>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800905e:	4b16      	ldr	r3, [pc, #88]	@ (80090b8 <tcp_timewait_input+0xf0>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009066:	4b10      	ldr	r3, [pc, #64]	@ (80090a8 <tcp_timewait_input+0xe0>)
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00c      	beq.n	8009088 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	8b5b      	ldrh	r3, [r3, #26]
 8009072:	f043 0302 	orr.w	r3, r3, #2
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 fcf7 	bl	800ba70 <tcp_output>
  }
  return;
 8009082:	e001      	b.n	8009088 <tcp_timewait_input+0xc0>
    return;
 8009084:	bf00      	nop
 8009086:	e000      	b.n	800908a <tcp_timewait_input+0xc2>
  return;
 8009088:	bf00      	nop
}
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200087b4 	.word	0x200087b4
 8009094:	080117a4 	.word	0x080117a4
 8009098:	080119bc 	.word	0x080119bc
 800909c:	080117f0 	.word	0x080117f0
 80090a0:	200087a8 	.word	0x200087a8
 80090a4:	200087ac 	.word	0x200087ac
 80090a8:	200087b2 	.word	0x200087b2
 80090ac:	20008798 	.word	0x20008798
 80090b0:	20005210 	.word	0x20005210
 80090b4:	20005214 	.word	0x20005214
 80090b8:	20008770 	.word	0x20008770

080090bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80090bc:	b590      	push	{r4, r7, lr}
 80090be:	b08d      	sub	sp, #52	@ 0x34
 80090c0:	af04      	add	r7, sp, #16
 80090c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d106      	bne.n	80090e0 <tcp_process+0x24>
 80090d2:	4b9d      	ldr	r3, [pc, #628]	@ (8009348 <tcp_process+0x28c>)
 80090d4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80090d8:	499c      	ldr	r1, [pc, #624]	@ (800934c <tcp_process+0x290>)
 80090da:	489d      	ldr	r0, [pc, #628]	@ (8009350 <tcp_process+0x294>)
 80090dc:	f006 fb08 	bl	800f6f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80090e0:	4b9c      	ldr	r3, [pc, #624]	@ (8009354 <tcp_process+0x298>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d04e      	beq.n	800918a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	7d1b      	ldrb	r3, [r3, #20]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d108      	bne.n	8009106 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090f8:	4b97      	ldr	r3, [pc, #604]	@ (8009358 <tcp_process+0x29c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d123      	bne.n	8009148 <tcp_process+0x8c>
        acceptable = 1;
 8009100:	2301      	movs	r3, #1
 8009102:	76fb      	strb	r3, [r7, #27]
 8009104:	e020      	b.n	8009148 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800910a:	4b94      	ldr	r3, [pc, #592]	@ (800935c <tcp_process+0x2a0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d102      	bne.n	8009118 <tcp_process+0x5c>
        acceptable = 1;
 8009112:	2301      	movs	r3, #1
 8009114:	76fb      	strb	r3, [r7, #27]
 8009116:	e017      	b.n	8009148 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009118:	4b90      	ldr	r3, [pc, #576]	@ (800935c <tcp_process+0x2a0>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	db10      	blt.n	8009148 <tcp_process+0x8c>
 8009126:	4b8d      	ldr	r3, [pc, #564]	@ (800935c <tcp_process+0x2a0>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009132:	440b      	add	r3, r1
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	dc06      	bgt.n	8009148 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	8b5b      	ldrh	r3, [r3, #26]
 800913e:	f043 0302 	orr.w	r3, r3, #2
 8009142:	b29a      	uxth	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009148:	7efb      	ldrb	r3, [r7, #27]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d01b      	beq.n	8009186 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7d1b      	ldrb	r3, [r3, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <tcp_process+0xa8>
 8009156:	4b7c      	ldr	r3, [pc, #496]	@ (8009348 <tcp_process+0x28c>)
 8009158:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800915c:	4980      	ldr	r1, [pc, #512]	@ (8009360 <tcp_process+0x2a4>)
 800915e:	487c      	ldr	r0, [pc, #496]	@ (8009350 <tcp_process+0x294>)
 8009160:	f006 fac6 	bl	800f6f0 <iprintf>
      recv_flags |= TF_RESET;
 8009164:	4b7f      	ldr	r3, [pc, #508]	@ (8009364 <tcp_process+0x2a8>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f043 0308 	orr.w	r3, r3, #8
 800916c:	b2da      	uxtb	r2, r3
 800916e:	4b7d      	ldr	r3, [pc, #500]	@ (8009364 <tcp_process+0x2a8>)
 8009170:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	8b5b      	ldrh	r3, [r3, #26]
 8009176:	f023 0301 	bic.w	r3, r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009180:	f06f 030d 	mvn.w	r3, #13
 8009184:	e37a      	b.n	800987c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	e378      	b.n	800987c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800918a:	4b72      	ldr	r3, [pc, #456]	@ (8009354 <tcp_process+0x298>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d010      	beq.n	80091b8 <tcp_process+0xfc>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7d1b      	ldrb	r3, [r3, #20]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d00c      	beq.n	80091b8 <tcp_process+0xfc>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	7d1b      	ldrb	r3, [r3, #20]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d008      	beq.n	80091b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8b5b      	ldrh	r3, [r3, #26]
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	e361      	b.n	800987c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8b5b      	ldrh	r3, [r3, #26]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d103      	bne.n	80091cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80091c4:	4b68      	ldr	r3, [pc, #416]	@ (8009368 <tcp_process+0x2ac>)
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 fc2b 	bl	800aa38 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7d1b      	ldrb	r3, [r3, #20]
 80091e6:	3b02      	subs	r3, #2
 80091e8:	2b07      	cmp	r3, #7
 80091ea:	f200 8337 	bhi.w	800985c <tcp_process+0x7a0>
 80091ee:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <tcp_process+0x138>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009215 	.word	0x08009215
 80091f8:	08009445 	.word	0x08009445
 80091fc:	080095bd 	.word	0x080095bd
 8009200:	080095e7 	.word	0x080095e7
 8009204:	0800970b 	.word	0x0800970b
 8009208:	080095bd 	.word	0x080095bd
 800920c:	08009797 	.word	0x08009797
 8009210:	08009827 	.word	0x08009827
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009214:	4b4f      	ldr	r3, [pc, #316]	@ (8009354 <tcp_process+0x298>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80e4 	beq.w	80093ea <tcp_process+0x32e>
 8009222:	4b4c      	ldr	r3, [pc, #304]	@ (8009354 <tcp_process+0x298>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 80dd 	beq.w	80093ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	4b48      	ldr	r3, [pc, #288]	@ (8009358 <tcp_process+0x29c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	f040 80d5 	bne.w	80093ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009240:	4b46      	ldr	r3, [pc, #280]	@ (800935c <tcp_process+0x2a0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8009252:	4b41      	ldr	r3, [pc, #260]	@ (8009358 <tcp_process+0x29c>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800925a:	4b44      	ldr	r3, [pc, #272]	@ (800936c <tcp_process+0x2b0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	89db      	ldrh	r3, [r3, #14]
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009274:	4b39      	ldr	r3, [pc, #228]	@ (800935c <tcp_process+0x2a0>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2204      	movs	r2, #4
 8009282:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3304      	adds	r3, #4
 800928c:	4618      	mov	r0, r3
 800928e:	f004 ff43 	bl	800e118 <ip4_route>
 8009292:	4601      	mov	r1, r0
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	461a      	mov	r2, r3
 800929a:	4620      	mov	r0, r4
 800929c:	f7ff f88c 	bl	80083b8 <tcp_eff_send_mss_netif>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461a      	mov	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092ac:	009a      	lsls	r2, r3, #2
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80092b8:	428b      	cmp	r3, r1
 80092ba:	bf38      	it	cc
 80092bc:	460b      	movcc	r3, r1
 80092be:	429a      	cmp	r2, r3
 80092c0:	d204      	bcs.n	80092cc <tcp_process+0x210>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	e00d      	b.n	80092e8 <tcp_process+0x22c>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d904      	bls.n	80092e4 <tcp_process+0x228>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	e001      	b.n	80092e8 <tcp_process+0x22c>
 80092e4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <tcp_process+0x24a>
 80092f8:	4b13      	ldr	r3, [pc, #76]	@ (8009348 <tcp_process+0x28c>)
 80092fa:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80092fe:	491c      	ldr	r1, [pc, #112]	@ (8009370 <tcp_process+0x2b4>)
 8009300:	4813      	ldr	r0, [pc, #76]	@ (8009350 <tcp_process+0x294>)
 8009302:	f006 f9f5 	bl	800f6f0 <iprintf>
        --pcb->snd_queuelen;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800930c:	3b01      	subs	r3, #1
 800930e:	b29a      	uxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800931a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d12a      	bne.n	8009378 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009326:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <tcp_process+0x280>
 800932e:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <tcp_process+0x28c>)
 8009330:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009334:	490f      	ldr	r1, [pc, #60]	@ (8009374 <tcp_process+0x2b8>)
 8009336:	4806      	ldr	r0, [pc, #24]	@ (8009350 <tcp_process+0x294>)
 8009338:	f006 f9da 	bl	800f6f0 <iprintf>
          pcb->unsent = rseg->next;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009344:	e01c      	b.n	8009380 <tcp_process+0x2c4>
 8009346:	bf00      	nop
 8009348:	080117a4 	.word	0x080117a4
 800934c:	080119dc 	.word	0x080119dc
 8009350:	080117f0 	.word	0x080117f0
 8009354:	200087b4 	.word	0x200087b4
 8009358:	200087ac 	.word	0x200087ac
 800935c:	200087a8 	.word	0x200087a8
 8009360:	080119f8 	.word	0x080119f8
 8009364:	200087b5 	.word	0x200087b5
 8009368:	20008770 	.word	0x20008770
 800936c:	20008798 	.word	0x20008798
 8009370:	08011a18 	.word	0x08011a18
 8009374:	08011a30 	.word	0x08011a30
        } else {
          pcb->unacked = rseg->next;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8009380:	69f8      	ldr	r0, [r7, #28]
 8009382:	f7fe fc3c 	bl	8007bfe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800938a:	2b00      	cmp	r3, #0
 800938c:	d104      	bne.n	8009398 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009394:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009396:	e006      	b.n	80093a6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <tcp_process+0x30a>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6910      	ldr	r0, [r2, #16]
 80093ba:	2200      	movs	r2, #0
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	4798      	blx	r3
 80093c0:	4603      	mov	r3, r0
 80093c2:	76bb      	strb	r3, [r7, #26]
 80093c4:	e001      	b.n	80093ca <tcp_process+0x30e>
 80093c6:	2300      	movs	r3, #0
 80093c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80093ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80093ce:	f113 0f0d 	cmn.w	r3, #13
 80093d2:	d102      	bne.n	80093da <tcp_process+0x31e>
          return ERR_ABRT;
 80093d4:	f06f 030c 	mvn.w	r3, #12
 80093d8:	e250      	b.n	800987c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	8b5b      	ldrh	r3, [r3, #26]
 80093de:	f043 0302 	orr.w	r3, r3, #2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80093e8:	e23a      	b.n	8009860 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80093ea:	4b98      	ldr	r3, [pc, #608]	@ (800964c <tcp_process+0x590>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 8234 	beq.w	8009860 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093f8:	4b95      	ldr	r3, [pc, #596]	@ (8009650 <tcp_process+0x594>)
 80093fa:	6819      	ldr	r1, [r3, #0]
 80093fc:	4b95      	ldr	r3, [pc, #596]	@ (8009654 <tcp_process+0x598>)
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	4b95      	ldr	r3, [pc, #596]	@ (8009658 <tcp_process+0x59c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009408:	4b94      	ldr	r3, [pc, #592]	@ (800965c <tcp_process+0x5a0>)
 800940a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800940c:	885b      	ldrh	r3, [r3, #2]
 800940e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009410:	4a92      	ldr	r2, [pc, #584]	@ (800965c <tcp_process+0x5a0>)
 8009412:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009414:	8812      	ldrh	r2, [r2, #0]
 8009416:	b292      	uxth	r2, r2
 8009418:	9202      	str	r2, [sp, #8]
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	4b90      	ldr	r3, [pc, #576]	@ (8009660 <tcp_process+0x5a4>)
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	4b90      	ldr	r3, [pc, #576]	@ (8009664 <tcp_process+0x5a8>)
 8009422:	4602      	mov	r2, r0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f003 f8d7 	bl	800c5d8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009430:	2b05      	cmp	r3, #5
 8009432:	f200 8215 	bhi.w	8009860 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f002 fea3 	bl	800c188 <tcp_rexmit_rto>
      break;
 8009442:	e20d      	b.n	8009860 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009444:	4b81      	ldr	r3, [pc, #516]	@ (800964c <tcp_process+0x590>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 80a1 	beq.w	8009594 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009452:	4b7f      	ldr	r3, [pc, #508]	@ (8009650 <tcp_process+0x594>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	3b01      	subs	r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	db7e      	blt.n	8009560 <tcp_process+0x4a4>
 8009462:	4b7b      	ldr	r3, [pc, #492]	@ (8009650 <tcp_process+0x594>)
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	dc77      	bgt.n	8009560 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2204      	movs	r2, #4
 8009474:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d102      	bne.n	8009484 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800947e:	23fa      	movs	r3, #250	@ 0xfa
 8009480:	76bb      	strb	r3, [r7, #26]
 8009482:	e01d      	b.n	80094c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d106      	bne.n	800949c <tcp_process+0x3e0>
 800948e:	4b76      	ldr	r3, [pc, #472]	@ (8009668 <tcp_process+0x5ac>)
 8009490:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8009494:	4975      	ldr	r1, [pc, #468]	@ (800966c <tcp_process+0x5b0>)
 8009496:	4876      	ldr	r0, [pc, #472]	@ (8009670 <tcp_process+0x5b4>)
 8009498:	f006 f92a 	bl	800f6f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <tcp_process+0x400>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6910      	ldr	r0, [r2, #16]
 80094b0:	2200      	movs	r2, #0
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4798      	blx	r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	76bb      	strb	r3, [r7, #26]
 80094ba:	e001      	b.n	80094c0 <tcp_process+0x404>
 80094bc:	23f0      	movs	r3, #240	@ 0xf0
 80094be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80094c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00a      	beq.n	80094de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80094c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80094cc:	f113 0f0d 	cmn.w	r3, #13
 80094d0:	d002      	beq.n	80094d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7fd fcec 	bl	8006eb0 <tcp_abort>
            }
            return ERR_ABRT;
 80094d8:	f06f 030c 	mvn.w	r3, #12
 80094dc:	e1ce      	b.n	800987c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fae0 	bl	8009aa4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80094e4:	4b63      	ldr	r3, [pc, #396]	@ (8009674 <tcp_process+0x5b8>)
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <tcp_process+0x43c>
            recv_acked--;
 80094ec:	4b61      	ldr	r3, [pc, #388]	@ (8009674 <tcp_process+0x5b8>)
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009674 <tcp_process+0x5b8>)
 80094f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80094fc:	009a      	lsls	r2, r3, #2
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009508:	428b      	cmp	r3, r1
 800950a:	bf38      	it	cc
 800950c:	460b      	movcc	r3, r1
 800950e:	429a      	cmp	r2, r3
 8009510:	d204      	bcs.n	800951c <tcp_process+0x460>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	b29b      	uxth	r3, r3
 800951a:	e00d      	b.n	8009538 <tcp_process+0x47c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009520:	005b      	lsls	r3, r3, #1
 8009522:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009526:	4293      	cmp	r3, r2
 8009528:	d904      	bls.n	8009534 <tcp_process+0x478>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	b29b      	uxth	r3, r3
 8009532:	e001      	b.n	8009538 <tcp_process+0x47c>
 8009534:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800953e:	4b4e      	ldr	r3, [pc, #312]	@ (8009678 <tcp_process+0x5bc>)
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	d037      	beq.n	80095ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	8b5b      	ldrh	r3, [r3, #26]
 800954e:	f043 0302 	orr.w	r3, r3, #2
 8009552:	b29a      	uxth	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2207      	movs	r2, #7
 800955c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800955e:	e02c      	b.n	80095ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009560:	4b3b      	ldr	r3, [pc, #236]	@ (8009650 <tcp_process+0x594>)
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	4b3b      	ldr	r3, [pc, #236]	@ (8009654 <tcp_process+0x598>)
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	4b3b      	ldr	r3, [pc, #236]	@ (8009658 <tcp_process+0x59c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009570:	4b3a      	ldr	r3, [pc, #232]	@ (800965c <tcp_process+0x5a0>)
 8009572:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009578:	4a38      	ldr	r2, [pc, #224]	@ (800965c <tcp_process+0x5a0>)
 800957a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800957c:	8812      	ldrh	r2, [r2, #0]
 800957e:	b292      	uxth	r2, r2
 8009580:	9202      	str	r2, [sp, #8]
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	4b36      	ldr	r3, [pc, #216]	@ (8009660 <tcp_process+0x5a4>)
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4b36      	ldr	r3, [pc, #216]	@ (8009664 <tcp_process+0x5a8>)
 800958a:	4602      	mov	r2, r0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f003 f823 	bl	800c5d8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009592:	e167      	b.n	8009864 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009594:	4b2d      	ldr	r3, [pc, #180]	@ (800964c <tcp_process+0x590>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	f003 0302 	and.w	r3, r3, #2
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 8161 	beq.w	8009864 <tcp_process+0x7a8>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a6:	1e5a      	subs	r2, r3, #1
 80095a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009658 <tcp_process+0x59c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	f040 8159 	bne.w	8009864 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f002 fe0a 	bl	800c1cc <tcp_rexmit>
      break;
 80095b8:	e154      	b.n	8009864 <tcp_process+0x7a8>
 80095ba:	e153      	b.n	8009864 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa71 	bl	8009aa4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80095c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009678 <tcp_process+0x5bc>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 814c 	beq.w	8009868 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	8b5b      	ldrh	r3, [r3, #26]
 80095d4:	f043 0302 	orr.w	r3, r3, #2
 80095d8:	b29a      	uxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2207      	movs	r2, #7
 80095e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80095e4:	e140      	b.n	8009868 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fa5c 	bl	8009aa4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80095ec:	4b22      	ldr	r3, [pc, #136]	@ (8009678 <tcp_process+0x5bc>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d071      	beq.n	80096dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80095f8:	4b14      	ldr	r3, [pc, #80]	@ (800964c <tcp_process+0x590>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	f003 0310 	and.w	r3, r3, #16
 8009600:	2b00      	cmp	r3, #0
 8009602:	d060      	beq.n	80096c6 <tcp_process+0x60a>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009608:	4b11      	ldr	r3, [pc, #68]	@ (8009650 <tcp_process+0x594>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d15a      	bne.n	80096c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009614:	2b00      	cmp	r3, #0
 8009616:	d156      	bne.n	80096c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	8b5b      	ldrh	r3, [r3, #26]
 800961c:	f043 0302 	orr.w	r3, r3, #2
 8009620:	b29a      	uxth	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fe fdbc 	bl	80081a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800962c:	4b13      	ldr	r3, [pc, #76]	@ (800967c <tcp_process+0x5c0>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	429a      	cmp	r2, r3
 8009634:	d105      	bne.n	8009642 <tcp_process+0x586>
 8009636:	4b11      	ldr	r3, [pc, #68]	@ (800967c <tcp_process+0x5c0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	4a0f      	ldr	r2, [pc, #60]	@ (800967c <tcp_process+0x5c0>)
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	e02e      	b.n	80096a0 <tcp_process+0x5e4>
 8009642:	4b0e      	ldr	r3, [pc, #56]	@ (800967c <tcp_process+0x5c0>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e027      	b.n	800969a <tcp_process+0x5de>
 800964a:	bf00      	nop
 800964c:	200087b4 	.word	0x200087b4
 8009650:	200087ac 	.word	0x200087ac
 8009654:	200087b2 	.word	0x200087b2
 8009658:	200087a8 	.word	0x200087a8
 800965c:	20008798 	.word	0x20008798
 8009660:	20005210 	.word	0x20005210
 8009664:	20005214 	.word	0x20005214
 8009668:	080117a4 	.word	0x080117a4
 800966c:	08011a44 	.word	0x08011a44
 8009670:	080117f0 	.word	0x080117f0
 8009674:	200087b0 	.word	0x200087b0
 8009678:	200087b5 	.word	0x200087b5
 800967c:	2000877c 	.word	0x2000877c
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d104      	bne.n	8009694 <tcp_process+0x5d8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	60da      	str	r2, [r3, #12]
 8009692:	e005      	b.n	80096a0 <tcp_process+0x5e4>
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1ef      	bne.n	8009680 <tcp_process+0x5c4>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	60da      	str	r2, [r3, #12]
 80096a6:	4b77      	ldr	r3, [pc, #476]	@ (8009884 <tcp_process+0x7c8>)
 80096a8:	2201      	movs	r2, #1
 80096aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	220a      	movs	r2, #10
 80096b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80096b2:	4b75      	ldr	r3, [pc, #468]	@ (8009888 <tcp_process+0x7cc>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	60da      	str	r2, [r3, #12]
 80096ba:	4a73      	ldr	r2, [pc, #460]	@ (8009888 <tcp_process+0x7cc>)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	f003 f94c 	bl	800c95c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80096c4:	e0d2      	b.n	800986c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	8b5b      	ldrh	r3, [r3, #26]
 80096ca:	f043 0302 	orr.w	r3, r3, #2
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2208      	movs	r2, #8
 80096d8:	751a      	strb	r2, [r3, #20]
      break;
 80096da:	e0c7      	b.n	800986c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80096dc:	4b6b      	ldr	r3, [pc, #428]	@ (800988c <tcp_process+0x7d0>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 0310 	and.w	r3, r3, #16
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80c1 	beq.w	800986c <tcp_process+0x7b0>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096ee:	4b68      	ldr	r3, [pc, #416]	@ (8009890 <tcp_process+0x7d4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	f040 80ba 	bne.w	800986c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f040 80b5 	bne.w	800986c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2206      	movs	r2, #6
 8009706:	751a      	strb	r2, [r3, #20]
      break;
 8009708:	e0b0      	b.n	800986c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f9ca 	bl	8009aa4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009710:	4b60      	ldr	r3, [pc, #384]	@ (8009894 <tcp_process+0x7d8>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80a9 	beq.w	8009870 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	8b5b      	ldrh	r3, [r3, #26]
 8009722:	f043 0302 	orr.w	r3, r3, #2
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7fe fd39 	bl	80081a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009732:	4b59      	ldr	r3, [pc, #356]	@ (8009898 <tcp_process+0x7dc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	d105      	bne.n	8009748 <tcp_process+0x68c>
 800973c:	4b56      	ldr	r3, [pc, #344]	@ (8009898 <tcp_process+0x7dc>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	4a55      	ldr	r2, [pc, #340]	@ (8009898 <tcp_process+0x7dc>)
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	e013      	b.n	8009770 <tcp_process+0x6b4>
 8009748:	4b53      	ldr	r3, [pc, #332]	@ (8009898 <tcp_process+0x7dc>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	e00c      	b.n	800976a <tcp_process+0x6ae>
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d104      	bne.n	8009764 <tcp_process+0x6a8>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	60da      	str	r2, [r3, #12]
 8009762:	e005      	b.n	8009770 <tcp_process+0x6b4>
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1ef      	bne.n	8009750 <tcp_process+0x694>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	60da      	str	r2, [r3, #12]
 8009776:	4b43      	ldr	r3, [pc, #268]	@ (8009884 <tcp_process+0x7c8>)
 8009778:	2201      	movs	r2, #1
 800977a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	220a      	movs	r2, #10
 8009780:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009782:	4b41      	ldr	r3, [pc, #260]	@ (8009888 <tcp_process+0x7cc>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60da      	str	r2, [r3, #12]
 800978a:	4a3f      	ldr	r2, [pc, #252]	@ (8009888 <tcp_process+0x7cc>)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	f003 f8e4 	bl	800c95c <tcp_timer_needed>
      }
      break;
 8009794:	e06c      	b.n	8009870 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f984 	bl	8009aa4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800979c:	4b3b      	ldr	r3, [pc, #236]	@ (800988c <tcp_process+0x7d0>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d065      	beq.n	8009874 <tcp_process+0x7b8>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097ac:	4b38      	ldr	r3, [pc, #224]	@ (8009890 <tcp_process+0x7d4>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d15f      	bne.n	8009874 <tcp_process+0x7b8>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d15b      	bne.n	8009874 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7fe fcf1 	bl	80081a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80097c2:	4b35      	ldr	r3, [pc, #212]	@ (8009898 <tcp_process+0x7dc>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d105      	bne.n	80097d8 <tcp_process+0x71c>
 80097cc:	4b32      	ldr	r3, [pc, #200]	@ (8009898 <tcp_process+0x7dc>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	4a31      	ldr	r2, [pc, #196]	@ (8009898 <tcp_process+0x7dc>)
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	e013      	b.n	8009800 <tcp_process+0x744>
 80097d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009898 <tcp_process+0x7dc>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e00c      	b.n	80097fa <tcp_process+0x73e>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d104      	bne.n	80097f4 <tcp_process+0x738>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	60da      	str	r2, [r3, #12]
 80097f2:	e005      	b.n	8009800 <tcp_process+0x744>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1ef      	bne.n	80097e0 <tcp_process+0x724>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	60da      	str	r2, [r3, #12]
 8009806:	4b1f      	ldr	r3, [pc, #124]	@ (8009884 <tcp_process+0x7c8>)
 8009808:	2201      	movs	r2, #1
 800980a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	220a      	movs	r2, #10
 8009810:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009812:	4b1d      	ldr	r3, [pc, #116]	@ (8009888 <tcp_process+0x7cc>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60da      	str	r2, [r3, #12]
 800981a:	4a1b      	ldr	r2, [pc, #108]	@ (8009888 <tcp_process+0x7cc>)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	f003 f89c 	bl	800c95c <tcp_timer_needed>
      }
      break;
 8009824:	e026      	b.n	8009874 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f93c 	bl	8009aa4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800982c:	4b17      	ldr	r3, [pc, #92]	@ (800988c <tcp_process+0x7d0>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	f003 0310 	and.w	r3, r3, #16
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01f      	beq.n	8009878 <tcp_process+0x7bc>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800983c:	4b14      	ldr	r3, [pc, #80]	@ (8009890 <tcp_process+0x7d4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d119      	bne.n	8009878 <tcp_process+0x7bc>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d115      	bne.n	8009878 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800984c:	4b11      	ldr	r3, [pc, #68]	@ (8009894 <tcp_process+0x7d8>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f043 0310 	orr.w	r3, r3, #16
 8009854:	b2da      	uxtb	r2, r3
 8009856:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <tcp_process+0x7d8>)
 8009858:	701a      	strb	r2, [r3, #0]
      }
      break;
 800985a:	e00d      	b.n	8009878 <tcp_process+0x7bc>
    default:
      break;
 800985c:	bf00      	nop
 800985e:	e00c      	b.n	800987a <tcp_process+0x7be>
      break;
 8009860:	bf00      	nop
 8009862:	e00a      	b.n	800987a <tcp_process+0x7be>
      break;
 8009864:	bf00      	nop
 8009866:	e008      	b.n	800987a <tcp_process+0x7be>
      break;
 8009868:	bf00      	nop
 800986a:	e006      	b.n	800987a <tcp_process+0x7be>
      break;
 800986c:	bf00      	nop
 800986e:	e004      	b.n	800987a <tcp_process+0x7be>
      break;
 8009870:	bf00      	nop
 8009872:	e002      	b.n	800987a <tcp_process+0x7be>
      break;
 8009874:	bf00      	nop
 8009876:	e000      	b.n	800987a <tcp_process+0x7be>
      break;
 8009878:	bf00      	nop
  }
  return ERR_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3724      	adds	r7, #36	@ 0x24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd90      	pop	{r4, r7, pc}
 8009884:	20008784 	.word	0x20008784
 8009888:	20008780 	.word	0x20008780
 800988c:	200087b4 	.word	0x200087b4
 8009890:	200087ac 	.word	0x200087ac
 8009894:	200087b5 	.word	0x200087b5
 8009898:	2000877c 	.word	0x2000877c

0800989c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800989c:	b590      	push	{r4, r7, lr}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <tcp_oos_insert_segment+0x1e>
 80098ac:	4b3b      	ldr	r3, [pc, #236]	@ (800999c <tcp_oos_insert_segment+0x100>)
 80098ae:	f240 421f 	movw	r2, #1055	@ 0x41f
 80098b2:	493b      	ldr	r1, [pc, #236]	@ (80099a0 <tcp_oos_insert_segment+0x104>)
 80098b4:	483b      	ldr	r0, [pc, #236]	@ (80099a4 <tcp_oos_insert_segment+0x108>)
 80098b6:	f005 ff1b 	bl	800f6f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	899b      	ldrh	r3, [r3, #12]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fb f9fe 	bl	8004cc4 <lwip_htons>
 80098c8:	4603      	mov	r3, r0
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d028      	beq.n	8009926 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80098d4:	6838      	ldr	r0, [r7, #0]
 80098d6:	f7fe f97d 	bl	8007bd4 <tcp_segs_free>
    next = NULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	603b      	str	r3, [r7, #0]
 80098de:	e056      	b.n	800998e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	899b      	ldrh	r3, [r3, #12]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fb f9eb 	bl	8004cc4 <lwip_htons>
 80098ee:	4603      	mov	r3, r0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00d      	beq.n	8009916 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	899b      	ldrh	r3, [r3, #12]
 8009900:	b29c      	uxth	r4, r3
 8009902:	2001      	movs	r0, #1
 8009904:	f7fb f9de 	bl	8004cc4 <lwip_htons>
 8009908:	4603      	mov	r3, r0
 800990a:	461a      	mov	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	4322      	orrs	r2, r4
 8009912:	b292      	uxth	r2, r2
 8009914:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7fe f96c 	bl	8007bfe <tcp_seg_free>
    while (next &&
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00e      	beq.n	800994a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	891b      	ldrh	r3, [r3, #8]
 8009930:	461a      	mov	r2, r3
 8009932:	4b1d      	ldr	r3, [pc, #116]	@ (80099a8 <tcp_oos_insert_segment+0x10c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	441a      	add	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	8909      	ldrh	r1, [r1, #8]
 8009942:	440b      	add	r3, r1
 8009944:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009946:	2b00      	cmp	r3, #0
 8009948:	daca      	bge.n	80098e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01e      	beq.n	800998e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	891b      	ldrh	r3, [r3, #8]
 8009954:	461a      	mov	r2, r3
 8009956:	4b14      	ldr	r3, [pc, #80]	@ (80099a8 <tcp_oos_insert_segment+0x10c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	441a      	add	r2, r3
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009964:	2b00      	cmp	r3, #0
 8009966:	dd12      	ble.n	800998e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	b29a      	uxth	r2, r3
 8009970:	4b0d      	ldr	r3, [pc, #52]	@ (80099a8 <tcp_oos_insert_segment+0x10c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	b29b      	uxth	r3, r3
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	891b      	ldrh	r3, [r3, #8]
 8009986:	4619      	mov	r1, r3
 8009988:	4610      	mov	r0, r2
 800998a:	f7fc fb73 	bl	8006074 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	601a      	str	r2, [r3, #0]
}
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	bd90      	pop	{r4, r7, pc}
 800999c:	080117a4 	.word	0x080117a4
 80099a0:	08011a64 	.word	0x08011a64
 80099a4:	080117f0 	.word	0x080117f0
 80099a8:	200087a8 	.word	0x200087a8

080099ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80099ac:	b5b0      	push	{r4, r5, r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80099ba:	e03e      	b.n	8009a3a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fc fd60 	bl	8006490 <pbuf_clen>
 80099d0:	4603      	mov	r3, r0
 80099d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80099da:	8a7a      	ldrh	r2, [r7, #18]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d906      	bls.n	80099ee <tcp_free_acked_segments+0x42>
 80099e0:	4b2a      	ldr	r3, [pc, #168]	@ (8009a8c <tcp_free_acked_segments+0xe0>)
 80099e2:	f240 4257 	movw	r2, #1111	@ 0x457
 80099e6:	492a      	ldr	r1, [pc, #168]	@ (8009a90 <tcp_free_acked_segments+0xe4>)
 80099e8:	482a      	ldr	r0, [pc, #168]	@ (8009a94 <tcp_free_acked_segments+0xe8>)
 80099ea:	f005 fe81 	bl	800f6f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80099f4:	8a7b      	ldrh	r3, [r7, #18]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	891a      	ldrh	r2, [r3, #8]
 8009a04:	4b24      	ldr	r3, [pc, #144]	@ (8009a98 <tcp_free_acked_segments+0xec>)
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	4413      	add	r3, r2
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	4b22      	ldr	r3, [pc, #136]	@ (8009a98 <tcp_free_acked_segments+0xec>)
 8009a0e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009a10:	6978      	ldr	r0, [r7, #20]
 8009a12:	f7fe f8f4 	bl	8007bfe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00c      	beq.n	8009a3a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d109      	bne.n	8009a3a <tcp_free_acked_segments+0x8e>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <tcp_free_acked_segments+0x8e>
 8009a2c:	4b17      	ldr	r3, [pc, #92]	@ (8009a8c <tcp_free_acked_segments+0xe0>)
 8009a2e:	f240 4261 	movw	r2, #1121	@ 0x461
 8009a32:	491a      	ldr	r1, [pc, #104]	@ (8009a9c <tcp_free_acked_segments+0xf0>)
 8009a34:	4817      	ldr	r0, [pc, #92]	@ (8009a94 <tcp_free_acked_segments+0xe8>)
 8009a36:	f005 fe5b 	bl	800f6f0 <iprintf>
  while (seg_list != NULL &&
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d020      	beq.n	8009a82 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fb f951 	bl	8004cee <lwip_htonl>
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	891b      	ldrh	r3, [r3, #8]
 8009a52:	461d      	mov	r5, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	899b      	ldrh	r3, [r3, #12]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fb f931 	bl	8004cc4 <lwip_htons>
 8009a62:	4603      	mov	r3, r0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <tcp_free_acked_segments+0xc6>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <tcp_free_acked_segments+0xc8>
 8009a72:	2300      	movs	r3, #0
 8009a74:	442b      	add	r3, r5
 8009a76:	18e2      	adds	r2, r4, r3
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <tcp_free_acked_segments+0xf4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	dd9c      	ble.n	80099bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009a82:	68bb      	ldr	r3, [r7, #8]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a8c:	080117a4 	.word	0x080117a4
 8009a90:	08011a8c 	.word	0x08011a8c
 8009a94:	080117f0 	.word	0x080117f0
 8009a98:	200087b0 	.word	0x200087b0
 8009a9c:	08011ab4 	.word	0x08011ab4
 8009aa0:	200087ac 	.word	0x200087ac

08009aa4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009aa4:	b5b0      	push	{r4, r5, r7, lr}
 8009aa6:	b094      	sub	sp, #80	@ 0x50
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <tcp_receive+0x20>
 8009ab6:	4b91      	ldr	r3, [pc, #580]	@ (8009cfc <tcp_receive+0x258>)
 8009ab8:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009abc:	4990      	ldr	r1, [pc, #576]	@ (8009d00 <tcp_receive+0x25c>)
 8009abe:	4891      	ldr	r0, [pc, #580]	@ (8009d04 <tcp_receive+0x260>)
 8009ac0:	f005 fe16 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7d1b      	ldrb	r3, [r3, #20]
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d806      	bhi.n	8009ada <tcp_receive+0x36>
 8009acc:	4b8b      	ldr	r3, [pc, #556]	@ (8009cfc <tcp_receive+0x258>)
 8009ace:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009ad2:	498d      	ldr	r1, [pc, #564]	@ (8009d08 <tcp_receive+0x264>)
 8009ad4:	488b      	ldr	r0, [pc, #556]	@ (8009d04 <tcp_receive+0x260>)
 8009ad6:	f005 fe0b 	bl	800f6f0 <iprintf>

  if (flags & TCP_ACK) {
 8009ada:	4b8c      	ldr	r3, [pc, #560]	@ (8009d0c <tcp_receive+0x268>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	f003 0310 	and.w	r3, r3, #16
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 8264 	beq.w	8009fb0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009aee:	461a      	mov	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af4:	4413      	add	r3, r2
 8009af6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009afc:	4b84      	ldr	r3, [pc, #528]	@ (8009d10 <tcp_receive+0x26c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	db1b      	blt.n	8009b3e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b0a:	4b81      	ldr	r3, [pc, #516]	@ (8009d10 <tcp_receive+0x26c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d106      	bne.n	8009b20 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b16:	4b7f      	ldr	r3, [pc, #508]	@ (8009d14 <tcp_receive+0x270>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	db0e      	blt.n	8009b3e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b24:	4b7b      	ldr	r3, [pc, #492]	@ (8009d14 <tcp_receive+0x270>)
 8009b26:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d125      	bne.n	8009b78 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8009d18 <tcp_receive+0x274>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	89db      	ldrh	r3, [r3, #14]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d91c      	bls.n	8009b78 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009b3e:	4b76      	ldr	r3, [pc, #472]	@ (8009d18 <tcp_receive+0x274>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	89db      	ldrh	r3, [r3, #14]
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d205      	bcs.n	8009b68 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009b68:	4b69      	ldr	r3, [pc, #420]	@ (8009d10 <tcp_receive+0x26c>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009b70:	4b68      	ldr	r3, [pc, #416]	@ (8009d14 <tcp_receive+0x270>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009b78:	4b66      	ldr	r3, [pc, #408]	@ (8009d14 <tcp_receive+0x270>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dc58      	bgt.n	8009c38 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009b86:	4b65      	ldr	r3, [pc, #404]	@ (8009d1c <tcp_receive+0x278>)
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d14b      	bne.n	8009c26 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009b98:	4413      	add	r3, r2
 8009b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d142      	bne.n	8009c26 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	db3d      	blt.n	8009c26 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bae:	4b59      	ldr	r3, [pc, #356]	@ (8009d14 <tcp_receive+0x270>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d137      	bne.n	8009c26 <tcp_receive+0x182>
              found_dupack = 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009bc0:	2bff      	cmp	r3, #255	@ 0xff
 8009bc2:	d007      	beq.n	8009bd4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009bca:	3301      	adds	r3, #1
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d91b      	bls.n	8009c16 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009be8:	4413      	add	r3, r2
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d30a      	bcc.n	8009c0c <tcp_receive+0x168>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c00:	4413      	add	r3, r2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009c0a:	e004      	b.n	8009c16 <tcp_receive+0x172>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c12:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d902      	bls.n	8009c26 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f002 fb3f 	bl	800c2a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 8161 	bne.w	8009ef0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c36:	e15b      	b.n	8009ef0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c38:	4b36      	ldr	r3, [pc, #216]	@ (8009d14 <tcp_receive+0x270>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f2c0 814e 	blt.w	8009ee6 <tcp_receive+0x442>
 8009c4a:	4b32      	ldr	r3, [pc, #200]	@ (8009d14 <tcp_receive+0x270>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f300 8146 	bgt.w	8009ee6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	8b5b      	ldrh	r3, [r3, #26]
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d010      	beq.n	8009c88 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	8b5b      	ldrh	r3, [r3, #26]
 8009c6a:	f023 0304 	bic.w	r3, r3, #4
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009c96:	10db      	asrs	r3, r3, #3
 8009c98:	b21b      	sxth	r3, r3
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	b21a      	sxth	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009cb0:	4b18      	ldr	r3, [pc, #96]	@ (8009d14 <tcp_receive+0x270>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009cc8:	4b12      	ldr	r3, [pc, #72]	@ (8009d14 <tcp_receive+0x270>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	7d1b      	ldrb	r3, [r3, #20]
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	f240 8097 	bls.w	8009e08 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d245      	bcs.n	8009d76 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	8b5b      	ldrh	r3, [r3, #26]
 8009cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d014      	beq.n	8009d20 <tcp_receive+0x27c>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e013      	b.n	8009d22 <tcp_receive+0x27e>
 8009cfa:	bf00      	nop
 8009cfc:	080117a4 	.word	0x080117a4
 8009d00:	08011ad4 	.word	0x08011ad4
 8009d04:	080117f0 	.word	0x080117f0
 8009d08:	08011af0 	.word	0x08011af0
 8009d0c:	200087b4 	.word	0x200087b4
 8009d10:	200087a8 	.word	0x200087a8
 8009d14:	200087ac 	.word	0x200087ac
 8009d18:	20008798 	.word	0x20008798
 8009d1c:	200087b2 	.word	0x200087b2
 8009d20:	2302      	movs	r3, #2
 8009d22:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009d26:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d30:	fb12 f303 	smulbb	r3, r2, r3
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	bf28      	it	cs
 8009d3c:	4613      	movcs	r3, r2
 8009d3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009d46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009d48:	4413      	add	r3, r2
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d309      	bcc.n	8009d6a <tcp_receive+0x2c6>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009d5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009d5e:	4413      	add	r3, r2
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009d68:	e04e      	b.n	8009e08 <tcp_receive+0x364>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009d74:	e048      	b.n	8009e08 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009d7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009d7e:	4413      	add	r3, r2
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d309      	bcc.n	8009da0 <tcp_receive+0x2fc>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009d92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009d94:	4413      	add	r3, r2
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009d9e:	e004      	b.n	8009daa <tcp_receive+0x306>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009da6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d326      	bcc.n	8009e08 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009dda:	4413      	add	r3, r2
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d30a      	bcc.n	8009dfe <tcp_receive+0x35a>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009df2:	4413      	add	r3, r2
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009dfc:	e004      	b.n	8009e08 <tcp_receive+0x364>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e04:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e10:	4a98      	ldr	r2, [pc, #608]	@ (800a074 <tcp_receive+0x5d0>)
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7ff fdca 	bl	80099ac <tcp_free_acked_segments>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e26:	4a94      	ldr	r2, [pc, #592]	@ (800a078 <tcp_receive+0x5d4>)
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff fdbf 	bl	80099ac <tcp_free_acked_segments>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e42:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009e44:	e002      	b.n	8009e4c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d103      	bne.n	8009e62 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009e68:	4b84      	ldr	r3, [pc, #528]	@ (800a07c <tcp_receive+0x5d8>)
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	8b5b      	ldrh	r3, [r3, #26]
 8009e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d035      	beq.n	8009eee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d118      	bne.n	8009ebc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00c      	beq.n	8009eac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fa ff25 	bl	8004cee <lwip_htonl>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dc20      	bgt.n	8009eee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	8b5b      	ldrh	r3, [r3, #26]
 8009eb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009eba:	e018      	b.n	8009eee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fa ff10 	bl	8004cee <lwip_htonl>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	1ae3      	subs	r3, r4, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dc0b      	bgt.n	8009eee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	8b5b      	ldrh	r3, [r3, #26]
 8009eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ee4:	e003      	b.n	8009eee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f002 fbc8 	bl	800c67c <tcp_send_empty_ack>
 8009eec:	e000      	b.n	8009ef0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009eee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d05b      	beq.n	8009fb0 <tcp_receive+0x50c>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009efc:	4b60      	ldr	r3, [pc, #384]	@ (800a080 <tcp_receive+0x5dc>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	da54      	bge.n	8009fb0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009f06:	4b5f      	ldr	r3, [pc, #380]	@ (800a084 <tcp_receive+0x5e0>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009f1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009f24:	10db      	asrs	r3, r3, #3
 8009f26:	b21b      	sxth	r3, r3
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009f3e:	4413      	add	r3, r2
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	b21a      	sxth	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009f48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	da05      	bge.n	8009f5c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009f50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009f54:	425b      	negs	r3, r3
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009f5c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009f66:	109b      	asrs	r3, r3, #2
 8009f68:	b21b      	sxth	r3, r3
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009f80:	4413      	add	r3, r2
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	b21a      	sxth	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009f90:	10db      	asrs	r3, r3, #3
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	4413      	add	r3, r2
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	b21a      	sxth	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009fb0:	4b35      	ldr	r3, [pc, #212]	@ (800a088 <tcp_receive+0x5e4>)
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 84df 	beq.w	800a978 <tcp_receive+0xed4>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	7d1b      	ldrb	r3, [r3, #20]
 8009fbe:	2b06      	cmp	r3, #6
 8009fc0:	f200 84da 	bhi.w	800a978 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fc8:	4b30      	ldr	r3, [pc, #192]	@ (800a08c <tcp_receive+0x5e8>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f2c0 808f 	blt.w	800a0f4 <tcp_receive+0x650>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fda:	4b2b      	ldr	r3, [pc, #172]	@ (800a088 <tcp_receive+0x5e4>)
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800a08c <tcp_receive+0x5e8>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	440b      	add	r3, r1
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	3301      	adds	r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f300 8082 	bgt.w	800a0f4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009ff0:	4b27      	ldr	r3, [pc, #156]	@ (800a090 <tcp_receive+0x5ec>)
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ffa:	4b24      	ldr	r3, [pc, #144]	@ (800a08c <tcp_receive+0x5e8>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a002:	4b23      	ldr	r3, [pc, #140]	@ (800a090 <tcp_receive+0x5ec>)
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <tcp_receive+0x574>
 800a00a:	4b22      	ldr	r3, [pc, #136]	@ (800a094 <tcp_receive+0x5f0>)
 800a00c:	f240 5294 	movw	r2, #1428	@ 0x594
 800a010:	4921      	ldr	r1, [pc, #132]	@ (800a098 <tcp_receive+0x5f4>)
 800a012:	4822      	ldr	r0, [pc, #136]	@ (800a09c <tcp_receive+0x5f8>)
 800a014:	f005 fb6c 	bl	800f6f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a01e:	4293      	cmp	r3, r2
 800a020:	d906      	bls.n	800a030 <tcp_receive+0x58c>
 800a022:	4b1c      	ldr	r3, [pc, #112]	@ (800a094 <tcp_receive+0x5f0>)
 800a024:	f240 5295 	movw	r2, #1429	@ 0x595
 800a028:	491d      	ldr	r1, [pc, #116]	@ (800a0a0 <tcp_receive+0x5fc>)
 800a02a:	481c      	ldr	r0, [pc, #112]	@ (800a09c <tcp_receive+0x5f8>)
 800a02c:	f005 fb60 	bl	800f6f0 <iprintf>
      off = (u16_t)off32;
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a036:	4b16      	ldr	r3, [pc, #88]	@ (800a090 <tcp_receive+0x5ec>)
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	891b      	ldrh	r3, [r3, #8]
 800a03c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a040:	429a      	cmp	r2, r3
 800a042:	d906      	bls.n	800a052 <tcp_receive+0x5ae>
 800a044:	4b13      	ldr	r3, [pc, #76]	@ (800a094 <tcp_receive+0x5f0>)
 800a046:	f240 5297 	movw	r2, #1431	@ 0x597
 800a04a:	4916      	ldr	r1, [pc, #88]	@ (800a0a4 <tcp_receive+0x600>)
 800a04c:	4813      	ldr	r0, [pc, #76]	@ (800a09c <tcp_receive+0x5f8>)
 800a04e:	f005 fb4f 	bl	800f6f0 <iprintf>
      inseg.len -= off;
 800a052:	4b0f      	ldr	r3, [pc, #60]	@ (800a090 <tcp_receive+0x5ec>)
 800a054:	891a      	ldrh	r2, [r3, #8]
 800a056:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	4b0c      	ldr	r3, [pc, #48]	@ (800a090 <tcp_receive+0x5ec>)
 800a060:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a062:	4b0b      	ldr	r3, [pc, #44]	@ (800a090 <tcp_receive+0x5ec>)
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	891a      	ldrh	r2, [r3, #8]
 800a068:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800a070:	e02a      	b.n	800a0c8 <tcp_receive+0x624>
 800a072:	bf00      	nop
 800a074:	08011b0c 	.word	0x08011b0c
 800a078:	08011b14 	.word	0x08011b14
 800a07c:	200087b0 	.word	0x200087b0
 800a080:	200087ac 	.word	0x200087ac
 800a084:	20008770 	.word	0x20008770
 800a088:	200087b2 	.word	0x200087b2
 800a08c:	200087a8 	.word	0x200087a8
 800a090:	20008788 	.word	0x20008788
 800a094:	080117a4 	.word	0x080117a4
 800a098:	08011b1c 	.word	0x08011b1c
 800a09c:	080117f0 	.word	0x080117f0
 800a0a0:	08011b2c 	.word	0x08011b2c
 800a0a4:	08011b3c 	.word	0x08011b3c
        off -= p->len;
 800a0a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0aa:	895b      	ldrh	r3, [r3, #10]
 800a0ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a0b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0b8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a0ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0be:	2200      	movs	r2, #0
 800a0c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a0c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ca:	895b      	ldrh	r3, [r3, #10]
 800a0cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d8e9      	bhi.n	800a0a8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a0d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a0dc:	f7fc f8ca 	bl	8006274 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e4:	4a90      	ldr	r2, [pc, #576]	@ (800a328 <tcp_receive+0x884>)
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	4b90      	ldr	r3, [pc, #576]	@ (800a32c <tcp_receive+0x888>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	4a8e      	ldr	r2, [pc, #568]	@ (800a328 <tcp_receive+0x884>)
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a0f2:	e00d      	b.n	800a110 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a0f4:	4b8c      	ldr	r3, [pc, #560]	@ (800a328 <tcp_receive+0x884>)
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	da06      	bge.n	800a110 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8b5b      	ldrh	r3, [r3, #26]
 800a106:	f043 0302 	orr.w	r3, r3, #2
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a110:	4b85      	ldr	r3, [pc, #532]	@ (800a328 <tcp_receive+0x884>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f2c0 8427 	blt.w	800a96e <tcp_receive+0xeca>
 800a120:	4b81      	ldr	r3, [pc, #516]	@ (800a328 <tcp_receive+0x884>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a12c:	440b      	add	r3, r1
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	3301      	adds	r3, #1
 800a132:	2b00      	cmp	r3, #0
 800a134:	f300 841b 	bgt.w	800a96e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a13c:	4b7a      	ldr	r3, [pc, #488]	@ (800a328 <tcp_receive+0x884>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	f040 8298 	bne.w	800a676 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a146:	4b79      	ldr	r3, [pc, #484]	@ (800a32c <tcp_receive+0x888>)
 800a148:	891c      	ldrh	r4, [r3, #8]
 800a14a:	4b78      	ldr	r3, [pc, #480]	@ (800a32c <tcp_receive+0x888>)
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	b29b      	uxth	r3, r3
 800a152:	4618      	mov	r0, r3
 800a154:	f7fa fdb6 	bl	8004cc4 <lwip_htons>
 800a158:	4603      	mov	r3, r0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <tcp_receive+0x6c4>
 800a164:	2301      	movs	r3, #1
 800a166:	e000      	b.n	800a16a <tcp_receive+0x6c6>
 800a168:	2300      	movs	r3, #0
 800a16a:	4423      	add	r3, r4
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	4b70      	ldr	r3, [pc, #448]	@ (800a330 <tcp_receive+0x88c>)
 800a170:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a176:	4b6e      	ldr	r3, [pc, #440]	@ (800a330 <tcp_receive+0x88c>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d274      	bcs.n	800a268 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a17e:	4b6b      	ldr	r3, [pc, #428]	@ (800a32c <tcp_receive+0x888>)
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	899b      	ldrh	r3, [r3, #12]
 800a184:	b29b      	uxth	r3, r3
 800a186:	4618      	mov	r0, r3
 800a188:	f7fa fd9c 	bl	8004cc4 <lwip_htons>
 800a18c:	4603      	mov	r3, r0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01e      	beq.n	800a1d6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a198:	4b64      	ldr	r3, [pc, #400]	@ (800a32c <tcp_receive+0x888>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	899b      	ldrh	r3, [r3, #12]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	b21b      	sxth	r3, r3
 800a1a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a1a6:	b21c      	sxth	r4, r3
 800a1a8:	4b60      	ldr	r3, [pc, #384]	@ (800a32c <tcp_receive+0x888>)
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	899b      	ldrh	r3, [r3, #12]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fa fd87 	bl	8004cc4 <lwip_htons>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fa fd7f 	bl	8004cc4 <lwip_htons>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	b21b      	sxth	r3, r3
 800a1ca:	4323      	orrs	r3, r4
 800a1cc:	b21a      	sxth	r2, r3
 800a1ce:	4b57      	ldr	r3, [pc, #348]	@ (800a32c <tcp_receive+0x888>)
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	b292      	uxth	r2, r2
 800a1d4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a1da:	4b54      	ldr	r3, [pc, #336]	@ (800a32c <tcp_receive+0x888>)
 800a1dc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a1de:	4b53      	ldr	r3, [pc, #332]	@ (800a32c <tcp_receive+0x888>)
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	899b      	ldrh	r3, [r3, #12]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fa fd6c 	bl	8004cc4 <lwip_htons>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <tcp_receive+0x760>
            inseg.len -= 1;
 800a1f8:	4b4c      	ldr	r3, [pc, #304]	@ (800a32c <tcp_receive+0x888>)
 800a1fa:	891b      	ldrh	r3, [r3, #8]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	4b4a      	ldr	r3, [pc, #296]	@ (800a32c <tcp_receive+0x888>)
 800a202:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a204:	4b49      	ldr	r3, [pc, #292]	@ (800a32c <tcp_receive+0x888>)
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	4a48      	ldr	r2, [pc, #288]	@ (800a32c <tcp_receive+0x888>)
 800a20a:	8912      	ldrh	r2, [r2, #8]
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fb ff30 	bl	8006074 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a214:	4b45      	ldr	r3, [pc, #276]	@ (800a32c <tcp_receive+0x888>)
 800a216:	891c      	ldrh	r4, [r3, #8]
 800a218:	4b44      	ldr	r3, [pc, #272]	@ (800a32c <tcp_receive+0x888>)
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	899b      	ldrh	r3, [r3, #12]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4618      	mov	r0, r3
 800a222:	f7fa fd4f 	bl	8004cc4 <lwip_htons>
 800a226:	4603      	mov	r3, r0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 0303 	and.w	r3, r3, #3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <tcp_receive+0x792>
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <tcp_receive+0x794>
 800a236:	2300      	movs	r3, #0
 800a238:	4423      	add	r3, r4
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	4b3c      	ldr	r3, [pc, #240]	@ (800a330 <tcp_receive+0x88c>)
 800a23e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a240:	4b3b      	ldr	r3, [pc, #236]	@ (800a330 <tcp_receive+0x88c>)
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	4b38      	ldr	r3, [pc, #224]	@ (800a328 <tcp_receive+0x884>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	441a      	add	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a254:	440b      	add	r3, r1
 800a256:	429a      	cmp	r2, r3
 800a258:	d006      	beq.n	800a268 <tcp_receive+0x7c4>
 800a25a:	4b36      	ldr	r3, [pc, #216]	@ (800a334 <tcp_receive+0x890>)
 800a25c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a260:	4935      	ldr	r1, [pc, #212]	@ (800a338 <tcp_receive+0x894>)
 800a262:	4836      	ldr	r0, [pc, #216]	@ (800a33c <tcp_receive+0x898>)
 800a264:	f005 fa44 	bl	800f6f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 80e6 	beq.w	800a43e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a272:	4b2e      	ldr	r3, [pc, #184]	@ (800a32c <tcp_receive+0x888>)
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	899b      	ldrh	r3, [r3, #12]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fa fd22 	bl	8004cc4 <lwip_htons>
 800a280:	4603      	mov	r3, r0
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d010      	beq.n	800a2ae <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a28c:	e00a      	b.n	800a2a4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a292:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7fd fcad 	bl	8007bfe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f0      	bne.n	800a28e <tcp_receive+0x7ea>
 800a2ac:	e0c7      	b.n	800a43e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a2b4:	e051      	b.n	800a35a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	899b      	ldrh	r3, [r3, #12]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fa fd00 	bl	8004cc4 <lwip_htons>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	f003 0301 	and.w	r3, r3, #1
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d03c      	beq.n	800a34a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a2d0:	4b16      	ldr	r3, [pc, #88]	@ (800a32c <tcp_receive+0x888>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	899b      	ldrh	r3, [r3, #12]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fa fcf3 	bl	8004cc4 <lwip_htons>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d12f      	bne.n	800a34a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a2ea:	4b10      	ldr	r3, [pc, #64]	@ (800a32c <tcp_receive+0x888>)
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	899b      	ldrh	r3, [r3, #12]
 800a2f0:	b29c      	uxth	r4, r3
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	f7fa fce6 	bl	8004cc4 <lwip_htons>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a32c <tcp_receive+0x888>)
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	4322      	orrs	r2, r4
 800a302:	b292      	uxth	r2, r2
 800a304:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a306:	4b09      	ldr	r3, [pc, #36]	@ (800a32c <tcp_receive+0x888>)
 800a308:	891c      	ldrh	r4, [r3, #8]
 800a30a:	4b08      	ldr	r3, [pc, #32]	@ (800a32c <tcp_receive+0x888>)
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	899b      	ldrh	r3, [r3, #12]
 800a310:	b29b      	uxth	r3, r3
 800a312:	4618      	mov	r0, r3
 800a314:	f7fa fcd6 	bl	8004cc4 <lwip_htons>
 800a318:	4603      	mov	r3, r0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 0303 	and.w	r3, r3, #3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <tcp_receive+0x89c>
 800a324:	2301      	movs	r3, #1
 800a326:	e00c      	b.n	800a342 <tcp_receive+0x89e>
 800a328:	200087a8 	.word	0x200087a8
 800a32c:	20008788 	.word	0x20008788
 800a330:	200087b2 	.word	0x200087b2
 800a334:	080117a4 	.word	0x080117a4
 800a338:	08011b4c 	.word	0x08011b4c
 800a33c:	080117f0 	.word	0x080117f0
 800a340:	2300      	movs	r3, #0
 800a342:	4423      	add	r3, r4
 800a344:	b29a      	uxth	r2, r3
 800a346:	4b98      	ldr	r3, [pc, #608]	@ (800a5a8 <tcp_receive+0xb04>)
 800a348:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a354:	6938      	ldr	r0, [r7, #16]
 800a356:	f7fd fc52 	bl	8007bfe <tcp_seg_free>
            while (next &&
 800a35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00e      	beq.n	800a37e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a360:	4b91      	ldr	r3, [pc, #580]	@ (800a5a8 <tcp_receive+0xb04>)
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	4b91      	ldr	r3, [pc, #580]	@ (800a5ac <tcp_receive+0xb08>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	441a      	add	r2, r3
 800a36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a374:	8909      	ldrh	r1, [r1, #8]
 800a376:	440b      	add	r3, r1
 800a378:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	da9b      	bge.n	800a2b6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d059      	beq.n	800a438 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a384:	4b88      	ldr	r3, [pc, #544]	@ (800a5a8 <tcp_receive+0xb04>)
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	4b88      	ldr	r3, [pc, #544]	@ (800a5ac <tcp_receive+0xb08>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	441a      	add	r2, r3
 800a390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a398:	2b00      	cmp	r3, #0
 800a39a:	dd4d      	ble.n	800a438 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	4b81      	ldr	r3, [pc, #516]	@ (800a5ac <tcp_receive+0xb08>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	4b80      	ldr	r3, [pc, #512]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3b0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a3b2:	4b7f      	ldr	r3, [pc, #508]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	899b      	ldrh	r3, [r3, #12]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fa fc82 	bl	8004cc4 <lwip_htons>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	f003 0302 	and.w	r3, r3, #2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <tcp_receive+0x934>
                inseg.len -= 1;
 800a3cc:	4b78      	ldr	r3, [pc, #480]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3ce:	891b      	ldrh	r3, [r3, #8]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	4b76      	ldr	r3, [pc, #472]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3d6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a3d8:	4b75      	ldr	r3, [pc, #468]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	4a74      	ldr	r2, [pc, #464]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3de:	8912      	ldrh	r2, [r2, #8]
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fb fe46 	bl	8006074 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a3e8:	4b71      	ldr	r3, [pc, #452]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3ea:	891c      	ldrh	r4, [r3, #8]
 800a3ec:	4b70      	ldr	r3, [pc, #448]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	899b      	ldrh	r3, [r3, #12]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fa fc65 	bl	8004cc4 <lwip_htons>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	f003 0303 	and.w	r3, r3, #3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <tcp_receive+0x966>
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <tcp_receive+0x968>
 800a40a:	2300      	movs	r3, #0
 800a40c:	4423      	add	r3, r4
 800a40e:	b29a      	uxth	r2, r3
 800a410:	4b65      	ldr	r3, [pc, #404]	@ (800a5a8 <tcp_receive+0xb04>)
 800a412:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a414:	4b64      	ldr	r3, [pc, #400]	@ (800a5a8 <tcp_receive+0xb04>)
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	4b64      	ldr	r3, [pc, #400]	@ (800a5ac <tcp_receive+0xb08>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	441a      	add	r2, r3
 800a420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	429a      	cmp	r2, r3
 800a428:	d006      	beq.n	800a438 <tcp_receive+0x994>
 800a42a:	4b62      	ldr	r3, [pc, #392]	@ (800a5b4 <tcp_receive+0xb10>)
 800a42c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a430:	4961      	ldr	r1, [pc, #388]	@ (800a5b8 <tcp_receive+0xb14>)
 800a432:	4862      	ldr	r0, [pc, #392]	@ (800a5bc <tcp_receive+0xb18>)
 800a434:	f005 f95c 	bl	800f6f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a43c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a43e:	4b5a      	ldr	r3, [pc, #360]	@ (800a5a8 <tcp_receive+0xb04>)
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	4b59      	ldr	r3, [pc, #356]	@ (800a5ac <tcp_receive+0xb08>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	441a      	add	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a452:	4b55      	ldr	r3, [pc, #340]	@ (800a5a8 <tcp_receive+0xb04>)
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d206      	bcs.n	800a468 <tcp_receive+0x9c4>
 800a45a:	4b56      	ldr	r3, [pc, #344]	@ (800a5b4 <tcp_receive+0xb10>)
 800a45c:	f240 6207 	movw	r2, #1543	@ 0x607
 800a460:	4957      	ldr	r1, [pc, #348]	@ (800a5c0 <tcp_receive+0xb1c>)
 800a462:	4856      	ldr	r0, [pc, #344]	@ (800a5bc <tcp_receive+0xb18>)
 800a464:	f005 f944 	bl	800f6f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a46c:	4b4e      	ldr	r3, [pc, #312]	@ (800a5a8 <tcp_receive+0xb04>)
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7fc fe99 	bl	80071b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a47e:	4b4c      	ldr	r3, [pc, #304]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	891b      	ldrh	r3, [r3, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d006      	beq.n	800a496 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a488:	4b49      	ldr	r3, [pc, #292]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	4a4d      	ldr	r2, [pc, #308]	@ (800a5c4 <tcp_receive+0xb20>)
 800a48e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a490:	4b47      	ldr	r3, [pc, #284]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a492:	2200      	movs	r2, #0
 800a494:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a496:	4b46      	ldr	r3, [pc, #280]	@ (800a5b0 <tcp_receive+0xb0c>)
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	899b      	ldrh	r3, [r3, #12]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fa fc10 	bl	8004cc4 <lwip_htons>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80b8 	beq.w	800a622 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a4b2:	4b45      	ldr	r3, [pc, #276]	@ (800a5c8 <tcp_receive+0xb24>)
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	f043 0320 	orr.w	r3, r3, #32
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	4b42      	ldr	r3, [pc, #264]	@ (800a5c8 <tcp_receive+0xb24>)
 800a4be:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a4c0:	e0af      	b.n	800a622 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4c6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	4a36      	ldr	r2, [pc, #216]	@ (800a5ac <tcp_receive+0xb08>)
 800a4d2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	891b      	ldrh	r3, [r3, #8]
 800a4d8:	461c      	mov	r4, r3
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	899b      	ldrh	r3, [r3, #12]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fa fbee 	bl	8004cc4 <lwip_htons>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <tcp_receive+0xa54>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e000      	b.n	800a4fa <tcp_receive+0xa56>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	191a      	adds	r2, r3, r4
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a500:	441a      	add	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a50a:	461c      	mov	r4, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	891b      	ldrh	r3, [r3, #8]
 800a510:	461d      	mov	r5, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	899b      	ldrh	r3, [r3, #12]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fa fbd2 	bl	8004cc4 <lwip_htons>
 800a520:	4603      	mov	r3, r0
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 0303 	and.w	r3, r3, #3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <tcp_receive+0xa8c>
 800a52c:	2301      	movs	r3, #1
 800a52e:	e000      	b.n	800a532 <tcp_receive+0xa8e>
 800a530:	2300      	movs	r3, #0
 800a532:	442b      	add	r3, r5
 800a534:	429c      	cmp	r4, r3
 800a536:	d206      	bcs.n	800a546 <tcp_receive+0xaa2>
 800a538:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b4 <tcp_receive+0xb10>)
 800a53a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a53e:	4923      	ldr	r1, [pc, #140]	@ (800a5cc <tcp_receive+0xb28>)
 800a540:	481e      	ldr	r0, [pc, #120]	@ (800a5bc <tcp_receive+0xb18>)
 800a542:	f005 f8d5 	bl	800f6f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	891b      	ldrh	r3, [r3, #8]
 800a54a:	461c      	mov	r4, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	899b      	ldrh	r3, [r3, #12]
 800a552:	b29b      	uxth	r3, r3
 800a554:	4618      	mov	r0, r3
 800a556:	f7fa fbb5 	bl	8004cc4 <lwip_htons>
 800a55a:	4603      	mov	r3, r0
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	f003 0303 	and.w	r3, r3, #3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <tcp_receive+0xac6>
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <tcp_receive+0xac8>
 800a56a:	2300      	movs	r3, #0
 800a56c:	1919      	adds	r1, r3, r4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a572:	b28b      	uxth	r3, r1
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	b29a      	uxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7fc fe17 	bl	80071b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	891b      	ldrh	r3, [r3, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d028      	beq.n	800a5de <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a58c:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c4 <tcp_receive+0xb20>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01d      	beq.n	800a5d0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a594:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c4 <tcp_receive+0xb20>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7fb ffb0 	bl	8006504 <pbuf_cat>
 800a5a4:	e018      	b.n	800a5d8 <tcp_receive+0xb34>
 800a5a6:	bf00      	nop
 800a5a8:	200087b2 	.word	0x200087b2
 800a5ac:	200087a8 	.word	0x200087a8
 800a5b0:	20008788 	.word	0x20008788
 800a5b4:	080117a4 	.word	0x080117a4
 800a5b8:	08011b84 	.word	0x08011b84
 800a5bc:	080117f0 	.word	0x080117f0
 800a5c0:	08011bc0 	.word	0x08011bc0
 800a5c4:	200087b8 	.word	0x200087b8
 800a5c8:	200087b5 	.word	0x200087b5
 800a5cc:	08011be0 	.word	0x08011be0
            } else {
              recv_data = cseg->p;
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	4a70      	ldr	r2, [pc, #448]	@ (800a798 <tcp_receive+0xcf4>)
 800a5d6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	899b      	ldrh	r3, [r3, #12]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fa fb6c 	bl	8004cc4 <lwip_htons>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00d      	beq.n	800a614 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a5f8:	4b68      	ldr	r3, [pc, #416]	@ (800a79c <tcp_receive+0xcf8>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	f043 0320 	orr.w	r3, r3, #32
 800a600:	b2da      	uxtb	r2, r3
 800a602:	4b66      	ldr	r3, [pc, #408]	@ (800a79c <tcp_receive+0xcf8>)
 800a604:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	7d1b      	ldrb	r3, [r3, #20]
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d102      	bne.n	800a614 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2207      	movs	r2, #7
 800a612:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a61c:	68b8      	ldr	r0, [r7, #8]
 800a61e:	f7fd faee 	bl	8007bfe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a626:	2b00      	cmp	r3, #0
 800a628:	d008      	beq.n	800a63c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a636:	429a      	cmp	r2, r3
 800a638:	f43f af43 	beq.w	800a4c2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	8b5b      	ldrh	r3, [r3, #26]
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00e      	beq.n	800a666 <tcp_receive+0xbc2>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	8b5b      	ldrh	r3, [r3, #26]
 800a64c:	f023 0301 	bic.w	r3, r3, #1
 800a650:	b29a      	uxth	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	835a      	strh	r2, [r3, #26]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	8b5b      	ldrh	r3, [r3, #26]
 800a65a:	f043 0302 	orr.w	r3, r3, #2
 800a65e:	b29a      	uxth	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a664:	e187      	b.n	800a976 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	8b5b      	ldrh	r3, [r3, #26]
 800a66a:	f043 0301 	orr.w	r3, r3, #1
 800a66e:	b29a      	uxth	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a674:	e17f      	b.n	800a976 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a67e:	4848      	ldr	r0, [pc, #288]	@ (800a7a0 <tcp_receive+0xcfc>)
 800a680:	f7fd faf4 	bl	8007c6c <tcp_seg_copy>
 800a684:	4602      	mov	r2, r0
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	675a      	str	r2, [r3, #116]	@ 0x74
 800a68a:	e16c      	b.n	800a966 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a694:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a696:	e156      	b.n	800a946 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	4b41      	ldr	r3, [pc, #260]	@ (800a7a4 <tcp_receive+0xd00>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d11d      	bne.n	800a6e2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a6a6:	4b3e      	ldr	r3, [pc, #248]	@ (800a7a0 <tcp_receive+0xcfc>)
 800a6a8:	891a      	ldrh	r2, [r3, #8]
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ac:	891b      	ldrh	r3, [r3, #8]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	f240 814e 	bls.w	800a950 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a6b4:	483a      	ldr	r0, [pc, #232]	@ (800a7a0 <tcp_receive+0xcfc>)
 800a6b6:	f7fd fad9 	bl	8007c6c <tcp_seg_copy>
 800a6ba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 8148 	beq.w	800a954 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	e002      	b.n	800a6d8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a6d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6da:	6978      	ldr	r0, [r7, #20]
 800a6dc:	f7ff f8de 	bl	800989c <tcp_oos_insert_segment>
                }
                break;
 800a6e0:	e138      	b.n	800a954 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d117      	bne.n	800a718 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a6e8:	4b2e      	ldr	r3, [pc, #184]	@ (800a7a4 <tcp_receive+0xd00>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	da57      	bge.n	800a7a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a6f8:	4829      	ldr	r0, [pc, #164]	@ (800a7a0 <tcp_receive+0xcfc>)
 800a6fa:	f7fd fab7 	bl	8007c6c <tcp_seg_copy>
 800a6fe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 8128 	beq.w	800a958 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a70e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a710:	69b8      	ldr	r0, [r7, #24]
 800a712:	f7ff f8c3 	bl	800989c <tcp_oos_insert_segment>
                  }
                  break;
 800a716:	e11f      	b.n	800a958 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a718:	4b22      	ldr	r3, [pc, #136]	@ (800a7a4 <tcp_receive+0xd00>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	db3e      	blt.n	800a7a8 <tcp_receive+0xd04>
 800a72a:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a4 <tcp_receive+0xd00>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	3301      	adds	r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	dc35      	bgt.n	800a7a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a73c:	4818      	ldr	r0, [pc, #96]	@ (800a7a0 <tcp_receive+0xcfc>)
 800a73e:	f7fd fa95 	bl	8007c6c <tcp_seg_copy>
 800a742:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 8108 	beq.w	800a95c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a754:	8912      	ldrh	r2, [r2, #8]
 800a756:	441a      	add	r2, r3
 800a758:	4b12      	ldr	r3, [pc, #72]	@ (800a7a4 <tcp_receive+0xd00>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dd12      	ble.n	800a788 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a762:	4b10      	ldr	r3, [pc, #64]	@ (800a7a4 <tcp_receive+0xd00>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	b29a      	uxth	r2, r3
 800a768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	b29a      	uxth	r2, r3
 800a774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a776:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77e:	891b      	ldrh	r3, [r3, #8]
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f7fb fc76 	bl	8006074 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78a:	69fa      	ldr	r2, [r7, #28]
 800a78c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a78e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a790:	69f8      	ldr	r0, [r7, #28]
 800a792:	f7ff f883 	bl	800989c <tcp_oos_insert_segment>
                  }
                  break;
 800a796:	e0e1      	b.n	800a95c <tcp_receive+0xeb8>
 800a798:	200087b8 	.word	0x200087b8
 800a79c:	200087b5 	.word	0x200087b5
 800a7a0:	20008788 	.word	0x20008788
 800a7a4:	200087a8 	.word	0x200087a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f040 80c5 	bne.w	800a940 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a7b6:	4b7f      	ldr	r3, [pc, #508]	@ (800a9b4 <tcp_receive+0xf10>)
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f340 80bc 	ble.w	800a940 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	899b      	ldrh	r3, [r3, #12]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fa fa77 	bl	8004cc4 <lwip_htons>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f040 80be 	bne.w	800a960 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a7e4:	4874      	ldr	r0, [pc, #464]	@ (800a9b8 <tcp_receive+0xf14>)
 800a7e6:	f7fd fa41 	bl	8007c6c <tcp_seg_copy>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80b5 	beq.w	800a964 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a802:	8912      	ldrh	r2, [r2, #8]
 800a804:	441a      	add	r2, r3
 800a806:	4b6b      	ldr	r3, [pc, #428]	@ (800a9b4 <tcp_receive+0xf10>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	dd12      	ble.n	800a836 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a810:	4b68      	ldr	r3, [pc, #416]	@ (800a9b4 <tcp_receive+0xf10>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	b29a      	uxth	r2, r3
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	b29a      	uxth	r2, r3
 800a822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a824:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82c:	891b      	ldrh	r3, [r3, #8]
 800a82e:	4619      	mov	r1, r3
 800a830:	4610      	mov	r0, r2
 800a832:	f7fb fc1f 	bl	8006074 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a836:	4b61      	ldr	r3, [pc, #388]	@ (800a9bc <tcp_receive+0xf18>)
 800a838:	881b      	ldrh	r3, [r3, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	4b5d      	ldr	r3, [pc, #372]	@ (800a9b4 <tcp_receive+0xf10>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	441a      	add	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a84a:	440b      	add	r3, r1
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f340 8088 	ble.w	800a964 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	899b      	ldrh	r3, [r3, #12]
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fa fa30 	bl	8004cc4 <lwip_htons>
 800a864:	4603      	mov	r3, r0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d021      	beq.n	800a8b4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	899b      	ldrh	r3, [r3, #12]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a880:	b21c      	sxth	r4, r3
 800a882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	899b      	ldrh	r3, [r3, #12]
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fa fa19 	bl	8004cc4 <lwip_htons>
 800a892:	4603      	mov	r3, r0
 800a894:	b2db      	uxtb	r3, r3
 800a896:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fa fa11 	bl	8004cc4 <lwip_htons>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	b21b      	sxth	r3, r3
 800a8a6:	4323      	orrs	r3, r4
 800a8a8:	b21a      	sxth	r2, r3
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	b292      	uxth	r2, r2
 800a8b2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8be:	4413      	add	r3, r2
 800a8c0:	b299      	uxth	r1, r3
 800a8c2:	4b3c      	ldr	r3, [pc, #240]	@ (800a9b4 <tcp_receive+0xf10>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	1a8a      	subs	r2, r1, r2
 800a8ce:	b292      	uxth	r2, r2
 800a8d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	685a      	ldr	r2, [r3, #4]
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	891b      	ldrh	r3, [r3, #8]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	f7fb fbc7 	bl	8006074 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	891c      	ldrh	r4, [r3, #8]
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	899b      	ldrh	r3, [r3, #12]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fa f9e4 	bl	8004cc4 <lwip_htons>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 0303 	and.w	r3, r3, #3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <tcp_receive+0xe68>
 800a908:	2301      	movs	r3, #1
 800a90a:	e000      	b.n	800a90e <tcp_receive+0xe6a>
 800a90c:	2300      	movs	r3, #0
 800a90e:	4423      	add	r3, r4
 800a910:	b29a      	uxth	r2, r3
 800a912:	4b2a      	ldr	r3, [pc, #168]	@ (800a9bc <tcp_receive+0xf18>)
 800a914:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a916:	4b29      	ldr	r3, [pc, #164]	@ (800a9bc <tcp_receive+0xf18>)
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	4b25      	ldr	r3, [pc, #148]	@ (800a9b4 <tcp_receive+0xf10>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a92a:	440b      	add	r3, r1
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d019      	beq.n	800a964 <tcp_receive+0xec0>
 800a930:	4b23      	ldr	r3, [pc, #140]	@ (800a9c0 <tcp_receive+0xf1c>)
 800a932:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a936:	4923      	ldr	r1, [pc, #140]	@ (800a9c4 <tcp_receive+0xf20>)
 800a938:	4823      	ldr	r0, [pc, #140]	@ (800a9c8 <tcp_receive+0xf24>)
 800a93a:	f004 fed9 	bl	800f6f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a93e:	e011      	b.n	800a964 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f47f aea5 	bne.w	800a698 <tcp_receive+0xbf4>
 800a94e:	e00a      	b.n	800a966 <tcp_receive+0xec2>
                break;
 800a950:	bf00      	nop
 800a952:	e008      	b.n	800a966 <tcp_receive+0xec2>
                break;
 800a954:	bf00      	nop
 800a956:	e006      	b.n	800a966 <tcp_receive+0xec2>
                  break;
 800a958:	bf00      	nop
 800a95a:	e004      	b.n	800a966 <tcp_receive+0xec2>
                  break;
 800a95c:	bf00      	nop
 800a95e:	e002      	b.n	800a966 <tcp_receive+0xec2>
                  break;
 800a960:	bf00      	nop
 800a962:	e000      	b.n	800a966 <tcp_receive+0xec2>
                break;
 800a964:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 fe88 	bl	800c67c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a96c:	e003      	b.n	800a976 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f001 fe84 	bl	800c67c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a974:	e01a      	b.n	800a9ac <tcp_receive+0xf08>
 800a976:	e019      	b.n	800a9ac <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a978:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b4 <tcp_receive+0xf10>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	db0a      	blt.n	800a99c <tcp_receive+0xef8>
 800a986:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b4 <tcp_receive+0xf10>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98e:	6879      	ldr	r1, [r7, #4]
 800a990:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a992:	440b      	add	r3, r1
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	3301      	adds	r3, #1
 800a998:	2b00      	cmp	r3, #0
 800a99a:	dd07      	ble.n	800a9ac <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	8b5b      	ldrh	r3, [r3, #26]
 800a9a0:	f043 0302 	orr.w	r3, r3, #2
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a9aa:	e7ff      	b.n	800a9ac <tcp_receive+0xf08>
 800a9ac:	bf00      	nop
 800a9ae:	3750      	adds	r7, #80	@ 0x50
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a9b4:	200087a8 	.word	0x200087a8
 800a9b8:	20008788 	.word	0x20008788
 800a9bc:	200087b2 	.word	0x200087b2
 800a9c0:	080117a4 	.word	0x080117a4
 800a9c4:	08011b4c 	.word	0x08011b4c
 800a9c8:	080117f0 	.word	0x080117f0

0800a9cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a9d2:	4b15      	ldr	r3, [pc, #84]	@ (800aa28 <tcp_get_next_optbyte+0x5c>)
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	b291      	uxth	r1, r2
 800a9da:	4a13      	ldr	r2, [pc, #76]	@ (800aa28 <tcp_get_next_optbyte+0x5c>)
 800a9dc:	8011      	strh	r1, [r2, #0]
 800a9de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a9e0:	4b12      	ldr	r3, [pc, #72]	@ (800aa2c <tcp_get_next_optbyte+0x60>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d004      	beq.n	800a9f2 <tcp_get_next_optbyte+0x26>
 800a9e8:	4b11      	ldr	r3, [pc, #68]	@ (800aa30 <tcp_get_next_optbyte+0x64>)
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	88fa      	ldrh	r2, [r7, #6]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d208      	bcs.n	800aa04 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a9f2:	4b10      	ldr	r3, [pc, #64]	@ (800aa34 <tcp_get_next_optbyte+0x68>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3314      	adds	r3, #20
 800a9f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	4413      	add	r3, r2
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	e00b      	b.n	800aa1c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800aa04:	88fb      	ldrh	r3, [r7, #6]
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	4b09      	ldr	r3, [pc, #36]	@ (800aa30 <tcp_get_next_optbyte+0x64>)
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aa12:	4b06      	ldr	r3, [pc, #24]	@ (800aa2c <tcp_get_next_optbyte+0x60>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	797b      	ldrb	r3, [r7, #5]
 800aa18:	4413      	add	r3, r2
 800aa1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	200087a4 	.word	0x200087a4
 800aa2c:	200087a0 	.word	0x200087a0
 800aa30:	2000879e 	.word	0x2000879e
 800aa34:	20008798 	.word	0x20008798

0800aa38 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d106      	bne.n	800aa54 <tcp_parseopt+0x1c>
 800aa46:	4b32      	ldr	r3, [pc, #200]	@ (800ab10 <tcp_parseopt+0xd8>)
 800aa48:	f240 727d 	movw	r2, #1917	@ 0x77d
 800aa4c:	4931      	ldr	r1, [pc, #196]	@ (800ab14 <tcp_parseopt+0xdc>)
 800aa4e:	4832      	ldr	r0, [pc, #200]	@ (800ab18 <tcp_parseopt+0xe0>)
 800aa50:	f004 fe4e 	bl	800f6f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aa54:	4b31      	ldr	r3, [pc, #196]	@ (800ab1c <tcp_parseopt+0xe4>)
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d056      	beq.n	800ab0a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aa5c:	4b30      	ldr	r3, [pc, #192]	@ (800ab20 <tcp_parseopt+0xe8>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	801a      	strh	r2, [r3, #0]
 800aa62:	e046      	b.n	800aaf2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800aa64:	f7ff ffb2 	bl	800a9cc <tcp_get_next_optbyte>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d006      	beq.n	800aa80 <tcp_parseopt+0x48>
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	dc2a      	bgt.n	800aacc <tcp_parseopt+0x94>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d042      	beq.n	800ab00 <tcp_parseopt+0xc8>
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d038      	beq.n	800aaf0 <tcp_parseopt+0xb8>
 800aa7e:	e025      	b.n	800aacc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800aa80:	f7ff ffa4 	bl	800a9cc <tcp_get_next_optbyte>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d13c      	bne.n	800ab04 <tcp_parseopt+0xcc>
 800aa8a:	4b25      	ldr	r3, [pc, #148]	@ (800ab20 <tcp_parseopt+0xe8>)
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	4a22      	ldr	r2, [pc, #136]	@ (800ab1c <tcp_parseopt+0xe4>)
 800aa92:	8812      	ldrh	r2, [r2, #0]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	da35      	bge.n	800ab04 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800aa98:	f7ff ff98 	bl	800a9cc <tcp_get_next_optbyte>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800aaa2:	f7ff ff93 	bl	800a9cc <tcp_get_next_optbyte>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	89bb      	ldrh	r3, [r7, #12]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800aab0:	89bb      	ldrh	r3, [r7, #12]
 800aab2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800aab6:	d804      	bhi.n	800aac2 <tcp_parseopt+0x8a>
 800aab8:	89bb      	ldrh	r3, [r7, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <tcp_parseopt+0x8a>
 800aabe:	89ba      	ldrh	r2, [r7, #12]
 800aac0:	e001      	b.n	800aac6 <tcp_parseopt+0x8e>
 800aac2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800aaca:	e012      	b.n	800aaf2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800aacc:	f7ff ff7e 	bl	800a9cc <tcp_get_next_optbyte>
 800aad0:	4603      	mov	r3, r0
 800aad2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d916      	bls.n	800ab08 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	b29a      	uxth	r2, r3
 800aade:	4b10      	ldr	r3, [pc, #64]	@ (800ab20 <tcp_parseopt+0xe8>)
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	4413      	add	r3, r2
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3b02      	subs	r3, #2
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	4b0d      	ldr	r3, [pc, #52]	@ (800ab20 <tcp_parseopt+0xe8>)
 800aaec:	801a      	strh	r2, [r3, #0]
 800aaee:	e000      	b.n	800aaf2 <tcp_parseopt+0xba>
          break;
 800aaf0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aaf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ab20 <tcp_parseopt+0xe8>)
 800aaf4:	881a      	ldrh	r2, [r3, #0]
 800aaf6:	4b09      	ldr	r3, [pc, #36]	@ (800ab1c <tcp_parseopt+0xe4>)
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d3b2      	bcc.n	800aa64 <tcp_parseopt+0x2c>
 800aafe:	e004      	b.n	800ab0a <tcp_parseopt+0xd2>
          return;
 800ab00:	bf00      	nop
 800ab02:	e002      	b.n	800ab0a <tcp_parseopt+0xd2>
            return;
 800ab04:	bf00      	nop
 800ab06:	e000      	b.n	800ab0a <tcp_parseopt+0xd2>
            return;
 800ab08:	bf00      	nop
      }
    }
  }
}
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	080117a4 	.word	0x080117a4
 800ab14:	08011c08 	.word	0x08011c08
 800ab18:	080117f0 	.word	0x080117f0
 800ab1c:	2000879c 	.word	0x2000879c
 800ab20:	200087a4 	.word	0x200087a4

0800ab24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ab24:	b480      	push	{r7}
 800ab26:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ab28:	4b05      	ldr	r3, [pc, #20]	@ (800ab40 <tcp_trigger_input_pcb_close+0x1c>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	f043 0310 	orr.w	r3, r3, #16
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	4b03      	ldr	r3, [pc, #12]	@ (800ab40 <tcp_trigger_input_pcb_close+0x1c>)
 800ab34:	701a      	strb	r2, [r3, #0]
}
 800ab36:	bf00      	nop
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	200087b5 	.word	0x200087b5

0800ab44 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <tcp_route+0x28>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	7a1b      	ldrb	r3, [r3, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	7a1b      	ldrb	r3, [r3, #8]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fb f8ac 	bl	8005cc0 <netif_get_by_index>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	e003      	b.n	800ab74 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f003 fad3 	bl	800e118 <ip4_route>
 800ab72:	4603      	mov	r3, r0
  }
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ab7c:	b590      	push	{r4, r7, lr}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d105      	bne.n	800ab9e <tcp_create_segment+0x22>
 800ab92:	4b43      	ldr	r3, [pc, #268]	@ (800aca0 <tcp_create_segment+0x124>)
 800ab94:	22a3      	movs	r2, #163	@ 0xa3
 800ab96:	4943      	ldr	r1, [pc, #268]	@ (800aca4 <tcp_create_segment+0x128>)
 800ab98:	4843      	ldr	r0, [pc, #268]	@ (800aca8 <tcp_create_segment+0x12c>)
 800ab9a:	f004 fda9 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d105      	bne.n	800abb0 <tcp_create_segment+0x34>
 800aba4:	4b3e      	ldr	r3, [pc, #248]	@ (800aca0 <tcp_create_segment+0x124>)
 800aba6:	22a4      	movs	r2, #164	@ 0xa4
 800aba8:	4940      	ldr	r1, [pc, #256]	@ (800acac <tcp_create_segment+0x130>)
 800abaa:	483f      	ldr	r0, [pc, #252]	@ (800aca8 <tcp_create_segment+0x12c>)
 800abac:	f004 fda0 	bl	800f6f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800abb0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800abbe:	2003      	movs	r0, #3
 800abc0:	f7fa fcf8 	bl	80055b4 <memp_malloc>
 800abc4:	6138      	str	r0, [r7, #16]
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d104      	bne.n	800abd6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800abcc:	68b8      	ldr	r0, [r7, #8]
 800abce:	f7fb fbd7 	bl	8006380 <pbuf_free>
    return NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	e060      	b.n	800ac98 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800abdc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	891a      	ldrh	r2, [r3, #8]
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d205      	bcs.n	800ac02 <tcp_create_segment+0x86>
 800abf6:	4b2a      	ldr	r3, [pc, #168]	@ (800aca0 <tcp_create_segment+0x124>)
 800abf8:	22b0      	movs	r2, #176	@ 0xb0
 800abfa:	492d      	ldr	r1, [pc, #180]	@ (800acb0 <tcp_create_segment+0x134>)
 800abfc:	482a      	ldr	r0, [pc, #168]	@ (800aca8 <tcp_create_segment+0x12c>)
 800abfe:	f004 fd77 	bl	800f6f0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	891a      	ldrh	r2, [r3, #8]
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ac12:	2114      	movs	r1, #20
 800ac14:	68b8      	ldr	r0, [r7, #8]
 800ac16:	f7fb fb1d 	bl	8006254 <pbuf_add_header>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ac20:	6938      	ldr	r0, [r7, #16]
 800ac22:	f7fc ffec 	bl	8007bfe <tcp_seg_free>
    return NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e036      	b.n	800ac98 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8ada      	ldrh	r2, [r3, #22]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	68dc      	ldr	r4, [r3, #12]
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7fa f841 	bl	8004cc4 <lwip_htons>
 800ac42:	4603      	mov	r3, r0
 800ac44:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	8b1a      	ldrh	r2, [r3, #24]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	68dc      	ldr	r4, [r3, #12]
 800ac4e:	4610      	mov	r0, r2
 800ac50:	f7fa f838 	bl	8004cc4 <lwip_htons>
 800ac54:	4603      	mov	r3, r0
 800ac56:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	68dc      	ldr	r4, [r3, #12]
 800ac5c:	6838      	ldr	r0, [r7, #0]
 800ac5e:	f7fa f846 	bl	8004cee <lwip_htonl>
 800ac62:	4603      	mov	r3, r0
 800ac64:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
 800ac68:	089b      	lsrs	r3, r3, #2
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	3305      	adds	r3, #5
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	031b      	lsls	r3, r3, #12
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	68dc      	ldr	r4, [r3, #12]
 800ac80:	4610      	mov	r0, r2
 800ac82:	f7fa f81f 	bl	8004cc4 <lwip_htons>
 800ac86:	4603      	mov	r3, r0
 800ac88:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	749a      	strb	r2, [r3, #18]
 800ac92:	2200      	movs	r2, #0
 800ac94:	74da      	strb	r2, [r3, #19]
  return seg;
 800ac96:	693b      	ldr	r3, [r7, #16]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd90      	pop	{r4, r7, pc}
 800aca0:	08011c24 	.word	0x08011c24
 800aca4:	08011c58 	.word	0x08011c58
 800aca8:	08011c78 	.word	0x08011c78
 800acac:	08011ca0 	.word	0x08011ca0
 800acb0:	08011cc4 	.word	0x08011cc4

0800acb4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	607b      	str	r3, [r7, #4]
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
 800acc0:	460b      	mov	r3, r1
 800acc2:	81bb      	strh	r3, [r7, #12]
 800acc4:	4613      	mov	r3, r2
 800acc6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800acc8:	89bb      	ldrh	r3, [r7, #12]
 800acca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d105      	bne.n	800acde <tcp_pbuf_prealloc+0x2a>
 800acd2:	4b30      	ldr	r3, [pc, #192]	@ (800ad94 <tcp_pbuf_prealloc+0xe0>)
 800acd4:	22e8      	movs	r2, #232	@ 0xe8
 800acd6:	4930      	ldr	r1, [pc, #192]	@ (800ad98 <tcp_pbuf_prealloc+0xe4>)
 800acd8:	4830      	ldr	r0, [pc, #192]	@ (800ad9c <tcp_pbuf_prealloc+0xe8>)
 800acda:	f004 fd09 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d105      	bne.n	800acf0 <tcp_pbuf_prealloc+0x3c>
 800ace4:	4b2b      	ldr	r3, [pc, #172]	@ (800ad94 <tcp_pbuf_prealloc+0xe0>)
 800ace6:	22e9      	movs	r2, #233	@ 0xe9
 800ace8:	492d      	ldr	r1, [pc, #180]	@ (800ada0 <tcp_pbuf_prealloc+0xec>)
 800acea:	482c      	ldr	r0, [pc, #176]	@ (800ad9c <tcp_pbuf_prealloc+0xe8>)
 800acec:	f004 fd00 	bl	800f6f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800acf0:	89ba      	ldrh	r2, [r7, #12]
 800acf2:	897b      	ldrh	r3, [r7, #10]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d221      	bcs.n	800ad3c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800acf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d111      	bne.n	800ad28 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	8b5b      	ldrh	r3, [r3, #26]
 800ad08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d115      	bne.n	800ad3c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ad10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d007      	beq.n	800ad28 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ad18:	6a3b      	ldr	r3, [r7, #32]
 800ad1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d103      	bne.n	800ad28 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d009      	beq.n	800ad3c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ad28:	89bb      	ldrh	r3, [r7, #12]
 800ad2a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800ad2e:	f023 0203 	bic.w	r2, r3, #3
 800ad32:	897b      	ldrh	r3, [r7, #10]
 800ad34:	4293      	cmp	r3, r2
 800ad36:	bf28      	it	cs
 800ad38:	4613      	movcs	r3, r2
 800ad3a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ad3c:	8af9      	ldrh	r1, [r7, #22]
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fb f837 	bl	8005db8 <pbuf_alloc>
 800ad4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e019      	b.n	800ad8a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d006      	beq.n	800ad6c <tcp_pbuf_prealloc+0xb8>
 800ad5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad94 <tcp_pbuf_prealloc+0xe0>)
 800ad60:	f240 120b 	movw	r2, #267	@ 0x10b
 800ad64:	490f      	ldr	r1, [pc, #60]	@ (800ada4 <tcp_pbuf_prealloc+0xf0>)
 800ad66:	480d      	ldr	r0, [pc, #52]	@ (800ad9c <tcp_pbuf_prealloc+0xe8>)
 800ad68:	f004 fcc2 	bl	800f6f0 <iprintf>
  *oversize = p->len - length;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	895a      	ldrh	r2, [r3, #10]
 800ad70:	89bb      	ldrh	r3, [r7, #12]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	89ba      	ldrh	r2, [r7, #12]
 800ad7e:	811a      	strh	r2, [r3, #8]
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	891a      	ldrh	r2, [r3, #8]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	815a      	strh	r2, [r3, #10]
  return p;
 800ad88:	693b      	ldr	r3, [r7, #16]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	08011c24 	.word	0x08011c24
 800ad98:	08011cdc 	.word	0x08011cdc
 800ad9c:	08011c78 	.word	0x08011c78
 800ada0:	08011d00 	.word	0x08011d00
 800ada4:	08011d20 	.word	0x08011d20

0800ada8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <tcp_write_checks+0x20>
 800adba:	4b33      	ldr	r3, [pc, #204]	@ (800ae88 <tcp_write_checks+0xe0>)
 800adbc:	f240 1233 	movw	r2, #307	@ 0x133
 800adc0:	4932      	ldr	r1, [pc, #200]	@ (800ae8c <tcp_write_checks+0xe4>)
 800adc2:	4833      	ldr	r0, [pc, #204]	@ (800ae90 <tcp_write_checks+0xe8>)
 800adc4:	f004 fc94 	bl	800f6f0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	7d1b      	ldrb	r3, [r3, #20]
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d00e      	beq.n	800adee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800add4:	2b07      	cmp	r3, #7
 800add6:	d00a      	beq.n	800adee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800addc:	2b02      	cmp	r3, #2
 800adde:	d006      	beq.n	800adee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d002      	beq.n	800adee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ade8:	f06f 030a 	mvn.w	r3, #10
 800adec:	e048      	b.n	800ae80 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800adee:	887b      	ldrh	r3, [r7, #2]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <tcp_write_checks+0x50>
    return ERR_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	e043      	b.n	800ae80 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800adfe:	887a      	ldrh	r2, [r7, #2]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d909      	bls.n	800ae18 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	8b5b      	ldrh	r3, [r3, #26]
 800ae08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ae12:	f04f 33ff 	mov.w	r3, #4294967295
 800ae16:	e033      	b.n	800ae80 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	d909      	bls.n	800ae36 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	8b5b      	ldrh	r3, [r3, #26]
 800ae26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295
 800ae34:	e024      	b.n	800ae80 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00f      	beq.n	800ae60 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11a      	bne.n	800ae7e <tcp_write_checks+0xd6>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d116      	bne.n	800ae7e <tcp_write_checks+0xd6>
 800ae50:	4b0d      	ldr	r3, [pc, #52]	@ (800ae88 <tcp_write_checks+0xe0>)
 800ae52:	f240 1255 	movw	r2, #341	@ 0x155
 800ae56:	490f      	ldr	r1, [pc, #60]	@ (800ae94 <tcp_write_checks+0xec>)
 800ae58:	480d      	ldr	r0, [pc, #52]	@ (800ae90 <tcp_write_checks+0xe8>)
 800ae5a:	f004 fc49 	bl	800f6f0 <iprintf>
 800ae5e:	e00e      	b.n	800ae7e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <tcp_write_checks+0xc8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <tcp_write_checks+0xd6>
 800ae70:	4b05      	ldr	r3, [pc, #20]	@ (800ae88 <tcp_write_checks+0xe0>)
 800ae72:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800ae76:	4908      	ldr	r1, [pc, #32]	@ (800ae98 <tcp_write_checks+0xf0>)
 800ae78:	4805      	ldr	r0, [pc, #20]	@ (800ae90 <tcp_write_checks+0xe8>)
 800ae7a:	f004 fc39 	bl	800f6f0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	08011c24 	.word	0x08011c24
 800ae8c:	08011d34 	.word	0x08011d34
 800ae90:	08011c78 	.word	0x08011c78
 800ae94:	08011d54 	.word	0x08011d54
 800ae98:	08011d90 	.word	0x08011d90

0800ae9c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b09b      	sub	sp, #108	@ 0x6c
 800aea0:	af04      	add	r7, sp, #16
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	460b      	mov	r3, r1
 800aeac:	80fb      	strh	r3, [r7, #6]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	653b      	str	r3, [r7, #80]	@ 0x50
 800aeba:	2300      	movs	r3, #0
 800aebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aebe:	2300      	movs	r3, #0
 800aec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aec2:	2300      	movs	r3, #0
 800aec4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800aec6:	2300      	movs	r3, #0
 800aec8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800aed6:	2300      	movs	r3, #0
 800aed8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d109      	bne.n	800aef8 <tcp_write+0x5c>
 800aee4:	4ba4      	ldr	r3, [pc, #656]	@ (800b178 <tcp_write+0x2dc>)
 800aee6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800aeea:	49a4      	ldr	r1, [pc, #656]	@ (800b17c <tcp_write+0x2e0>)
 800aeec:	48a4      	ldr	r0, [pc, #656]	@ (800b180 <tcp_write+0x2e4>)
 800aeee:	f004 fbff 	bl	800f6f0 <iprintf>
 800aef2:	f06f 030f 	mvn.w	r3, #15
 800aef6:	e32a      	b.n	800b54e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aefe:	085b      	lsrs	r3, r3, #1
 800af00:	b29a      	uxth	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af06:	4293      	cmp	r3, r2
 800af08:	bf28      	it	cs
 800af0a:	4613      	movcs	r3, r2
 800af0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800af0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800af10:	2b00      	cmp	r3, #0
 800af12:	d102      	bne.n	800af1a <tcp_write+0x7e>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af18:	e000      	b.n	800af1c <tcp_write+0x80>
 800af1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800af1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d109      	bne.n	800af38 <tcp_write+0x9c>
 800af24:	4b94      	ldr	r3, [pc, #592]	@ (800b178 <tcp_write+0x2dc>)
 800af26:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800af2a:	4996      	ldr	r1, [pc, #600]	@ (800b184 <tcp_write+0x2e8>)
 800af2c:	4894      	ldr	r0, [pc, #592]	@ (800b180 <tcp_write+0x2e4>)
 800af2e:	f004 fbdf 	bl	800f6f0 <iprintf>
 800af32:	f06f 030f 	mvn.w	r3, #15
 800af36:	e30a      	b.n	800b54e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800af38:	88fb      	ldrh	r3, [r7, #6]
 800af3a:	4619      	mov	r1, r3
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f7ff ff33 	bl	800ada8 <tcp_write_checks>
 800af42:	4603      	mov	r3, r0
 800af44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800af48:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <tcp_write+0xba>
    return err;
 800af50:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800af54:	e2fb      	b.n	800b54e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800af5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800af60:	2300      	movs	r3, #0
 800af62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 80f6 	beq.w	800b15c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af74:	653b      	str	r3, [r7, #80]	@ 0x50
 800af76:	e002      	b.n	800af7e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800af78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800af7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f8      	bne.n	800af78 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800af86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af88:	7a9b      	ldrb	r3, [r3, #10]
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800af94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800af96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af98:	891b      	ldrh	r3, [r3, #8]
 800af9a:	4619      	mov	r1, r3
 800af9c:	8c3b      	ldrh	r3, [r7, #32]
 800af9e:	440b      	add	r3, r1
 800afa0:	429a      	cmp	r2, r3
 800afa2:	da06      	bge.n	800afb2 <tcp_write+0x116>
 800afa4:	4b74      	ldr	r3, [pc, #464]	@ (800b178 <tcp_write+0x2dc>)
 800afa6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800afaa:	4977      	ldr	r1, [pc, #476]	@ (800b188 <tcp_write+0x2ec>)
 800afac:	4874      	ldr	r0, [pc, #464]	@ (800b180 <tcp_write+0x2e4>)
 800afae:	f004 fb9f 	bl	800f6f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800afb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afb4:	891a      	ldrh	r2, [r3, #8]
 800afb6:	8c3b      	ldrh	r3, [r7, #32]
 800afb8:	4413      	add	r3, r2
 800afba:	b29b      	uxth	r3, r3
 800afbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800afc8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800afca:	8a7b      	ldrh	r3, [r7, #18]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d026      	beq.n	800b01e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800afd0:	8a7b      	ldrh	r3, [r7, #18]
 800afd2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d206      	bcs.n	800afe6 <tcp_write+0x14a>
 800afd8:	4b67      	ldr	r3, [pc, #412]	@ (800b178 <tcp_write+0x2dc>)
 800afda:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800afde:	496b      	ldr	r1, [pc, #428]	@ (800b18c <tcp_write+0x2f0>)
 800afe0:	4867      	ldr	r0, [pc, #412]	@ (800b180 <tcp_write+0x2e4>)
 800afe2:	f004 fb85 	bl	800f6f0 <iprintf>
      seg = last_unsent;
 800afe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800afea:	8a7b      	ldrh	r3, [r7, #18]
 800afec:	88fa      	ldrh	r2, [r7, #6]
 800afee:	4293      	cmp	r3, r2
 800aff0:	bf28      	it	cs
 800aff2:	4613      	movcs	r3, r2
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800aff8:	4293      	cmp	r3, r2
 800affa:	bf28      	it	cs
 800affc:	4613      	movcs	r3, r2
 800affe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800b000:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b004:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b006:	4413      	add	r3, r2
 800b008:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800b00c:	8a7a      	ldrh	r2, [r7, #18]
 800b00e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	b29b      	uxth	r3, r3
 800b014:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b016:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b018:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b01e:	8a7b      	ldrh	r3, [r7, #18]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <tcp_write+0x1a0>
 800b024:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b028:	88fb      	ldrh	r3, [r7, #6]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d006      	beq.n	800b03c <tcp_write+0x1a0>
 800b02e:	4b52      	ldr	r3, [pc, #328]	@ (800b178 <tcp_write+0x2dc>)
 800b030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b034:	4956      	ldr	r1, [pc, #344]	@ (800b190 <tcp_write+0x2f4>)
 800b036:	4852      	ldr	r0, [pc, #328]	@ (800b180 <tcp_write+0x2e4>)
 800b038:	f004 fb5a 	bl	800f6f0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b03c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	429a      	cmp	r2, r3
 800b044:	f080 8167 	bcs.w	800b316 <tcp_write+0x47a>
 800b048:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 8163 	beq.w	800b316 <tcp_write+0x47a>
 800b050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b052:	891b      	ldrh	r3, [r3, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 815e 	beq.w	800b316 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b05a:	88fa      	ldrh	r2, [r7, #6]
 800b05c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b060:	1ad2      	subs	r2, r2, r3
 800b062:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b064:	4293      	cmp	r3, r2
 800b066:	bfa8      	it	ge
 800b068:	4613      	movge	r3, r2
 800b06a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b06c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b06e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b070:	797b      	ldrb	r3, [r7, #5]
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	d027      	beq.n	800b0ca <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b07a:	f107 0012 	add.w	r0, r7, #18
 800b07e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b080:	8bf9      	ldrh	r1, [r7, #30]
 800b082:	2301      	movs	r3, #1
 800b084:	9302      	str	r3, [sp, #8]
 800b086:	797b      	ldrb	r3, [r7, #5]
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	4603      	mov	r3, r0
 800b090:	2000      	movs	r0, #0
 800b092:	f7ff fe0f 	bl	800acb4 <tcp_pbuf_prealloc>
 800b096:	6578      	str	r0, [r7, #84]	@ 0x54
 800b098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 8225 	beq.w	800b4ea <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b0a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0a2:	6858      	ldr	r0, [r3, #4]
 800b0a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	8bfa      	ldrh	r2, [r7, #30]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	f004 fbf9 	bl	800f8a6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b0b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b0b6:	f7fb f9eb 	bl	8006490 <pbuf_clen>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	461a      	mov	r2, r3
 800b0be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b0c8:	e041      	b.n	800b14e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b0ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d0:	e002      	b.n	800b0d8 <tcp_write+0x23c>
 800b0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f8      	bne.n	800b0d2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0e2:	7b1b      	ldrb	r3, [r3, #12]
 800b0e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d115      	bne.n	800b118 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0f2:	8952      	ldrh	r2, [r2, #10]
 800b0f4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d10d      	bne.n	800b118 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b0fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b100:	2b00      	cmp	r3, #0
 800b102:	d006      	beq.n	800b112 <tcp_write+0x276>
 800b104:	4b1c      	ldr	r3, [pc, #112]	@ (800b178 <tcp_write+0x2dc>)
 800b106:	f240 2231 	movw	r2, #561	@ 0x231
 800b10a:	4922      	ldr	r1, [pc, #136]	@ (800b194 <tcp_write+0x2f8>)
 800b10c:	481c      	ldr	r0, [pc, #112]	@ (800b180 <tcp_write+0x2e4>)
 800b10e:	f004 faef 	bl	800f6f0 <iprintf>
          extendlen = seglen;
 800b112:	8bfb      	ldrh	r3, [r7, #30]
 800b114:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b116:	e01a      	b.n	800b14e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b118:	8bfb      	ldrh	r3, [r7, #30]
 800b11a:	2201      	movs	r2, #1
 800b11c:	4619      	mov	r1, r3
 800b11e:	2000      	movs	r0, #0
 800b120:	f7fa fe4a 	bl	8005db8 <pbuf_alloc>
 800b124:	6578      	str	r0, [r7, #84]	@ 0x54
 800b126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 81e0 	beq.w	800b4ee <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b12e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	441a      	add	r2, r3
 800b136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b138:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b13a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b13c:	f7fb f9a8 	bl	8006490 <pbuf_clen>
 800b140:	4603      	mov	r3, r0
 800b142:	461a      	mov	r2, r3
 800b144:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b148:	4413      	add	r3, r2
 800b14a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b14e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b152:	8bfb      	ldrh	r3, [r7, #30]
 800b154:	4413      	add	r3, r2
 800b156:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b15a:	e0dc      	b.n	800b316 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b162:	2b00      	cmp	r3, #0
 800b164:	f000 80d7 	beq.w	800b316 <tcp_write+0x47a>
 800b168:	4b03      	ldr	r3, [pc, #12]	@ (800b178 <tcp_write+0x2dc>)
 800b16a:	f240 224a 	movw	r2, #586	@ 0x24a
 800b16e:	490a      	ldr	r1, [pc, #40]	@ (800b198 <tcp_write+0x2fc>)
 800b170:	4803      	ldr	r0, [pc, #12]	@ (800b180 <tcp_write+0x2e4>)
 800b172:	f004 fabd 	bl	800f6f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b176:	e0ce      	b.n	800b316 <tcp_write+0x47a>
 800b178:	08011c24 	.word	0x08011c24
 800b17c:	08011dc4 	.word	0x08011dc4
 800b180:	08011c78 	.word	0x08011c78
 800b184:	08011ddc 	.word	0x08011ddc
 800b188:	08011e10 	.word	0x08011e10
 800b18c:	08011e28 	.word	0x08011e28
 800b190:	08011e48 	.word	0x08011e48
 800b194:	08011e68 	.word	0x08011e68
 800b198:	08011e94 	.word	0x08011e94
    struct pbuf *p;
    u16_t left = len - pos;
 800b19c:	88fa      	ldrh	r2, [r7, #6]
 800b19e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b1a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b1b2:	8b7a      	ldrh	r2, [r7, #26]
 800b1b4:	8bbb      	ldrh	r3, [r7, #28]
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	bf28      	it	cs
 800b1ba:	4613      	movcs	r3, r2
 800b1bc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b1be:	797b      	ldrb	r3, [r7, #5]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d036      	beq.n	800b236 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b1c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	8b3b      	ldrh	r3, [r7, #24]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	b299      	uxth	r1, r3
 800b1d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	bf0c      	ite	eq
 800b1da:	2301      	moveq	r3, #1
 800b1dc:	2300      	movne	r3, #0
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f107 0012 	add.w	r0, r7, #18
 800b1e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b1e6:	9302      	str	r3, [sp, #8]
 800b1e8:	797b      	ldrb	r3, [r7, #5]
 800b1ea:	9301      	str	r3, [sp, #4]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2036      	movs	r0, #54	@ 0x36
 800b1f4:	f7ff fd5e 	bl	800acb4 <tcp_pbuf_prealloc>
 800b1f8:	6338      	str	r0, [r7, #48]	@ 0x30
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8178 	beq.w	800b4f2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b204:	895b      	ldrh	r3, [r3, #10]
 800b206:	8b3a      	ldrh	r2, [r7, #24]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d906      	bls.n	800b21a <tcp_write+0x37e>
 800b20c:	4b8c      	ldr	r3, [pc, #560]	@ (800b440 <tcp_write+0x5a4>)
 800b20e:	f240 2266 	movw	r2, #614	@ 0x266
 800b212:	498c      	ldr	r1, [pc, #560]	@ (800b444 <tcp_write+0x5a8>)
 800b214:	488c      	ldr	r0, [pc, #560]	@ (800b448 <tcp_write+0x5ac>)
 800b216:	f004 fa6b 	bl	800f6f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b222:	18d0      	adds	r0, r2, r3
 800b224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	4413      	add	r3, r2
 800b22c:	8b3a      	ldrh	r2, [r7, #24]
 800b22e:	4619      	mov	r1, r3
 800b230:	f004 fb39 	bl	800f8a6 <memcpy>
 800b234:	e02f      	b.n	800b296 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b236:	8a7b      	ldrh	r3, [r7, #18]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d006      	beq.n	800b24a <tcp_write+0x3ae>
 800b23c:	4b80      	ldr	r3, [pc, #512]	@ (800b440 <tcp_write+0x5a4>)
 800b23e:	f240 2271 	movw	r2, #625	@ 0x271
 800b242:	4982      	ldr	r1, [pc, #520]	@ (800b44c <tcp_write+0x5b0>)
 800b244:	4880      	ldr	r0, [pc, #512]	@ (800b448 <tcp_write+0x5ac>)
 800b246:	f004 fa53 	bl	800f6f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b24a:	8b3b      	ldrh	r3, [r7, #24]
 800b24c:	2201      	movs	r2, #1
 800b24e:	4619      	mov	r1, r3
 800b250:	2036      	movs	r0, #54	@ 0x36
 800b252:	f7fa fdb1 	bl	8005db8 <pbuf_alloc>
 800b256:	6178      	str	r0, [r7, #20]
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 814b 	beq.w	800b4f6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	441a      	add	r2, r3
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b26c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b270:	b29b      	uxth	r3, r3
 800b272:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b276:	4619      	mov	r1, r3
 800b278:	2036      	movs	r0, #54	@ 0x36
 800b27a:	f7fa fd9d 	bl	8005db8 <pbuf_alloc>
 800b27e:	6338      	str	r0, [r7, #48]	@ 0x30
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	2b00      	cmp	r3, #0
 800b284:	d103      	bne.n	800b28e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b286:	6978      	ldr	r0, [r7, #20]
 800b288:	f7fb f87a 	bl	8006380 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b28c:	e136      	b.n	800b4fc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b28e:	6979      	ldr	r1, [r7, #20]
 800b290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b292:	f7fb f937 	bl	8006504 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b296:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b298:	f7fb f8fa 	bl	8006490 <pbuf_clen>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b2aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b2ae:	2b09      	cmp	r3, #9
 800b2b0:	d903      	bls.n	800b2ba <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b2b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2b4:	f7fb f864 	bl	8006380 <pbuf_free>
      goto memerr;
 800b2b8:	e120      	b.n	800b4fc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b2be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b2c2:	441a      	add	r2, r3
 800b2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f7ff fc53 	bl	800ab7c <tcp_create_segment>
 800b2d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800b2d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 810d 	beq.w	800b4fa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d102      	bne.n	800b2ec <tcp_write+0x450>
      queue = seg;
 800b2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2ea:	e00c      	b.n	800b306 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b2ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <tcp_write+0x464>
 800b2f2:	4b53      	ldr	r3, [pc, #332]	@ (800b440 <tcp_write+0x5a4>)
 800b2f4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800b2f8:	4955      	ldr	r1, [pc, #340]	@ (800b450 <tcp_write+0x5b4>)
 800b2fa:	4853      	ldr	r0, [pc, #332]	@ (800b448 <tcp_write+0x5ac>)
 800b2fc:	f004 f9f8 	bl	800f6f0 <iprintf>
      prev_seg->next = seg;
 800b300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b302:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b304:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b308:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b30a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b30e:	8b3b      	ldrh	r3, [r7, #24]
 800b310:	4413      	add	r3, r2
 800b312:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800b316:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	f4ff af3d 	bcc.w	800b19c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b322:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b324:	2b00      	cmp	r3, #0
 800b326:	d02c      	beq.n	800b382 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b32e:	e01e      	b.n	800b36e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b332:	891a      	ldrh	r2, [r3, #8]
 800b334:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b336:	4413      	add	r3, r2
 800b338:	b29a      	uxth	r2, r3
 800b33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d110      	bne.n	800b368 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b34c:	8952      	ldrh	r2, [r2, #10]
 800b34e:	4413      	add	r3, r2
 800b350:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	4618      	mov	r0, r3
 800b356:	f004 faa6 	bl	800f8a6 <memcpy>
        p->len += oversize_used;
 800b35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35c:	895a      	ldrh	r2, [r3, #10]
 800b35e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b360:	4413      	add	r3, r2
 800b362:	b29a      	uxth	r2, r3
 800b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b366:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1dd      	bne.n	800b330 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b376:	891a      	ldrh	r2, [r3, #8]
 800b378:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b37a:	4413      	add	r3, r2
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b380:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b382:	8a7a      	ldrh	r2, [r7, #18]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d018      	beq.n	800b3c2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b392:	2b00      	cmp	r3, #0
 800b394:	d106      	bne.n	800b3a4 <tcp_write+0x508>
 800b396:	4b2a      	ldr	r3, [pc, #168]	@ (800b440 <tcp_write+0x5a4>)
 800b398:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800b39c:	492d      	ldr	r1, [pc, #180]	@ (800b454 <tcp_write+0x5b8>)
 800b39e:	482a      	ldr	r0, [pc, #168]	@ (800b448 <tcp_write+0x5ac>)
 800b3a0:	f004 f9a6 	bl	800f6f0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b3a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fb f8aa 	bl	8006504 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3b2:	891a      	ldrh	r2, [r3, #8]
 800b3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3b6:	891b      	ldrh	r3, [r3, #8]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3be:	811a      	strh	r2, [r3, #8]
 800b3c0:	e037      	b.n	800b432 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b3c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d034      	beq.n	800b432 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b3c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <tcp_write+0x53a>
 800b3ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d106      	bne.n	800b3e4 <tcp_write+0x548>
 800b3d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b440 <tcp_write+0x5a4>)
 800b3d8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800b3dc:	491e      	ldr	r1, [pc, #120]	@ (800b458 <tcp_write+0x5bc>)
 800b3de:	481a      	ldr	r0, [pc, #104]	@ (800b448 <tcp_write+0x5ac>)
 800b3e0:	f004 f986 	bl	800f6f0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3ea:	e009      	b.n	800b400 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ee:	891a      	ldrh	r2, [r3, #8]
 800b3f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b3f2:	4413      	add	r3, r2
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1f1      	bne.n	800b3ec <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40a:	891a      	ldrh	r2, [r3, #8]
 800b40c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b40e:	4413      	add	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b414:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b418:	895a      	ldrh	r2, [r3, #10]
 800b41a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b41c:	4413      	add	r3, r2
 800b41e:	b29a      	uxth	r2, r3
 800b420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b422:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b426:	891a      	ldrh	r2, [r3, #8]
 800b428:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b42a:	4413      	add	r3, r2
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b430:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b434:	2b00      	cmp	r3, #0
 800b436:	d111      	bne.n	800b45c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b43c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b43e:	e010      	b.n	800b462 <tcp_write+0x5c6>
 800b440:	08011c24 	.word	0x08011c24
 800b444:	08011ec4 	.word	0x08011ec4
 800b448:	08011c78 	.word	0x08011c78
 800b44c:	08011f04 	.word	0x08011f04
 800b450:	08011f14 	.word	0x08011f14
 800b454:	08011f28 	.word	0x08011f28
 800b458:	08011f60 	.word	0x08011f60
  } else {
    last_unsent->next = queue;
 800b45c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b45e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b460:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b466:	88fb      	ldrh	r3, [r7, #6]
 800b468:	441a      	add	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b474:	88fb      	ldrh	r3, [r7, #6]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	b29a      	uxth	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b486:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00e      	beq.n	800b4b2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <tcp_write+0x616>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <tcp_write+0x616>
 800b4a4:	4b2c      	ldr	r3, [pc, #176]	@ (800b558 <tcp_write+0x6bc>)
 800b4a6:	f240 3212 	movw	r2, #786	@ 0x312
 800b4aa:	492c      	ldr	r1, [pc, #176]	@ (800b55c <tcp_write+0x6c0>)
 800b4ac:	482c      	ldr	r0, [pc, #176]	@ (800b560 <tcp_write+0x6c4>)
 800b4ae:	f004 f91f 	bl	800f6f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b4b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d016      	beq.n	800b4e6 <tcp_write+0x64a>
 800b4b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d012      	beq.n	800b4e6 <tcp_write+0x64a>
 800b4c0:	797b      	ldrb	r3, [r7, #5]
 800b4c2:	f003 0302 	and.w	r3, r3, #2
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10d      	bne.n	800b4e6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b4ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	899b      	ldrh	r3, [r3, #12]
 800b4d0:	b29c      	uxth	r4, r3
 800b4d2:	2008      	movs	r0, #8
 800b4d4:	f7f9 fbf6 	bl	8004cc4 <lwip_htons>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	4322      	orrs	r2, r4
 800b4e2:	b292      	uxth	r2, r2
 800b4e4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e031      	b.n	800b54e <tcp_write+0x6b2>
          goto memerr;
 800b4ea:	bf00      	nop
 800b4ec:	e006      	b.n	800b4fc <tcp_write+0x660>
            goto memerr;
 800b4ee:	bf00      	nop
 800b4f0:	e004      	b.n	800b4fc <tcp_write+0x660>
        goto memerr;
 800b4f2:	bf00      	nop
 800b4f4:	e002      	b.n	800b4fc <tcp_write+0x660>
        goto memerr;
 800b4f6:	bf00      	nop
 800b4f8:	e000      	b.n	800b4fc <tcp_write+0x660>
      goto memerr;
 800b4fa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	8b5b      	ldrh	r3, [r3, #26]
 800b500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b504:	b29a      	uxth	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b510:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b512:	f7fa ff35 	bl	8006380 <pbuf_free>
  }
  if (queue != NULL) {
 800b516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b51c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b51e:	f7fc fb59 	bl	8007bd4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00e      	beq.n	800b54a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <tcp_write+0x6ae>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d106      	bne.n	800b54a <tcp_write+0x6ae>
 800b53c:	4b06      	ldr	r3, [pc, #24]	@ (800b558 <tcp_write+0x6bc>)
 800b53e:	f240 3227 	movw	r2, #807	@ 0x327
 800b542:	4906      	ldr	r1, [pc, #24]	@ (800b55c <tcp_write+0x6c0>)
 800b544:	4806      	ldr	r0, [pc, #24]	@ (800b560 <tcp_write+0x6c4>)
 800b546:	f004 f8d3 	bl	800f6f0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b54e:	4618      	mov	r0, r3
 800b550:	375c      	adds	r7, #92	@ 0x5c
 800b552:	46bd      	mov	sp, r7
 800b554:	bd90      	pop	{r4, r7, pc}
 800b556:	bf00      	nop
 800b558:	08011c24 	.word	0x08011c24
 800b55c:	08011f98 	.word	0x08011f98
 800b560:	08011c78 	.word	0x08011c78

0800b564 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b564:	b590      	push	{r4, r7, lr}
 800b566:	b08b      	sub	sp, #44	@ 0x2c
 800b568:	af02      	add	r7, sp, #8
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	2300      	movs	r3, #0
 800b576:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b578:	2300      	movs	r3, #0
 800b57a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <tcp_split_unsent_seg+0x2c>
 800b582:	4b95      	ldr	r3, [pc, #596]	@ (800b7d8 <tcp_split_unsent_seg+0x274>)
 800b584:	f240 324b 	movw	r2, #843	@ 0x34b
 800b588:	4994      	ldr	r1, [pc, #592]	@ (800b7dc <tcp_split_unsent_seg+0x278>)
 800b58a:	4895      	ldr	r0, [pc, #596]	@ (800b7e0 <tcp_split_unsent_seg+0x27c>)
 800b58c:	f004 f8b0 	bl	800f6f0 <iprintf>

  useg = pcb->unsent;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b594:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b59c:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a0:	e116      	b.n	800b7d0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b5a2:	887b      	ldrh	r3, [r7, #2]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d109      	bne.n	800b5bc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b5a8:	4b8b      	ldr	r3, [pc, #556]	@ (800b7d8 <tcp_split_unsent_seg+0x274>)
 800b5aa:	f240 3253 	movw	r2, #851	@ 0x353
 800b5ae:	498d      	ldr	r1, [pc, #564]	@ (800b7e4 <tcp_split_unsent_seg+0x280>)
 800b5b0:	488b      	ldr	r0, [pc, #556]	@ (800b7e0 <tcp_split_unsent_seg+0x27c>)
 800b5b2:	f004 f89d 	bl	800f6f0 <iprintf>
    return ERR_VAL;
 800b5b6:	f06f 0305 	mvn.w	r3, #5
 800b5ba:	e109      	b.n	800b7d0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	891b      	ldrh	r3, [r3, #8]
 800b5c0:	887a      	ldrh	r2, [r7, #2]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d301      	bcc.n	800b5ca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e102      	b.n	800b7d0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5ce:	887a      	ldrh	r2, [r7, #2]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d906      	bls.n	800b5e2 <tcp_split_unsent_seg+0x7e>
 800b5d4:	4b80      	ldr	r3, [pc, #512]	@ (800b7d8 <tcp_split_unsent_seg+0x274>)
 800b5d6:	f240 325b 	movw	r2, #859	@ 0x35b
 800b5da:	4983      	ldr	r1, [pc, #524]	@ (800b7e8 <tcp_split_unsent_seg+0x284>)
 800b5dc:	4880      	ldr	r0, [pc, #512]	@ (800b7e0 <tcp_split_unsent_seg+0x27c>)
 800b5de:	f004 f887 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	891b      	ldrh	r3, [r3, #8]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <tcp_split_unsent_seg+0x94>
 800b5ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b7d8 <tcp_split_unsent_seg+0x274>)
 800b5ec:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b5f0:	497e      	ldr	r1, [pc, #504]	@ (800b7ec <tcp_split_unsent_seg+0x288>)
 800b5f2:	487b      	ldr	r0, [pc, #492]	@ (800b7e0 <tcp_split_unsent_seg+0x27c>)
 800b5f4:	f004 f87c 	bl	800f6f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	7a9b      	ldrb	r3, [r3, #10]
 800b5fc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	891a      	ldrh	r2, [r3, #8]
 800b60e:	887b      	ldrh	r3, [r7, #2]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	b29a      	uxth	r2, r3
 800b618:	89bb      	ldrh	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b622:	4619      	mov	r1, r3
 800b624:	2036      	movs	r0, #54	@ 0x36
 800b626:	f7fa fbc7 	bl	8005db8 <pbuf_alloc>
 800b62a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f000 80b7 	beq.w	800b7a2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	891a      	ldrh	r2, [r3, #8]
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	891b      	ldrh	r3, [r3, #8]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	b29a      	uxth	r2, r3
 800b642:	887b      	ldrh	r3, [r7, #2]
 800b644:	4413      	add	r3, r2
 800b646:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	6858      	ldr	r0, [r3, #4]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	18d1      	adds	r1, r2, r3
 800b654:	897b      	ldrh	r3, [r7, #10]
 800b656:	89ba      	ldrh	r2, [r7, #12]
 800b658:	f7fb f88c 	bl	8006774 <pbuf_copy_partial>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	89bb      	ldrh	r3, [r7, #12]
 800b662:	4293      	cmp	r3, r2
 800b664:	f040 809f 	bne.w	800b7a6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	899b      	ldrh	r3, [r3, #12]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	4618      	mov	r0, r3
 800b672:	f7f9 fb27 	bl	8004cc4 <lwip_htons>
 800b676:	4603      	mov	r3, r0
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b67e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b680:	2300      	movs	r3, #0
 800b682:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b684:	7efb      	ldrb	r3, [r7, #27]
 800b686:	f003 0308 	and.w	r3, r3, #8
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d007      	beq.n	800b69e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b68e:	7efb      	ldrb	r3, [r7, #27]
 800b690:	f023 0308 	bic.w	r3, r3, #8
 800b694:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b696:	7ebb      	ldrb	r3, [r7, #26]
 800b698:	f043 0308 	orr.w	r3, r3, #8
 800b69c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b69e:	7efb      	ldrb	r3, [r7, #27]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b6a8:	7efb      	ldrb	r3, [r7, #27]
 800b6aa:	f023 0301 	bic.w	r3, r3, #1
 800b6ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b6b0:	7ebb      	ldrb	r3, [r7, #26]
 800b6b2:	f043 0301 	orr.w	r3, r3, #1
 800b6b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f9 fb15 	bl	8004cee <lwip_htonl>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	887b      	ldrh	r3, [r7, #2]
 800b6c8:	18d1      	adds	r1, r2, r3
 800b6ca:	7eba      	ldrb	r2, [r7, #26]
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	6939      	ldr	r1, [r7, #16]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff fa51 	bl	800ab7c <tcp_create_segment>
 800b6da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d063      	beq.n	800b7aa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fa fed2 	bl	8006490 <pbuf_clen>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	6858      	ldr	r0, [r3, #4]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	891a      	ldrh	r2, [r3, #8]
 800b70a:	89bb      	ldrh	r3, [r7, #12]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	b29b      	uxth	r3, r3
 800b710:	4619      	mov	r1, r3
 800b712:	f7fa fcaf 	bl	8006074 <pbuf_realloc>
  useg->len -= remainder;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	891a      	ldrh	r2, [r3, #8]
 800b71a:	89bb      	ldrh	r3, [r7, #12]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	b29a      	uxth	r2, r3
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	899b      	ldrh	r3, [r3, #12]
 800b72a:	b29c      	uxth	r4, r3
 800b72c:	7efb      	ldrb	r3, [r7, #27]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	4618      	mov	r0, r3
 800b732:	f7f9 fac7 	bl	8004cc4 <lwip_htons>
 800b736:	4603      	mov	r3, r0
 800b738:	461a      	mov	r2, r3
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	4322      	orrs	r2, r4
 800b740:	b292      	uxth	r2, r2
 800b742:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fa fea1 	bl	8006490 <pbuf_clen>
 800b74e:	4603      	mov	r3, r0
 800b750:	461a      	mov	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b758:	4413      	add	r3, r2
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	4618      	mov	r0, r3
 800b768:	f7fa fe92 	bl	8006490 <pbuf_clen>
 800b76c:	4603      	mov	r3, r0
 800b76e:	461a      	mov	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b776:	4413      	add	r3, r2
 800b778:	b29a      	uxth	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d103      	bne.n	800b79e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e016      	b.n	800b7d0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b7a2:	bf00      	nop
 800b7a4:	e002      	b.n	800b7ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b7a6:	bf00      	nop
 800b7a8:	e000      	b.n	800b7ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b7aa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d006      	beq.n	800b7c0 <tcp_split_unsent_seg+0x25c>
 800b7b2:	4b09      	ldr	r3, [pc, #36]	@ (800b7d8 <tcp_split_unsent_seg+0x274>)
 800b7b4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b7b8:	490d      	ldr	r1, [pc, #52]	@ (800b7f0 <tcp_split_unsent_seg+0x28c>)
 800b7ba:	4809      	ldr	r0, [pc, #36]	@ (800b7e0 <tcp_split_unsent_seg+0x27c>)
 800b7bc:	f003 ff98 	bl	800f6f0 <iprintf>
  if (p != NULL) {
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b7c6:	6938      	ldr	r0, [r7, #16]
 800b7c8:	f7fa fdda 	bl	8006380 <pbuf_free>
  }

  return ERR_MEM;
 800b7cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3724      	adds	r7, #36	@ 0x24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd90      	pop	{r4, r7, pc}
 800b7d8:	08011c24 	.word	0x08011c24
 800b7dc:	08011fb8 	.word	0x08011fb8
 800b7e0:	08011c78 	.word	0x08011c78
 800b7e4:	08011fdc 	.word	0x08011fdc
 800b7e8:	08012000 	.word	0x08012000
 800b7ec:	08012010 	.word	0x08012010
 800b7f0:	08012020 	.word	0x08012020

0800b7f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b7f4:	b590      	push	{r4, r7, lr}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d106      	bne.n	800b810 <tcp_send_fin+0x1c>
 800b802:	4b21      	ldr	r3, [pc, #132]	@ (800b888 <tcp_send_fin+0x94>)
 800b804:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b808:	4920      	ldr	r1, [pc, #128]	@ (800b88c <tcp_send_fin+0x98>)
 800b80a:	4821      	ldr	r0, [pc, #132]	@ (800b890 <tcp_send_fin+0x9c>)
 800b80c:	f003 ff70 	bl	800f6f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b814:	2b00      	cmp	r3, #0
 800b816:	d02e      	beq.n	800b876 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e002      	b.n	800b826 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1f8      	bne.n	800b820 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	899b      	ldrh	r3, [r3, #12]
 800b834:	b29b      	uxth	r3, r3
 800b836:	4618      	mov	r0, r3
 800b838:	f7f9 fa44 	bl	8004cc4 <lwip_htons>
 800b83c:	4603      	mov	r3, r0
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 0307 	and.w	r3, r3, #7
 800b844:	2b00      	cmp	r3, #0
 800b846:	d116      	bne.n	800b876 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	899b      	ldrh	r3, [r3, #12]
 800b84e:	b29c      	uxth	r4, r3
 800b850:	2001      	movs	r0, #1
 800b852:	f7f9 fa37 	bl	8004cc4 <lwip_htons>
 800b856:	4603      	mov	r3, r0
 800b858:	461a      	mov	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	4322      	orrs	r2, r4
 800b860:	b292      	uxth	r2, r2
 800b862:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	8b5b      	ldrh	r3, [r3, #26]
 800b868:	f043 0320 	orr.w	r3, r3, #32
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	e004      	b.n	800b880 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b876:	2101      	movs	r1, #1
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f80b 	bl	800b894 <tcp_enqueue_flags>
 800b87e:	4603      	mov	r3, r0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	bd90      	pop	{r4, r7, pc}
 800b888:	08011c24 	.word	0x08011c24
 800b88c:	0801202c 	.word	0x0801202c
 800b890:	08011c78 	.word	0x08011c78

0800b894 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08a      	sub	sp, #40	@ 0x28
 800b898:	af02      	add	r7, sp, #8
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b8a8:	78fb      	ldrb	r3, [r7, #3]
 800b8aa:	f003 0303 	and.w	r3, r3, #3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <tcp_enqueue_flags+0x2c>
 800b8b2:	4b67      	ldr	r3, [pc, #412]	@ (800ba50 <tcp_enqueue_flags+0x1bc>)
 800b8b4:	f240 4211 	movw	r2, #1041	@ 0x411
 800b8b8:	4966      	ldr	r1, [pc, #408]	@ (800ba54 <tcp_enqueue_flags+0x1c0>)
 800b8ba:	4867      	ldr	r0, [pc, #412]	@ (800ba58 <tcp_enqueue_flags+0x1c4>)
 800b8bc:	f003 ff18 	bl	800f6f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d106      	bne.n	800b8d4 <tcp_enqueue_flags+0x40>
 800b8c6:	4b62      	ldr	r3, [pc, #392]	@ (800ba50 <tcp_enqueue_flags+0x1bc>)
 800b8c8:	f240 4213 	movw	r2, #1043	@ 0x413
 800b8cc:	4963      	ldr	r1, [pc, #396]	@ (800ba5c <tcp_enqueue_flags+0x1c8>)
 800b8ce:	4862      	ldr	r0, [pc, #392]	@ (800ba58 <tcp_enqueue_flags+0x1c4>)
 800b8d0:	f003 ff0e 	bl	800f6f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	f003 0302 	and.w	r3, r3, #2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b8e2:	7ffb      	ldrb	r3, [r7, #31]
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f003 0304 	and.w	r3, r3, #4
 800b8ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	2036      	movs	r0, #54	@ 0x36
 800b8fa:	f7fa fa5d 	bl	8005db8 <pbuf_alloc>
 800b8fe:	6138      	str	r0, [r7, #16]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d109      	bne.n	800b91a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	8b5b      	ldrh	r3, [r3, #26]
 800b90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90e:	b29a      	uxth	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b914:	f04f 33ff 	mov.w	r3, #4294967295
 800b918:	e095      	b.n	800ba46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	895a      	ldrh	r2, [r3, #10]
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
 800b920:	b29b      	uxth	r3, r3
 800b922:	429a      	cmp	r2, r3
 800b924:	d206      	bcs.n	800b934 <tcp_enqueue_flags+0xa0>
 800b926:	4b4a      	ldr	r3, [pc, #296]	@ (800ba50 <tcp_enqueue_flags+0x1bc>)
 800b928:	f240 4239 	movw	r2, #1081	@ 0x439
 800b92c:	494c      	ldr	r1, [pc, #304]	@ (800ba60 <tcp_enqueue_flags+0x1cc>)
 800b92e:	484a      	ldr	r0, [pc, #296]	@ (800ba58 <tcp_enqueue_flags+0x1c4>)
 800b930:	f003 fede 	bl	800f6f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b938:	78fa      	ldrb	r2, [r7, #3]
 800b93a:	7ffb      	ldrb	r3, [r7, #31]
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	460b      	mov	r3, r1
 800b940:	6939      	ldr	r1, [r7, #16]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff f91a 	bl	800ab7c <tcp_create_segment>
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d109      	bne.n	800b964 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	8b5b      	ldrh	r3, [r3, #26]
 800b954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b958:	b29a      	uxth	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b95e:	f04f 33ff 	mov.w	r3, #4294967295
 800b962:	e070      	b.n	800ba46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	f003 0303 	and.w	r3, r3, #3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d006      	beq.n	800b97e <tcp_enqueue_flags+0xea>
 800b970:	4b37      	ldr	r3, [pc, #220]	@ (800ba50 <tcp_enqueue_flags+0x1bc>)
 800b972:	f240 4242 	movw	r2, #1090	@ 0x442
 800b976:	493b      	ldr	r1, [pc, #236]	@ (800ba64 <tcp_enqueue_flags+0x1d0>)
 800b978:	4837      	ldr	r0, [pc, #220]	@ (800ba58 <tcp_enqueue_flags+0x1c4>)
 800b97a:	f003 feb9 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	891b      	ldrh	r3, [r3, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d006      	beq.n	800b994 <tcp_enqueue_flags+0x100>
 800b986:	4b32      	ldr	r3, [pc, #200]	@ (800ba50 <tcp_enqueue_flags+0x1bc>)
 800b988:	f240 4243 	movw	r2, #1091	@ 0x443
 800b98c:	4936      	ldr	r1, [pc, #216]	@ (800ba68 <tcp_enqueue_flags+0x1d4>)
 800b98e:	4832      	ldr	r0, [pc, #200]	@ (800ba58 <tcp_enqueue_flags+0x1c4>)
 800b990:	f003 feae 	bl	800f6f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d103      	bne.n	800b9a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b9a2:	e00d      	b.n	800b9c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a8:	61bb      	str	r3, [r7, #24]
 800b9aa:	e002      	b.n	800b9b2 <tcp_enqueue_flags+0x11e>
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	61bb      	str	r3, [r7, #24]
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1f8      	bne.n	800b9ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	f003 0302 	and.w	r3, r3, #2
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d104      	bne.n	800b9dc <tcp_enqueue_flags+0x148>
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d006      	beq.n	800b9fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8b5b      	ldrh	r3, [r3, #26]
 800b9f4:	f043 0320 	orr.w	r3, r3, #32
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fa fd44 	bl	8006490 <pbuf_clen>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ba12:	4413      	add	r3, r2
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00e      	beq.n	800ba44 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <tcp_enqueue_flags+0x1b0>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <tcp_enqueue_flags+0x1b0>
 800ba36:	4b06      	ldr	r3, [pc, #24]	@ (800ba50 <tcp_enqueue_flags+0x1bc>)
 800ba38:	f240 4265 	movw	r2, #1125	@ 0x465
 800ba3c:	490b      	ldr	r1, [pc, #44]	@ (800ba6c <tcp_enqueue_flags+0x1d8>)
 800ba3e:	4806      	ldr	r0, [pc, #24]	@ (800ba58 <tcp_enqueue_flags+0x1c4>)
 800ba40:	f003 fe56 	bl	800f6f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3720      	adds	r7, #32
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	08011c24 	.word	0x08011c24
 800ba54:	08012048 	.word	0x08012048
 800ba58:	08011c78 	.word	0x08011c78
 800ba5c:	080120a0 	.word	0x080120a0
 800ba60:	080120c0 	.word	0x080120c0
 800ba64:	080120fc 	.word	0x080120fc
 800ba68:	08012114 	.word	0x08012114
 800ba6c:	08012140 	.word	0x08012140

0800ba70 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ba70:	b5b0      	push	{r4, r5, r7, lr}
 800ba72:	b08a      	sub	sp, #40	@ 0x28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <tcp_output+0x1c>
 800ba7e:	4b8a      	ldr	r3, [pc, #552]	@ (800bca8 <tcp_output+0x238>)
 800ba80:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ba84:	4989      	ldr	r1, [pc, #548]	@ (800bcac <tcp_output+0x23c>)
 800ba86:	488a      	ldr	r0, [pc, #552]	@ (800bcb0 <tcp_output+0x240>)
 800ba88:	f003 fe32 	bl	800f6f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	7d1b      	ldrb	r3, [r3, #20]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d106      	bne.n	800baa2 <tcp_output+0x32>
 800ba94:	4b84      	ldr	r3, [pc, #528]	@ (800bca8 <tcp_output+0x238>)
 800ba96:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ba9a:	4986      	ldr	r1, [pc, #536]	@ (800bcb4 <tcp_output+0x244>)
 800ba9c:	4884      	ldr	r0, [pc, #528]	@ (800bcb0 <tcp_output+0x240>)
 800ba9e:	f003 fe27 	bl	800f6f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800baa2:	4b85      	ldr	r3, [pc, #532]	@ (800bcb8 <tcp_output+0x248>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d101      	bne.n	800bab0 <tcp_output+0x40>
    return ERR_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	e1ce      	b.n	800be4e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800babc:	4293      	cmp	r3, r2
 800babe:	bf28      	it	cs
 800bac0:	4613      	movcs	r3, r2
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800bacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10b      	bne.n	800baea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	8b5b      	ldrh	r3, [r3, #26]
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 81aa 	beq.w	800be34 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fdcb 	bl	800c67c <tcp_send_empty_ack>
 800bae6:	4603      	mov	r3, r0
 800bae8:	e1b1      	b.n	800be4e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800baea:	6879      	ldr	r1, [r7, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	3304      	adds	r3, #4
 800baf0:	461a      	mov	r2, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff f826 	bl	800ab44 <tcp_route>
 800baf8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d102      	bne.n	800bb06 <tcp_output+0x96>
    return ERR_RTE;
 800bb00:	f06f 0303 	mvn.w	r3, #3
 800bb04:	e1a3      	b.n	800be4e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d003      	beq.n	800bb14 <tcp_output+0xa4>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d111      	bne.n	800bb38 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <tcp_output+0xb0>
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	e000      	b.n	800bb22 <tcp_output+0xb2>
 800bb20:	2300      	movs	r3, #0
 800bb22:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <tcp_output+0xc0>
      return ERR_RTE;
 800bb2a:	f06f 0303 	mvn.w	r3, #3
 800bb2e:	e18e      	b.n	800be4e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f9 f8d5 	bl	8004cee <lwip_htonl>
 800bb44:	4602      	mov	r2, r0
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb4e:	8912      	ldrh	r2, [r2, #8]
 800bb50:	4413      	add	r3, r2
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d227      	bcs.n	800bba8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb5e:	461a      	mov	r2, r3
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d114      	bne.n	800bb90 <tcp_output+0x120>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d110      	bne.n	800bb90 <tcp_output+0x120>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10b      	bne.n	800bb90 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	8b5b      	ldrh	r3, [r3, #26]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 814d 	beq.w	800be38 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fd6c 	bl	800c67c <tcp_send_empty_ack>
 800bba4:	4603      	mov	r3, r0
 800bba6:	e152      	b.n	800be4e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbb4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 811c 	beq.w	800bdf6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800bbbe:	e002      	b.n	800bbc6 <tcp_output+0x156>
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	623b      	str	r3, [r7, #32]
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1f8      	bne.n	800bbc0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bbce:	e112      	b.n	800bdf6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	899b      	ldrh	r3, [r3, #12]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f9 f873 	bl	8004cc4 <lwip_htons>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	f003 0304 	and.w	r3, r3, #4
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d006      	beq.n	800bbf8 <tcp_output+0x188>
 800bbea:	4b2f      	ldr	r3, [pc, #188]	@ (800bca8 <tcp_output+0x238>)
 800bbec:	f240 5236 	movw	r2, #1334	@ 0x536
 800bbf0:	4932      	ldr	r1, [pc, #200]	@ (800bcbc <tcp_output+0x24c>)
 800bbf2:	482f      	ldr	r0, [pc, #188]	@ (800bcb0 <tcp_output+0x240>)
 800bbf4:	f003 fd7c 	bl	800f6f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d01f      	beq.n	800bc40 <tcp_output+0x1d0>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	8b5b      	ldrh	r3, [r3, #26]
 800bc04:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d119      	bne.n	800bc40 <tcp_output+0x1d0>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <tcp_output+0x1bc>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d110      	bne.n	800bc40 <tcp_output+0x1d0>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc22:	891a      	ldrh	r2, [r3, #8]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d209      	bcs.n	800bc40 <tcp_output+0x1d0>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <tcp_output+0x1d0>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bc3c:	2b08      	cmp	r3, #8
 800bc3e:	d901      	bls.n	800bc44 <tcp_output+0x1d4>
 800bc40:	2301      	movs	r3, #1
 800bc42:	e000      	b.n	800bc46 <tcp_output+0x1d6>
 800bc44:	2300      	movs	r3, #0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d106      	bne.n	800bc58 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	8b5b      	ldrh	r3, [r3, #26]
 800bc4e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 80e4 	beq.w	800be20 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	7d1b      	ldrb	r3, [r3, #20]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d00d      	beq.n	800bc7c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	899b      	ldrh	r3, [r3, #12]
 800bc66:	b29c      	uxth	r4, r3
 800bc68:	2010      	movs	r0, #16
 800bc6a:	f7f9 f82b 	bl	8004cc4 <lwip_htons>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	461a      	mov	r2, r3
 800bc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	4322      	orrs	r2, r4
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc82:	f000 f909 	bl	800be98 <tcp_output_segment>
 800bc86:	4603      	mov	r3, r0
 800bc88:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bc8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d016      	beq.n	800bcc0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	8b5b      	ldrh	r3, [r3, #26]
 800bc96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	835a      	strh	r2, [r3, #26]
      return err;
 800bca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bca4:	e0d3      	b.n	800be4e <tcp_output+0x3de>
 800bca6:	bf00      	nop
 800bca8:	08011c24 	.word	0x08011c24
 800bcac:	08012168 	.word	0x08012168
 800bcb0:	08011c78 	.word	0x08011c78
 800bcb4:	08012180 	.word	0x08012180
 800bcb8:	200087bc 	.word	0x200087bc
 800bcbc:	080121a8 	.word	0x080121a8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7d1b      	ldrb	r3, [r3, #20]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d006      	beq.n	800bcde <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	8b5b      	ldrh	r3, [r3, #26]
 800bcd4:	f023 0303 	bic.w	r3, r3, #3
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7f9 f802 	bl	8004cee <lwip_htonl>
 800bcea:	4604      	mov	r4, r0
 800bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcee:	891b      	ldrh	r3, [r3, #8]
 800bcf0:	461d      	mov	r5, r3
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	899b      	ldrh	r3, [r3, #12]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7f8 ffe2 	bl	8004cc4 <lwip_htons>
 800bd00:	4603      	mov	r3, r0
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	f003 0303 	and.w	r3, r3, #3
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <tcp_output+0x2a0>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e000      	b.n	800bd12 <tcp_output+0x2a2>
 800bd10:	2300      	movs	r3, #0
 800bd12:	442b      	add	r3, r5
 800bd14:	4423      	add	r3, r4
 800bd16:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da02      	bge.n	800bd2a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2c:	891b      	ldrh	r3, [r3, #8]
 800bd2e:	461c      	mov	r4, r3
 800bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	899b      	ldrh	r3, [r3, #12]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7f8 ffc3 	bl	8004cc4 <lwip_htons>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	f003 0303 	and.w	r3, r3, #3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <tcp_output+0x2de>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e000      	b.n	800bd50 <tcp_output+0x2e0>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	4423      	add	r3, r4
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d049      	beq.n	800bdea <tcp_output+0x37a>
      seg->next = NULL;
 800bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d105      	bne.n	800bd70 <tcp_output+0x300>
        pcb->unacked = seg;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd68:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	623b      	str	r3, [r7, #32]
 800bd6e:	e03f      	b.n	800bdf0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7f8 ffb9 	bl	8004cee <lwip_htonl>
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7f8 ffb2 	bl	8004cee <lwip_htonl>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	1ae3      	subs	r3, r4, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	da24      	bge.n	800bddc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3370      	adds	r3, #112	@ 0x70
 800bd96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bd98:	e002      	b.n	800bda0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d011      	beq.n	800bdcc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7f8 ff9c 	bl	8004cee <lwip_htonl>
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f8 ff95 	bl	8004cee <lwip_htonl>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dbe6      	blt.n	800bd9a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	e009      	b.n	800bdf0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bddc:	6a3b      	ldr	r3, [r7, #32]
 800bdde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bde0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	623b      	str	r3, [r7, #32]
 800bde8:	e002      	b.n	800bdf0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bdea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdec:	f7fb ff07 	bl	8007bfe <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d012      	beq.n	800be22 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	4618      	mov	r0, r3
 800be04:	f7f8 ff73 	bl	8004cee <lwip_htonl>
 800be08:	4602      	mov	r2, r0
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be12:	8912      	ldrh	r2, [r2, #8]
 800be14:	4413      	add	r3, r2
  while (seg != NULL &&
 800be16:	69ba      	ldr	r2, [r7, #24]
 800be18:	429a      	cmp	r2, r3
 800be1a:	f4bf aed9 	bcs.w	800bbd0 <tcp_output+0x160>
 800be1e:	e000      	b.n	800be22 <tcp_output+0x3b2>
      break;
 800be20:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be26:	2b00      	cmp	r3, #0
 800be28:	d108      	bne.n	800be3c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800be32:	e004      	b.n	800be3e <tcp_output+0x3ce>
    goto output_done;
 800be34:	bf00      	nop
 800be36:	e002      	b.n	800be3e <tcp_output+0x3ce>
    goto output_done;
 800be38:	bf00      	nop
 800be3a:	e000      	b.n	800be3e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800be3c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	8b5b      	ldrh	r3, [r3, #26]
 800be42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be46:	b29a      	uxth	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3728      	adds	r7, #40	@ 0x28
 800be52:	46bd      	mov	sp, r7
 800be54:	bdb0      	pop	{r4, r5, r7, pc}
 800be56:	bf00      	nop

0800be58 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d106      	bne.n	800be74 <tcp_output_segment_busy+0x1c>
 800be66:	4b09      	ldr	r3, [pc, #36]	@ (800be8c <tcp_output_segment_busy+0x34>)
 800be68:	f240 529a 	movw	r2, #1434	@ 0x59a
 800be6c:	4908      	ldr	r1, [pc, #32]	@ (800be90 <tcp_output_segment_busy+0x38>)
 800be6e:	4809      	ldr	r0, [pc, #36]	@ (800be94 <tcp_output_segment_busy+0x3c>)
 800be70:	f003 fc3e 	bl	800f6f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	7b9b      	ldrb	r3, [r3, #14]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d001      	beq.n	800be82 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800be7e:	2301      	movs	r3, #1
 800be80:	e000      	b.n	800be84 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	08011c24 	.word	0x08011c24
 800be90:	080121c0 	.word	0x080121c0
 800be94:	08011c78 	.word	0x08011c78

0800be98 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800be98:	b5b0      	push	{r4, r5, r7, lr}
 800be9a:	b08c      	sub	sp, #48	@ 0x30
 800be9c:	af04      	add	r7, sp, #16
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <tcp_output_segment+0x20>
 800beaa:	4b64      	ldr	r3, [pc, #400]	@ (800c03c <tcp_output_segment+0x1a4>)
 800beac:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800beb0:	4963      	ldr	r1, [pc, #396]	@ (800c040 <tcp_output_segment+0x1a8>)
 800beb2:	4864      	ldr	r0, [pc, #400]	@ (800c044 <tcp_output_segment+0x1ac>)
 800beb4:	f003 fc1c 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <tcp_output_segment+0x34>
 800bebe:	4b5f      	ldr	r3, [pc, #380]	@ (800c03c <tcp_output_segment+0x1a4>)
 800bec0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800bec4:	4960      	ldr	r1, [pc, #384]	@ (800c048 <tcp_output_segment+0x1b0>)
 800bec6:	485f      	ldr	r0, [pc, #380]	@ (800c044 <tcp_output_segment+0x1ac>)
 800bec8:	f003 fc12 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <tcp_output_segment+0x48>
 800bed2:	4b5a      	ldr	r3, [pc, #360]	@ (800c03c <tcp_output_segment+0x1a4>)
 800bed4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800bed8:	495c      	ldr	r1, [pc, #368]	@ (800c04c <tcp_output_segment+0x1b4>)
 800beda:	485a      	ldr	r0, [pc, #360]	@ (800c044 <tcp_output_segment+0x1ac>)
 800bedc:	f003 fc08 	bl	800f6f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7ff ffb9 	bl	800be58 <tcp_output_segment_busy>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	e0a1      	b.n	800c034 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	68dc      	ldr	r4, [r3, #12]
 800bef8:	4610      	mov	r0, r2
 800befa:	f7f8 fef8 	bl	8004cee <lwip_htonl>
 800befe:	4603      	mov	r3, r0
 800bf00:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	68dc      	ldr	r4, [r3, #12]
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7f8 feda 	bl	8004cc4 <lwip_htons>
 800bf10:	4603      	mov	r3, r0
 800bf12:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bf1c:	441a      	add	r2, r3
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	3314      	adds	r3, #20
 800bf28:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	7a9b      	ldrb	r3, [r3, #10]
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d015      	beq.n	800bf62 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	3304      	adds	r3, #4
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6879      	ldr	r1, [r7, #4]
 800bf3e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800bf42:	f7fc fa39 	bl	80083b8 <tcp_eff_send_mss_netif>
 800bf46:	4603      	mov	r3, r0
 800bf48:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bf4a:	8b7b      	ldrh	r3, [r7, #26]
 800bf4c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f8 fecc 	bl	8004cee <lwip_htonl>
 800bf56:	4602      	mov	r2, r0
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	da02      	bge.n	800bf72 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10c      	bne.n	800bf94 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bf7a:	4b35      	ldr	r3, [pc, #212]	@ (800c050 <tcp_output_segment+0x1b8>)
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7f8 feb0 	bl	8004cee <lwip_htonl>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	68da      	ldr	r2, [r3, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	8959      	ldrh	r1, [r3, #10]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	8b3a      	ldrh	r2, [r7, #24]
 800bfae:	1a8a      	subs	r2, r1, r2
 800bfb0:	b292      	uxth	r2, r2
 800bfb2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	8919      	ldrh	r1, [r3, #8]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	8b3a      	ldrh	r2, [r7, #24]
 800bfc0:	1a8a      	subs	r2, r1, r2
 800bfc2:	b292      	uxth	r2, r2
 800bfc4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	68d2      	ldr	r2, [r2, #12]
 800bfce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	741a      	strb	r2, [r3, #16]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68da      	ldr	r2, [r3, #12]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7a9b      	ldrb	r3, [r3, #10]
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <tcp_output_segment+0x158>
 800bfec:	2318      	movs	r3, #24
 800bfee:	e000      	b.n	800bff2 <tcp_output_segment+0x15a>
 800bff0:	2314      	movs	r3, #20
 800bff2:	4413      	add	r3, r2
 800bff4:	69fa      	ldr	r2, [r7, #28]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d006      	beq.n	800c008 <tcp_output_segment+0x170>
 800bffa:	4b10      	ldr	r3, [pc, #64]	@ (800c03c <tcp_output_segment+0x1a4>)
 800bffc:	f240 621c 	movw	r2, #1564	@ 0x61c
 800c000:	4914      	ldr	r1, [pc, #80]	@ (800c054 <tcp_output_segment+0x1bc>)
 800c002:	4810      	ldr	r0, [pc, #64]	@ (800c044 <tcp_output_segment+0x1ac>)
 800c004:	f003 fb74 	bl	800f6f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6858      	ldr	r0, [r3, #4]
 800c00c:	68b9      	ldr	r1, [r7, #8]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	1d1c      	adds	r4, r3, #4
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	7add      	ldrb	r5, [r3, #11]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	7a9b      	ldrb	r3, [r3, #10]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	9202      	str	r2, [sp, #8]
 800c01e:	2206      	movs	r2, #6
 800c020:	9201      	str	r2, [sp, #4]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	462b      	mov	r3, r5
 800c026:	4622      	mov	r2, r4
 800c028:	f002 fa34 	bl	800e494 <ip4_output_if>
 800c02c:	4603      	mov	r3, r0
 800c02e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c030:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3720      	adds	r7, #32
 800c038:	46bd      	mov	sp, r7
 800c03a:	bdb0      	pop	{r4, r5, r7, pc}
 800c03c:	08011c24 	.word	0x08011c24
 800c040:	080121e8 	.word	0x080121e8
 800c044:	08011c78 	.word	0x08011c78
 800c048:	08012208 	.word	0x08012208
 800c04c:	08012228 	.word	0x08012228
 800c050:	20008770 	.word	0x20008770
 800c054:	0801224c 	.word	0x0801224c

0800c058 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c058:	b5b0      	push	{r4, r5, r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d106      	bne.n	800c074 <tcp_rexmit_rto_prepare+0x1c>
 800c066:	4b31      	ldr	r3, [pc, #196]	@ (800c12c <tcp_rexmit_rto_prepare+0xd4>)
 800c068:	f240 6263 	movw	r2, #1635	@ 0x663
 800c06c:	4930      	ldr	r1, [pc, #192]	@ (800c130 <tcp_rexmit_rto_prepare+0xd8>)
 800c06e:	4831      	ldr	r0, [pc, #196]	@ (800c134 <tcp_rexmit_rto_prepare+0xdc>)
 800c070:	f003 fb3e 	bl	800f6f0 <iprintf>

  if (pcb->unacked == NULL) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c07c:	f06f 0305 	mvn.w	r3, #5
 800c080:	e050      	b.n	800c124 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	e00b      	b.n	800c0a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff fee4 	bl	800be58 <tcp_output_segment_busy>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c096:	f06f 0305 	mvn.w	r3, #5
 800c09a:	e043      	b.n	800c124 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	60fb      	str	r3, [r7, #12]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1ef      	bne.n	800c08a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7ff fed4 	bl	800be58 <tcp_output_segment_busy>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c0b6:	f06f 0305 	mvn.w	r3, #5
 800c0ba:	e033      	b.n	800c124 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	8b5b      	ldrh	r3, [r3, #26]
 800c0d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f8 fe01 	bl	8004cee <lwip_htonl>
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	891b      	ldrh	r3, [r3, #8]
 800c0f2:	461d      	mov	r5, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	899b      	ldrh	r3, [r3, #12]
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7f8 fde1 	bl	8004cc4 <lwip_htons>
 800c102:	4603      	mov	r3, r0
 800c104:	b2db      	uxtb	r3, r3
 800c106:	f003 0303 	and.w	r3, r3, #3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d001      	beq.n	800c112 <tcp_rexmit_rto_prepare+0xba>
 800c10e:	2301      	movs	r3, #1
 800c110:	e000      	b.n	800c114 <tcp_rexmit_rto_prepare+0xbc>
 800c112:	2300      	movs	r3, #0
 800c114:	442b      	add	r3, r5
 800c116:	18e2      	adds	r2, r4, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bdb0      	pop	{r4, r5, r7, pc}
 800c12c:	08011c24 	.word	0x08011c24
 800c130:	08012260 	.word	0x08012260
 800c134:	08011c78 	.word	0x08011c78

0800c138 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d106      	bne.n	800c154 <tcp_rexmit_rto_commit+0x1c>
 800c146:	4b0d      	ldr	r3, [pc, #52]	@ (800c17c <tcp_rexmit_rto_commit+0x44>)
 800c148:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c14c:	490c      	ldr	r1, [pc, #48]	@ (800c180 <tcp_rexmit_rto_commit+0x48>)
 800c14e:	480d      	ldr	r0, [pc, #52]	@ (800c184 <tcp_rexmit_rto_commit+0x4c>)
 800c150:	f003 face 	bl	800f6f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c15a:	2bff      	cmp	r3, #255	@ 0xff
 800c15c:	d007      	beq.n	800c16e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c164:	3301      	adds	r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fc7e 	bl	800ba70 <tcp_output>
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	08011c24 	.word	0x08011c24
 800c180:	08012284 	.word	0x08012284
 800c184:	08011c78 	.word	0x08011c78

0800c188 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d106      	bne.n	800c1a4 <tcp_rexmit_rto+0x1c>
 800c196:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <tcp_rexmit_rto+0x38>)
 800c198:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800c19c:	4909      	ldr	r1, [pc, #36]	@ (800c1c4 <tcp_rexmit_rto+0x3c>)
 800c19e:	480a      	ldr	r0, [pc, #40]	@ (800c1c8 <tcp_rexmit_rto+0x40>)
 800c1a0:	f003 faa6 	bl	800f6f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff ff57 	bl	800c058 <tcp_rexmit_rto_prepare>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d102      	bne.n	800c1b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff ffc1 	bl	800c138 <tcp_rexmit_rto_commit>
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	08011c24 	.word	0x08011c24
 800c1c4:	080122a8 	.word	0x080122a8
 800c1c8:	08011c78 	.word	0x08011c78

0800c1cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <tcp_rexmit+0x1c>
 800c1da:	4b2f      	ldr	r3, [pc, #188]	@ (800c298 <tcp_rexmit+0xcc>)
 800c1dc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800c1e0:	492e      	ldr	r1, [pc, #184]	@ (800c29c <tcp_rexmit+0xd0>)
 800c1e2:	482f      	ldr	r0, [pc, #188]	@ (800c2a0 <tcp_rexmit+0xd4>)
 800c1e4:	f003 fa84 	bl	800f6f0 <iprintf>

  if (pcb->unacked == NULL) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d102      	bne.n	800c1f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c1f0:	f06f 0305 	mvn.w	r3, #5
 800c1f4:	e04c      	b.n	800c290 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c1fc:	68b8      	ldr	r0, [r7, #8]
 800c1fe:	f7ff fe2b 	bl	800be58 <tcp_output_segment_busy>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c208:	f06f 0305 	mvn.w	r3, #5
 800c20c:	e040      	b.n	800c290 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	336c      	adds	r3, #108	@ 0x6c
 800c21a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c21c:	e002      	b.n	800c224 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d011      	beq.n	800c250 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	4618      	mov	r0, r3
 800c236:	f7f8 fd5a 	bl	8004cee <lwip_htonl>
 800c23a:	4604      	mov	r4, r0
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	4618      	mov	r0, r3
 800c244:	f7f8 fd53 	bl	8004cee <lwip_htonl>
 800c248:	4603      	mov	r3, r0
 800c24a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	dbe6      	blt.n	800c21e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d103      	bne.n	800c26e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c274:	2bff      	cmp	r3, #255	@ 0xff
 800c276:	d007      	beq.n	800c288 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c27e:	3301      	adds	r3, #1
 800c280:	b2da      	uxtb	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	bd90      	pop	{r4, r7, pc}
 800c298:	08011c24 	.word	0x08011c24
 800c29c:	080122c4 	.word	0x080122c4
 800c2a0:	08011c78 	.word	0x08011c78

0800c2a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <tcp_rexmit_fast+0x1c>
 800c2b2:	4b2a      	ldr	r3, [pc, #168]	@ (800c35c <tcp_rexmit_fast+0xb8>)
 800c2b4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800c2b8:	4929      	ldr	r1, [pc, #164]	@ (800c360 <tcp_rexmit_fast+0xbc>)
 800c2ba:	482a      	ldr	r0, [pc, #168]	@ (800c364 <tcp_rexmit_fast+0xc0>)
 800c2bc:	f003 fa18 	bl	800f6f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d044      	beq.n	800c352 <tcp_rexmit_fast+0xae>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	8b5b      	ldrh	r3, [r3, #26]
 800c2cc:	f003 0304 	and.w	r3, r3, #4
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d13e      	bne.n	800c352 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff79 	bl	800c1cc <tcp_rexmit>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d138      	bne.n	800c352 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	bf28      	it	cs
 800c2f0:	4613      	movcs	r3, r2
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	0fda      	lsrs	r2, r3, #31
 800c2f6:	4413      	add	r3, r2
 800c2f8:	105b      	asrs	r3, r3, #1
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c308:	461a      	mov	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	429a      	cmp	r2, r3
 800c312:	d206      	bcs.n	800c322 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c32c:	4619      	mov	r1, r3
 800c32e:	0049      	lsls	r1, r1, #1
 800c330:	440b      	add	r3, r1
 800c332:	b29b      	uxth	r3, r3
 800c334:	4413      	add	r3, r2
 800c336:	b29a      	uxth	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	8b5b      	ldrh	r3, [r3, #26]
 800c342:	f043 0304 	orr.w	r3, r3, #4
 800c346:	b29a      	uxth	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	08011c24 	.word	0x08011c24
 800c360:	080122dc 	.word	0x080122dc
 800c364:	08011c78 	.word	0x08011c78

0800c368 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	607b      	str	r3, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	817b      	strh	r3, [r7, #10]
 800c376:	4613      	mov	r3, r2
 800c378:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c37a:	897a      	ldrh	r2, [r7, #10]
 800c37c:	893b      	ldrh	r3, [r7, #8]
 800c37e:	4413      	add	r3, r2
 800c380:	b29b      	uxth	r3, r3
 800c382:	3314      	adds	r3, #20
 800c384:	b29b      	uxth	r3, r3
 800c386:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c38a:	4619      	mov	r1, r3
 800c38c:	2022      	movs	r0, #34	@ 0x22
 800c38e:	f7f9 fd13 	bl	8005db8 <pbuf_alloc>
 800c392:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d04d      	beq.n	800c436 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c39a:	897b      	ldrh	r3, [r7, #10]
 800c39c:	3313      	adds	r3, #19
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	8952      	ldrh	r2, [r2, #10]
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	db06      	blt.n	800c3b4 <tcp_output_alloc_header_common+0x4c>
 800c3a6:	4b26      	ldr	r3, [pc, #152]	@ (800c440 <tcp_output_alloc_header_common+0xd8>)
 800c3a8:	f240 7223 	movw	r2, #1827	@ 0x723
 800c3ac:	4925      	ldr	r1, [pc, #148]	@ (800c444 <tcp_output_alloc_header_common+0xdc>)
 800c3ae:	4826      	ldr	r0, [pc, #152]	@ (800c448 <tcp_output_alloc_header_common+0xe0>)
 800c3b0:	f003 f99e 	bl	800f6f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c3ba:	8c3b      	ldrh	r3, [r7, #32]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7f8 fc81 	bl	8004cc4 <lwip_htons>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c3ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f8 fc79 	bl	8004cc4 <lwip_htons>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f7f8 fc84 	bl	8004cee <lwip_htonl>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c3ec:	897b      	ldrh	r3, [r7, #10]
 800c3ee:	089b      	lsrs	r3, r3, #2
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	3305      	adds	r3, #5
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	031b      	lsls	r3, r3, #12
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	4313      	orrs	r3, r2
 800c402:	b29b      	uxth	r3, r3
 800c404:	4618      	mov	r0, r3
 800c406:	f7f8 fc5d 	bl	8004cc4 <lwip_htons>
 800c40a:	4603      	mov	r3, r0
 800c40c:	461a      	mov	r2, r3
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c412:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c414:	4618      	mov	r0, r3
 800c416:	f7f8 fc55 	bl	8004cc4 <lwip_htons>
 800c41a:	4603      	mov	r3, r0
 800c41c:	461a      	mov	r2, r3
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2200      	movs	r2, #0
 800c426:	741a      	strb	r2, [r3, #16]
 800c428:	2200      	movs	r2, #0
 800c42a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	2200      	movs	r2, #0
 800c430:	749a      	strb	r2, [r3, #18]
 800c432:	2200      	movs	r2, #0
 800c434:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c436:	697b      	ldr	r3, [r7, #20]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	08011c24 	.word	0x08011c24
 800c444:	080122fc 	.word	0x080122fc
 800c448:	08011c78 	.word	0x08011c78

0800c44c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c44c:	b5b0      	push	{r4, r5, r7, lr}
 800c44e:	b08a      	sub	sp, #40	@ 0x28
 800c450:	af04      	add	r7, sp, #16
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	607b      	str	r3, [r7, #4]
 800c456:	460b      	mov	r3, r1
 800c458:	817b      	strh	r3, [r7, #10]
 800c45a:	4613      	mov	r3, r2
 800c45c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d106      	bne.n	800c472 <tcp_output_alloc_header+0x26>
 800c464:	4b15      	ldr	r3, [pc, #84]	@ (800c4bc <tcp_output_alloc_header+0x70>)
 800c466:	f240 7242 	movw	r2, #1858	@ 0x742
 800c46a:	4915      	ldr	r1, [pc, #84]	@ (800c4c0 <tcp_output_alloc_header+0x74>)
 800c46c:	4815      	ldr	r0, [pc, #84]	@ (800c4c4 <tcp_output_alloc_header+0x78>)
 800c46e:	f003 f93f 	bl	800f6f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	8adb      	ldrh	r3, [r3, #22]
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	8b12      	ldrh	r2, [r2, #24]
 800c47e:	68f9      	ldr	r1, [r7, #12]
 800c480:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800c482:	893d      	ldrh	r5, [r7, #8]
 800c484:	897c      	ldrh	r4, [r7, #10]
 800c486:	9103      	str	r1, [sp, #12]
 800c488:	2110      	movs	r1, #16
 800c48a:	9102      	str	r1, [sp, #8]
 800c48c:	9201      	str	r2, [sp, #4]
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	462a      	mov	r2, r5
 800c494:	4621      	mov	r1, r4
 800c496:	f7ff ff67 	bl	800c368 <tcp_output_alloc_header_common>
 800c49a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d006      	beq.n	800c4b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c4aa:	441a      	add	r2, r3
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800c4b0:	697b      	ldr	r3, [r7, #20]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	08011c24 	.word	0x08011c24
 800c4c0:	0801232c 	.word	0x0801232c
 800c4c4:	08011c78 	.word	0x08011c78

0800c4c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	71fb      	strb	r3, [r7, #7]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d106      	bne.n	800c4f6 <tcp_output_fill_options+0x2e>
 800c4e8:	4b12      	ldr	r3, [pc, #72]	@ (800c534 <tcp_output_fill_options+0x6c>)
 800c4ea:	f240 7256 	movw	r2, #1878	@ 0x756
 800c4ee:	4912      	ldr	r1, [pc, #72]	@ (800c538 <tcp_output_fill_options+0x70>)
 800c4f0:	4812      	ldr	r0, [pc, #72]	@ (800c53c <tcp_output_fill_options+0x74>)
 800c4f2:	f003 f8fd 	bl	800f6f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	3314      	adds	r3, #20
 800c500:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c502:	8bfb      	ldrh	r3, [r7, #30]
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	461a      	mov	r2, r3
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	f003 0304 	and.w	r3, r3, #4
 800c510:	4413      	add	r3, r2
 800c512:	3314      	adds	r3, #20
 800c514:	69ba      	ldr	r2, [r7, #24]
 800c516:	4413      	add	r3, r2
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d006      	beq.n	800c52c <tcp_output_fill_options+0x64>
 800c51e:	4b05      	ldr	r3, [pc, #20]	@ (800c534 <tcp_output_fill_options+0x6c>)
 800c520:	f240 7275 	movw	r2, #1909	@ 0x775
 800c524:	4906      	ldr	r1, [pc, #24]	@ (800c540 <tcp_output_fill_options+0x78>)
 800c526:	4805      	ldr	r0, [pc, #20]	@ (800c53c <tcp_output_fill_options+0x74>)
 800c528:	f003 f8e2 	bl	800f6f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c52c:	bf00      	nop
 800c52e:	3720      	adds	r7, #32
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	08011c24 	.word	0x08011c24
 800c538:	08012354 	.word	0x08012354
 800c53c:	08011c78 	.word	0x08011c78
 800c540:	0801224c 	.word	0x0801224c

0800c544 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08a      	sub	sp, #40	@ 0x28
 800c548:	af04      	add	r7, sp, #16
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d106      	bne.n	800c566 <tcp_output_control_segment+0x22>
 800c558:	4b1c      	ldr	r3, [pc, #112]	@ (800c5cc <tcp_output_control_segment+0x88>)
 800c55a:	f240 7287 	movw	r2, #1927	@ 0x787
 800c55e:	491c      	ldr	r1, [pc, #112]	@ (800c5d0 <tcp_output_control_segment+0x8c>)
 800c560:	481c      	ldr	r0, [pc, #112]	@ (800c5d4 <tcp_output_control_segment+0x90>)
 800c562:	f003 f8c5 	bl	800f6f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f7fe faea 	bl	800ab44 <tcp_route>
 800c570:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d102      	bne.n	800c57e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c578:	23fc      	movs	r3, #252	@ 0xfc
 800c57a:	75fb      	strb	r3, [r7, #23]
 800c57c:	e01c      	b.n	800c5b8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	7adb      	ldrb	r3, [r3, #11]
 800c588:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	7a9b      	ldrb	r3, [r3, #10]
 800c58e:	757b      	strb	r3, [r7, #21]
 800c590:	e003      	b.n	800c59a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c592:	23ff      	movs	r3, #255	@ 0xff
 800c594:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c59a:	7dba      	ldrb	r2, [r7, #22]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	9302      	str	r3, [sp, #8]
 800c5a0:	2306      	movs	r3, #6
 800c5a2:	9301      	str	r3, [sp, #4]
 800c5a4:	7d7b      	ldrb	r3, [r7, #21]
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	6879      	ldr	r1, [r7, #4]
 800c5ae:	68b8      	ldr	r0, [r7, #8]
 800c5b0:	f001 ff70 	bl	800e494 <ip4_output_if>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c5b8:	68b8      	ldr	r0, [r7, #8]
 800c5ba:	f7f9 fee1 	bl	8006380 <pbuf_free>
  return err;
 800c5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3718      	adds	r7, #24
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	08011c24 	.word	0x08011c24
 800c5d0:	0801237c 	.word	0x0801237c
 800c5d4:	08011c78 	.word	0x08011c78

0800c5d8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c5d8:	b590      	push	{r4, r7, lr}
 800c5da:	b08b      	sub	sp, #44	@ 0x2c
 800c5dc:	af04      	add	r7, sp, #16
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d106      	bne.n	800c5fa <tcp_rst+0x22>
 800c5ec:	4b1f      	ldr	r3, [pc, #124]	@ (800c66c <tcp_rst+0x94>)
 800c5ee:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c5f2:	491f      	ldr	r1, [pc, #124]	@ (800c670 <tcp_rst+0x98>)
 800c5f4:	481f      	ldr	r0, [pc, #124]	@ (800c674 <tcp_rst+0x9c>)
 800c5f6:	f003 f87b 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d106      	bne.n	800c60e <tcp_rst+0x36>
 800c600:	4b1a      	ldr	r3, [pc, #104]	@ (800c66c <tcp_rst+0x94>)
 800c602:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c606:	491c      	ldr	r1, [pc, #112]	@ (800c678 <tcp_rst+0xa0>)
 800c608:	481a      	ldr	r0, [pc, #104]	@ (800c674 <tcp_rst+0x9c>)
 800c60a:	f003 f871 	bl	800f6f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c60e:	2300      	movs	r3, #0
 800c610:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c612:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c616:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	b29c      	uxth	r4, r3
 800c61c:	68b8      	ldr	r0, [r7, #8]
 800c61e:	f7f8 fb66 	bl	8004cee <lwip_htonl>
 800c622:	4602      	mov	r2, r0
 800c624:	8abb      	ldrh	r3, [r7, #20]
 800c626:	9303      	str	r3, [sp, #12]
 800c628:	2314      	movs	r3, #20
 800c62a:	9302      	str	r3, [sp, #8]
 800c62c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	4613      	mov	r3, r2
 800c636:	2200      	movs	r2, #0
 800c638:	4621      	mov	r1, r4
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff fe94 	bl	800c368 <tcp_output_alloc_header_common>
 800c640:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00c      	beq.n	800c662 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	2200      	movs	r2, #0
 800c64c:	6939      	ldr	r1, [r7, #16]
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7ff ff3a 	bl	800c4c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	6939      	ldr	r1, [r7, #16]
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f7ff ff72 	bl	800c544 <tcp_output_control_segment>
 800c660:	e000      	b.n	800c664 <tcp_rst+0x8c>
    return;
 800c662:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	bd90      	pop	{r4, r7, pc}
 800c66a:	bf00      	nop
 800c66c:	08011c24 	.word	0x08011c24
 800c670:	080123a8 	.word	0x080123a8
 800c674:	08011c78 	.word	0x08011c78
 800c678:	080123c4 	.word	0x080123c4

0800c67c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d106      	bne.n	800c6a0 <tcp_send_empty_ack+0x24>
 800c692:	4b28      	ldr	r3, [pc, #160]	@ (800c734 <tcp_send_empty_ack+0xb8>)
 800c694:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c698:	4927      	ldr	r1, [pc, #156]	@ (800c738 <tcp_send_empty_ack+0xbc>)
 800c69a:	4828      	ldr	r0, [pc, #160]	@ (800c73c <tcp_send_empty_ack+0xc0>)
 800c69c:	f003 f828 	bl	800f6f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	f003 0304 	and.w	r3, r3, #4
 800c6aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c6ac:	7d7b      	ldrb	r3, [r7, #21]
 800c6ae:	b29c      	uxth	r4, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7f8 fb1a 	bl	8004cee <lwip_htonl>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2200      	movs	r2, #0
 800c6be:	4621      	mov	r1, r4
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff fec3 	bl	800c44c <tcp_output_alloc_header>
 800c6c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d109      	bne.n	800c6e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	8b5b      	ldrh	r3, [r3, #26]
 800c6d2:	f043 0303 	orr.w	r3, r3, #3
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c6dc:	f06f 0301 	mvn.w	r3, #1
 800c6e0:	e023      	b.n	800c72a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c6e2:	7dbb      	ldrb	r3, [r7, #22]
 800c6e4:	7dfa      	ldrb	r2, [r7, #23]
 800c6e6:	6939      	ldr	r1, [r7, #16]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7ff feed 	bl	800c4c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	6939      	ldr	r1, [r7, #16]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7ff ff24 	bl	800c544 <tcp_output_control_segment>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d007      	beq.n	800c718 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	8b5b      	ldrh	r3, [r3, #26]
 800c70c:	f043 0303 	orr.w	r3, r3, #3
 800c710:	b29a      	uxth	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	835a      	strh	r2, [r3, #26]
 800c716:	e006      	b.n	800c726 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	8b5b      	ldrh	r3, [r3, #26]
 800c71c:	f023 0303 	bic.w	r3, r3, #3
 800c720:	b29a      	uxth	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	371c      	adds	r7, #28
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd90      	pop	{r4, r7, pc}
 800c732:	bf00      	nop
 800c734:	08011c24 	.word	0x08011c24
 800c738:	080123e0 	.word	0x080123e0
 800c73c:	08011c78 	.word	0x08011c78

0800c740 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c740:	b590      	push	{r4, r7, lr}
 800c742:	b087      	sub	sp, #28
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c748:	2300      	movs	r3, #0
 800c74a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d106      	bne.n	800c760 <tcp_keepalive+0x20>
 800c752:	4b18      	ldr	r3, [pc, #96]	@ (800c7b4 <tcp_keepalive+0x74>)
 800c754:	f640 0224 	movw	r2, #2084	@ 0x824
 800c758:	4917      	ldr	r1, [pc, #92]	@ (800c7b8 <tcp_keepalive+0x78>)
 800c75a:	4818      	ldr	r0, [pc, #96]	@ (800c7bc <tcp_keepalive+0x7c>)
 800c75c:	f002 ffc8 	bl	800f6f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	b29c      	uxth	r4, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c768:	3b01      	subs	r3, #1
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7f8 fabf 	bl	8004cee <lwip_htonl>
 800c770:	4603      	mov	r3, r0
 800c772:	2200      	movs	r2, #0
 800c774:	4621      	mov	r1, r4
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7ff fe68 	bl	800c44c <tcp_output_alloc_header>
 800c77c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d102      	bne.n	800c78a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c784:	f04f 33ff 	mov.w	r3, #4294967295
 800c788:	e010      	b.n	800c7ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c78a:	7dfb      	ldrb	r3, [r7, #23]
 800c78c:	2200      	movs	r2, #0
 800c78e:	6939      	ldr	r1, [r7, #16]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff fe99 	bl	800c4c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3304      	adds	r3, #4
 800c79c:	6939      	ldr	r1, [r7, #16]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7ff fed0 	bl	800c544 <tcp_output_control_segment>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c7a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd90      	pop	{r4, r7, pc}
 800c7b4:	08011c24 	.word	0x08011c24
 800c7b8:	08012400 	.word	0x08012400
 800c7bc:	08011c78 	.word	0x08011c78

0800c7c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c7c0:	b590      	push	{r4, r7, lr}
 800c7c2:	b08b      	sub	sp, #44	@ 0x2c
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <tcp_zero_window_probe+0x22>
 800c7d4:	4b4c      	ldr	r3, [pc, #304]	@ (800c908 <tcp_zero_window_probe+0x148>)
 800c7d6:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c7da:	494c      	ldr	r1, [pc, #304]	@ (800c90c <tcp_zero_window_probe+0x14c>)
 800c7dc:	484c      	ldr	r0, [pc, #304]	@ (800c910 <tcp_zero_window_probe+0x150>)
 800c7de:	f002 ff87 	bl	800f6f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7e6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	e086      	b.n	800c900 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c7f8:	2bff      	cmp	r3, #255	@ 0xff
 800c7fa:	d007      	beq.n	800c80c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c802:	3301      	adds	r3, #1
 800c804:	b2da      	uxtb	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	899b      	ldrh	r3, [r3, #12]
 800c812:	b29b      	uxth	r3, r3
 800c814:	4618      	mov	r0, r3
 800c816:	f7f8 fa55 	bl	8004cc4 <lwip_htons>
 800c81a:	4603      	mov	r3, r0
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	2b00      	cmp	r3, #0
 800c824:	d005      	beq.n	800c832 <tcp_zero_window_probe+0x72>
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	891b      	ldrh	r3, [r3, #8]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <tcp_zero_window_probe+0x72>
 800c82e:	2301      	movs	r3, #1
 800c830:	e000      	b.n	800c834 <tcp_zero_window_probe+0x74>
 800c832:	2300      	movs	r3, #0
 800c834:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c836:	7ffb      	ldrb	r3, [r7, #31]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	bf0c      	ite	eq
 800c83c:	2301      	moveq	r3, #1
 800c83e:	2300      	movne	r3, #0
 800c840:	b2db      	uxtb	r3, r3
 800c842:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c848:	b299      	uxth	r1, r3
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	8bba      	ldrh	r2, [r7, #28]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff fdfa 	bl	800c44c <tcp_output_alloc_header>
 800c858:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c860:	f04f 33ff 	mov.w	r3, #4294967295
 800c864:	e04c      	b.n	800c900 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c86c:	7ffb      	ldrb	r3, [r7, #31]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d011      	beq.n	800c896 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	899b      	ldrh	r3, [r3, #12]
 800c876:	b29b      	uxth	r3, r3
 800c878:	b21b      	sxth	r3, r3
 800c87a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c87e:	b21c      	sxth	r4, r3
 800c880:	2011      	movs	r0, #17
 800c882:	f7f8 fa1f 	bl	8004cc4 <lwip_htons>
 800c886:	4603      	mov	r3, r0
 800c888:	b21b      	sxth	r3, r3
 800c88a:	4323      	orrs	r3, r4
 800c88c:	b21b      	sxth	r3, r3
 800c88e:	b29a      	uxth	r2, r3
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	819a      	strh	r2, [r3, #12]
 800c894:	e010      	b.n	800c8b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	3314      	adds	r3, #20
 800c89c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	6858      	ldr	r0, [r3, #4]
 800c8a2:	6a3b      	ldr	r3, [r7, #32]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	891a      	ldrh	r2, [r3, #8]
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	891b      	ldrh	r3, [r3, #8]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	6939      	ldr	r1, [r7, #16]
 800c8b4:	f7f9 ff5e 	bl	8006774 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f8 fa15 	bl	8004cee <lwip_htonl>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	da02      	bge.n	800c8dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	69b9      	ldr	r1, [r7, #24]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff fdef 	bl	800c4c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	69b9      	ldr	r1, [r7, #24]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7ff fe26 	bl	800c544 <tcp_output_control_segment>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c8fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c900:	4618      	mov	r0, r3
 800c902:	372c      	adds	r7, #44	@ 0x2c
 800c904:	46bd      	mov	sp, r7
 800c906:	bd90      	pop	{r4, r7, pc}
 800c908:	08011c24 	.word	0x08011c24
 800c90c:	0801241c 	.word	0x0801241c
 800c910:	08011c78 	.word	0x08011c78

0800c914 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c91c:	f7fa f818 	bl	8006950 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c920:	4b0a      	ldr	r3, [pc, #40]	@ (800c94c <tcpip_tcp_timer+0x38>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d103      	bne.n	800c930 <tcpip_tcp_timer+0x1c>
 800c928:	4b09      	ldr	r3, [pc, #36]	@ (800c950 <tcpip_tcp_timer+0x3c>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d005      	beq.n	800c93c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c930:	2200      	movs	r2, #0
 800c932:	4908      	ldr	r1, [pc, #32]	@ (800c954 <tcpip_tcp_timer+0x40>)
 800c934:	20fa      	movs	r0, #250	@ 0xfa
 800c936:	f000 f8f3 	bl	800cb20 <sys_timeout>
 800c93a:	e003      	b.n	800c944 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c93c:	4b06      	ldr	r3, [pc, #24]	@ (800c958 <tcpip_tcp_timer+0x44>)
 800c93e:	2200      	movs	r2, #0
 800c940:	601a      	str	r2, [r3, #0]
  }
}
 800c942:	bf00      	nop
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	2000877c 	.word	0x2000877c
 800c950:	20008780 	.word	0x20008780
 800c954:	0800c915 	.word	0x0800c915
 800c958:	200087c8 	.word	0x200087c8

0800c95c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c960:	4b0a      	ldr	r3, [pc, #40]	@ (800c98c <tcp_timer_needed+0x30>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10f      	bne.n	800c988 <tcp_timer_needed+0x2c>
 800c968:	4b09      	ldr	r3, [pc, #36]	@ (800c990 <tcp_timer_needed+0x34>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d103      	bne.n	800c978 <tcp_timer_needed+0x1c>
 800c970:	4b08      	ldr	r3, [pc, #32]	@ (800c994 <tcp_timer_needed+0x38>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d007      	beq.n	800c988 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c978:	4b04      	ldr	r3, [pc, #16]	@ (800c98c <tcp_timer_needed+0x30>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c97e:	2200      	movs	r2, #0
 800c980:	4905      	ldr	r1, [pc, #20]	@ (800c998 <tcp_timer_needed+0x3c>)
 800c982:	20fa      	movs	r0, #250	@ 0xfa
 800c984:	f000 f8cc 	bl	800cb20 <sys_timeout>
  }
}
 800c988:	bf00      	nop
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	200087c8 	.word	0x200087c8
 800c990:	2000877c 	.word	0x2000877c
 800c994:	20008780 	.word	0x20008780
 800c998:	0800c915 	.word	0x0800c915

0800c99c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c9a8:	2006      	movs	r0, #6
 800c9aa:	f7f8 fe03 	bl	80055b4 <memp_malloc>
 800c9ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d109      	bne.n	800c9ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d151      	bne.n	800ca60 <sys_timeout_abs+0xc4>
 800c9bc:	4b2a      	ldr	r3, [pc, #168]	@ (800ca68 <sys_timeout_abs+0xcc>)
 800c9be:	22be      	movs	r2, #190	@ 0xbe
 800c9c0:	492a      	ldr	r1, [pc, #168]	@ (800ca6c <sys_timeout_abs+0xd0>)
 800c9c2:	482b      	ldr	r0, [pc, #172]	@ (800ca70 <sys_timeout_abs+0xd4>)
 800c9c4:	f002 fe94 	bl	800f6f0 <iprintf>
    return;
 800c9c8:	e04a      	b.n	800ca60 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c9e2:	4b24      	ldr	r3, [pc, #144]	@ (800ca74 <sys_timeout_abs+0xd8>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d103      	bne.n	800c9f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c9ea:	4a22      	ldr	r2, [pc, #136]	@ (800ca74 <sys_timeout_abs+0xd8>)
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	6013      	str	r3, [r2, #0]
    return;
 800c9f0:	e037      	b.n	800ca62 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	4b1f      	ldr	r3, [pc, #124]	@ (800ca74 <sys_timeout_abs+0xd8>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	0fdb      	lsrs	r3, r3, #31
 800ca00:	f003 0301 	and.w	r3, r3, #1
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d007      	beq.n	800ca1a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ca0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ca74 <sys_timeout_abs+0xd8>)
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ca12:	4a18      	ldr	r2, [pc, #96]	@ (800ca74 <sys_timeout_abs+0xd8>)
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	6013      	str	r3, [r2, #0]
 800ca18:	e023      	b.n	800ca62 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ca1a:	4b16      	ldr	r3, [pc, #88]	@ (800ca74 <sys_timeout_abs+0xd8>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	617b      	str	r3, [r7, #20]
 800ca20:	e01a      	b.n	800ca58 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00b      	beq.n	800ca42 <sys_timeout_abs+0xa6>
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	0fdb      	lsrs	r3, r3, #31
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	601a      	str	r2, [r3, #0]
        break;
 800ca50:	e007      	b.n	800ca62 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	617b      	str	r3, [r7, #20]
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1e1      	bne.n	800ca22 <sys_timeout_abs+0x86>
 800ca5e:	e000      	b.n	800ca62 <sys_timeout_abs+0xc6>
    return;
 800ca60:	bf00      	nop
      }
    }
  }
}
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	08012440 	.word	0x08012440
 800ca6c:	08012474 	.word	0x08012474
 800ca70:	080124b4 	.word	0x080124b4
 800ca74:	200087c0 	.word	0x200087c0

0800ca78 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	4798      	blx	r3

  now = sys_now();
 800ca8a:	f7f7 ff03 	bl	8004894 <sys_now>
 800ca8e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	4b0f      	ldr	r3, [pc, #60]	@ (800cad4 <lwip_cyclic_timer+0x5c>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4413      	add	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	0fdb      	lsrs	r3, r3, #31
 800caa4:	f003 0301 	and.w	r3, r3, #1
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d009      	beq.n	800cac2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	4413      	add	r3, r2
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	4907      	ldr	r1, [pc, #28]	@ (800cad8 <lwip_cyclic_timer+0x60>)
 800caba:	4618      	mov	r0, r3
 800cabc:	f7ff ff6e 	bl	800c99c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cac0:	e004      	b.n	800cacc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	4904      	ldr	r1, [pc, #16]	@ (800cad8 <lwip_cyclic_timer+0x60>)
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7ff ff68 	bl	800c99c <sys_timeout_abs>
}
 800cacc:	bf00      	nop
 800cace:	3718      	adds	r7, #24
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	200087c4 	.word	0x200087c4
 800cad8:	0800ca79 	.word	0x0800ca79

0800cadc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cae2:	2301      	movs	r3, #1
 800cae4:	607b      	str	r3, [r7, #4]
 800cae6:	e00e      	b.n	800cb06 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cae8:	4a0b      	ldr	r2, [pc, #44]	@ (800cb18 <sys_timeouts_init+0x3c>)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	4a08      	ldr	r2, [pc, #32]	@ (800cb18 <sys_timeouts_init+0x3c>)
 800caf6:	4413      	add	r3, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	4908      	ldr	r1, [pc, #32]	@ (800cb1c <sys_timeouts_init+0x40>)
 800cafc:	f000 f810 	bl	800cb20 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3301      	adds	r3, #1
 800cb04:	607b      	str	r3, [r7, #4]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d9ed      	bls.n	800cae8 <sys_timeouts_init+0xc>
  }
}
 800cb0c:	bf00      	nop
 800cb0e:	bf00      	nop
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	0801302c 	.word	0x0801302c
 800cb1c:	0800ca79 	.word	0x0800ca79

0800cb20 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb32:	d306      	bcc.n	800cb42 <sys_timeout+0x22>
 800cb34:	4b0a      	ldr	r3, [pc, #40]	@ (800cb60 <sys_timeout+0x40>)
 800cb36:	f240 1229 	movw	r2, #297	@ 0x129
 800cb3a:	490a      	ldr	r1, [pc, #40]	@ (800cb64 <sys_timeout+0x44>)
 800cb3c:	480a      	ldr	r0, [pc, #40]	@ (800cb68 <sys_timeout+0x48>)
 800cb3e:	f002 fdd7 	bl	800f6f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cb42:	f7f7 fea7 	bl	8004894 <sys_now>
 800cb46:	4602      	mov	r2, r0
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	68b9      	ldr	r1, [r7, #8]
 800cb52:	6978      	ldr	r0, [r7, #20]
 800cb54:	f7ff ff22 	bl	800c99c <sys_timeout_abs>
#endif
}
 800cb58:	bf00      	nop
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	08012440 	.word	0x08012440
 800cb64:	080124dc 	.word	0x080124dc
 800cb68:	080124b4 	.word	0x080124b4

0800cb6c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cb72:	f7f7 fe8f 	bl	8004894 <sys_now>
 800cb76:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800cb78:	4b1a      	ldr	r3, [pc, #104]	@ (800cbe4 <sys_check_timeouts+0x78>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <sys_check_timeouts+0x1a>
 800cb82:	f7f9 f8c3 	bl	8005d0c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cb86:	4b18      	ldr	r3, [pc, #96]	@ (800cbe8 <sys_check_timeouts+0x7c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d022      	beq.n	800cbd8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	0fdb      	lsrs	r3, r3, #31
 800cb9c:	f003 0301 	and.w	r3, r3, #1
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d11a      	bne.n	800cbdc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a0f      	ldr	r2, [pc, #60]	@ (800cbe8 <sys_check_timeouts+0x7c>)
 800cbac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	4a0b      	ldr	r2, [pc, #44]	@ (800cbec <sys_check_timeouts+0x80>)
 800cbc0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cbc2:	68b9      	ldr	r1, [r7, #8]
 800cbc4:	2006      	movs	r0, #6
 800cbc6:	f7f8 fd65 	bl	8005694 <memp_free>
    if (handler != NULL) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0d3      	beq.n	800cb78 <sys_check_timeouts+0xc>
      handler(arg);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6838      	ldr	r0, [r7, #0]
 800cbd4:	4798      	blx	r3
  do {
 800cbd6:	e7cf      	b.n	800cb78 <sys_check_timeouts+0xc>
      return;
 800cbd8:	bf00      	nop
 800cbda:	e000      	b.n	800cbde <sys_check_timeouts+0x72>
      return;
 800cbdc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	2000876d 	.word	0x2000876d
 800cbe8:	200087c0 	.word	0x200087c0
 800cbec:	200087c4 	.word	0x200087c4

0800cbf0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cbf4:	f002 fc7c 	bl	800f4f0 <rand>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	4b01      	ldr	r3, [pc, #4]	@ (800cc10 <udp_init+0x20>)
 800cc0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cc0c:	bf00      	nop
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	20000028 	.word	0x20000028

0800cc14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d105      	bne.n	800cc34 <udp_input_local_match+0x20>
 800cc28:	4b27      	ldr	r3, [pc, #156]	@ (800ccc8 <udp_input_local_match+0xb4>)
 800cc2a:	2287      	movs	r2, #135	@ 0x87
 800cc2c:	4927      	ldr	r1, [pc, #156]	@ (800cccc <udp_input_local_match+0xb8>)
 800cc2e:	4828      	ldr	r0, [pc, #160]	@ (800ccd0 <udp_input_local_match+0xbc>)
 800cc30:	f002 fd5e 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d105      	bne.n	800cc46 <udp_input_local_match+0x32>
 800cc3a:	4b23      	ldr	r3, [pc, #140]	@ (800ccc8 <udp_input_local_match+0xb4>)
 800cc3c:	2288      	movs	r2, #136	@ 0x88
 800cc3e:	4925      	ldr	r1, [pc, #148]	@ (800ccd4 <udp_input_local_match+0xc0>)
 800cc40:	4823      	ldr	r0, [pc, #140]	@ (800ccd0 <udp_input_local_match+0xbc>)
 800cc42:	f002 fd55 	bl	800f6f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	7a1b      	ldrb	r3, [r3, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00b      	beq.n	800cc66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	7a1a      	ldrb	r2, [r3, #8]
 800cc52:	4b21      	ldr	r3, [pc, #132]	@ (800ccd8 <udp_input_local_match+0xc4>)
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d001      	beq.n	800cc66 <udp_input_local_match+0x52>
    return 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	e02b      	b.n	800ccbe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d018      	beq.n	800cc9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d013      	beq.n	800cc9a <udp_input_local_match+0x86>
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00f      	beq.n	800cc9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cc7a:	4b17      	ldr	r3, [pc, #92]	@ (800ccd8 <udp_input_local_match+0xc4>)
 800cc7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc82:	d00a      	beq.n	800cc9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	4b13      	ldr	r3, [pc, #76]	@ (800ccd8 <udp_input_local_match+0xc4>)
 800cc8a:	695b      	ldr	r3, [r3, #20]
 800cc8c:	405a      	eors	r2, r3
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	3308      	adds	r3, #8
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d110      	bne.n	800ccbc <udp_input_local_match+0xa8>
          return 1;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e00f      	b.n	800ccbe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d009      	beq.n	800ccb8 <udp_input_local_match+0xa4>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d005      	beq.n	800ccb8 <udp_input_local_match+0xa4>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	4b09      	ldr	r3, [pc, #36]	@ (800ccd8 <udp_input_local_match+0xc4>)
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d101      	bne.n	800ccbc <udp_input_local_match+0xa8>
        return 1;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e000      	b.n	800ccbe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	08012528 	.word	0x08012528
 800cccc:	08012558 	.word	0x08012558
 800ccd0:	0801257c 	.word	0x0801257c
 800ccd4:	080125a4 	.word	0x080125a4
 800ccd8:	20005200 	.word	0x20005200

0800ccdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ccdc:	b590      	push	{r4, r7, lr}
 800ccde:	b08d      	sub	sp, #52	@ 0x34
 800cce0:	af02      	add	r7, sp, #8
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d105      	bne.n	800ccfc <udp_input+0x20>
 800ccf0:	4b7c      	ldr	r3, [pc, #496]	@ (800cee4 <udp_input+0x208>)
 800ccf2:	22cf      	movs	r2, #207	@ 0xcf
 800ccf4:	497c      	ldr	r1, [pc, #496]	@ (800cee8 <udp_input+0x20c>)
 800ccf6:	487d      	ldr	r0, [pc, #500]	@ (800ceec <udp_input+0x210>)
 800ccf8:	f002 fcfa 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d105      	bne.n	800cd0e <udp_input+0x32>
 800cd02:	4b78      	ldr	r3, [pc, #480]	@ (800cee4 <udp_input+0x208>)
 800cd04:	22d0      	movs	r2, #208	@ 0xd0
 800cd06:	497a      	ldr	r1, [pc, #488]	@ (800cef0 <udp_input+0x214>)
 800cd08:	4878      	ldr	r0, [pc, #480]	@ (800ceec <udp_input+0x210>)
 800cd0a:	f002 fcf1 	bl	800f6f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	895b      	ldrh	r3, [r3, #10]
 800cd12:	2b07      	cmp	r3, #7
 800cd14:	d803      	bhi.n	800cd1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7f9 fb32 	bl	8006380 <pbuf_free>
    goto end;
 800cd1c:	e0de      	b.n	800cedc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cd24:	4b73      	ldr	r3, [pc, #460]	@ (800cef4 <udp_input+0x218>)
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	4a72      	ldr	r2, [pc, #456]	@ (800cef4 <udp_input+0x218>)
 800cd2a:	6812      	ldr	r2, [r2, #0]
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f001 fc88 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800cd34:	4603      	mov	r3, r0
 800cd36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7f7 ffc0 	bl	8004cc4 <lwip_htons>
 800cd44:	4603      	mov	r3, r0
 800cd46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	885b      	ldrh	r3, [r3, #2]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f7 ffb8 	bl	8004cc4 <lwip_htons>
 800cd54:	4603      	mov	r3, r0
 800cd56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cd60:	2300      	movs	r3, #0
 800cd62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd64:	4b64      	ldr	r3, [pc, #400]	@ (800cef8 <udp_input+0x21c>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd6a:	e054      	b.n	800ce16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6e:	8a5b      	ldrh	r3, [r3, #18]
 800cd70:	89fa      	ldrh	r2, [r7, #14]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d14a      	bne.n	800ce0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cd76:	7cfb      	ldrb	r3, [r7, #19]
 800cd78:	461a      	mov	r2, r3
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd7e:	f7ff ff49 	bl	800cc14 <udp_input_local_match>
 800cd82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d041      	beq.n	800ce0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8a:	7c1b      	ldrb	r3, [r3, #16]
 800cd8c:	f003 0304 	and.w	r3, r3, #4
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d11d      	bne.n	800cdd0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d102      	bne.n	800cda0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9c:	61fb      	str	r3, [r7, #28]
 800cd9e:	e017      	b.n	800cdd0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cda0:	7cfb      	ldrb	r3, [r7, #19]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d014      	beq.n	800cdd0 <udp_input+0xf4>
 800cda6:	4b53      	ldr	r3, [pc, #332]	@ (800cef4 <udp_input+0x218>)
 800cda8:	695b      	ldr	r3, [r3, #20]
 800cdaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdae:	d10f      	bne.n	800cdd0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d008      	beq.n	800cdd0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d101      	bne.n	800cdd0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd2:	8a9b      	ldrh	r3, [r3, #20]
 800cdd4:	8a3a      	ldrh	r2, [r7, #16]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d118      	bne.n	800ce0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cddc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d005      	beq.n	800cdee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde4:	685a      	ldr	r2, [r3, #4]
 800cde6:	4b43      	ldr	r3, [pc, #268]	@ (800cef4 <udp_input+0x218>)
 800cde8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d10e      	bne.n	800ce0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d014      	beq.n	800ce1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf6:	68da      	ldr	r2, [r3, #12]
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cdfc:	4b3e      	ldr	r3, [pc, #248]	@ (800cef8 <udp_input+0x21c>)
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ce04:	4a3c      	ldr	r2, [pc, #240]	@ (800cef8 <udp_input+0x21c>)
 800ce06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ce0a:	e008      	b.n	800ce1e <udp_input+0x142>
      }
    }

    prev = pcb;
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1a7      	bne.n	800cd6c <udp_input+0x90>
 800ce1c:	e000      	b.n	800ce20 <udp_input+0x144>
        break;
 800ce1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ce20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d101      	bne.n	800ce2a <udp_input+0x14e>
    pcb = uncon_pcb;
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <udp_input+0x15a>
    for_us = 1;
 800ce30:	2301      	movs	r3, #1
 800ce32:	76fb      	strb	r3, [r7, #27]
 800ce34:	e00a      	b.n	800ce4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	3304      	adds	r3, #4
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	4b2d      	ldr	r3, [pc, #180]	@ (800cef4 <udp_input+0x218>)
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	bf0c      	ite	eq
 800ce44:	2301      	moveq	r3, #1
 800ce46:	2300      	movne	r3, #0
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ce4c:	7efb      	ldrb	r3, [r7, #27]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d041      	beq.n	800ced6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ce52:	2108      	movs	r1, #8
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7f9 fa0d 	bl	8006274 <pbuf_remove_header>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00a      	beq.n	800ce76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ce60:	4b20      	ldr	r3, [pc, #128]	@ (800cee4 <udp_input+0x208>)
 800ce62:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ce66:	4925      	ldr	r1, [pc, #148]	@ (800cefc <udp_input+0x220>)
 800ce68:	4820      	ldr	r0, [pc, #128]	@ (800ceec <udp_input+0x210>)
 800ce6a:	f002 fc41 	bl	800f6f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7f9 fa86 	bl	8006380 <pbuf_free>
      goto end;
 800ce74:	e032      	b.n	800cedc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d012      	beq.n	800cea2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00a      	beq.n	800ce9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ce84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce86:	699c      	ldr	r4, [r3, #24]
 800ce88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8a:	69d8      	ldr	r0, [r3, #28]
 800ce8c:	8a3b      	ldrh	r3, [r7, #16]
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4b1b      	ldr	r3, [pc, #108]	@ (800cf00 <udp_input+0x224>)
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ce98:	e021      	b.n	800cede <udp_input+0x202>
        pbuf_free(p);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7f9 fa70 	bl	8006380 <pbuf_free>
        goto end;
 800cea0:	e01c      	b.n	800cedc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cea2:	7cfb      	ldrb	r3, [r7, #19]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d112      	bne.n	800cece <udp_input+0x1f2>
 800cea8:	4b12      	ldr	r3, [pc, #72]	@ (800cef4 <udp_input+0x218>)
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ceb0:	2be0      	cmp	r3, #224	@ 0xe0
 800ceb2:	d00c      	beq.n	800cece <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ceb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cef4 <udp_input+0x218>)
 800ceb6:	899b      	ldrh	r3, [r3, #12]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	b21b      	sxth	r3, r3
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7f9 fa4a 	bl	800635a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cec6:	2103      	movs	r1, #3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 f89b 	bl	800e004 <icmp_dest_unreach>
      pbuf_free(p);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7f9 fa56 	bl	8006380 <pbuf_free>
  return;
 800ced4:	e003      	b.n	800cede <udp_input+0x202>
    pbuf_free(p);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7f9 fa52 	bl	8006380 <pbuf_free>
  return;
 800cedc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cede:	372c      	adds	r7, #44	@ 0x2c
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd90      	pop	{r4, r7, pc}
 800cee4:	08012528 	.word	0x08012528
 800cee8:	080125cc 	.word	0x080125cc
 800ceec:	0801257c 	.word	0x0801257c
 800cef0:	080125e4 	.word	0x080125e4
 800cef4:	20005200 	.word	0x20005200
 800cef8:	200087cc 	.word	0x200087cc
 800cefc:	08012600 	.word	0x08012600
 800cf00:	20005210 	.word	0x20005210

0800cf04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d01e      	beq.n	800cf52 <udp_netif_ip_addr_changed+0x4e>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d01a      	beq.n	800cf52 <udp_netif_ip_addr_changed+0x4e>
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d017      	beq.n	800cf52 <udp_netif_ip_addr_changed+0x4e>
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d013      	beq.n	800cf52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf60 <udp_netif_ip_addr_changed+0x5c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	e00c      	b.n	800cf4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d103      	bne.n	800cf46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1ef      	bne.n	800cf32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cf52:	bf00      	nop
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	200087cc 	.word	0x200087cc

0800cf64 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cf6c:	4915      	ldr	r1, [pc, #84]	@ (800cfc4 <etharp_free_entry+0x60>)
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	4613      	mov	r3, r2
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	4413      	add	r3, r2
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	440b      	add	r3, r1
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d013      	beq.n	800cfa8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cf80:	4910      	ldr	r1, [pc, #64]	@ (800cfc4 <etharp_free_entry+0x60>)
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	4613      	mov	r3, r2
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	4413      	add	r3, r2
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	440b      	add	r3, r1
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7f9 f9f5 	bl	8006380 <pbuf_free>
    arp_table[i].q = NULL;
 800cf96:	490b      	ldr	r1, [pc, #44]	@ (800cfc4 <etharp_free_entry+0x60>)
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4413      	add	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	440b      	add	r3, r1
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cfa8:	4906      	ldr	r1, [pc, #24]	@ (800cfc4 <etharp_free_entry+0x60>)
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	4613      	mov	r3, r2
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	4413      	add	r3, r2
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	440b      	add	r3, r1
 800cfb6:	3314      	adds	r3, #20
 800cfb8:	2200      	movs	r2, #0
 800cfba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	200087d0 	.word	0x200087d0

0800cfc8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfce:	2300      	movs	r3, #0
 800cfd0:	607b      	str	r3, [r7, #4]
 800cfd2:	e096      	b.n	800d102 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cfd4:	494f      	ldr	r1, [pc, #316]	@ (800d114 <etharp_tmr+0x14c>)
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	4413      	add	r3, r2
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	440b      	add	r3, r1
 800cfe2:	3314      	adds	r3, #20
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cfe8:	78fb      	ldrb	r3, [r7, #3]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f000 8086 	beq.w	800d0fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cff0:	4948      	ldr	r1, [pc, #288]	@ (800d114 <etharp_tmr+0x14c>)
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	4613      	mov	r3, r2
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	4413      	add	r3, r2
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	440b      	add	r3, r1
 800cffe:	3312      	adds	r3, #18
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	3301      	adds	r3, #1
 800d004:	b298      	uxth	r0, r3
 800d006:	4943      	ldr	r1, [pc, #268]	@ (800d114 <etharp_tmr+0x14c>)
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	4613      	mov	r3, r2
 800d00c:	005b      	lsls	r3, r3, #1
 800d00e:	4413      	add	r3, r2
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	440b      	add	r3, r1
 800d014:	3312      	adds	r3, #18
 800d016:	4602      	mov	r2, r0
 800d018:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d01a:	493e      	ldr	r1, [pc, #248]	@ (800d114 <etharp_tmr+0x14c>)
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	4613      	mov	r3, r2
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	4413      	add	r3, r2
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	440b      	add	r3, r1
 800d028:	3312      	adds	r3, #18
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d030:	d215      	bcs.n	800d05e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d032:	4938      	ldr	r1, [pc, #224]	@ (800d114 <etharp_tmr+0x14c>)
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	4613      	mov	r3, r2
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	4413      	add	r3, r2
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	440b      	add	r3, r1
 800d040:	3314      	adds	r3, #20
 800d042:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d044:	2b01      	cmp	r3, #1
 800d046:	d10e      	bne.n	800d066 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d048:	4932      	ldr	r1, [pc, #200]	@ (800d114 <etharp_tmr+0x14c>)
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	4613      	mov	r3, r2
 800d04e:	005b      	lsls	r3, r3, #1
 800d050:	4413      	add	r3, r2
 800d052:	00db      	lsls	r3, r3, #3
 800d054:	440b      	add	r3, r1
 800d056:	3312      	adds	r3, #18
 800d058:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d05a:	2b04      	cmp	r3, #4
 800d05c:	d903      	bls.n	800d066 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff ff80 	bl	800cf64 <etharp_free_entry>
 800d064:	e04a      	b.n	800d0fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d066:	492b      	ldr	r1, [pc, #172]	@ (800d114 <etharp_tmr+0x14c>)
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	4613      	mov	r3, r2
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	4413      	add	r3, r2
 800d070:	00db      	lsls	r3, r3, #3
 800d072:	440b      	add	r3, r1
 800d074:	3314      	adds	r3, #20
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	2b03      	cmp	r3, #3
 800d07a:	d10a      	bne.n	800d092 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d07c:	4925      	ldr	r1, [pc, #148]	@ (800d114 <etharp_tmr+0x14c>)
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	4613      	mov	r3, r2
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	4413      	add	r3, r2
 800d086:	00db      	lsls	r3, r3, #3
 800d088:	440b      	add	r3, r1
 800d08a:	3314      	adds	r3, #20
 800d08c:	2204      	movs	r2, #4
 800d08e:	701a      	strb	r2, [r3, #0]
 800d090:	e034      	b.n	800d0fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d092:	4920      	ldr	r1, [pc, #128]	@ (800d114 <etharp_tmr+0x14c>)
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	4613      	mov	r3, r2
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	4413      	add	r3, r2
 800d09c:	00db      	lsls	r3, r3, #3
 800d09e:	440b      	add	r3, r1
 800d0a0:	3314      	adds	r3, #20
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	2b04      	cmp	r3, #4
 800d0a6:	d10a      	bne.n	800d0be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d0a8:	491a      	ldr	r1, [pc, #104]	@ (800d114 <etharp_tmr+0x14c>)
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	4413      	add	r3, r2
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	440b      	add	r3, r1
 800d0b6:	3314      	adds	r3, #20
 800d0b8:	2202      	movs	r2, #2
 800d0ba:	701a      	strb	r2, [r3, #0]
 800d0bc:	e01e      	b.n	800d0fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d0be:	4915      	ldr	r1, [pc, #84]	@ (800d114 <etharp_tmr+0x14c>)
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	4413      	add	r3, r2
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	440b      	add	r3, r1
 800d0cc:	3314      	adds	r3, #20
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d113      	bne.n	800d0fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d0d4:	490f      	ldr	r1, [pc, #60]	@ (800d114 <etharp_tmr+0x14c>)
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	005b      	lsls	r3, r3, #1
 800d0dc:	4413      	add	r3, r2
 800d0de:	00db      	lsls	r3, r3, #3
 800d0e0:	440b      	add	r3, r1
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	6818      	ldr	r0, [r3, #0]
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	005b      	lsls	r3, r3, #1
 800d0ec:	4413      	add	r3, r2
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	4a08      	ldr	r2, [pc, #32]	@ (800d114 <etharp_tmr+0x14c>)
 800d0f2:	4413      	add	r3, r2
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	f000 fe6e 	bl	800ddd8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3301      	adds	r3, #1
 800d100:	607b      	str	r3, [r7, #4]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b09      	cmp	r3, #9
 800d106:	f77f af65 	ble.w	800cfd4 <etharp_tmr+0xc>
      }
    }
  }
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	200087d0 	.word	0x200087d0

0800d118 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08a      	sub	sp, #40	@ 0x28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	460b      	mov	r3, r1
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d126:	230a      	movs	r3, #10
 800d128:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d12a:	230a      	movs	r3, #10
 800d12c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d12e:	230a      	movs	r3, #10
 800d130:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d136:	230a      	movs	r3, #10
 800d138:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	83bb      	strh	r3, [r7, #28]
 800d13e:	2300      	movs	r3, #0
 800d140:	837b      	strh	r3, [r7, #26]
 800d142:	2300      	movs	r3, #0
 800d144:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d146:	2300      	movs	r3, #0
 800d148:	843b      	strh	r3, [r7, #32]
 800d14a:	e0ae      	b.n	800d2aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d14c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d150:	49a6      	ldr	r1, [pc, #664]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d152:	4613      	mov	r3, r2
 800d154:	005b      	lsls	r3, r3, #1
 800d156:	4413      	add	r3, r2
 800d158:	00db      	lsls	r3, r3, #3
 800d15a:	440b      	add	r3, r1
 800d15c:	3314      	adds	r3, #20
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d162:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d166:	2b0a      	cmp	r3, #10
 800d168:	d105      	bne.n	800d176 <etharp_find_entry+0x5e>
 800d16a:	7dfb      	ldrb	r3, [r7, #23]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d102      	bne.n	800d176 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d170:	8c3b      	ldrh	r3, [r7, #32]
 800d172:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d174:	e095      	b.n	800d2a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f000 8092 	beq.w	800d2a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d009      	beq.n	800d198 <etharp_find_entry+0x80>
 800d184:	7dfb      	ldrb	r3, [r7, #23]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d806      	bhi.n	800d198 <etharp_find_entry+0x80>
 800d18a:	4b99      	ldr	r3, [pc, #612]	@ (800d3f0 <etharp_find_entry+0x2d8>)
 800d18c:	f240 1223 	movw	r2, #291	@ 0x123
 800d190:	4998      	ldr	r1, [pc, #608]	@ (800d3f4 <etharp_find_entry+0x2dc>)
 800d192:	4899      	ldr	r0, [pc, #612]	@ (800d3f8 <etharp_find_entry+0x2e0>)
 800d194:	f002 faac 	bl	800f6f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d020      	beq.n	800d1e0 <etharp_find_entry+0xc8>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6819      	ldr	r1, [r3, #0]
 800d1a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d1a6:	4891      	ldr	r0, [pc, #580]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	005b      	lsls	r3, r3, #1
 800d1ac:	4413      	add	r3, r2
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	4403      	add	r3, r0
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4299      	cmp	r1, r3
 800d1b8:	d112      	bne.n	800d1e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00c      	beq.n	800d1da <etharp_find_entry+0xc2>
 800d1c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d1c4:	4989      	ldr	r1, [pc, #548]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	4413      	add	r3, r2
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	440b      	add	r3, r1
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d102      	bne.n	800d1e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d1da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d1de:	e100      	b.n	800d3e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d140      	bne.n	800d268 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d1e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d1ea:	4980      	ldr	r1, [pc, #512]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	4413      	add	r3, r2
 800d1f2:	00db      	lsls	r3, r3, #3
 800d1f4:	440b      	add	r3, r1
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01a      	beq.n	800d232 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d1fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d200:	497a      	ldr	r1, [pc, #488]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d202:	4613      	mov	r3, r2
 800d204:	005b      	lsls	r3, r3, #1
 800d206:	4413      	add	r3, r2
 800d208:	00db      	lsls	r3, r3, #3
 800d20a:	440b      	add	r3, r1
 800d20c:	3312      	adds	r3, #18
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	8bba      	ldrh	r2, [r7, #28]
 800d212:	429a      	cmp	r2, r3
 800d214:	d845      	bhi.n	800d2a2 <etharp_find_entry+0x18a>
            old_queue = i;
 800d216:	8c3b      	ldrh	r3, [r7, #32]
 800d218:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d21a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d21e:	4973      	ldr	r1, [pc, #460]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d220:	4613      	mov	r3, r2
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	4413      	add	r3, r2
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	440b      	add	r3, r1
 800d22a:	3312      	adds	r3, #18
 800d22c:	881b      	ldrh	r3, [r3, #0]
 800d22e:	83bb      	strh	r3, [r7, #28]
 800d230:	e037      	b.n	800d2a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d236:	496d      	ldr	r1, [pc, #436]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	440b      	add	r3, r1
 800d242:	3312      	adds	r3, #18
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	8b7a      	ldrh	r2, [r7, #26]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d82a      	bhi.n	800d2a2 <etharp_find_entry+0x18a>
            old_pending = i;
 800d24c:	8c3b      	ldrh	r3, [r7, #32]
 800d24e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800d250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d254:	4965      	ldr	r1, [pc, #404]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d256:	4613      	mov	r3, r2
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	4413      	add	r3, r2
 800d25c:	00db      	lsls	r3, r3, #3
 800d25e:	440b      	add	r3, r1
 800d260:	3312      	adds	r3, #18
 800d262:	881b      	ldrh	r3, [r3, #0]
 800d264:	837b      	strh	r3, [r7, #26]
 800d266:	e01c      	b.n	800d2a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d268:	7dfb      	ldrb	r3, [r7, #23]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d919      	bls.n	800d2a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d26e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d272:	495e      	ldr	r1, [pc, #376]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d274:	4613      	mov	r3, r2
 800d276:	005b      	lsls	r3, r3, #1
 800d278:	4413      	add	r3, r2
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	440b      	add	r3, r1
 800d27e:	3312      	adds	r3, #18
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	8b3a      	ldrh	r2, [r7, #24]
 800d284:	429a      	cmp	r2, r3
 800d286:	d80c      	bhi.n	800d2a2 <etharp_find_entry+0x18a>
            old_stable = i;
 800d288:	8c3b      	ldrh	r3, [r7, #32]
 800d28a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800d28c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d290:	4956      	ldr	r1, [pc, #344]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d292:	4613      	mov	r3, r2
 800d294:	005b      	lsls	r3, r3, #1
 800d296:	4413      	add	r3, r2
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	440b      	add	r3, r1
 800d29c:	3312      	adds	r3, #18
 800d29e:	881b      	ldrh	r3, [r3, #0]
 800d2a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2a2:	8c3b      	ldrh	r3, [r7, #32]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	843b      	strh	r3, [r7, #32]
 800d2aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d2ae:	2b09      	cmp	r3, #9
 800d2b0:	f77f af4c 	ble.w	800d14c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d2b4:	7afb      	ldrb	r3, [r7, #11]
 800d2b6:	f003 0302 	and.w	r3, r3, #2
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d108      	bne.n	800d2d0 <etharp_find_entry+0x1b8>
 800d2be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d2c2:	2b0a      	cmp	r3, #10
 800d2c4:	d107      	bne.n	800d2d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d2c6:	7afb      	ldrb	r3, [r7, #11]
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d4:	e085      	b.n	800d3e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d2d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d2da:	2b09      	cmp	r3, #9
 800d2dc:	dc02      	bgt.n	800d2e4 <etharp_find_entry+0x1cc>
    i = empty;
 800d2de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2e0:	843b      	strh	r3, [r7, #32]
 800d2e2:	e039      	b.n	800d358 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d2e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d2e8:	2b09      	cmp	r3, #9
 800d2ea:	dc14      	bgt.n	800d316 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d2ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d2f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d2f4:	493d      	ldr	r1, [pc, #244]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	005b      	lsls	r3, r3, #1
 800d2fa:	4413      	add	r3, r2
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	440b      	add	r3, r1
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d018      	beq.n	800d338 <etharp_find_entry+0x220>
 800d306:	4b3a      	ldr	r3, [pc, #232]	@ (800d3f0 <etharp_find_entry+0x2d8>)
 800d308:	f240 126d 	movw	r2, #365	@ 0x16d
 800d30c:	493b      	ldr	r1, [pc, #236]	@ (800d3fc <etharp_find_entry+0x2e4>)
 800d30e:	483a      	ldr	r0, [pc, #232]	@ (800d3f8 <etharp_find_entry+0x2e0>)
 800d310:	f002 f9ee 	bl	800f6f0 <iprintf>
 800d314:	e010      	b.n	800d338 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d316:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d31a:	2b09      	cmp	r3, #9
 800d31c:	dc02      	bgt.n	800d324 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d31e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d320:	843b      	strh	r3, [r7, #32]
 800d322:	e009      	b.n	800d338 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d324:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d328:	2b09      	cmp	r3, #9
 800d32a:	dc02      	bgt.n	800d332 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d32c:	8bfb      	ldrh	r3, [r7, #30]
 800d32e:	843b      	strh	r3, [r7, #32]
 800d330:	e002      	b.n	800d338 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d332:	f04f 33ff 	mov.w	r3, #4294967295
 800d336:	e054      	b.n	800d3e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d338:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d33c:	2b09      	cmp	r3, #9
 800d33e:	dd06      	ble.n	800d34e <etharp_find_entry+0x236>
 800d340:	4b2b      	ldr	r3, [pc, #172]	@ (800d3f0 <etharp_find_entry+0x2d8>)
 800d342:	f240 127f 	movw	r2, #383	@ 0x17f
 800d346:	492e      	ldr	r1, [pc, #184]	@ (800d400 <etharp_find_entry+0x2e8>)
 800d348:	482b      	ldr	r0, [pc, #172]	@ (800d3f8 <etharp_find_entry+0x2e0>)
 800d34a:	f002 f9d1 	bl	800f6f0 <iprintf>
    etharp_free_entry(i);
 800d34e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d352:	4618      	mov	r0, r3
 800d354:	f7ff fe06 	bl	800cf64 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d358:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d35c:	2b09      	cmp	r3, #9
 800d35e:	dd06      	ble.n	800d36e <etharp_find_entry+0x256>
 800d360:	4b23      	ldr	r3, [pc, #140]	@ (800d3f0 <etharp_find_entry+0x2d8>)
 800d362:	f240 1283 	movw	r2, #387	@ 0x183
 800d366:	4926      	ldr	r1, [pc, #152]	@ (800d400 <etharp_find_entry+0x2e8>)
 800d368:	4823      	ldr	r0, [pc, #140]	@ (800d3f8 <etharp_find_entry+0x2e0>)
 800d36a:	f002 f9c1 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d36e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d372:	491e      	ldr	r1, [pc, #120]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d374:	4613      	mov	r3, r2
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	4413      	add	r3, r2
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	440b      	add	r3, r1
 800d37e:	3314      	adds	r3, #20
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d006      	beq.n	800d394 <etharp_find_entry+0x27c>
 800d386:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f0 <etharp_find_entry+0x2d8>)
 800d388:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d38c:	491d      	ldr	r1, [pc, #116]	@ (800d404 <etharp_find_entry+0x2ec>)
 800d38e:	481a      	ldr	r0, [pc, #104]	@ (800d3f8 <etharp_find_entry+0x2e0>)
 800d390:	f002 f9ae 	bl	800f6f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00b      	beq.n	800d3b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d39a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6819      	ldr	r1, [r3, #0]
 800d3a2:	4812      	ldr	r0, [pc, #72]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	005b      	lsls	r3, r3, #1
 800d3a8:	4413      	add	r3, r2
 800d3aa:	00db      	lsls	r3, r3, #3
 800d3ac:	4403      	add	r3, r0
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d3b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3b6:	490d      	ldr	r1, [pc, #52]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	4413      	add	r3, r2
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	440b      	add	r3, r1
 800d3c2:	3312      	adds	r3, #18
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d3c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3cc:	4907      	ldr	r1, [pc, #28]	@ (800d3ec <etharp_find_entry+0x2d4>)
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	005b      	lsls	r3, r3, #1
 800d3d2:	4413      	add	r3, r2
 800d3d4:	00db      	lsls	r3, r3, #3
 800d3d6:	440b      	add	r3, r1
 800d3d8:	3308      	adds	r3, #8
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d3de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3728      	adds	r7, #40	@ 0x28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200087d0 	.word	0x200087d0
 800d3f0:	0801288c 	.word	0x0801288c
 800d3f4:	080128c4 	.word	0x080128c4
 800d3f8:	08012904 	.word	0x08012904
 800d3fc:	0801292c 	.word	0x0801292c
 800d400:	08012944 	.word	0x08012944
 800d404:	08012958 	.word	0x08012958

0800d408 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af02      	add	r7, sp, #8
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d41c:	2b06      	cmp	r3, #6
 800d41e:	d006      	beq.n	800d42e <etharp_update_arp_entry+0x26>
 800d420:	4b48      	ldr	r3, [pc, #288]	@ (800d544 <etharp_update_arp_entry+0x13c>)
 800d422:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d426:	4948      	ldr	r1, [pc, #288]	@ (800d548 <etharp_update_arp_entry+0x140>)
 800d428:	4848      	ldr	r0, [pc, #288]	@ (800d54c <etharp_update_arp_entry+0x144>)
 800d42a:	f002 f961 	bl	800f6f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d012      	beq.n	800d45a <etharp_update_arp_entry+0x52>
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00e      	beq.n	800d45a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68f9      	ldr	r1, [r7, #12]
 800d442:	4618      	mov	r0, r3
 800d444:	f001 f8fe 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800d448:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d105      	bne.n	800d45a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d456:	2be0      	cmp	r3, #224	@ 0xe0
 800d458:	d102      	bne.n	800d460 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d45a:	f06f 030f 	mvn.w	r3, #15
 800d45e:	e06c      	b.n	800d53a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	4619      	mov	r1, r3
 800d466:	68b8      	ldr	r0, [r7, #8]
 800d468:	f7ff fe56 	bl	800d118 <etharp_find_entry>
 800d46c:	4603      	mov	r3, r0
 800d46e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d470:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d474:	2b00      	cmp	r3, #0
 800d476:	da02      	bge.n	800d47e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d478:	8afb      	ldrh	r3, [r7, #22]
 800d47a:	b25b      	sxtb	r3, r3
 800d47c:	e05d      	b.n	800d53a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d47e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d482:	4933      	ldr	r1, [pc, #204]	@ (800d550 <etharp_update_arp_entry+0x148>)
 800d484:	4613      	mov	r3, r2
 800d486:	005b      	lsls	r3, r3, #1
 800d488:	4413      	add	r3, r2
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	440b      	add	r3, r1
 800d48e:	3314      	adds	r3, #20
 800d490:	2202      	movs	r2, #2
 800d492:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d494:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d498:	492d      	ldr	r1, [pc, #180]	@ (800d550 <etharp_update_arp_entry+0x148>)
 800d49a:	4613      	mov	r3, r2
 800d49c:	005b      	lsls	r3, r3, #1
 800d49e:	4413      	add	r3, r2
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	440b      	add	r3, r1
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d4aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	005b      	lsls	r3, r3, #1
 800d4b2:	4413      	add	r3, r2
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	4a25      	ldr	r2, [pc, #148]	@ (800d550 <etharp_update_arp_entry+0x148>)
 800d4ba:	4413      	add	r3, r2
 800d4bc:	3304      	adds	r3, #4
 800d4be:	2206      	movs	r2, #6
 800d4c0:	6879      	ldr	r1, [r7, #4]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f002 f9ef 	bl	800f8a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d4c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d4cc:	4920      	ldr	r1, [pc, #128]	@ (800d550 <etharp_update_arp_entry+0x148>)
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	4413      	add	r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	440b      	add	r3, r1
 800d4d8:	3312      	adds	r3, #18
 800d4da:	2200      	movs	r2, #0
 800d4dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d4de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d4e2:	491b      	ldr	r1, [pc, #108]	@ (800d550 <etharp_update_arp_entry+0x148>)
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	4413      	add	r3, r2
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	440b      	add	r3, r1
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d021      	beq.n	800d538 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d4f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d4f8:	4915      	ldr	r1, [pc, #84]	@ (800d550 <etharp_update_arp_entry+0x148>)
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	005b      	lsls	r3, r3, #1
 800d4fe:	4413      	add	r3, r2
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	440b      	add	r3, r1
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d508:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d50c:	4910      	ldr	r1, [pc, #64]	@ (800d550 <etharp_update_arp_entry+0x148>)
 800d50e:	4613      	mov	r3, r2
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	4413      	add	r3, r2
 800d514:	00db      	lsls	r3, r3, #3
 800d516:	440b      	add	r3, r1
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d522:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6939      	ldr	r1, [r7, #16]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f001 ff97 	bl	800f460 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d532:	6938      	ldr	r0, [r7, #16]
 800d534:	f7f8 ff24 	bl	8006380 <pbuf_free>
  }
  return ERR_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3718      	adds	r7, #24
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	0801288c 	.word	0x0801288c
 800d548:	08012984 	.word	0x08012984
 800d54c:	08012904 	.word	0x08012904
 800d550:	200087d0 	.word	0x200087d0

0800d554 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d55c:	2300      	movs	r3, #0
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	e01e      	b.n	800d5a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d562:	4913      	ldr	r1, [pc, #76]	@ (800d5b0 <etharp_cleanup_netif+0x5c>)
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	4613      	mov	r3, r2
 800d568:	005b      	lsls	r3, r3, #1
 800d56a:	4413      	add	r3, r2
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	440b      	add	r3, r1
 800d570:	3314      	adds	r3, #20
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d576:	7afb      	ldrb	r3, [r7, #11]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00e      	beq.n	800d59a <etharp_cleanup_netif+0x46>
 800d57c:	490c      	ldr	r1, [pc, #48]	@ (800d5b0 <etharp_cleanup_netif+0x5c>)
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	4613      	mov	r3, r2
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	4413      	add	r3, r2
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	440b      	add	r3, r1
 800d58a:	3308      	adds	r3, #8
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	429a      	cmp	r2, r3
 800d592:	d102      	bne.n	800d59a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f7ff fce5 	bl	800cf64 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	3301      	adds	r3, #1
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b09      	cmp	r3, #9
 800d5a4:	dddd      	ble.n	800d562 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d5a6:	bf00      	nop
 800d5a8:	bf00      	nop
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	200087d0 	.word	0x200087d0

0800d5b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d5b4:	b5b0      	push	{r4, r5, r7, lr}
 800d5b6:	b08a      	sub	sp, #40	@ 0x28
 800d5b8:	af04      	add	r7, sp, #16
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d107      	bne.n	800d5d4 <etharp_input+0x20>
 800d5c4:	4b3d      	ldr	r3, [pc, #244]	@ (800d6bc <etharp_input+0x108>)
 800d5c6:	f240 228a 	movw	r2, #650	@ 0x28a
 800d5ca:	493d      	ldr	r1, [pc, #244]	@ (800d6c0 <etharp_input+0x10c>)
 800d5cc:	483d      	ldr	r0, [pc, #244]	@ (800d6c4 <etharp_input+0x110>)
 800d5ce:	f002 f88f 	bl	800f6f0 <iprintf>
 800d5d2:	e06f      	b.n	800d6b4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5e4:	d10c      	bne.n	800d600 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d5ea:	2b06      	cmp	r3, #6
 800d5ec:	d108      	bne.n	800d600 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d5f2:	2b04      	cmp	r3, #4
 800d5f4:	d104      	bne.n	800d600 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	885b      	ldrh	r3, [r3, #2]
 800d5fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d5fc:	2b08      	cmp	r3, #8
 800d5fe:	d003      	beq.n	800d608 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7f8 febd 	bl	8006380 <pbuf_free>
    return;
 800d606:	e055      	b.n	800d6b4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	330e      	adds	r3, #14
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	3318      	adds	r3, #24
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	3304      	adds	r3, #4
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d102      	bne.n	800d628 <etharp_input+0x74>
    for_us = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	75fb      	strb	r3, [r7, #23]
 800d626:	e009      	b.n	800d63c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d628:	68ba      	ldr	r2, [r7, #8]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	3304      	adds	r3, #4
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	429a      	cmp	r2, r3
 800d632:	bf0c      	ite	eq
 800d634:	2301      	moveq	r3, #1
 800d636:	2300      	movne	r3, #0
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	f103 0208 	add.w	r2, r3, #8
 800d642:	7dfb      	ldrb	r3, [r7, #23]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <etharp_input+0x98>
 800d648:	2301      	movs	r3, #1
 800d64a:	e000      	b.n	800d64e <etharp_input+0x9a>
 800d64c:	2302      	movs	r3, #2
 800d64e:	f107 010c 	add.w	r1, r7, #12
 800d652:	6838      	ldr	r0, [r7, #0]
 800d654:	f7ff fed8 	bl	800d408 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	88db      	ldrh	r3, [r3, #6]
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d662:	d003      	beq.n	800d66c <etharp_input+0xb8>
 800d664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d668:	d01e      	beq.n	800d6a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d66a:	e020      	b.n	800d6ae <etharp_input+0xfa>
      if (for_us) {
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d01c      	beq.n	800d6ac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d68c:	2102      	movs	r1, #2
 800d68e:	9103      	str	r1, [sp, #12]
 800d690:	f107 010c 	add.w	r1, r7, #12
 800d694:	9102      	str	r1, [sp, #8]
 800d696:	9201      	str	r2, [sp, #4]
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	462b      	mov	r3, r5
 800d69c:	4622      	mov	r2, r4
 800d69e:	4601      	mov	r1, r0
 800d6a0:	6838      	ldr	r0, [r7, #0]
 800d6a2:	f000 faeb 	bl	800dc7c <etharp_raw>
      break;
 800d6a6:	e001      	b.n	800d6ac <etharp_input+0xf8>
      break;
 800d6a8:	bf00      	nop
 800d6aa:	e000      	b.n	800d6ae <etharp_input+0xfa>
      break;
 800d6ac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7f8 fe66 	bl	8006380 <pbuf_free>
}
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bdb0      	pop	{r4, r5, r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	0801288c 	.word	0x0801288c
 800d6c0:	080129dc 	.word	0x080129dc
 800d6c4:	08012904 	.word	0x08012904

0800d6c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af02      	add	r7, sp, #8
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d6d6:	79fa      	ldrb	r2, [r7, #7]
 800d6d8:	4944      	ldr	r1, [pc, #272]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d6da:	4613      	mov	r3, r2
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	4413      	add	r3, r2
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	440b      	add	r3, r1
 800d6e4:	3314      	adds	r3, #20
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d806      	bhi.n	800d6fa <etharp_output_to_arp_index+0x32>
 800d6ec:	4b40      	ldr	r3, [pc, #256]	@ (800d7f0 <etharp_output_to_arp_index+0x128>)
 800d6ee:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d6f2:	4940      	ldr	r1, [pc, #256]	@ (800d7f4 <etharp_output_to_arp_index+0x12c>)
 800d6f4:	4840      	ldr	r0, [pc, #256]	@ (800d7f8 <etharp_output_to_arp_index+0x130>)
 800d6f6:	f001 fffb 	bl	800f6f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d6fa:	79fa      	ldrb	r2, [r7, #7]
 800d6fc:	493b      	ldr	r1, [pc, #236]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d6fe:	4613      	mov	r3, r2
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	4413      	add	r3, r2
 800d704:	00db      	lsls	r3, r3, #3
 800d706:	440b      	add	r3, r1
 800d708:	3314      	adds	r3, #20
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d153      	bne.n	800d7b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d710:	79fa      	ldrb	r2, [r7, #7]
 800d712:	4936      	ldr	r1, [pc, #216]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d714:	4613      	mov	r3, r2
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	4413      	add	r3, r2
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	440b      	add	r3, r1
 800d71e:	3312      	adds	r3, #18
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d726:	d919      	bls.n	800d75c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d728:	79fa      	ldrb	r2, [r7, #7]
 800d72a:	4613      	mov	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4413      	add	r3, r2
 800d730:	00db      	lsls	r3, r3, #3
 800d732:	4a2e      	ldr	r2, [pc, #184]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d734:	4413      	add	r3, r2
 800d736:	3304      	adds	r3, #4
 800d738:	4619      	mov	r1, r3
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f000 fb4c 	bl	800ddd8 <etharp_request>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d138      	bne.n	800d7b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d746:	79fa      	ldrb	r2, [r7, #7]
 800d748:	4928      	ldr	r1, [pc, #160]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d74a:	4613      	mov	r3, r2
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	4413      	add	r3, r2
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	440b      	add	r3, r1
 800d754:	3314      	adds	r3, #20
 800d756:	2203      	movs	r2, #3
 800d758:	701a      	strb	r2, [r3, #0]
 800d75a:	e02d      	b.n	800d7b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d75c:	79fa      	ldrb	r2, [r7, #7]
 800d75e:	4923      	ldr	r1, [pc, #140]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d760:	4613      	mov	r3, r2
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	4413      	add	r3, r2
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	440b      	add	r3, r1
 800d76a:	3312      	adds	r3, #18
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d772:	d321      	bcc.n	800d7b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d774:	79fa      	ldrb	r2, [r7, #7]
 800d776:	4613      	mov	r3, r2
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	4413      	add	r3, r2
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	4a1b      	ldr	r2, [pc, #108]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d780:	4413      	add	r3, r2
 800d782:	1d19      	adds	r1, r3, #4
 800d784:	79fa      	ldrb	r2, [r7, #7]
 800d786:	4613      	mov	r3, r2
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	4413      	add	r3, r2
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	3308      	adds	r3, #8
 800d790:	4a16      	ldr	r2, [pc, #88]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d792:	4413      	add	r3, r2
 800d794:	3304      	adds	r3, #4
 800d796:	461a      	mov	r2, r3
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 fafb 	bl	800dd94 <etharp_request_dst>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d109      	bne.n	800d7b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d7a4:	79fa      	ldrb	r2, [r7, #7]
 800d7a6:	4911      	ldr	r1, [pc, #68]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4413      	add	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	440b      	add	r3, r1
 800d7b2:	3314      	adds	r3, #20
 800d7b4:	2203      	movs	r2, #3
 800d7b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d7be:	79fa      	ldrb	r2, [r7, #7]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	005b      	lsls	r3, r3, #1
 800d7c4:	4413      	add	r3, r2
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	4a08      	ldr	r2, [pc, #32]	@ (800d7ec <etharp_output_to_arp_index+0x124>)
 800d7cc:	4413      	add	r3, r2
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d7d4:	9200      	str	r2, [sp, #0]
 800d7d6:	460a      	mov	r2, r1
 800d7d8:	68b9      	ldr	r1, [r7, #8]
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f001 fe40 	bl	800f460 <ethernet_output>
 800d7e0:	4603      	mov	r3, r0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	200087d0 	.word	0x200087d0
 800d7f0:	0801288c 	.word	0x0801288c
 800d7f4:	080129fc 	.word	0x080129fc
 800d7f8:	08012904 	.word	0x08012904

0800d7fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08a      	sub	sp, #40	@ 0x28
 800d800:	af02      	add	r7, sp, #8
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <etharp_output+0x24>
 800d812:	4b73      	ldr	r3, [pc, #460]	@ (800d9e0 <etharp_output+0x1e4>)
 800d814:	f240 321e 	movw	r2, #798	@ 0x31e
 800d818:	4972      	ldr	r1, [pc, #456]	@ (800d9e4 <etharp_output+0x1e8>)
 800d81a:	4873      	ldr	r0, [pc, #460]	@ (800d9e8 <etharp_output+0x1ec>)
 800d81c:	f001 ff68 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <etharp_output+0x38>
 800d826:	4b6e      	ldr	r3, [pc, #440]	@ (800d9e0 <etharp_output+0x1e4>)
 800d828:	f240 321f 	movw	r2, #799	@ 0x31f
 800d82c:	496f      	ldr	r1, [pc, #444]	@ (800d9ec <etharp_output+0x1f0>)
 800d82e:	486e      	ldr	r0, [pc, #440]	@ (800d9e8 <etharp_output+0x1ec>)
 800d830:	f001 ff5e 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <etharp_output+0x4c>
 800d83a:	4b69      	ldr	r3, [pc, #420]	@ (800d9e0 <etharp_output+0x1e4>)
 800d83c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d840:	496b      	ldr	r1, [pc, #428]	@ (800d9f0 <etharp_output+0x1f4>)
 800d842:	4869      	ldr	r0, [pc, #420]	@ (800d9e8 <etharp_output+0x1ec>)
 800d844:	f001 ff54 	bl	800f6f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68f9      	ldr	r1, [r7, #12]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fef8 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d002      	beq.n	800d860 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d85a:	4b66      	ldr	r3, [pc, #408]	@ (800d9f4 <etharp_output+0x1f8>)
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	e0af      	b.n	800d9c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d868:	2be0      	cmp	r3, #224	@ 0xe0
 800d86a:	d118      	bne.n	800d89e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d86c:	2301      	movs	r3, #1
 800d86e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d870:	2300      	movs	r3, #0
 800d872:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d874:	235e      	movs	r3, #94	@ 0x5e
 800d876:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	3301      	adds	r3, #1
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d882:	b2db      	uxtb	r3, r3
 800d884:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3302      	adds	r3, #2
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	3303      	adds	r3, #3
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d896:	f107 0310 	add.w	r3, r7, #16
 800d89a:	61fb      	str	r3, [r7, #28]
 800d89c:	e090      	b.n	800d9c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	405a      	eors	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4013      	ands	r3, r2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d012      	beq.n	800d8dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d8bc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d00b      	beq.n	800d8dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	330c      	adds	r3, #12
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d003      	beq.n	800d8d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	330c      	adds	r3, #12
 800d8d2:	61bb      	str	r3, [r7, #24]
 800d8d4:	e002      	b.n	800d8dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d8d6:	f06f 0303 	mvn.w	r3, #3
 800d8da:	e07d      	b.n	800d9d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d8dc:	4b46      	ldr	r3, [pc, #280]	@ (800d9f8 <etharp_output+0x1fc>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4a46      	ldr	r2, [pc, #280]	@ (800d9fc <etharp_output+0x200>)
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	005b      	lsls	r3, r3, #1
 800d8e8:	440b      	add	r3, r1
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	4413      	add	r3, r2
 800d8ee:	3314      	adds	r3, #20
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d925      	bls.n	800d942 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d8f6:	4b40      	ldr	r3, [pc, #256]	@ (800d9f8 <etharp_output+0x1fc>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	4a3f      	ldr	r2, [pc, #252]	@ (800d9fc <etharp_output+0x200>)
 800d8fe:	460b      	mov	r3, r1
 800d900:	005b      	lsls	r3, r3, #1
 800d902:	440b      	add	r3, r1
 800d904:	00db      	lsls	r3, r3, #3
 800d906:	4413      	add	r3, r2
 800d908:	3308      	adds	r3, #8
 800d90a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d117      	bne.n	800d942 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4b38      	ldr	r3, [pc, #224]	@ (800d9f8 <etharp_output+0x1fc>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	4618      	mov	r0, r3
 800d91c:	4937      	ldr	r1, [pc, #220]	@ (800d9fc <etharp_output+0x200>)
 800d91e:	4603      	mov	r3, r0
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	4403      	add	r3, r0
 800d924:	00db      	lsls	r3, r3, #3
 800d926:	440b      	add	r3, r1
 800d928:	3304      	adds	r3, #4
 800d92a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d108      	bne.n	800d942 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d930:	4b31      	ldr	r3, [pc, #196]	@ (800d9f8 <etharp_output+0x1fc>)
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	461a      	mov	r2, r3
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7ff fec5 	bl	800d6c8 <etharp_output_to_arp_index>
 800d93e:	4603      	mov	r3, r0
 800d940:	e04a      	b.n	800d9d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d942:	2300      	movs	r3, #0
 800d944:	75fb      	strb	r3, [r7, #23]
 800d946:	e031      	b.n	800d9ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d948:	7dfa      	ldrb	r2, [r7, #23]
 800d94a:	492c      	ldr	r1, [pc, #176]	@ (800d9fc <etharp_output+0x200>)
 800d94c:	4613      	mov	r3, r2
 800d94e:	005b      	lsls	r3, r3, #1
 800d950:	4413      	add	r3, r2
 800d952:	00db      	lsls	r3, r3, #3
 800d954:	440b      	add	r3, r1
 800d956:	3314      	adds	r3, #20
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d923      	bls.n	800d9a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d95e:	7dfa      	ldrb	r2, [r7, #23]
 800d960:	4926      	ldr	r1, [pc, #152]	@ (800d9fc <etharp_output+0x200>)
 800d962:	4613      	mov	r3, r2
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	4413      	add	r3, r2
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	440b      	add	r3, r1
 800d96c:	3308      	adds	r3, #8
 800d96e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	429a      	cmp	r2, r3
 800d974:	d117      	bne.n	800d9a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	6819      	ldr	r1, [r3, #0]
 800d97a:	7dfa      	ldrb	r2, [r7, #23]
 800d97c:	481f      	ldr	r0, [pc, #124]	@ (800d9fc <etharp_output+0x200>)
 800d97e:	4613      	mov	r3, r2
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	4413      	add	r3, r2
 800d984:	00db      	lsls	r3, r3, #3
 800d986:	4403      	add	r3, r0
 800d988:	3304      	adds	r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d98c:	4299      	cmp	r1, r3
 800d98e:	d10a      	bne.n	800d9a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d990:	4a19      	ldr	r2, [pc, #100]	@ (800d9f8 <etharp_output+0x1fc>)
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	461a      	mov	r2, r3
 800d99a:	68b9      	ldr	r1, [r7, #8]
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f7ff fe93 	bl	800d6c8 <etharp_output_to_arp_index>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	e018      	b.n	800d9d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d9a6:	7dfb      	ldrb	r3, [r7, #23]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	75fb      	strb	r3, [r7, #23]
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
 800d9ae:	2b09      	cmp	r3, #9
 800d9b0:	d9ca      	bls.n	800d948 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	69b9      	ldr	r1, [r7, #24]
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f000 f822 	bl	800da00 <etharp_query>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	e00b      	b.n	800d9d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d9c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	68b9      	ldr	r1, [r7, #8]
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f001 fd45 	bl	800f460 <ethernet_output>
 800d9d6:	4603      	mov	r3, r0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3720      	adds	r7, #32
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	0801288c 	.word	0x0801288c
 800d9e4:	080129dc 	.word	0x080129dc
 800d9e8:	08012904 	.word	0x08012904
 800d9ec:	08012a2c 	.word	0x08012a2c
 800d9f0:	080129cc 	.word	0x080129cc
 800d9f4:	08013048 	.word	0x08013048
 800d9f8:	200088c0 	.word	0x200088c0
 800d9fc:	200087d0 	.word	0x200087d0

0800da00 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08c      	sub	sp, #48	@ 0x30
 800da04:	af02      	add	r7, sp, #8
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3326      	adds	r3, #38	@ 0x26
 800da10:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800da12:	23ff      	movs	r3, #255	@ 0xff
 800da14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68f9      	ldr	r1, [r7, #12]
 800da22:	4618      	mov	r0, r3
 800da24:	f000 fe0e 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10c      	bne.n	800da48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800da36:	2be0      	cmp	r3, #224	@ 0xe0
 800da38:	d006      	beq.n	800da48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d003      	beq.n	800da48 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800da48:	f06f 030f 	mvn.w	r3, #15
 800da4c:	e101      	b.n	800dc52 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	2101      	movs	r1, #1
 800da52:	68b8      	ldr	r0, [r7, #8]
 800da54:	f7ff fb60 	bl	800d118 <etharp_find_entry>
 800da58:	4603      	mov	r3, r0
 800da5a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800da5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800da60:	2b00      	cmp	r3, #0
 800da62:	da02      	bge.n	800da6a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800da64:	8a7b      	ldrh	r3, [r7, #18]
 800da66:	b25b      	sxtb	r3, r3
 800da68:	e0f3      	b.n	800dc52 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800da6a:	8a7b      	ldrh	r3, [r7, #18]
 800da6c:	2b7e      	cmp	r3, #126	@ 0x7e
 800da6e:	d906      	bls.n	800da7e <etharp_query+0x7e>
 800da70:	4b7a      	ldr	r3, [pc, #488]	@ (800dc5c <etharp_query+0x25c>)
 800da72:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800da76:	497a      	ldr	r1, [pc, #488]	@ (800dc60 <etharp_query+0x260>)
 800da78:	487a      	ldr	r0, [pc, #488]	@ (800dc64 <etharp_query+0x264>)
 800da7a:	f001 fe39 	bl	800f6f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800da7e:	8a7b      	ldrh	r3, [r7, #18]
 800da80:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800da82:	7c7a      	ldrb	r2, [r7, #17]
 800da84:	4978      	ldr	r1, [pc, #480]	@ (800dc68 <etharp_query+0x268>)
 800da86:	4613      	mov	r3, r2
 800da88:	005b      	lsls	r3, r3, #1
 800da8a:	4413      	add	r3, r2
 800da8c:	00db      	lsls	r3, r3, #3
 800da8e:	440b      	add	r3, r1
 800da90:	3314      	adds	r3, #20
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d115      	bne.n	800dac4 <etharp_query+0xc4>
    is_new_entry = 1;
 800da98:	2301      	movs	r3, #1
 800da9a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800da9c:	7c7a      	ldrb	r2, [r7, #17]
 800da9e:	4972      	ldr	r1, [pc, #456]	@ (800dc68 <etharp_query+0x268>)
 800daa0:	4613      	mov	r3, r2
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	4413      	add	r3, r2
 800daa6:	00db      	lsls	r3, r3, #3
 800daa8:	440b      	add	r3, r1
 800daaa:	3314      	adds	r3, #20
 800daac:	2201      	movs	r2, #1
 800daae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dab0:	7c7a      	ldrb	r2, [r7, #17]
 800dab2:	496d      	ldr	r1, [pc, #436]	@ (800dc68 <etharp_query+0x268>)
 800dab4:	4613      	mov	r3, r2
 800dab6:	005b      	lsls	r3, r3, #1
 800dab8:	4413      	add	r3, r2
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	440b      	add	r3, r1
 800dabe:	3308      	adds	r3, #8
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dac4:	7c7a      	ldrb	r2, [r7, #17]
 800dac6:	4968      	ldr	r1, [pc, #416]	@ (800dc68 <etharp_query+0x268>)
 800dac8:	4613      	mov	r3, r2
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	4413      	add	r3, r2
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	440b      	add	r3, r1
 800dad2:	3314      	adds	r3, #20
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d011      	beq.n	800dafe <etharp_query+0xfe>
 800dada:	7c7a      	ldrb	r2, [r7, #17]
 800dadc:	4962      	ldr	r1, [pc, #392]	@ (800dc68 <etharp_query+0x268>)
 800dade:	4613      	mov	r3, r2
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	4413      	add	r3, r2
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	440b      	add	r3, r1
 800dae8:	3314      	adds	r3, #20
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d806      	bhi.n	800dafe <etharp_query+0xfe>
 800daf0:	4b5a      	ldr	r3, [pc, #360]	@ (800dc5c <etharp_query+0x25c>)
 800daf2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800daf6:	495d      	ldr	r1, [pc, #372]	@ (800dc6c <etharp_query+0x26c>)
 800daf8:	485a      	ldr	r0, [pc, #360]	@ (800dc64 <etharp_query+0x264>)
 800dafa:	f001 fdf9 	bl	800f6f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dafe:	6a3b      	ldr	r3, [r7, #32]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d102      	bne.n	800db0a <etharp_query+0x10a>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10c      	bne.n	800db24 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800db0a:	68b9      	ldr	r1, [r7, #8]
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f000 f963 	bl	800ddd8 <etharp_request>
 800db12:	4603      	mov	r3, r0
 800db14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d102      	bne.n	800db24 <etharp_query+0x124>
      return result;
 800db1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800db22:	e096      	b.n	800dc52 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <etharp_query+0x138>
 800db2a:	4b4c      	ldr	r3, [pc, #304]	@ (800dc5c <etharp_query+0x25c>)
 800db2c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800db30:	494f      	ldr	r1, [pc, #316]	@ (800dc70 <etharp_query+0x270>)
 800db32:	484c      	ldr	r0, [pc, #304]	@ (800dc64 <etharp_query+0x264>)
 800db34:	f001 fddc 	bl	800f6f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800db38:	7c7a      	ldrb	r2, [r7, #17]
 800db3a:	494b      	ldr	r1, [pc, #300]	@ (800dc68 <etharp_query+0x268>)
 800db3c:	4613      	mov	r3, r2
 800db3e:	005b      	lsls	r3, r3, #1
 800db40:	4413      	add	r3, r2
 800db42:	00db      	lsls	r3, r3, #3
 800db44:	440b      	add	r3, r1
 800db46:	3314      	adds	r3, #20
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d917      	bls.n	800db7e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800db4e:	4a49      	ldr	r2, [pc, #292]	@ (800dc74 <etharp_query+0x274>)
 800db50:	7c7b      	ldrb	r3, [r7, #17]
 800db52:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800db54:	7c7a      	ldrb	r2, [r7, #17]
 800db56:	4613      	mov	r3, r2
 800db58:	005b      	lsls	r3, r3, #1
 800db5a:	4413      	add	r3, r2
 800db5c:	00db      	lsls	r3, r3, #3
 800db5e:	3308      	adds	r3, #8
 800db60:	4a41      	ldr	r2, [pc, #260]	@ (800dc68 <etharp_query+0x268>)
 800db62:	4413      	add	r3, r2
 800db64:	3304      	adds	r3, #4
 800db66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db6a:	9200      	str	r2, [sp, #0]
 800db6c:	697a      	ldr	r2, [r7, #20]
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f001 fc75 	bl	800f460 <ethernet_output>
 800db76:	4603      	mov	r3, r0
 800db78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db7c:	e067      	b.n	800dc4e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800db7e:	7c7a      	ldrb	r2, [r7, #17]
 800db80:	4939      	ldr	r1, [pc, #228]	@ (800dc68 <etharp_query+0x268>)
 800db82:	4613      	mov	r3, r2
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	4413      	add	r3, r2
 800db88:	00db      	lsls	r3, r3, #3
 800db8a:	440b      	add	r3, r1
 800db8c:	3314      	adds	r3, #20
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d15c      	bne.n	800dc4e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800db94:	2300      	movs	r3, #0
 800db96:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800db9c:	e01c      	b.n	800dbd8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	895a      	ldrh	r2, [r3, #10]
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	891b      	ldrh	r3, [r3, #8]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d10a      	bne.n	800dbc0 <etharp_query+0x1c0>
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d006      	beq.n	800dbc0 <etharp_query+0x1c0>
 800dbb2:	4b2a      	ldr	r3, [pc, #168]	@ (800dc5c <etharp_query+0x25c>)
 800dbb4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800dbb8:	492f      	ldr	r1, [pc, #188]	@ (800dc78 <etharp_query+0x278>)
 800dbba:	482a      	ldr	r0, [pc, #168]	@ (800dc64 <etharp_query+0x264>)
 800dbbc:	f001 fd98 	bl	800f6f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	7b1b      	ldrb	r3, [r3, #12]
 800dbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <etharp_query+0x1d2>
        copy_needed = 1;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	61bb      	str	r3, [r7, #24]
        break;
 800dbd0:	e005      	b.n	800dbde <etharp_query+0x1de>
      }
      p = p->next;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1df      	bne.n	800db9e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d007      	beq.n	800dbf4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800dbea:	200e      	movs	r0, #14
 800dbec:	f7f8 fe34 	bl	8006858 <pbuf_clone>
 800dbf0:	61f8      	str	r0, [r7, #28]
 800dbf2:	e004      	b.n	800dbfe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800dbf8:	69f8      	ldr	r0, [r7, #28]
 800dbfa:	f7f8 fc61 	bl	80064c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d021      	beq.n	800dc48 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800dc04:	7c7a      	ldrb	r2, [r7, #17]
 800dc06:	4918      	ldr	r1, [pc, #96]	@ (800dc68 <etharp_query+0x268>)
 800dc08:	4613      	mov	r3, r2
 800dc0a:	005b      	lsls	r3, r3, #1
 800dc0c:	4413      	add	r3, r2
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	440b      	add	r3, r1
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00a      	beq.n	800dc2e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800dc18:	7c7a      	ldrb	r2, [r7, #17]
 800dc1a:	4913      	ldr	r1, [pc, #76]	@ (800dc68 <etharp_query+0x268>)
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	4413      	add	r3, r2
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	440b      	add	r3, r1
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7f8 fba9 	bl	8006380 <pbuf_free>
      }
      arp_table[i].q = p;
 800dc2e:	7c7a      	ldrb	r2, [r7, #17]
 800dc30:	490d      	ldr	r1, [pc, #52]	@ (800dc68 <etharp_query+0x268>)
 800dc32:	4613      	mov	r3, r2
 800dc34:	005b      	lsls	r3, r3, #1
 800dc36:	4413      	add	r3, r2
 800dc38:	00db      	lsls	r3, r3, #3
 800dc3a:	440b      	add	r3, r1
 800dc3c:	69fa      	ldr	r2, [r7, #28]
 800dc3e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800dc40:	2300      	movs	r3, #0
 800dc42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc46:	e002      	b.n	800dc4e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800dc48:	23ff      	movs	r3, #255	@ 0xff
 800dc4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800dc4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3728      	adds	r7, #40	@ 0x28
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	0801288c 	.word	0x0801288c
 800dc60:	08012a38 	.word	0x08012a38
 800dc64:	08012904 	.word	0x08012904
 800dc68:	200087d0 	.word	0x200087d0
 800dc6c:	08012a48 	.word	0x08012a48
 800dc70:	08012a2c 	.word	0x08012a2c
 800dc74:	200088c0 	.word	0x200088c0
 800dc78:	08012a70 	.word	0x08012a70

0800dc7c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08a      	sub	sp, #40	@ 0x28
 800dc80:	af02      	add	r7, sp, #8
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d106      	bne.n	800dca2 <etharp_raw+0x26>
 800dc94:	4b3a      	ldr	r3, [pc, #232]	@ (800dd80 <etharp_raw+0x104>)
 800dc96:	f240 4257 	movw	r2, #1111	@ 0x457
 800dc9a:	493a      	ldr	r1, [pc, #232]	@ (800dd84 <etharp_raw+0x108>)
 800dc9c:	483a      	ldr	r0, [pc, #232]	@ (800dd88 <etharp_raw+0x10c>)
 800dc9e:	f001 fd27 	bl	800f6f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800dca2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dca6:	211c      	movs	r1, #28
 800dca8:	200e      	movs	r0, #14
 800dcaa:	f7f8 f885 	bl	8005db8 <pbuf_alloc>
 800dcae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d102      	bne.n	800dcbc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800dcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcba:	e05d      	b.n	800dd78 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	895b      	ldrh	r3, [r3, #10]
 800dcc0:	2b1b      	cmp	r3, #27
 800dcc2:	d806      	bhi.n	800dcd2 <etharp_raw+0x56>
 800dcc4:	4b2e      	ldr	r3, [pc, #184]	@ (800dd80 <etharp_raw+0x104>)
 800dcc6:	f240 4262 	movw	r2, #1122	@ 0x462
 800dcca:	4930      	ldr	r1, [pc, #192]	@ (800dd8c <etharp_raw+0x110>)
 800dccc:	482e      	ldr	r0, [pc, #184]	@ (800dd88 <etharp_raw+0x10c>)
 800dcce:	f001 fd0f 	bl	800f6f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800dcd8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7f6 fff2 	bl	8004cc4 <lwip_htons>
 800dce0:	4603      	mov	r3, r0
 800dce2:	461a      	mov	r2, r3
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dcee:	2b06      	cmp	r3, #6
 800dcf0:	d006      	beq.n	800dd00 <etharp_raw+0x84>
 800dcf2:	4b23      	ldr	r3, [pc, #140]	@ (800dd80 <etharp_raw+0x104>)
 800dcf4:	f240 4269 	movw	r2, #1129	@ 0x469
 800dcf8:	4925      	ldr	r1, [pc, #148]	@ (800dd90 <etharp_raw+0x114>)
 800dcfa:	4823      	ldr	r0, [pc, #140]	@ (800dd88 <etharp_raw+0x10c>)
 800dcfc:	f001 fcf8 	bl	800f6f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	3308      	adds	r3, #8
 800dd04:	2206      	movs	r2, #6
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f001 fdcc 	bl	800f8a6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	3312      	adds	r3, #18
 800dd12:	2206      	movs	r2, #6
 800dd14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd16:	4618      	mov	r0, r3
 800dd18:	f001 fdc5 	bl	800f8a6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	330e      	adds	r3, #14
 800dd20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd22:	6812      	ldr	r2, [r2, #0]
 800dd24:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	3318      	adds	r3, #24
 800dd2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd2c:	6812      	ldr	r2, [r2, #0]
 800dd2e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	2200      	movs	r2, #0
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f042 0201 	orr.w	r2, r2, #1
 800dd3c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f042 0208 	orr.w	r2, r2, #8
 800dd46:	709a      	strb	r2, [r3, #2]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	2206      	movs	r2, #6
 800dd50:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2204      	movs	r2, #4
 800dd56:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800dd58:	f640 0306 	movw	r3, #2054	@ 0x806
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	69b9      	ldr	r1, [r7, #24]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f001 fb7b 	bl	800f460 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800dd6a:	69b8      	ldr	r0, [r7, #24]
 800dd6c:	f7f8 fb08 	bl	8006380 <pbuf_free>
  p = NULL;
 800dd70:	2300      	movs	r3, #0
 800dd72:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dd74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3720      	adds	r7, #32
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	0801288c 	.word	0x0801288c
 800dd84:	080129dc 	.word	0x080129dc
 800dd88:	08012904 	.word	0x08012904
 800dd8c:	08012a8c 	.word	0x08012a8c
 800dd90:	08012ac0 	.word	0x08012ac0

0800dd94 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af04      	add	r7, sp, #16
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	9203      	str	r2, [sp, #12]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	9202      	str	r2, [sp, #8]
 800ddb8:	4a06      	ldr	r2, [pc, #24]	@ (800ddd4 <etharp_request_dst+0x40>)
 800ddba:	9201      	str	r2, [sp, #4]
 800ddbc:	9300      	str	r3, [sp, #0]
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f7ff ff5a 	bl	800dc7c <etharp_raw>
 800ddc8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	08013050 	.word	0x08013050

0800ddd8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dde2:	4a05      	ldr	r2, [pc, #20]	@ (800ddf8 <etharp_request+0x20>)
 800dde4:	6839      	ldr	r1, [r7, #0]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff ffd4 	bl	800dd94 <etharp_request_dst>
 800ddec:	4603      	mov	r3, r0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	08013048 	.word	0x08013048

0800ddfc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08e      	sub	sp, #56	@ 0x38
 800de00:	af04      	add	r7, sp, #16
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800de06:	4b79      	ldr	r3, [pc, #484]	@ (800dfec <icmp_input+0x1f0>)
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 030f 	and.w	r3, r3, #15
 800de14:	b2db      	uxtb	r3, r3
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800de1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800de1e:	2b13      	cmp	r3, #19
 800de20:	f240 80cd 	bls.w	800dfbe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	895b      	ldrh	r3, [r3, #10]
 800de28:	2b03      	cmp	r3, #3
 800de2a:	f240 80ca 	bls.w	800dfc2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800de38:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f000 80b7 	beq.w	800dfb0 <icmp_input+0x1b4>
 800de42:	2b08      	cmp	r3, #8
 800de44:	f040 80b7 	bne.w	800dfb6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800de48:	4b69      	ldr	r3, [pc, #420]	@ (800dff0 <icmp_input+0x1f4>)
 800de4a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800de4c:	4b67      	ldr	r3, [pc, #412]	@ (800dfec <icmp_input+0x1f0>)
 800de4e:	695b      	ldr	r3, [r3, #20]
 800de50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800de54:	2be0      	cmp	r3, #224	@ 0xe0
 800de56:	f000 80bb 	beq.w	800dfd0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800de5a:	4b64      	ldr	r3, [pc, #400]	@ (800dfec <icmp_input+0x1f0>)
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	4a63      	ldr	r2, [pc, #396]	@ (800dfec <icmp_input+0x1f0>)
 800de60:	6812      	ldr	r2, [r2, #0]
 800de62:	4611      	mov	r1, r2
 800de64:	4618      	mov	r0, r3
 800de66:	f000 fbed 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f040 80b1 	bne.w	800dfd4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	891b      	ldrh	r3, [r3, #8]
 800de76:	2b07      	cmp	r3, #7
 800de78:	f240 80a5 	bls.w	800dfc6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800de7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800de7e:	330e      	adds	r3, #14
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7f8 f9e6 	bl	8006254 <pbuf_add_header>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d04b      	beq.n	800df26 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	891a      	ldrh	r2, [r3, #8]
 800de92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800de94:	4413      	add	r3, r2
 800de96:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	891b      	ldrh	r3, [r3, #8]
 800de9c:	8b7a      	ldrh	r2, [r7, #26]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	f0c0 809a 	bcc.w	800dfd8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dea4:	8b7b      	ldrh	r3, [r7, #26]
 800dea6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800deaa:	4619      	mov	r1, r3
 800deac:	200e      	movs	r0, #14
 800deae:	f7f7 ff83 	bl	8005db8 <pbuf_alloc>
 800deb2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f000 8090 	beq.w	800dfdc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	895b      	ldrh	r3, [r3, #10]
 800dec0:	461a      	mov	r2, r3
 800dec2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dec4:	3308      	adds	r3, #8
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d203      	bcs.n	800ded2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800deca:	6978      	ldr	r0, [r7, #20]
 800decc:	f7f8 fa58 	bl	8006380 <pbuf_free>
          goto icmperr;
 800ded0:	e085      	b.n	800dfde <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ded8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800deda:	4618      	mov	r0, r3
 800dedc:	f001 fce3 	bl	800f8a6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dee0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dee2:	4619      	mov	r1, r3
 800dee4:	6978      	ldr	r0, [r7, #20]
 800dee6:	f7f8 f9c5 	bl	8006274 <pbuf_remove_header>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d009      	beq.n	800df04 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800def0:	4b40      	ldr	r3, [pc, #256]	@ (800dff4 <icmp_input+0x1f8>)
 800def2:	22b6      	movs	r2, #182	@ 0xb6
 800def4:	4940      	ldr	r1, [pc, #256]	@ (800dff8 <icmp_input+0x1fc>)
 800def6:	4841      	ldr	r0, [pc, #260]	@ (800dffc <icmp_input+0x200>)
 800def8:	f001 fbfa 	bl	800f6f0 <iprintf>
          pbuf_free(r);
 800defc:	6978      	ldr	r0, [r7, #20]
 800defe:	f7f8 fa3f 	bl	8006380 <pbuf_free>
          goto icmperr;
 800df02:	e06c      	b.n	800dfde <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800df04:	6879      	ldr	r1, [r7, #4]
 800df06:	6978      	ldr	r0, [r7, #20]
 800df08:	f7f8 fb62 	bl	80065d0 <pbuf_copy>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d003      	beq.n	800df1a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800df12:	6978      	ldr	r0, [r7, #20]
 800df14:	f7f8 fa34 	bl	8006380 <pbuf_free>
          goto icmperr;
 800df18:	e061      	b.n	800dfde <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7f8 fa30 	bl	8006380 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	607b      	str	r3, [r7, #4]
 800df24:	e00f      	b.n	800df46 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800df26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df28:	330e      	adds	r3, #14
 800df2a:	4619      	mov	r1, r3
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7f8 f9a1 	bl	8006274 <pbuf_remove_header>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d006      	beq.n	800df46 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800df38:	4b2e      	ldr	r3, [pc, #184]	@ (800dff4 <icmp_input+0x1f8>)
 800df3a:	22c7      	movs	r2, #199	@ 0xc7
 800df3c:	4930      	ldr	r1, [pc, #192]	@ (800e000 <icmp_input+0x204>)
 800df3e:	482f      	ldr	r0, [pc, #188]	@ (800dffc <icmp_input+0x200>)
 800df40:	f001 fbd6 	bl	800f6f0 <iprintf>
          goto icmperr;
 800df44:	e04b      	b.n	800dfde <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800df4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800df4e:	4619      	mov	r1, r3
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7f8 f97f 	bl	8006254 <pbuf_add_header>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d12b      	bne.n	800dfb4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800df6a:	4b20      	ldr	r3, [pc, #128]	@ (800dfec <icmp_input+0x1f0>)
 800df6c:	691a      	ldr	r2, [r3, #16]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2200      	movs	r2, #0
 800df76:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	2200      	movs	r2, #0
 800df7c:	709a      	strb	r2, [r3, #2]
 800df7e:	2200      	movs	r2, #0
 800df80:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	22ff      	movs	r2, #255	@ 0xff
 800df86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2200      	movs	r2, #0
 800df8c:	729a      	strb	r2, [r3, #10]
 800df8e:	2200      	movs	r2, #0
 800df90:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	9302      	str	r3, [sp, #8]
 800df96:	2301      	movs	r3, #1
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	2300      	movs	r3, #0
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	23ff      	movs	r3, #255	@ 0xff
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	69f9      	ldr	r1, [r7, #28]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fa75 	bl	800e494 <ip4_output_if>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dfae:	e001      	b.n	800dfb4 <icmp_input+0x1b8>
      break;
 800dfb0:	bf00      	nop
 800dfb2:	e000      	b.n	800dfb6 <icmp_input+0x1ba>
      break;
 800dfb4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7f8 f9e2 	bl	8006380 <pbuf_free>
  return;
 800dfbc:	e013      	b.n	800dfe6 <icmp_input+0x1ea>
    goto lenerr;
 800dfbe:	bf00      	nop
 800dfc0:	e002      	b.n	800dfc8 <icmp_input+0x1cc>
    goto lenerr;
 800dfc2:	bf00      	nop
 800dfc4:	e000      	b.n	800dfc8 <icmp_input+0x1cc>
        goto lenerr;
 800dfc6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7f8 f9d9 	bl	8006380 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dfce:	e00a      	b.n	800dfe6 <icmp_input+0x1ea>
        goto icmperr;
 800dfd0:	bf00      	nop
 800dfd2:	e004      	b.n	800dfde <icmp_input+0x1e2>
        goto icmperr;
 800dfd4:	bf00      	nop
 800dfd6:	e002      	b.n	800dfde <icmp_input+0x1e2>
          goto icmperr;
 800dfd8:	bf00      	nop
 800dfda:	e000      	b.n	800dfde <icmp_input+0x1e2>
          goto icmperr;
 800dfdc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7f8 f9ce 	bl	8006380 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dfe4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dfe6:	3728      	adds	r7, #40	@ 0x28
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	20005200 	.word	0x20005200
 800dff0:	20005214 	.word	0x20005214
 800dff4:	08012b04 	.word	0x08012b04
 800dff8:	08012b3c 	.word	0x08012b3c
 800dffc:	08012b74 	.word	0x08012b74
 800e000:	08012b9c 	.word	0x08012b9c

0800e004 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	460b      	mov	r3, r1
 800e00e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e010:	78fb      	ldrb	r3, [r7, #3]
 800e012:	461a      	mov	r2, r3
 800e014:	2103      	movs	r1, #3
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f814 	bl	800e044 <icmp_send_response>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e030:	78fb      	ldrb	r3, [r7, #3]
 800e032:	461a      	mov	r2, r3
 800e034:	210b      	movs	r1, #11
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f804 	bl	800e044 <icmp_send_response>
}
 800e03c:	bf00      	nop
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08c      	sub	sp, #48	@ 0x30
 800e048:	af04      	add	r7, sp, #16
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	460b      	mov	r3, r1
 800e04e:	70fb      	strb	r3, [r7, #3]
 800e050:	4613      	mov	r3, r2
 800e052:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e054:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e058:	2124      	movs	r1, #36	@ 0x24
 800e05a:	2022      	movs	r0, #34	@ 0x22
 800e05c:	f7f7 feac 	bl	8005db8 <pbuf_alloc>
 800e060:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d04c      	beq.n	800e102 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	895b      	ldrh	r3, [r3, #10]
 800e06c:	2b23      	cmp	r3, #35	@ 0x23
 800e06e:	d806      	bhi.n	800e07e <icmp_send_response+0x3a>
 800e070:	4b26      	ldr	r3, [pc, #152]	@ (800e10c <icmp_send_response+0xc8>)
 800e072:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e076:	4926      	ldr	r1, [pc, #152]	@ (800e110 <icmp_send_response+0xcc>)
 800e078:	4826      	ldr	r0, [pc, #152]	@ (800e114 <icmp_send_response+0xd0>)
 800e07a:	f001 fb39 	bl	800f6f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	78fa      	ldrb	r2, [r7, #3]
 800e08e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	78ba      	ldrb	r2, [r7, #2]
 800e094:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	2200      	movs	r2, #0
 800e09a:	711a      	strb	r2, [r3, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	719a      	strb	r2, [r3, #6]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	f103 0008 	add.w	r0, r3, #8
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	221c      	movs	r2, #28
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	f001 fbf4 	bl	800f8a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e0c4:	f107 030c 	add.w	r3, r7, #12
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 f825 	bl	800e118 <ip4_route>
 800e0ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d011      	beq.n	800e0fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	709a      	strb	r2, [r3, #2]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e0e0:	f107 020c 	add.w	r2, r7, #12
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	9302      	str	r3, [sp, #8]
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	9301      	str	r3, [sp, #4]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	23ff      	movs	r3, #255	@ 0xff
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	69f8      	ldr	r0, [r7, #28]
 800e0f6:	f000 f9cd 	bl	800e494 <ip4_output_if>
  }
  pbuf_free(q);
 800e0fa:	69f8      	ldr	r0, [r7, #28]
 800e0fc:	f7f8 f940 	bl	8006380 <pbuf_free>
 800e100:	e000      	b.n	800e104 <icmp_send_response+0xc0>
    return;
 800e102:	bf00      	nop
}
 800e104:	3720      	adds	r7, #32
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	08012b04 	.word	0x08012b04
 800e110:	08012bd0 	.word	0x08012bd0
 800e114:	08012b74 	.word	0x08012b74

0800e118 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e120:	4b33      	ldr	r3, [pc, #204]	@ (800e1f0 <ip4_route+0xd8>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	60fb      	str	r3, [r7, #12]
 800e126:	e036      	b.n	800e196 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d02b      	beq.n	800e190 <ip4_route+0x78>
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e13e:	089b      	lsrs	r3, r3, #2
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	d022      	beq.n	800e190 <ip4_route+0x78>
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	3304      	adds	r3, #4
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d01d      	beq.n	800e190 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3304      	adds	r3, #4
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	405a      	eors	r2, r3
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3308      	adds	r3, #8
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4013      	ands	r3, r2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	e038      	b.n	800e1e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e176:	f003 0302 	and.w	r3, r3, #2
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d108      	bne.n	800e190 <ip4_route+0x78>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	330c      	adds	r3, #12
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d101      	bne.n	800e190 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	e028      	b.n	800e1e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	60fb      	str	r3, [r7, #12]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1c5      	bne.n	800e128 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e19c:	4b15      	ldr	r3, [pc, #84]	@ (800e1f4 <ip4_route+0xdc>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d01a      	beq.n	800e1da <ip4_route+0xc2>
 800e1a4:	4b13      	ldr	r3, [pc, #76]	@ (800e1f4 <ip4_route+0xdc>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e1ac:	f003 0301 	and.w	r3, r3, #1
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d012      	beq.n	800e1da <ip4_route+0xc2>
 800e1b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e1f4 <ip4_route+0xdc>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00a      	beq.n	800e1da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e1c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e1f4 <ip4_route+0xdc>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3304      	adds	r3, #4
 800e1ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d004      	beq.n	800e1da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1d8:	d101      	bne.n	800e1de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e001      	b.n	800e1e2 <ip4_route+0xca>
  }

  return netif_default;
 800e1de:	4b05      	ldr	r3, [pc, #20]	@ (800e1f4 <ip4_route+0xdc>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3714      	adds	r7, #20
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop
 800e1f0:	20008764 	.word	0x20008764
 800e1f4:	20008768 	.word	0x20008768

0800e1f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d016      	beq.n	800e23e <ip4_input_accept+0x46>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3304      	adds	r3, #4
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d011      	beq.n	800e23e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e21a:	4b0b      	ldr	r3, [pc, #44]	@ (800e248 <ip4_input_accept+0x50>)
 800e21c:	695a      	ldr	r2, [r3, #20]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	3304      	adds	r3, #4
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	429a      	cmp	r2, r3
 800e226:	d008      	beq.n	800e23a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e228:	4b07      	ldr	r3, [pc, #28]	@ (800e248 <ip4_input_accept+0x50>)
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	6879      	ldr	r1, [r7, #4]
 800e22e:	4618      	mov	r0, r3
 800e230:	f000 fa08 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800e234:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e236:	2b00      	cmp	r3, #0
 800e238:	d001      	beq.n	800e23e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e23a:	2301      	movs	r3, #1
 800e23c:	e000      	b.n	800e240 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20005200 	.word	0x20005200

0800e24c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b086      	sub	sp, #24
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	091b      	lsrs	r3, r3, #4
 800e262:	b2db      	uxtb	r3, r3
 800e264:	2b04      	cmp	r3, #4
 800e266:	d004      	beq.n	800e272 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7f8 f889 	bl	8006380 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	e107      	b.n	800e482 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	f003 030f 	and.w	r3, r3, #15
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	885b      	ldrh	r3, [r3, #2]
 800e286:	b29b      	uxth	r3, r3
 800e288:	4618      	mov	r0, r3
 800e28a:	f7f6 fd1b 	bl	8004cc4 <lwip_htons>
 800e28e:	4603      	mov	r3, r0
 800e290:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	891b      	ldrh	r3, [r3, #8]
 800e296:	89ba      	ldrh	r2, [r7, #12]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d204      	bcs.n	800e2a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e29c:	89bb      	ldrh	r3, [r7, #12]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7f7 fee7 	bl	8006074 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	895b      	ldrh	r3, [r3, #10]
 800e2aa:	89fa      	ldrh	r2, [r7, #14]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d807      	bhi.n	800e2c0 <ip4_input+0x74>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	891b      	ldrh	r3, [r3, #8]
 800e2b4:	89ba      	ldrh	r2, [r7, #12]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d802      	bhi.n	800e2c0 <ip4_input+0x74>
 800e2ba:	89fb      	ldrh	r3, [r7, #14]
 800e2bc:	2b13      	cmp	r3, #19
 800e2be:	d804      	bhi.n	800e2ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7f8 f85d 	bl	8006380 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e0db      	b.n	800e482 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	691b      	ldr	r3, [r3, #16]
 800e2ce:	4a6f      	ldr	r2, [pc, #444]	@ (800e48c <ip4_input+0x240>)
 800e2d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	4a6d      	ldr	r2, [pc, #436]	@ (800e48c <ip4_input+0x240>)
 800e2d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e2da:	4b6c      	ldr	r3, [pc, #432]	@ (800e48c <ip4_input+0x240>)
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e2e2:	2be0      	cmp	r3, #224	@ 0xe0
 800e2e4:	d112      	bne.n	800e30c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d007      	beq.n	800e306 <ip4_input+0xba>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d002      	beq.n	800e306 <ip4_input+0xba>
      netif = inp;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	613b      	str	r3, [r7, #16]
 800e304:	e02a      	b.n	800e35c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e306:	2300      	movs	r3, #0
 800e308:	613b      	str	r3, [r7, #16]
 800e30a:	e027      	b.n	800e35c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e30c:	6838      	ldr	r0, [r7, #0]
 800e30e:	f7ff ff73 	bl	800e1f8 <ip4_input_accept>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d002      	beq.n	800e31e <ip4_input+0xd2>
      netif = inp;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	613b      	str	r3, [r7, #16]
 800e31c:	e01e      	b.n	800e35c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e31e:	2300      	movs	r3, #0
 800e320:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e322:	4b5a      	ldr	r3, [pc, #360]	@ (800e48c <ip4_input+0x240>)
 800e324:	695b      	ldr	r3, [r3, #20]
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2b7f      	cmp	r3, #127	@ 0x7f
 800e32a:	d017      	beq.n	800e35c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e32c:	4b58      	ldr	r3, [pc, #352]	@ (800e490 <ip4_input+0x244>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	613b      	str	r3, [r7, #16]
 800e332:	e00e      	b.n	800e352 <ip4_input+0x106>
          if (netif == inp) {
 800e334:	693a      	ldr	r2, [r7, #16]
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d006      	beq.n	800e34a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e33c:	6938      	ldr	r0, [r7, #16]
 800e33e:	f7ff ff5b 	bl	800e1f8 <ip4_input_accept>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d108      	bne.n	800e35a <ip4_input+0x10e>
 800e348:	e000      	b.n	800e34c <ip4_input+0x100>
            continue;
 800e34a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	613b      	str	r3, [r7, #16]
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1ed      	bne.n	800e334 <ip4_input+0xe8>
 800e358:	e000      	b.n	800e35c <ip4_input+0x110>
            break;
 800e35a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e35c:	4b4b      	ldr	r3, [pc, #300]	@ (800e48c <ip4_input+0x240>)
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	4618      	mov	r0, r3
 800e364:	f000 f96e 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e36e:	4b47      	ldr	r3, [pc, #284]	@ (800e48c <ip4_input+0x240>)
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e376:	2be0      	cmp	r3, #224	@ 0xe0
 800e378:	d104      	bne.n	800e384 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7f8 f800 	bl	8006380 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e380:	2300      	movs	r3, #0
 800e382:	e07e      	b.n	800e482 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d104      	bne.n	800e394 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7f7 fff8 	bl	8006380 <pbuf_free>
    return ERR_OK;
 800e390:	2300      	movs	r3, #0
 800e392:	e076      	b.n	800e482 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	88db      	ldrh	r3, [r3, #6]
 800e398:	b29b      	uxth	r3, r3
 800e39a:	461a      	mov	r2, r3
 800e39c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e3a0:	4013      	ands	r3, r2
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00b      	beq.n	800e3be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fc92 	bl	800ecd0 <ip4_reass>
 800e3ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <ip4_input+0x16c>
      return ERR_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e064      	b.n	800e482 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e3be:	4a33      	ldr	r2, [pc, #204]	@ (800e48c <ip4_input+0x240>)
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e3c4:	4a31      	ldr	r2, [pc, #196]	@ (800e48c <ip4_input+0x240>)
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e3ca:	4a30      	ldr	r2, [pc, #192]	@ (800e48c <ip4_input+0x240>)
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	461a      	mov	r2, r3
 800e3e0:	4b2a      	ldr	r3, [pc, #168]	@ (800e48c <ip4_input+0x240>)
 800e3e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e3e4:	89fb      	ldrh	r3, [r7, #14]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7f7 ff43 	bl	8006274 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	7a5b      	ldrb	r3, [r3, #9]
 800e3f2:	2b11      	cmp	r3, #17
 800e3f4:	d006      	beq.n	800e404 <ip4_input+0x1b8>
 800e3f6:	2b11      	cmp	r3, #17
 800e3f8:	dc13      	bgt.n	800e422 <ip4_input+0x1d6>
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d00c      	beq.n	800e418 <ip4_input+0x1cc>
 800e3fe:	2b06      	cmp	r3, #6
 800e400:	d005      	beq.n	800e40e <ip4_input+0x1c2>
 800e402:	e00e      	b.n	800e422 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7fe fc68 	bl	800ccdc <udp_input>
        break;
 800e40c:	e026      	b.n	800e45c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7fa f88f 	bl	8008534 <tcp_input>
        break;
 800e416:	e021      	b.n	800e45c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e418:	6839      	ldr	r1, [r7, #0]
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff fcee 	bl	800ddfc <icmp_input>
        break;
 800e420:	e01c      	b.n	800e45c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e422:	4b1a      	ldr	r3, [pc, #104]	@ (800e48c <ip4_input+0x240>)
 800e424:	695b      	ldr	r3, [r3, #20]
 800e426:	6939      	ldr	r1, [r7, #16]
 800e428:	4618      	mov	r0, r3
 800e42a:	f000 f90b 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10f      	bne.n	800e454 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e434:	4b15      	ldr	r3, [pc, #84]	@ (800e48c <ip4_input+0x240>)
 800e436:	695b      	ldr	r3, [r3, #20]
 800e438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e43c:	2be0      	cmp	r3, #224	@ 0xe0
 800e43e:	d009      	beq.n	800e454 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e444:	4619      	mov	r1, r3
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7f7 ff87 	bl	800635a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e44c:	2102      	movs	r1, #2
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7ff fdd8 	bl	800e004 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7f7 ff93 	bl	8006380 <pbuf_free>
        break;
 800e45a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e45c:	4b0b      	ldr	r3, [pc, #44]	@ (800e48c <ip4_input+0x240>)
 800e45e:	2200      	movs	r2, #0
 800e460:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e462:	4b0a      	ldr	r3, [pc, #40]	@ (800e48c <ip4_input+0x240>)
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e468:	4b08      	ldr	r3, [pc, #32]	@ (800e48c <ip4_input+0x240>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e46e:	4b07      	ldr	r3, [pc, #28]	@ (800e48c <ip4_input+0x240>)
 800e470:	2200      	movs	r2, #0
 800e472:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e474:	4b05      	ldr	r3, [pc, #20]	@ (800e48c <ip4_input+0x240>)
 800e476:	2200      	movs	r2, #0
 800e478:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e47a:	4b04      	ldr	r3, [pc, #16]	@ (800e48c <ip4_input+0x240>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20005200 	.word	0x20005200
 800e490:	20008764 	.word	0x20008764

0800e494 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b08a      	sub	sp, #40	@ 0x28
 800e498:	af04      	add	r7, sp, #16
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
 800e4a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d009      	beq.n	800e4c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d003      	beq.n	800e4ba <ip4_output_if+0x26>
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d102      	bne.n	800e4c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4bc:	3304      	adds	r3, #4
 800e4be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e4c0:	78fa      	ldrb	r2, [r7, #3]
 800e4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c4:	9302      	str	r3, [sp, #8]
 800e4c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e4ca:	9301      	str	r3, [sp, #4]
 800e4cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	6979      	ldr	r1, [r7, #20]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f000 f805 	bl	800e4e8 <ip4_output_if_src>
 800e4de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	7b9b      	ldrb	r3, [r3, #14]
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d006      	beq.n	800e50c <ip4_output_if_src+0x24>
 800e4fe:	4b4b      	ldr	r3, [pc, #300]	@ (800e62c <ip4_output_if_src+0x144>)
 800e500:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800e504:	494a      	ldr	r1, [pc, #296]	@ (800e630 <ip4_output_if_src+0x148>)
 800e506:	484b      	ldr	r0, [pc, #300]	@ (800e634 <ip4_output_if_src+0x14c>)
 800e508:	f001 f8f2 	bl	800f6f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d060      	beq.n	800e5d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e512:	2314      	movs	r3, #20
 800e514:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e516:	2114      	movs	r1, #20
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f7f7 fe9b 	bl	8006254 <pbuf_add_header>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e524:	f06f 0301 	mvn.w	r3, #1
 800e528:	e07c      	b.n	800e624 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	895b      	ldrh	r3, [r3, #10]
 800e534:	2b13      	cmp	r3, #19
 800e536:	d806      	bhi.n	800e546 <ip4_output_if_src+0x5e>
 800e538:	4b3c      	ldr	r3, [pc, #240]	@ (800e62c <ip4_output_if_src+0x144>)
 800e53a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800e53e:	493e      	ldr	r1, [pc, #248]	@ (800e638 <ip4_output_if_src+0x150>)
 800e540:	483c      	ldr	r0, [pc, #240]	@ (800e634 <ip4_output_if_src+0x14c>)
 800e542:	f001 f8d5 	bl	800f6f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	78fa      	ldrb	r2, [r7, #3]
 800e54a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e552:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e55c:	8b7b      	ldrh	r3, [r7, #26]
 800e55e:	089b      	lsrs	r3, r3, #2
 800e560:	b29b      	uxth	r3, r3
 800e562:	b2db      	uxtb	r3, r3
 800e564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e574:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	891b      	ldrh	r3, [r3, #8]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f6 fba2 	bl	8004cc4 <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	461a      	mov	r2, r3
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	2200      	movs	r2, #0
 800e58c:	719a      	strb	r2, [r3, #6]
 800e58e:	2200      	movs	r2, #0
 800e590:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e592:	4b2a      	ldr	r3, [pc, #168]	@ (800e63c <ip4_output_if_src+0x154>)
 800e594:	881b      	ldrh	r3, [r3, #0]
 800e596:	4618      	mov	r0, r3
 800e598:	f7f6 fb94 	bl	8004cc4 <lwip_htons>
 800e59c:	4603      	mov	r3, r0
 800e59e:	461a      	mov	r2, r3
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e5a4:	4b25      	ldr	r3, [pc, #148]	@ (800e63c <ip4_output_if_src+0x154>)
 800e5a6:	881b      	ldrh	r3, [r3, #0]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	4b23      	ldr	r3, [pc, #140]	@ (800e63c <ip4_output_if_src+0x154>)
 800e5ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d104      	bne.n	800e5c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e5b6:	4b22      	ldr	r3, [pc, #136]	@ (800e640 <ip4_output_if_src+0x158>)
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	60da      	str	r2, [r3, #12]
 800e5be:	e003      	b.n	800e5c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	729a      	strb	r2, [r3, #10]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	72da      	strb	r2, [r3, #11]
 800e5d2:	e00f      	b.n	800e5f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	895b      	ldrh	r3, [r3, #10]
 800e5d8:	2b13      	cmp	r3, #19
 800e5da:	d802      	bhi.n	800e5e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e5dc:	f06f 0301 	mvn.w	r3, #1
 800e5e0:	e020      	b.n	800e624 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e5ee:	f107 0314 	add.w	r3, r7, #20
 800e5f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00c      	beq.n	800e616 <ip4_output_if_src+0x12e>
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	891a      	ldrh	r2, [r3, #8]
 800e600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e602:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e604:	429a      	cmp	r2, r3
 800e606:	d906      	bls.n	800e616 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f000 fd53 	bl	800f0b8 <ip4_frag>
 800e612:	4603      	mov	r3, r0
 800e614:	e006      	b.n	800e624 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e618:	695b      	ldr	r3, [r3, #20]
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	68f9      	ldr	r1, [r7, #12]
 800e61e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e620:	4798      	blx	r3
 800e622:	4603      	mov	r3, r0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3720      	adds	r7, #32
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	08012bfc 	.word	0x08012bfc
 800e630:	08012c30 	.word	0x08012c30
 800e634:	08012c3c 	.word	0x08012c3c
 800e638:	08012c64 	.word	0x08012c64
 800e63c:	200088c2 	.word	0x200088c2
 800e640:	08013044 	.word	0x08013044

0800e644 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e658:	d002      	beq.n	800e660 <ip4_addr_isbroadcast_u32+0x1c>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e660:	2301      	movs	r3, #1
 800e662:	e02a      	b.n	800e6ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e66a:	f003 0302 	and.w	r3, r3, #2
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d101      	bne.n	800e676 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e672:	2300      	movs	r3, #0
 800e674:	e021      	b.n	800e6ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	3304      	adds	r3, #4
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d101      	bne.n	800e686 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e682:	2300      	movs	r3, #0
 800e684:	e019      	b.n	800e6ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	3304      	adds	r3, #4
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	405a      	eors	r2, r3
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	3308      	adds	r3, #8
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4013      	ands	r3, r2
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10d      	bne.n	800e6b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	3308      	adds	r3, #8
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	43da      	mvns	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d101      	bne.n	800e6b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e000      	b.n	800e6ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e6b8:	2300      	movs	r3, #0
  }
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
	...

0800e6c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e6d2:	4b12      	ldr	r3, [pc, #72]	@ (800e71c <ip_reass_tmr+0x54>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e6d8:	e018      	b.n	800e70c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	7fdb      	ldrb	r3, [r3, #31]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00b      	beq.n	800e6fa <ip_reass_tmr+0x32>
      r->timer--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	7fdb      	ldrb	r3, [r3, #31]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	60fb      	str	r3, [r7, #12]
 800e6f8:	e008      	b.n	800e70c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e704:	68b9      	ldr	r1, [r7, #8]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f80a 	bl	800e720 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1e3      	bne.n	800e6da <ip_reass_tmr+0x12>
    }
  }
}
 800e712:	bf00      	nop
 800e714:	bf00      	nop
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	200088c4 	.word	0x200088c4

0800e720 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	429a      	cmp	r2, r3
 800e734:	d105      	bne.n	800e742 <ip_reass_free_complete_datagram+0x22>
 800e736:	4b45      	ldr	r3, [pc, #276]	@ (800e84c <ip_reass_free_complete_datagram+0x12c>)
 800e738:	22ab      	movs	r2, #171	@ 0xab
 800e73a:	4945      	ldr	r1, [pc, #276]	@ (800e850 <ip_reass_free_complete_datagram+0x130>)
 800e73c:	4845      	ldr	r0, [pc, #276]	@ (800e854 <ip_reass_free_complete_datagram+0x134>)
 800e73e:	f000 ffd7 	bl	800f6f0 <iprintf>
  if (prev != NULL) {
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00a      	beq.n	800e75e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d005      	beq.n	800e75e <ip_reass_free_complete_datagram+0x3e>
 800e752:	4b3e      	ldr	r3, [pc, #248]	@ (800e84c <ip_reass_free_complete_datagram+0x12c>)
 800e754:	22ad      	movs	r2, #173	@ 0xad
 800e756:	4940      	ldr	r1, [pc, #256]	@ (800e858 <ip_reass_free_complete_datagram+0x138>)
 800e758:	483e      	ldr	r0, [pc, #248]	@ (800e854 <ip_reass_free_complete_datagram+0x134>)
 800e75a:	f000 ffc9 	bl	800f6f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	889b      	ldrh	r3, [r3, #4]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d12a      	bne.n	800e7c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	6858      	ldr	r0, [r3, #4]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	3308      	adds	r3, #8
 800e786:	2214      	movs	r2, #20
 800e788:	4619      	mov	r1, r3
 800e78a:	f001 f88c 	bl	800f8a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e78e:	2101      	movs	r1, #1
 800e790:	69b8      	ldr	r0, [r7, #24]
 800e792:	f7ff fc47 	bl	800e024 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e796:	69b8      	ldr	r0, [r7, #24]
 800e798:	f7f7 fe7a 	bl	8006490 <pbuf_clen>
 800e79c:	4603      	mov	r3, r0
 800e79e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e7a0:	8bfa      	ldrh	r2, [r7, #30]
 800e7a2:	8a7b      	ldrh	r3, [r7, #18]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7aa:	db05      	blt.n	800e7b8 <ip_reass_free_complete_datagram+0x98>
 800e7ac:	4b27      	ldr	r3, [pc, #156]	@ (800e84c <ip_reass_free_complete_datagram+0x12c>)
 800e7ae:	22bc      	movs	r2, #188	@ 0xbc
 800e7b0:	492a      	ldr	r1, [pc, #168]	@ (800e85c <ip_reass_free_complete_datagram+0x13c>)
 800e7b2:	4828      	ldr	r0, [pc, #160]	@ (800e854 <ip_reass_free_complete_datagram+0x134>)
 800e7b4:	f000 ff9c 	bl	800f6f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e7b8:	8bfa      	ldrh	r2, [r7, #30]
 800e7ba:	8a7b      	ldrh	r3, [r7, #18]
 800e7bc:	4413      	add	r3, r2
 800e7be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e7c0:	69b8      	ldr	r0, [r7, #24]
 800e7c2:	f7f7 fddd 	bl	8006380 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e7cc:	e01f      	b.n	800e80e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	f7f7 fe56 	bl	8006490 <pbuf_clen>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e7e8:	8bfa      	ldrh	r2, [r7, #30]
 800e7ea:	8a7b      	ldrh	r3, [r7, #18]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7f2:	db05      	blt.n	800e800 <ip_reass_free_complete_datagram+0xe0>
 800e7f4:	4b15      	ldr	r3, [pc, #84]	@ (800e84c <ip_reass_free_complete_datagram+0x12c>)
 800e7f6:	22cc      	movs	r2, #204	@ 0xcc
 800e7f8:	4918      	ldr	r1, [pc, #96]	@ (800e85c <ip_reass_free_complete_datagram+0x13c>)
 800e7fa:	4816      	ldr	r0, [pc, #88]	@ (800e854 <ip_reass_free_complete_datagram+0x134>)
 800e7fc:	f000 ff78 	bl	800f6f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e800:	8bfa      	ldrh	r2, [r7, #30]
 800e802:	8a7b      	ldrh	r3, [r7, #18]
 800e804:	4413      	add	r3, r2
 800e806:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7f7 fdb9 	bl	8006380 <pbuf_free>
  while (p != NULL) {
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1dc      	bne.n	800e7ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 f8c2 	bl	800e9a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e81c:	4b10      	ldr	r3, [pc, #64]	@ (800e860 <ip_reass_free_complete_datagram+0x140>)
 800e81e:	881b      	ldrh	r3, [r3, #0]
 800e820:	8bfa      	ldrh	r2, [r7, #30]
 800e822:	429a      	cmp	r2, r3
 800e824:	d905      	bls.n	800e832 <ip_reass_free_complete_datagram+0x112>
 800e826:	4b09      	ldr	r3, [pc, #36]	@ (800e84c <ip_reass_free_complete_datagram+0x12c>)
 800e828:	22d2      	movs	r2, #210	@ 0xd2
 800e82a:	490e      	ldr	r1, [pc, #56]	@ (800e864 <ip_reass_free_complete_datagram+0x144>)
 800e82c:	4809      	ldr	r0, [pc, #36]	@ (800e854 <ip_reass_free_complete_datagram+0x134>)
 800e82e:	f000 ff5f 	bl	800f6f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e832:	4b0b      	ldr	r3, [pc, #44]	@ (800e860 <ip_reass_free_complete_datagram+0x140>)
 800e834:	881a      	ldrh	r2, [r3, #0]
 800e836:	8bfb      	ldrh	r3, [r7, #30]
 800e838:	1ad3      	subs	r3, r2, r3
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	4b08      	ldr	r3, [pc, #32]	@ (800e860 <ip_reass_free_complete_datagram+0x140>)
 800e83e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e840:	8bfb      	ldrh	r3, [r7, #30]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3720      	adds	r7, #32
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	08012c94 	.word	0x08012c94
 800e850:	08012cd0 	.word	0x08012cd0
 800e854:	08012cdc 	.word	0x08012cdc
 800e858:	08012d04 	.word	0x08012d04
 800e85c:	08012d18 	.word	0x08012d18
 800e860:	200088c8 	.word	0x200088c8
 800e864:	08012d38 	.word	0x08012d38

0800e868 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08a      	sub	sp, #40	@ 0x28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e876:	2300      	movs	r3, #0
 800e878:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e87a:	2300      	movs	r3, #0
 800e87c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e886:	4b28      	ldr	r3, [pc, #160]	@ (800e928 <ip_reass_remove_oldest_datagram+0xc0>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e88c:	e030      	b.n	800e8f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e890:	695a      	ldr	r2, [r3, #20]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	429a      	cmp	r2, r3
 800e898:	d10c      	bne.n	800e8b4 <ip_reass_remove_oldest_datagram+0x4c>
 800e89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89c:	699a      	ldr	r2, [r3, #24]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d106      	bne.n	800e8b4 <ip_reass_remove_oldest_datagram+0x4c>
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a8:	899a      	ldrh	r2, [r3, #12]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	889b      	ldrh	r3, [r3, #4]
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d014      	beq.n	800e8de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d104      	bne.n	800e8ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	61bb      	str	r3, [r7, #24]
 800e8c8:	e009      	b.n	800e8de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	7fda      	ldrb	r2, [r3, #31]
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	7fdb      	ldrb	r3, [r3, #31]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d803      	bhi.n	800e8de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1cb      	bne.n	800e88e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d008      	beq.n	800e90e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	6a38      	ldr	r0, [r7, #32]
 800e900:	f7ff ff0e 	bl	800e720 <ip_reass_free_complete_datagram>
 800e904:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	4413      	add	r3, r2
 800e90c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e90e:	697a      	ldr	r2, [r7, #20]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	429a      	cmp	r2, r3
 800e914:	da02      	bge.n	800e91c <ip_reass_remove_oldest_datagram+0xb4>
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	dcac      	bgt.n	800e876 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e91c:	697b      	ldr	r3, [r7, #20]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3728      	adds	r7, #40	@ 0x28
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	200088c4 	.word	0x200088c4

0800e92c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e936:	2004      	movs	r0, #4
 800e938:	f7f6 fe3c 	bl	80055b4 <memp_malloc>
 800e93c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d110      	bne.n	800e966 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e944:	6839      	ldr	r1, [r7, #0]
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff ff8e 	bl	800e868 <ip_reass_remove_oldest_datagram>
 800e94c:	4602      	mov	r2, r0
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	4293      	cmp	r3, r2
 800e952:	dc03      	bgt.n	800e95c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e954:	2004      	movs	r0, #4
 800e956:	f7f6 fe2d 	bl	80055b4 <memp_malloc>
 800e95a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e962:	2300      	movs	r3, #0
 800e964:	e016      	b.n	800e994 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e966:	2220      	movs	r2, #32
 800e968:	2100      	movs	r1, #0
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f000 ff25 	bl	800f7ba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	220f      	movs	r2, #15
 800e974:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e976:	4b09      	ldr	r3, [pc, #36]	@ (800e99c <ip_reass_enqueue_new_datagram+0x70>)
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e97e:	4a07      	ldr	r2, [pc, #28]	@ (800e99c <ip_reass_enqueue_new_datagram+0x70>)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	3308      	adds	r3, #8
 800e988:	2214      	movs	r2, #20
 800e98a:	6879      	ldr	r1, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f000 ff8a 	bl	800f8a6 <memcpy>
  return ipr;
 800e992:	68fb      	ldr	r3, [r7, #12]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	200088c4 	.word	0x200088c4

0800e9a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e9aa:	4b10      	ldr	r3, [pc, #64]	@ (800e9ec <ip_reass_dequeue_datagram+0x4c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d104      	bne.n	800e9be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a0c      	ldr	r2, [pc, #48]	@ (800e9ec <ip_reass_dequeue_datagram+0x4c>)
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	e00d      	b.n	800e9da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d106      	bne.n	800e9d2 <ip_reass_dequeue_datagram+0x32>
 800e9c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e9f0 <ip_reass_dequeue_datagram+0x50>)
 800e9c6:	f240 1245 	movw	r2, #325	@ 0x145
 800e9ca:	490a      	ldr	r1, [pc, #40]	@ (800e9f4 <ip_reass_dequeue_datagram+0x54>)
 800e9cc:	480a      	ldr	r0, [pc, #40]	@ (800e9f8 <ip_reass_dequeue_datagram+0x58>)
 800e9ce:	f000 fe8f 	bl	800f6f0 <iprintf>
    prev->next = ipr->next;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e9da:	6879      	ldr	r1, [r7, #4]
 800e9dc:	2004      	movs	r0, #4
 800e9de:	f7f6 fe59 	bl	8005694 <memp_free>
}
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	200088c4 	.word	0x200088c4
 800e9f0:	08012c94 	.word	0x08012c94
 800e9f4:	08012d5c 	.word	0x08012d5c
 800e9f8:	08012cdc 	.word	0x08012cdc

0800e9fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b08c      	sub	sp, #48	@ 0x30
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	885b      	ldrh	r3, [r3, #2]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7f6 f951 	bl	8004cc4 <lwip_htons>
 800ea22:	4603      	mov	r3, r0
 800ea24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	f003 030f 	and.w	r3, r3, #15
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ea34:	7e7b      	ldrb	r3, [r7, #25]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	8b7a      	ldrh	r2, [r7, #26]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d202      	bcs.n	800ea44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ea3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea42:	e135      	b.n	800ecb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ea44:	7e7b      	ldrb	r3, [r7, #25]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	8b7a      	ldrh	r2, [r7, #26]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	88db      	ldrh	r3, [r3, #6]
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f6 f935 	bl	8004cc4 <lwip_htons>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800ea6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6e:	2200      	movs	r2, #0
 800ea70:	701a      	strb	r2, [r3, #0]
 800ea72:	2200      	movs	r2, #0
 800ea74:	705a      	strb	r2, [r3, #1]
 800ea76:	2200      	movs	r2, #0
 800ea78:	709a      	strb	r2, [r3, #2]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ea7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea80:	8afa      	ldrh	r2, [r7, #22]
 800ea82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ea84:	8afa      	ldrh	r2, [r7, #22]
 800ea86:	8b7b      	ldrh	r3, [r7, #26]
 800ea88:	4413      	add	r3, r2
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ea90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea92:	88db      	ldrh	r3, [r3, #6]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	8afa      	ldrh	r2, [r7, #22]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d902      	bls.n	800eaa2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ea9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa0:	e106      	b.n	800ecb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaa8:	e068      	b.n	800eb7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800eab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab2:	889b      	ldrh	r3, [r3, #4]
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	889b      	ldrh	r3, [r3, #4]
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d235      	bcs.n	800eb2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800eac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eac4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800eac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d020      	beq.n	800eb0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800eacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eace:	889b      	ldrh	r3, [r3, #4]
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead4:	88db      	ldrh	r3, [r3, #6]
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	429a      	cmp	r2, r3
 800eada:	d307      	bcc.n	800eaec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800eadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eade:	88db      	ldrh	r3, [r3, #6]
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	889b      	ldrh	r3, [r3, #4]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d902      	bls.n	800eaf2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eaec:	f04f 33ff 	mov.w	r3, #4294967295
 800eaf0:	e0de      	b.n	800ecb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800eaf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800eaf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eafa:	88db      	ldrh	r3, [r3, #6]
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb00:	889b      	ldrh	r3, [r3, #4]
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d03d      	beq.n	800eb84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800eb0c:	e03a      	b.n	800eb84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800eb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb10:	88db      	ldrh	r3, [r3, #6]
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	889b      	ldrh	r3, [r3, #4]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d902      	bls.n	800eb24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb22:	e0c5      	b.n	800ecb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	605a      	str	r2, [r3, #4]
      break;
 800eb2a:	e02b      	b.n	800eb84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	889b      	ldrh	r3, [r3, #4]
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	889b      	ldrh	r3, [r3, #4]
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d102      	bne.n	800eb42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb40:	e0b6      	b.n	800ecb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800eb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb44:	889b      	ldrh	r3, [r3, #4]
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	88db      	ldrh	r3, [r3, #6]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d202      	bcs.n	800eb58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eb52:	f04f 33ff 	mov.w	r3, #4294967295
 800eb56:	e0ab      	b.n	800ecb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800eb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d009      	beq.n	800eb72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800eb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb60:	88db      	ldrh	r3, [r3, #6]
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	889b      	ldrh	r3, [r3, #4]
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d001      	beq.n	800eb72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d193      	bne.n	800eaaa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800eb82:	e000      	b.n	800eb86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800eb84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800eb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d12d      	bne.n	800ebe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800eb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d01c      	beq.n	800ebcc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800eb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb94:	88db      	ldrh	r3, [r3, #6]
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9a:	889b      	ldrh	r3, [r3, #4]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d906      	bls.n	800ebb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800eba2:	4b45      	ldr	r3, [pc, #276]	@ (800ecb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eba4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800eba8:	4944      	ldr	r1, [pc, #272]	@ (800ecbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ebaa:	4845      	ldr	r0, [pc, #276]	@ (800ecc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ebac:	f000 fda0 	bl	800f6f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ebb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ebb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb8:	88db      	ldrh	r3, [r3, #6]
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebbe:	889b      	ldrh	r3, [r3, #4]
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d010      	beq.n	800ebe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	623b      	str	r3, [r7, #32]
 800ebca:	e00d      	b.n	800ebe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d006      	beq.n	800ebe2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ebd4:	4b38      	ldr	r3, [pc, #224]	@ (800ecb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ebd6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800ebda:	493a      	ldr	r1, [pc, #232]	@ (800ecc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ebdc:	4838      	ldr	r0, [pc, #224]	@ (800ecc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ebde:	f000 fd87 	bl	800f6f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d105      	bne.n	800ebfa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	7f9b      	ldrb	r3, [r3, #30]
 800ebf2:	f003 0301 	and.w	r3, r3, #1
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d059      	beq.n	800ecae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ebfa:	6a3b      	ldr	r3, [r7, #32]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d04f      	beq.n	800eca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d006      	beq.n	800ec16 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	889b      	ldrh	r3, [r3, #4]
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d002      	beq.n	800ec1c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	623b      	str	r3, [r7, #32]
 800ec1a:	e041      	b.n	800eca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ec1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec1e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800ec20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ec26:	e012      	b.n	800ec4e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ec28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ec2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec30:	88db      	ldrh	r3, [r3, #6]
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec36:	889b      	ldrh	r3, [r3, #4]
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d002      	beq.n	800ec44 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	623b      	str	r3, [r7, #32]
            break;
 800ec42:	e007      	b.n	800ec54 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec46:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800ec48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1e9      	bne.n	800ec28 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d022      	beq.n	800eca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d106      	bne.n	800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ec62:	4b15      	ldr	r3, [pc, #84]	@ (800ecb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec64:	f240 12df 	movw	r2, #479	@ 0x1df
 800ec68:	4917      	ldr	r1, [pc, #92]	@ (800ecc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ec6a:	4815      	ldr	r0, [pc, #84]	@ (800ecc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec6c:	f000 fd40 	bl	800f6f0 <iprintf>
          LWIP_ASSERT("sanity check",
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d106      	bne.n	800ec8a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ec7c:	4b0e      	ldr	r3, [pc, #56]	@ (800ecb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec7e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ec82:	4911      	ldr	r1, [pc, #68]	@ (800ecc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ec84:	480e      	ldr	r0, [pc, #56]	@ (800ecc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec86:	f000 fd33 	bl	800f6f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ec8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d006      	beq.n	800eca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ec92:	4b09      	ldr	r3, [pc, #36]	@ (800ecb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec94:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800ec98:	490c      	ldr	r1, [pc, #48]	@ (800eccc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ec9a:	4809      	ldr	r0, [pc, #36]	@ (800ecc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec9c:	f000 fd28 	bl	800f6f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800eca0:	6a3b      	ldr	r3, [r7, #32]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	bf14      	ite	ne
 800eca6:	2301      	movne	r3, #1
 800eca8:	2300      	moveq	r3, #0
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	e000      	b.n	800ecb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3730      	adds	r7, #48	@ 0x30
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	08012c94 	.word	0x08012c94
 800ecbc:	08012d78 	.word	0x08012d78
 800ecc0:	08012cdc 	.word	0x08012cdc
 800ecc4:	08012d98 	.word	0x08012d98
 800ecc8:	08012dd0 	.word	0x08012dd0
 800eccc:	08012de0 	.word	0x08012de0

0800ecd0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08e      	sub	sp, #56	@ 0x38
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ecde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	f003 030f 	and.w	r3, r3, #15
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b14      	cmp	r3, #20
 800ecee:	f040 8171 	bne.w	800efd4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ecf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf4:	88db      	ldrh	r3, [r3, #6]
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7f5 ffe3 	bl	8004cc4 <lwip_htons>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	00db      	lsls	r3, r3, #3
 800ed08:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ed0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed0c:	885b      	ldrh	r3, [r3, #2]
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7f5 ffd7 	bl	8004cc4 <lwip_htons>
 800ed16:	4603      	mov	r3, r0
 800ed18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ed1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	f003 030f 	and.w	r3, r3, #15
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800ed2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ed32:	429a      	cmp	r2, r3
 800ed34:	f0c0 8150 	bcc.w	800efd8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ed38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7f7 fba3 	bl	8006490 <pbuf_clen>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ed4e:	4b8c      	ldr	r3, [pc, #560]	@ (800ef80 <ip4_reass+0x2b0>)
 800ed50:	881b      	ldrh	r3, [r3, #0]
 800ed52:	461a      	mov	r2, r3
 800ed54:	8c3b      	ldrh	r3, [r7, #32]
 800ed56:	4413      	add	r3, r2
 800ed58:	2b0a      	cmp	r3, #10
 800ed5a:	dd10      	ble.n	800ed7e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ed5c:	8c3b      	ldrh	r3, [r7, #32]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed62:	f7ff fd81 	bl	800e868 <ip_reass_remove_oldest_datagram>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 8137 	beq.w	800efdc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ed6e:	4b84      	ldr	r3, [pc, #528]	@ (800ef80 <ip4_reass+0x2b0>)
 800ed70:	881b      	ldrh	r3, [r3, #0]
 800ed72:	461a      	mov	r2, r3
 800ed74:	8c3b      	ldrh	r3, [r7, #32]
 800ed76:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ed78:	2b0a      	cmp	r3, #10
 800ed7a:	f300 812f 	bgt.w	800efdc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ed7e:	4b81      	ldr	r3, [pc, #516]	@ (800ef84 <ip4_reass+0x2b4>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed84:	e015      	b.n	800edb2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ed86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed88:	695a      	ldr	r2, [r3, #20]
 800ed8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d10c      	bne.n	800edac <ip4_reass+0xdc>
 800ed92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed94:	699a      	ldr	r2, [r3, #24]
 800ed96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d106      	bne.n	800edac <ip4_reass+0xdc>
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eda0:	899a      	ldrh	r2, [r3, #12]
 800eda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda4:	889b      	ldrh	r3, [r3, #4]
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d006      	beq.n	800edba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800edac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	633b      	str	r3, [r7, #48]	@ 0x30
 800edb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1e6      	bne.n	800ed86 <ip4_reass+0xb6>
 800edb8:	e000      	b.n	800edbc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800edba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800edbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d109      	bne.n	800edd6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800edc2:	8c3b      	ldrh	r3, [r7, #32]
 800edc4:	4619      	mov	r1, r3
 800edc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edc8:	f7ff fdb0 	bl	800e92c <ip_reass_enqueue_new_datagram>
 800edcc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800edce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d11c      	bne.n	800ee0e <ip4_reass+0x13e>
      goto nullreturn;
 800edd4:	e105      	b.n	800efe2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800edd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd8:	88db      	ldrh	r3, [r3, #6]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f5 ff71 	bl	8004cc4 <lwip_htons>
 800ede2:	4603      	mov	r3, r0
 800ede4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d110      	bne.n	800ee0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800edec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edee:	89db      	ldrh	r3, [r3, #14]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f5 ff67 	bl	8004cc4 <lwip_htons>
 800edf6:	4603      	mov	r3, r0
 800edf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d006      	beq.n	800ee0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ee00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee02:	3308      	adds	r3, #8
 800ee04:	2214      	movs	r2, #20
 800ee06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 fd4c 	bl	800f8a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ee0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee10:	88db      	ldrh	r3, [r3, #6]
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	f003 0320 	and.w	r3, r3, #32
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	bf0c      	ite	eq
 800ee1c:	2301      	moveq	r3, #1
 800ee1e:	2300      	movne	r3, #0
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00e      	beq.n	800ee48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ee2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ee2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee2e:	4413      	add	r3, r2
 800ee30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ee32:	8b7a      	ldrh	r2, [r7, #26]
 800ee34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee36:	429a      	cmp	r2, r3
 800ee38:	f0c0 80a0 	bcc.w	800ef7c <ip4_reass+0x2ac>
 800ee3c:	8b7b      	ldrh	r3, [r7, #26]
 800ee3e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ee42:	4293      	cmp	r3, r2
 800ee44:	f200 809a 	bhi.w	800ef7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ee48:	69fa      	ldr	r2, [r7, #28]
 800ee4a:	6879      	ldr	r1, [r7, #4]
 800ee4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee4e:	f7ff fdd5 	bl	800e9fc <ip_reass_chain_frag_into_datagram_and_validate>
 800ee52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5a:	f000 809b 	beq.w	800ef94 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ee5e:	4b48      	ldr	r3, [pc, #288]	@ (800ef80 <ip4_reass+0x2b0>)
 800ee60:	881a      	ldrh	r2, [r3, #0]
 800ee62:	8c3b      	ldrh	r3, [r7, #32]
 800ee64:	4413      	add	r3, r2
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	4b45      	ldr	r3, [pc, #276]	@ (800ef80 <ip4_reass+0x2b0>)
 800ee6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00d      	beq.n	800ee8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ee72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ee74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee76:	4413      	add	r3, r2
 800ee78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ee7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7c:	8a7a      	ldrh	r2, [r7, #18]
 800ee7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ee80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee82:	7f9b      	ldrb	r3, [r3, #30]
 800ee84:	f043 0301 	orr.w	r3, r3, #1
 800ee88:	b2da      	uxtb	r2, r3
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d171      	bne.n	800ef78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ee94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee96:	8b9b      	ldrh	r3, [r3, #28]
 800ee98:	3314      	adds	r3, #20
 800ee9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	2214      	movs	r2, #20
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eeb8:	f000 fcf5 	bl	800f8a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eebc:	8a3b      	ldrh	r3, [r7, #16]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7f5 ff00 	bl	8004cc4 <lwip_htons>
 800eec4:	4603      	mov	r3, r0
 800eec6:	461a      	mov	r2, r3
 800eec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eece:	2200      	movs	r2, #0
 800eed0:	719a      	strb	r2, [r3, #6]
 800eed2:	2200      	movs	r2, #0
 800eed4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eed8:	2200      	movs	r2, #0
 800eeda:	729a      	strb	r2, [r3, #10]
 800eedc:	2200      	movs	r2, #0
 800eede:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eee6:	e00d      	b.n	800ef04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eeee:	2114      	movs	r1, #20
 800eef0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eef2:	f7f7 f9bf 	bl	8006274 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eef6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7f7 fb03 	bl	8006504 <pbuf_cat>
      r = iprh->next_pbuf;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800ef04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1ee      	bne.n	800eee8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ef0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ef84 <ip4_reass+0x2b4>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d102      	bne.n	800ef1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ef14:	2300      	movs	r3, #0
 800ef16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef18:	e010      	b.n	800ef3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ef1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ef84 <ip4_reass+0x2b4>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef20:	e007      	b.n	800ef32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ef22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d006      	beq.n	800ef3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ef2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d1f4      	bne.n	800ef22 <ip4_reass+0x252>
 800ef38:	e000      	b.n	800ef3c <ip4_reass+0x26c>
          break;
 800ef3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ef3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef40:	f7ff fd2e 	bl	800e9a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7f7 faa3 	bl	8006490 <pbuf_clen>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ef4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ef80 <ip4_reass+0x2b0>)
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	8c3a      	ldrh	r2, [r7, #32]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d906      	bls.n	800ef66 <ip4_reass+0x296>
 800ef58:	4b0b      	ldr	r3, [pc, #44]	@ (800ef88 <ip4_reass+0x2b8>)
 800ef5a:	f240 229b 	movw	r2, #667	@ 0x29b
 800ef5e:	490b      	ldr	r1, [pc, #44]	@ (800ef8c <ip4_reass+0x2bc>)
 800ef60:	480b      	ldr	r0, [pc, #44]	@ (800ef90 <ip4_reass+0x2c0>)
 800ef62:	f000 fbc5 	bl	800f6f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ef66:	4b06      	ldr	r3, [pc, #24]	@ (800ef80 <ip4_reass+0x2b0>)
 800ef68:	881a      	ldrh	r2, [r3, #0]
 800ef6a:	8c3b      	ldrh	r3, [r7, #32]
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	4b03      	ldr	r3, [pc, #12]	@ (800ef80 <ip4_reass+0x2b0>)
 800ef72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	e038      	b.n	800efea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	e036      	b.n	800efea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ef7c:	bf00      	nop
 800ef7e:	e00a      	b.n	800ef96 <ip4_reass+0x2c6>
 800ef80:	200088c8 	.word	0x200088c8
 800ef84:	200088c4 	.word	0x200088c4
 800ef88:	08012c94 	.word	0x08012c94
 800ef8c:	08012e04 	.word	0x08012e04
 800ef90:	08012cdc 	.word	0x08012cdc
    goto nullreturn_ipr;
 800ef94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ef96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <ip4_reass+0x2da>
 800ef9c:	4b15      	ldr	r3, [pc, #84]	@ (800eff4 <ip4_reass+0x324>)
 800ef9e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800efa2:	4915      	ldr	r1, [pc, #84]	@ (800eff8 <ip4_reass+0x328>)
 800efa4:	4815      	ldr	r0, [pc, #84]	@ (800effc <ip4_reass+0x32c>)
 800efa6:	f000 fba3 	bl	800f6f0 <iprintf>
  if (ipr->p == NULL) {
 800efaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d116      	bne.n	800efe0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800efb2:	4b13      	ldr	r3, [pc, #76]	@ (800f000 <ip4_reass+0x330>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efb8:	429a      	cmp	r2, r3
 800efba:	d006      	beq.n	800efca <ip4_reass+0x2fa>
 800efbc:	4b0d      	ldr	r3, [pc, #52]	@ (800eff4 <ip4_reass+0x324>)
 800efbe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800efc2:	4910      	ldr	r1, [pc, #64]	@ (800f004 <ip4_reass+0x334>)
 800efc4:	480d      	ldr	r0, [pc, #52]	@ (800effc <ip4_reass+0x32c>)
 800efc6:	f000 fb93 	bl	800f6f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800efca:	2100      	movs	r1, #0
 800efcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800efce:	f7ff fce7 	bl	800e9a0 <ip_reass_dequeue_datagram>
 800efd2:	e006      	b.n	800efe2 <ip4_reass+0x312>
    goto nullreturn;
 800efd4:	bf00      	nop
 800efd6:	e004      	b.n	800efe2 <ip4_reass+0x312>
    goto nullreturn;
 800efd8:	bf00      	nop
 800efda:	e002      	b.n	800efe2 <ip4_reass+0x312>
      goto nullreturn;
 800efdc:	bf00      	nop
 800efde:	e000      	b.n	800efe2 <ip4_reass+0x312>
  }

nullreturn:
 800efe0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7f7 f9cc 	bl	8006380 <pbuf_free>
  return NULL;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3738      	adds	r7, #56	@ 0x38
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	08012c94 	.word	0x08012c94
 800eff8:	08012e20 	.word	0x08012e20
 800effc:	08012cdc 	.word	0x08012cdc
 800f000:	200088c4 	.word	0x200088c4
 800f004:	08012e2c 	.word	0x08012e2c

0800f008 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f00c:	2005      	movs	r0, #5
 800f00e:	f7f6 fad1 	bl	80055b4 <memp_malloc>
 800f012:	4603      	mov	r3, r0
}
 800f014:	4618      	mov	r0, r3
 800f016:	bd80      	pop	{r7, pc}

0800f018 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d106      	bne.n	800f034 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f026:	4b07      	ldr	r3, [pc, #28]	@ (800f044 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f028:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f02c:	4906      	ldr	r1, [pc, #24]	@ (800f048 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f02e:	4807      	ldr	r0, [pc, #28]	@ (800f04c <ip_frag_free_pbuf_custom_ref+0x34>)
 800f030:	f000 fb5e 	bl	800f6f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f034:	6879      	ldr	r1, [r7, #4]
 800f036:	2005      	movs	r0, #5
 800f038:	f7f6 fb2c 	bl	8005694 <memp_free>
}
 800f03c:	bf00      	nop
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	08012c94 	.word	0x08012c94
 800f048:	08012e4c 	.word	0x08012e4c
 800f04c:	08012cdc 	.word	0x08012cdc

0800f050 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d106      	bne.n	800f070 <ipfrag_free_pbuf_custom+0x20>
 800f062:	4b11      	ldr	r3, [pc, #68]	@ (800f0a8 <ipfrag_free_pbuf_custom+0x58>)
 800f064:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f068:	4910      	ldr	r1, [pc, #64]	@ (800f0ac <ipfrag_free_pbuf_custom+0x5c>)
 800f06a:	4811      	ldr	r0, [pc, #68]	@ (800f0b0 <ipfrag_free_pbuf_custom+0x60>)
 800f06c:	f000 fb40 	bl	800f6f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	429a      	cmp	r2, r3
 800f076:	d006      	beq.n	800f086 <ipfrag_free_pbuf_custom+0x36>
 800f078:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a8 <ipfrag_free_pbuf_custom+0x58>)
 800f07a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f07e:	490d      	ldr	r1, [pc, #52]	@ (800f0b4 <ipfrag_free_pbuf_custom+0x64>)
 800f080:	480b      	ldr	r0, [pc, #44]	@ (800f0b0 <ipfrag_free_pbuf_custom+0x60>)
 800f082:	f000 fb35 	bl	800f6f0 <iprintf>
  if (pcr->original != NULL) {
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	695b      	ldr	r3, [r3, #20]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d004      	beq.n	800f098 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	695b      	ldr	r3, [r3, #20]
 800f092:	4618      	mov	r0, r3
 800f094:	f7f7 f974 	bl	8006380 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f7ff ffbd 	bl	800f018 <ip_frag_free_pbuf_custom_ref>
}
 800f09e:	bf00      	nop
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	08012c94 	.word	0x08012c94
 800f0ac:	08012e58 	.word	0x08012e58
 800f0b0:	08012cdc 	.word	0x08012cdc
 800f0b4:	08012e64 	.word	0x08012e64

0800f0b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b094      	sub	sp, #80	@ 0x50
 800f0bc:	af02      	add	r7, sp, #8
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f0ce:	3b14      	subs	r3, #20
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	da00      	bge.n	800f0d6 <ip4_frag+0x1e>
 800f0d4:	3307      	adds	r3, #7
 800f0d6:	10db      	asrs	r3, r3, #3
 800f0d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f0da:	2314      	movs	r3, #20
 800f0dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0e6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f003 030f 	and.w	r3, r3, #15
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	2b14      	cmp	r3, #20
 800f0f8:	d002      	beq.n	800f100 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f0fa:	f06f 0305 	mvn.w	r3, #5
 800f0fe:	e110      	b.n	800f322 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	895b      	ldrh	r3, [r3, #10]
 800f104:	2b13      	cmp	r3, #19
 800f106:	d809      	bhi.n	800f11c <ip4_frag+0x64>
 800f108:	4b88      	ldr	r3, [pc, #544]	@ (800f32c <ip4_frag+0x274>)
 800f10a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f10e:	4988      	ldr	r1, [pc, #544]	@ (800f330 <ip4_frag+0x278>)
 800f110:	4888      	ldr	r0, [pc, #544]	@ (800f334 <ip4_frag+0x27c>)
 800f112:	f000 faed 	bl	800f6f0 <iprintf>
 800f116:	f06f 0305 	mvn.w	r3, #5
 800f11a:	e102      	b.n	800f322 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f11e:	88db      	ldrh	r3, [r3, #6]
 800f120:	b29b      	uxth	r3, r3
 800f122:	4618      	mov	r0, r3
 800f124:	f7f5 fdce 	bl	8004cc4 <lwip_htons>
 800f128:	4603      	mov	r3, r0
 800f12a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800f12c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f12e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f132:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f136:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f13c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	891b      	ldrh	r3, [r3, #8]
 800f142:	3b14      	subs	r3, #20
 800f144:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800f148:	e0e1      	b.n	800f30e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f14a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f14c:	00db      	lsls	r3, r3, #3
 800f14e:	b29b      	uxth	r3, r3
 800f150:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f154:	4293      	cmp	r3, r2
 800f156:	bf28      	it	cs
 800f158:	4613      	movcs	r3, r2
 800f15a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f15c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f160:	2114      	movs	r1, #20
 800f162:	200e      	movs	r0, #14
 800f164:	f7f6 fe28 	bl	8005db8 <pbuf_alloc>
 800f168:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800f16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 80d5 	beq.w	800f31c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f174:	895b      	ldrh	r3, [r3, #10]
 800f176:	2b13      	cmp	r3, #19
 800f178:	d806      	bhi.n	800f188 <ip4_frag+0xd0>
 800f17a:	4b6c      	ldr	r3, [pc, #432]	@ (800f32c <ip4_frag+0x274>)
 800f17c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f180:	496d      	ldr	r1, [pc, #436]	@ (800f338 <ip4_frag+0x280>)
 800f182:	486c      	ldr	r0, [pc, #432]	@ (800f334 <ip4_frag+0x27c>)
 800f184:	f000 fab4 	bl	800f6f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	2214      	movs	r2, #20
 800f18e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f190:	4618      	mov	r0, r3
 800f192:	f000 fb88 	bl	800f8a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800f19c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f19e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800f1a2:	e064      	b.n	800f26e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	895a      	ldrh	r2, [r3, #10]
 800f1a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	895b      	ldrh	r3, [r3, #10]
 800f1b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d906      	bls.n	800f1c6 <ip4_frag+0x10e>
 800f1b8:	4b5c      	ldr	r3, [pc, #368]	@ (800f32c <ip4_frag+0x274>)
 800f1ba:	f240 322d 	movw	r2, #813	@ 0x32d
 800f1be:	495f      	ldr	r1, [pc, #380]	@ (800f33c <ip4_frag+0x284>)
 800f1c0:	485c      	ldr	r0, [pc, #368]	@ (800f334 <ip4_frag+0x27c>)
 800f1c2:	f000 fa95 	bl	800f6f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f1c6:	8bfa      	ldrh	r2, [r7, #30]
 800f1c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	bf28      	it	cs
 800f1d0:	4613      	movcs	r3, r2
 800f1d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f1d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d105      	bne.n	800f1ea <ip4_frag+0x132>
        poff = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	60fb      	str	r3, [r7, #12]
        continue;
 800f1e8:	e041      	b.n	800f26e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f1ea:	f7ff ff0d 	bl	800f008 <ip_frag_alloc_pbuf_custom_ref>
 800f1ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d103      	bne.n	800f1fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f1f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1f8:	f7f7 f8c2 	bl	8006380 <pbuf_free>
        goto memerr;
 800f1fc:	e08f      	b.n	800f31e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f1fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f204:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f206:	4413      	add	r3, r2
 800f208:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800f20c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f210:	9201      	str	r2, [sp, #4]
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	4603      	mov	r3, r0
 800f216:	2241      	movs	r2, #65	@ 0x41
 800f218:	2000      	movs	r0, #0
 800f21a:	f7f6 fef7 	bl	800600c <pbuf_alloced_custom>
 800f21e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f226:	69b8      	ldr	r0, [r7, #24]
 800f228:	f7ff fef6 	bl	800f018 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f22c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f22e:	f7f7 f8a7 	bl	8006380 <pbuf_free>
        goto memerr;
 800f232:	e074      	b.n	800f31e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f7f7 f943 	bl	80064c0 <pbuf_ref>
      pcr->original = p;
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	4a3f      	ldr	r2, [pc, #252]	@ (800f340 <ip4_frag+0x288>)
 800f244:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f246:	6979      	ldr	r1, [r7, #20]
 800f248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f24a:	f7f7 f95b 	bl	8006504 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f24e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f252:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800f25c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f260:	2b00      	cmp	r3, #0
 800f262:	d004      	beq.n	800f26e <ip4_frag+0x1b6>
        poff = 0;
 800f264:	2300      	movs	r3, #0
 800f266:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f26e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f272:	2b00      	cmp	r3, #0
 800f274:	d196      	bne.n	800f1a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f276:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f278:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f27c:	4413      	add	r3, r2
 800f27e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f284:	f1a3 0213 	sub.w	r2, r3, #19
 800f288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f28c:	429a      	cmp	r2, r3
 800f28e:	bfcc      	ite	gt
 800f290:	2301      	movgt	r3, #1
 800f292:	2300      	movle	r3, #0
 800f294:	b2db      	uxtb	r3, r3
 800f296:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f298:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f29c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <ip4_frag+0x1f6>
 800f2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d003      	beq.n	800f2b6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f2ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f2b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f2b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f2b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7f5 fd03 	bl	8004cc4 <lwip_htons>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f2c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f2c8:	3314      	adds	r3, #20
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7f5 fcf9 	bl	8004cc4 <lwip_htons>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2dc:	2200      	movs	r2, #0
 800f2de:	729a      	strb	r2, [r3, #10]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	695b      	ldr	r3, [r3, #20]
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f2ec:	68b8      	ldr	r0, [r7, #8]
 800f2ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f2f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2f2:	f7f7 f845 	bl	8006380 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f2f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f2fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f2fc:	1ad3      	subs	r3, r2, r3
 800f2fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800f302:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f306:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f308:	4413      	add	r3, r2
 800f30a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800f30e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f312:	2b00      	cmp	r3, #0
 800f314:	f47f af19 	bne.w	800f14a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f318:	2300      	movs	r3, #0
 800f31a:	e002      	b.n	800f322 <ip4_frag+0x26a>
      goto memerr;
 800f31c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f31e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f322:	4618      	mov	r0, r3
 800f324:	3748      	adds	r7, #72	@ 0x48
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	08012c94 	.word	0x08012c94
 800f330:	08012e70 	.word	0x08012e70
 800f334:	08012cdc 	.word	0x08012cdc
 800f338:	08012e8c 	.word	0x08012e8c
 800f33c:	08012eac 	.word	0x08012eac
 800f340:	0800f051 	.word	0x0800f051

0800f344 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b086      	sub	sp, #24
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f34e:	230e      	movs	r3, #14
 800f350:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	895b      	ldrh	r3, [r3, #10]
 800f356:	2b0e      	cmp	r3, #14
 800f358:	d96e      	bls.n	800f438 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	7bdb      	ldrb	r3, [r3, #15]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d106      	bne.n	800f370 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f368:	3301      	adds	r3, #1
 800f36a:	b2da      	uxtb	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	7b1a      	ldrb	r2, [r3, #12]
 800f37a:	7b5b      	ldrb	r3, [r3, #13]
 800f37c:	021b      	lsls	r3, r3, #8
 800f37e:	4313      	orrs	r3, r2
 800f380:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	f003 0301 	and.w	r3, r3, #1
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d023      	beq.n	800f3d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	2b01      	cmp	r3, #1
 800f394:	d10f      	bne.n	800f3b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	785b      	ldrb	r3, [r3, #1]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d11b      	bne.n	800f3d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f3a2:	2b5e      	cmp	r3, #94	@ 0x5e
 800f3a4:	d117      	bne.n	800f3d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	7b5b      	ldrb	r3, [r3, #13]
 800f3aa:	f043 0310 	orr.w	r3, r3, #16
 800f3ae:	b2da      	uxtb	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	735a      	strb	r2, [r3, #13]
 800f3b4:	e00f      	b.n	800f3d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	2206      	movs	r2, #6
 800f3ba:	4928      	ldr	r1, [pc, #160]	@ (800f45c <ethernet_input+0x118>)
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f000 f9ec 	bl	800f79a <memcmp>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d106      	bne.n	800f3d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	7b5b      	ldrb	r3, [r3, #13]
 800f3cc:	f043 0308 	orr.w	r3, r3, #8
 800f3d0:	b2da      	uxtb	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f3d6:	89fb      	ldrh	r3, [r7, #14]
 800f3d8:	2b08      	cmp	r3, #8
 800f3da:	d003      	beq.n	800f3e4 <ethernet_input+0xa0>
 800f3dc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800f3e0:	d014      	beq.n	800f40c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f3e2:	e032      	b.n	800f44a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f3ea:	f003 0308 	and.w	r3, r3, #8
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d024      	beq.n	800f43c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f3f2:	8afb      	ldrh	r3, [r7, #22]
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f7f6 ff3c 	bl	8006274 <pbuf_remove_header>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d11e      	bne.n	800f440 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7fe ff21 	bl	800e24c <ip4_input>
      break;
 800f40a:	e013      	b.n	800f434 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f412:	f003 0308 	and.w	r3, r3, #8
 800f416:	2b00      	cmp	r3, #0
 800f418:	d014      	beq.n	800f444 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f41a:	8afb      	ldrh	r3, [r7, #22]
 800f41c:	4619      	mov	r1, r3
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7f6 ff28 	bl	8006274 <pbuf_remove_header>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10e      	bne.n	800f448 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f42a:	6839      	ldr	r1, [r7, #0]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7fe f8c1 	bl	800d5b4 <etharp_input>
      break;
 800f432:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f434:	2300      	movs	r3, #0
 800f436:	e00c      	b.n	800f452 <ethernet_input+0x10e>
    goto free_and_return;
 800f438:	bf00      	nop
 800f43a:	e006      	b.n	800f44a <ethernet_input+0x106>
        goto free_and_return;
 800f43c:	bf00      	nop
 800f43e:	e004      	b.n	800f44a <ethernet_input+0x106>
        goto free_and_return;
 800f440:	bf00      	nop
 800f442:	e002      	b.n	800f44a <ethernet_input+0x106>
        goto free_and_return;
 800f444:	bf00      	nop
 800f446:	e000      	b.n	800f44a <ethernet_input+0x106>
        goto free_and_return;
 800f448:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7f6 ff98 	bl	8006380 <pbuf_free>
  return ERR_OK;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	3718      	adds	r7, #24
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	08013048 	.word	0x08013048

0800f460 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f46e:	8c3b      	ldrh	r3, [r7, #32]
 800f470:	4618      	mov	r0, r3
 800f472:	f7f5 fc27 	bl	8004cc4 <lwip_htons>
 800f476:	4603      	mov	r3, r0
 800f478:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f47a:	210e      	movs	r1, #14
 800f47c:	68b8      	ldr	r0, [r7, #8]
 800f47e:	f7f6 fee9 	bl	8006254 <pbuf_add_header>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d125      	bne.n	800f4d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	8afa      	ldrh	r2, [r7, #22]
 800f492:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	2206      	movs	r2, #6
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f000 fa03 	bl	800f8a6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	3306      	adds	r3, #6
 800f4a4:	2206      	movs	r2, #6
 800f4a6:	6879      	ldr	r1, [r7, #4]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f000 f9fc 	bl	800f8a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f4b4:	2b06      	cmp	r3, #6
 800f4b6:	d006      	beq.n	800f4c6 <ethernet_output+0x66>
 800f4b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f4e4 <ethernet_output+0x84>)
 800f4ba:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f4be:	490a      	ldr	r1, [pc, #40]	@ (800f4e8 <ethernet_output+0x88>)
 800f4c0:	480a      	ldr	r0, [pc, #40]	@ (800f4ec <ethernet_output+0x8c>)
 800f4c2:	f000 f915 	bl	800f6f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	699b      	ldr	r3, [r3, #24]
 800f4ca:	68b9      	ldr	r1, [r7, #8]
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	4798      	blx	r3
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	e002      	b.n	800f4da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f4d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f4d6:	f06f 0301 	mvn.w	r3, #1
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3718      	adds	r7, #24
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	08012ebc 	.word	0x08012ebc
 800f4e8:	08012ef4 	.word	0x08012ef4
 800f4ec:	08012f28 	.word	0x08012f28

0800f4f0 <rand>:
 800f4f0:	4b16      	ldr	r3, [pc, #88]	@ (800f54c <rand+0x5c>)
 800f4f2:	b510      	push	{r4, lr}
 800f4f4:	681c      	ldr	r4, [r3, #0]
 800f4f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f4f8:	b9b3      	cbnz	r3, 800f528 <rand+0x38>
 800f4fa:	2018      	movs	r0, #24
 800f4fc:	f000 fa4a 	bl	800f994 <malloc>
 800f500:	4602      	mov	r2, r0
 800f502:	6320      	str	r0, [r4, #48]	@ 0x30
 800f504:	b920      	cbnz	r0, 800f510 <rand+0x20>
 800f506:	4b12      	ldr	r3, [pc, #72]	@ (800f550 <rand+0x60>)
 800f508:	4812      	ldr	r0, [pc, #72]	@ (800f554 <rand+0x64>)
 800f50a:	2152      	movs	r1, #82	@ 0x52
 800f50c:	f000 f9da 	bl	800f8c4 <__assert_func>
 800f510:	4911      	ldr	r1, [pc, #68]	@ (800f558 <rand+0x68>)
 800f512:	4b12      	ldr	r3, [pc, #72]	@ (800f55c <rand+0x6c>)
 800f514:	e9c0 1300 	strd	r1, r3, [r0]
 800f518:	4b11      	ldr	r3, [pc, #68]	@ (800f560 <rand+0x70>)
 800f51a:	6083      	str	r3, [r0, #8]
 800f51c:	230b      	movs	r3, #11
 800f51e:	8183      	strh	r3, [r0, #12]
 800f520:	2100      	movs	r1, #0
 800f522:	2001      	movs	r0, #1
 800f524:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f528:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f52a:	480e      	ldr	r0, [pc, #56]	@ (800f564 <rand+0x74>)
 800f52c:	690b      	ldr	r3, [r1, #16]
 800f52e:	694c      	ldr	r4, [r1, #20]
 800f530:	4a0d      	ldr	r2, [pc, #52]	@ (800f568 <rand+0x78>)
 800f532:	4358      	muls	r0, r3
 800f534:	fb02 0004 	mla	r0, r2, r4, r0
 800f538:	fba3 3202 	umull	r3, r2, r3, r2
 800f53c:	3301      	adds	r3, #1
 800f53e:	eb40 0002 	adc.w	r0, r0, r2
 800f542:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f546:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f54a:	bd10      	pop	{r4, pc}
 800f54c:	20000038 	.word	0x20000038
 800f550:	08013056 	.word	0x08013056
 800f554:	0801306d 	.word	0x0801306d
 800f558:	abcd330e 	.word	0xabcd330e
 800f55c:	e66d1234 	.word	0xe66d1234
 800f560:	0005deec 	.word	0x0005deec
 800f564:	5851f42d 	.word	0x5851f42d
 800f568:	4c957f2d 	.word	0x4c957f2d

0800f56c <std>:
 800f56c:	2300      	movs	r3, #0
 800f56e:	b510      	push	{r4, lr}
 800f570:	4604      	mov	r4, r0
 800f572:	e9c0 3300 	strd	r3, r3, [r0]
 800f576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f57a:	6083      	str	r3, [r0, #8]
 800f57c:	8181      	strh	r1, [r0, #12]
 800f57e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f580:	81c2      	strh	r2, [r0, #14]
 800f582:	6183      	str	r3, [r0, #24]
 800f584:	4619      	mov	r1, r3
 800f586:	2208      	movs	r2, #8
 800f588:	305c      	adds	r0, #92	@ 0x5c
 800f58a:	f000 f916 	bl	800f7ba <memset>
 800f58e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c4 <std+0x58>)
 800f590:	6263      	str	r3, [r4, #36]	@ 0x24
 800f592:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c8 <std+0x5c>)
 800f594:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f596:	4b0d      	ldr	r3, [pc, #52]	@ (800f5cc <std+0x60>)
 800f598:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f59a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d0 <std+0x64>)
 800f59c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f59e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d4 <std+0x68>)
 800f5a0:	6224      	str	r4, [r4, #32]
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	d006      	beq.n	800f5b4 <std+0x48>
 800f5a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5aa:	4294      	cmp	r4, r2
 800f5ac:	d002      	beq.n	800f5b4 <std+0x48>
 800f5ae:	33d0      	adds	r3, #208	@ 0xd0
 800f5b0:	429c      	cmp	r4, r3
 800f5b2:	d105      	bne.n	800f5c0 <std+0x54>
 800f5b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5bc:	f000 b970 	b.w	800f8a0 <__retarget_lock_init_recursive>
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	bf00      	nop
 800f5c4:	0800f715 	.word	0x0800f715
 800f5c8:	0800f737 	.word	0x0800f737
 800f5cc:	0800f76f 	.word	0x0800f76f
 800f5d0:	0800f793 	.word	0x0800f793
 800f5d4:	200088cc 	.word	0x200088cc

0800f5d8 <stdio_exit_handler>:
 800f5d8:	4a02      	ldr	r2, [pc, #8]	@ (800f5e4 <stdio_exit_handler+0xc>)
 800f5da:	4903      	ldr	r1, [pc, #12]	@ (800f5e8 <stdio_exit_handler+0x10>)
 800f5dc:	4803      	ldr	r0, [pc, #12]	@ (800f5ec <stdio_exit_handler+0x14>)
 800f5de:	f000 b869 	b.w	800f6b4 <_fwalk_sglue>
 800f5e2:	bf00      	nop
 800f5e4:	2000002c 	.word	0x2000002c
 800f5e8:	080101a9 	.word	0x080101a9
 800f5ec:	2000003c 	.word	0x2000003c

0800f5f0 <cleanup_stdio>:
 800f5f0:	6841      	ldr	r1, [r0, #4]
 800f5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800f624 <cleanup_stdio+0x34>)
 800f5f4:	4299      	cmp	r1, r3
 800f5f6:	b510      	push	{r4, lr}
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	d001      	beq.n	800f600 <cleanup_stdio+0x10>
 800f5fc:	f000 fdd4 	bl	80101a8 <_fflush_r>
 800f600:	68a1      	ldr	r1, [r4, #8]
 800f602:	4b09      	ldr	r3, [pc, #36]	@ (800f628 <cleanup_stdio+0x38>)
 800f604:	4299      	cmp	r1, r3
 800f606:	d002      	beq.n	800f60e <cleanup_stdio+0x1e>
 800f608:	4620      	mov	r0, r4
 800f60a:	f000 fdcd 	bl	80101a8 <_fflush_r>
 800f60e:	68e1      	ldr	r1, [r4, #12]
 800f610:	4b06      	ldr	r3, [pc, #24]	@ (800f62c <cleanup_stdio+0x3c>)
 800f612:	4299      	cmp	r1, r3
 800f614:	d004      	beq.n	800f620 <cleanup_stdio+0x30>
 800f616:	4620      	mov	r0, r4
 800f618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f61c:	f000 bdc4 	b.w	80101a8 <_fflush_r>
 800f620:	bd10      	pop	{r4, pc}
 800f622:	bf00      	nop
 800f624:	200088cc 	.word	0x200088cc
 800f628:	20008934 	.word	0x20008934
 800f62c:	2000899c 	.word	0x2000899c

0800f630 <global_stdio_init.part.0>:
 800f630:	b510      	push	{r4, lr}
 800f632:	4b0b      	ldr	r3, [pc, #44]	@ (800f660 <global_stdio_init.part.0+0x30>)
 800f634:	4c0b      	ldr	r4, [pc, #44]	@ (800f664 <global_stdio_init.part.0+0x34>)
 800f636:	4a0c      	ldr	r2, [pc, #48]	@ (800f668 <global_stdio_init.part.0+0x38>)
 800f638:	601a      	str	r2, [r3, #0]
 800f63a:	4620      	mov	r0, r4
 800f63c:	2200      	movs	r2, #0
 800f63e:	2104      	movs	r1, #4
 800f640:	f7ff ff94 	bl	800f56c <std>
 800f644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f648:	2201      	movs	r2, #1
 800f64a:	2109      	movs	r1, #9
 800f64c:	f7ff ff8e 	bl	800f56c <std>
 800f650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f654:	2202      	movs	r2, #2
 800f656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f65a:	2112      	movs	r1, #18
 800f65c:	f7ff bf86 	b.w	800f56c <std>
 800f660:	20008a04 	.word	0x20008a04
 800f664:	200088cc 	.word	0x200088cc
 800f668:	0800f5d9 	.word	0x0800f5d9

0800f66c <__sfp_lock_acquire>:
 800f66c:	4801      	ldr	r0, [pc, #4]	@ (800f674 <__sfp_lock_acquire+0x8>)
 800f66e:	f000 b918 	b.w	800f8a2 <__retarget_lock_acquire_recursive>
 800f672:	bf00      	nop
 800f674:	20008a0d 	.word	0x20008a0d

0800f678 <__sfp_lock_release>:
 800f678:	4801      	ldr	r0, [pc, #4]	@ (800f680 <__sfp_lock_release+0x8>)
 800f67a:	f000 b913 	b.w	800f8a4 <__retarget_lock_release_recursive>
 800f67e:	bf00      	nop
 800f680:	20008a0d 	.word	0x20008a0d

0800f684 <__sinit>:
 800f684:	b510      	push	{r4, lr}
 800f686:	4604      	mov	r4, r0
 800f688:	f7ff fff0 	bl	800f66c <__sfp_lock_acquire>
 800f68c:	6a23      	ldr	r3, [r4, #32]
 800f68e:	b11b      	cbz	r3, 800f698 <__sinit+0x14>
 800f690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f694:	f7ff bff0 	b.w	800f678 <__sfp_lock_release>
 800f698:	4b04      	ldr	r3, [pc, #16]	@ (800f6ac <__sinit+0x28>)
 800f69a:	6223      	str	r3, [r4, #32]
 800f69c:	4b04      	ldr	r3, [pc, #16]	@ (800f6b0 <__sinit+0x2c>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1f5      	bne.n	800f690 <__sinit+0xc>
 800f6a4:	f7ff ffc4 	bl	800f630 <global_stdio_init.part.0>
 800f6a8:	e7f2      	b.n	800f690 <__sinit+0xc>
 800f6aa:	bf00      	nop
 800f6ac:	0800f5f1 	.word	0x0800f5f1
 800f6b0:	20008a04 	.word	0x20008a04

0800f6b4 <_fwalk_sglue>:
 800f6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b8:	4607      	mov	r7, r0
 800f6ba:	4688      	mov	r8, r1
 800f6bc:	4614      	mov	r4, r2
 800f6be:	2600      	movs	r6, #0
 800f6c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6c4:	f1b9 0901 	subs.w	r9, r9, #1
 800f6c8:	d505      	bpl.n	800f6d6 <_fwalk_sglue+0x22>
 800f6ca:	6824      	ldr	r4, [r4, #0]
 800f6cc:	2c00      	cmp	r4, #0
 800f6ce:	d1f7      	bne.n	800f6c0 <_fwalk_sglue+0xc>
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6d6:	89ab      	ldrh	r3, [r5, #12]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d907      	bls.n	800f6ec <_fwalk_sglue+0x38>
 800f6dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	d003      	beq.n	800f6ec <_fwalk_sglue+0x38>
 800f6e4:	4629      	mov	r1, r5
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	47c0      	blx	r8
 800f6ea:	4306      	orrs	r6, r0
 800f6ec:	3568      	adds	r5, #104	@ 0x68
 800f6ee:	e7e9      	b.n	800f6c4 <_fwalk_sglue+0x10>

0800f6f0 <iprintf>:
 800f6f0:	b40f      	push	{r0, r1, r2, r3}
 800f6f2:	b507      	push	{r0, r1, r2, lr}
 800f6f4:	4906      	ldr	r1, [pc, #24]	@ (800f710 <iprintf+0x20>)
 800f6f6:	ab04      	add	r3, sp, #16
 800f6f8:	6808      	ldr	r0, [r1, #0]
 800f6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6fe:	6881      	ldr	r1, [r0, #8]
 800f700:	9301      	str	r3, [sp, #4]
 800f702:	f000 fa27 	bl	800fb54 <_vfiprintf_r>
 800f706:	b003      	add	sp, #12
 800f708:	f85d eb04 	ldr.w	lr, [sp], #4
 800f70c:	b004      	add	sp, #16
 800f70e:	4770      	bx	lr
 800f710:	20000038 	.word	0x20000038

0800f714 <__sread>:
 800f714:	b510      	push	{r4, lr}
 800f716:	460c      	mov	r4, r1
 800f718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f71c:	f000 f878 	bl	800f810 <_read_r>
 800f720:	2800      	cmp	r0, #0
 800f722:	bfab      	itete	ge
 800f724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f726:	89a3      	ldrhlt	r3, [r4, #12]
 800f728:	181b      	addge	r3, r3, r0
 800f72a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f72e:	bfac      	ite	ge
 800f730:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f732:	81a3      	strhlt	r3, [r4, #12]
 800f734:	bd10      	pop	{r4, pc}

0800f736 <__swrite>:
 800f736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f73a:	461f      	mov	r7, r3
 800f73c:	898b      	ldrh	r3, [r1, #12]
 800f73e:	05db      	lsls	r3, r3, #23
 800f740:	4605      	mov	r5, r0
 800f742:	460c      	mov	r4, r1
 800f744:	4616      	mov	r6, r2
 800f746:	d505      	bpl.n	800f754 <__swrite+0x1e>
 800f748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f74c:	2302      	movs	r3, #2
 800f74e:	2200      	movs	r2, #0
 800f750:	f000 f84c 	bl	800f7ec <_lseek_r>
 800f754:	89a3      	ldrh	r3, [r4, #12]
 800f756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f75a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	4632      	mov	r2, r6
 800f762:	463b      	mov	r3, r7
 800f764:	4628      	mov	r0, r5
 800f766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f76a:	f000 b863 	b.w	800f834 <_write_r>

0800f76e <__sseek>:
 800f76e:	b510      	push	{r4, lr}
 800f770:	460c      	mov	r4, r1
 800f772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f776:	f000 f839 	bl	800f7ec <_lseek_r>
 800f77a:	1c43      	adds	r3, r0, #1
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	bf15      	itete	ne
 800f780:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f78a:	81a3      	strheq	r3, [r4, #12]
 800f78c:	bf18      	it	ne
 800f78e:	81a3      	strhne	r3, [r4, #12]
 800f790:	bd10      	pop	{r4, pc}

0800f792 <__sclose>:
 800f792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f796:	f000 b819 	b.w	800f7cc <_close_r>

0800f79a <memcmp>:
 800f79a:	b510      	push	{r4, lr}
 800f79c:	3901      	subs	r1, #1
 800f79e:	4402      	add	r2, r0
 800f7a0:	4290      	cmp	r0, r2
 800f7a2:	d101      	bne.n	800f7a8 <memcmp+0xe>
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	e005      	b.n	800f7b4 <memcmp+0x1a>
 800f7a8:	7803      	ldrb	r3, [r0, #0]
 800f7aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f7ae:	42a3      	cmp	r3, r4
 800f7b0:	d001      	beq.n	800f7b6 <memcmp+0x1c>
 800f7b2:	1b18      	subs	r0, r3, r4
 800f7b4:	bd10      	pop	{r4, pc}
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	e7f2      	b.n	800f7a0 <memcmp+0x6>

0800f7ba <memset>:
 800f7ba:	4402      	add	r2, r0
 800f7bc:	4603      	mov	r3, r0
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d100      	bne.n	800f7c4 <memset+0xa>
 800f7c2:	4770      	bx	lr
 800f7c4:	f803 1b01 	strb.w	r1, [r3], #1
 800f7c8:	e7f9      	b.n	800f7be <memset+0x4>
	...

0800f7cc <_close_r>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	4d06      	ldr	r5, [pc, #24]	@ (800f7e8 <_close_r+0x1c>)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	4608      	mov	r0, r1
 800f7d6:	602b      	str	r3, [r5, #0]
 800f7d8:	f7f1 f9b4 	bl	8000b44 <_close>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	d102      	bne.n	800f7e6 <_close_r+0x1a>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	b103      	cbz	r3, 800f7e6 <_close_r+0x1a>
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	20008a08 	.word	0x20008a08

0800f7ec <_lseek_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d07      	ldr	r5, [pc, #28]	@ (800f80c <_lseek_r+0x20>)
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	4608      	mov	r0, r1
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	602a      	str	r2, [r5, #0]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	f7f1 f9c9 	bl	8000b92 <_lseek>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	d102      	bne.n	800f80a <_lseek_r+0x1e>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	b103      	cbz	r3, 800f80a <_lseek_r+0x1e>
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	bd38      	pop	{r3, r4, r5, pc}
 800f80c:	20008a08 	.word	0x20008a08

0800f810 <_read_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d07      	ldr	r5, [pc, #28]	@ (800f830 <_read_r+0x20>)
 800f814:	4604      	mov	r4, r0
 800f816:	4608      	mov	r0, r1
 800f818:	4611      	mov	r1, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	602a      	str	r2, [r5, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	f7f1 f957 	bl	8000ad2 <_read>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <_read_r+0x1e>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b103      	cbz	r3, 800f82e <_read_r+0x1e>
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	20008a08 	.word	0x20008a08

0800f834 <_write_r>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4d07      	ldr	r5, [pc, #28]	@ (800f854 <_write_r+0x20>)
 800f838:	4604      	mov	r4, r0
 800f83a:	4608      	mov	r0, r1
 800f83c:	4611      	mov	r1, r2
 800f83e:	2200      	movs	r2, #0
 800f840:	602a      	str	r2, [r5, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	f7f1 f962 	bl	8000b0c <_write>
 800f848:	1c43      	adds	r3, r0, #1
 800f84a:	d102      	bne.n	800f852 <_write_r+0x1e>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b103      	cbz	r3, 800f852 <_write_r+0x1e>
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	20008a08 	.word	0x20008a08

0800f858 <__libc_init_array>:
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	4d0d      	ldr	r5, [pc, #52]	@ (800f890 <__libc_init_array+0x38>)
 800f85c:	4c0d      	ldr	r4, [pc, #52]	@ (800f894 <__libc_init_array+0x3c>)
 800f85e:	1b64      	subs	r4, r4, r5
 800f860:	10a4      	asrs	r4, r4, #2
 800f862:	2600      	movs	r6, #0
 800f864:	42a6      	cmp	r6, r4
 800f866:	d109      	bne.n	800f87c <__libc_init_array+0x24>
 800f868:	4d0b      	ldr	r5, [pc, #44]	@ (800f898 <__libc_init_array+0x40>)
 800f86a:	4c0c      	ldr	r4, [pc, #48]	@ (800f89c <__libc_init_array+0x44>)
 800f86c:	f000 fe4a 	bl	8010504 <_init>
 800f870:	1b64      	subs	r4, r4, r5
 800f872:	10a4      	asrs	r4, r4, #2
 800f874:	2600      	movs	r6, #0
 800f876:	42a6      	cmp	r6, r4
 800f878:	d105      	bne.n	800f886 <__libc_init_array+0x2e>
 800f87a:	bd70      	pop	{r4, r5, r6, pc}
 800f87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f880:	4798      	blx	r3
 800f882:	3601      	adds	r6, #1
 800f884:	e7ee      	b.n	800f864 <__libc_init_array+0xc>
 800f886:	f855 3b04 	ldr.w	r3, [r5], #4
 800f88a:	4798      	blx	r3
 800f88c:	3601      	adds	r6, #1
 800f88e:	e7f2      	b.n	800f876 <__libc_init_array+0x1e>
 800f890:	0801313c 	.word	0x0801313c
 800f894:	0801313c 	.word	0x0801313c
 800f898:	0801313c 	.word	0x0801313c
 800f89c:	08013140 	.word	0x08013140

0800f8a0 <__retarget_lock_init_recursive>:
 800f8a0:	4770      	bx	lr

0800f8a2 <__retarget_lock_acquire_recursive>:
 800f8a2:	4770      	bx	lr

0800f8a4 <__retarget_lock_release_recursive>:
 800f8a4:	4770      	bx	lr

0800f8a6 <memcpy>:
 800f8a6:	440a      	add	r2, r1
 800f8a8:	4291      	cmp	r1, r2
 800f8aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8ae:	d100      	bne.n	800f8b2 <memcpy+0xc>
 800f8b0:	4770      	bx	lr
 800f8b2:	b510      	push	{r4, lr}
 800f8b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8bc:	4291      	cmp	r1, r2
 800f8be:	d1f9      	bne.n	800f8b4 <memcpy+0xe>
 800f8c0:	bd10      	pop	{r4, pc}
	...

0800f8c4 <__assert_func>:
 800f8c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8c6:	4614      	mov	r4, r2
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4b09      	ldr	r3, [pc, #36]	@ (800f8f0 <__assert_func+0x2c>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	68d8      	ldr	r0, [r3, #12]
 800f8d2:	b954      	cbnz	r4, 800f8ea <__assert_func+0x26>
 800f8d4:	4b07      	ldr	r3, [pc, #28]	@ (800f8f4 <__assert_func+0x30>)
 800f8d6:	461c      	mov	r4, r3
 800f8d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8dc:	9100      	str	r1, [sp, #0]
 800f8de:	462b      	mov	r3, r5
 800f8e0:	4905      	ldr	r1, [pc, #20]	@ (800f8f8 <__assert_func+0x34>)
 800f8e2:	f000 fc89 	bl	80101f8 <fiprintf>
 800f8e6:	f000 fd3d 	bl	8010364 <abort>
 800f8ea:	4b04      	ldr	r3, [pc, #16]	@ (800f8fc <__assert_func+0x38>)
 800f8ec:	e7f4      	b.n	800f8d8 <__assert_func+0x14>
 800f8ee:	bf00      	nop
 800f8f0:	20000038 	.word	0x20000038
 800f8f4:	08013100 	.word	0x08013100
 800f8f8:	080130d2 	.word	0x080130d2
 800f8fc:	080130c5 	.word	0x080130c5

0800f900 <_free_r>:
 800f900:	b538      	push	{r3, r4, r5, lr}
 800f902:	4605      	mov	r5, r0
 800f904:	2900      	cmp	r1, #0
 800f906:	d041      	beq.n	800f98c <_free_r+0x8c>
 800f908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f90c:	1f0c      	subs	r4, r1, #4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	bfb8      	it	lt
 800f912:	18e4      	addlt	r4, r4, r3
 800f914:	f000 f8e8 	bl	800fae8 <__malloc_lock>
 800f918:	4a1d      	ldr	r2, [pc, #116]	@ (800f990 <_free_r+0x90>)
 800f91a:	6813      	ldr	r3, [r2, #0]
 800f91c:	b933      	cbnz	r3, 800f92c <_free_r+0x2c>
 800f91e:	6063      	str	r3, [r4, #4]
 800f920:	6014      	str	r4, [r2, #0]
 800f922:	4628      	mov	r0, r5
 800f924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f928:	f000 b8e4 	b.w	800faf4 <__malloc_unlock>
 800f92c:	42a3      	cmp	r3, r4
 800f92e:	d908      	bls.n	800f942 <_free_r+0x42>
 800f930:	6820      	ldr	r0, [r4, #0]
 800f932:	1821      	adds	r1, r4, r0
 800f934:	428b      	cmp	r3, r1
 800f936:	bf01      	itttt	eq
 800f938:	6819      	ldreq	r1, [r3, #0]
 800f93a:	685b      	ldreq	r3, [r3, #4]
 800f93c:	1809      	addeq	r1, r1, r0
 800f93e:	6021      	streq	r1, [r4, #0]
 800f940:	e7ed      	b.n	800f91e <_free_r+0x1e>
 800f942:	461a      	mov	r2, r3
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	b10b      	cbz	r3, 800f94c <_free_r+0x4c>
 800f948:	42a3      	cmp	r3, r4
 800f94a:	d9fa      	bls.n	800f942 <_free_r+0x42>
 800f94c:	6811      	ldr	r1, [r2, #0]
 800f94e:	1850      	adds	r0, r2, r1
 800f950:	42a0      	cmp	r0, r4
 800f952:	d10b      	bne.n	800f96c <_free_r+0x6c>
 800f954:	6820      	ldr	r0, [r4, #0]
 800f956:	4401      	add	r1, r0
 800f958:	1850      	adds	r0, r2, r1
 800f95a:	4283      	cmp	r3, r0
 800f95c:	6011      	str	r1, [r2, #0]
 800f95e:	d1e0      	bne.n	800f922 <_free_r+0x22>
 800f960:	6818      	ldr	r0, [r3, #0]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	6053      	str	r3, [r2, #4]
 800f966:	4408      	add	r0, r1
 800f968:	6010      	str	r0, [r2, #0]
 800f96a:	e7da      	b.n	800f922 <_free_r+0x22>
 800f96c:	d902      	bls.n	800f974 <_free_r+0x74>
 800f96e:	230c      	movs	r3, #12
 800f970:	602b      	str	r3, [r5, #0]
 800f972:	e7d6      	b.n	800f922 <_free_r+0x22>
 800f974:	6820      	ldr	r0, [r4, #0]
 800f976:	1821      	adds	r1, r4, r0
 800f978:	428b      	cmp	r3, r1
 800f97a:	bf04      	itt	eq
 800f97c:	6819      	ldreq	r1, [r3, #0]
 800f97e:	685b      	ldreq	r3, [r3, #4]
 800f980:	6063      	str	r3, [r4, #4]
 800f982:	bf04      	itt	eq
 800f984:	1809      	addeq	r1, r1, r0
 800f986:	6021      	streq	r1, [r4, #0]
 800f988:	6054      	str	r4, [r2, #4]
 800f98a:	e7ca      	b.n	800f922 <_free_r+0x22>
 800f98c:	bd38      	pop	{r3, r4, r5, pc}
 800f98e:	bf00      	nop
 800f990:	20008a14 	.word	0x20008a14

0800f994 <malloc>:
 800f994:	4b02      	ldr	r3, [pc, #8]	@ (800f9a0 <malloc+0xc>)
 800f996:	4601      	mov	r1, r0
 800f998:	6818      	ldr	r0, [r3, #0]
 800f99a:	f000 b825 	b.w	800f9e8 <_malloc_r>
 800f99e:	bf00      	nop
 800f9a0:	20000038 	.word	0x20000038

0800f9a4 <sbrk_aligned>:
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	4e0f      	ldr	r6, [pc, #60]	@ (800f9e4 <sbrk_aligned+0x40>)
 800f9a8:	460c      	mov	r4, r1
 800f9aa:	6831      	ldr	r1, [r6, #0]
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	b911      	cbnz	r1, 800f9b6 <sbrk_aligned+0x12>
 800f9b0:	f000 fcc8 	bl	8010344 <_sbrk_r>
 800f9b4:	6030      	str	r0, [r6, #0]
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	f000 fcc3 	bl	8010344 <_sbrk_r>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	d103      	bne.n	800f9ca <sbrk_aligned+0x26>
 800f9c2:	f04f 34ff 	mov.w	r4, #4294967295
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ca:	1cc4      	adds	r4, r0, #3
 800f9cc:	f024 0403 	bic.w	r4, r4, #3
 800f9d0:	42a0      	cmp	r0, r4
 800f9d2:	d0f8      	beq.n	800f9c6 <sbrk_aligned+0x22>
 800f9d4:	1a21      	subs	r1, r4, r0
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f000 fcb4 	bl	8010344 <_sbrk_r>
 800f9dc:	3001      	adds	r0, #1
 800f9de:	d1f2      	bne.n	800f9c6 <sbrk_aligned+0x22>
 800f9e0:	e7ef      	b.n	800f9c2 <sbrk_aligned+0x1e>
 800f9e2:	bf00      	nop
 800f9e4:	20008a10 	.word	0x20008a10

0800f9e8 <_malloc_r>:
 800f9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9ec:	1ccd      	adds	r5, r1, #3
 800f9ee:	f025 0503 	bic.w	r5, r5, #3
 800f9f2:	3508      	adds	r5, #8
 800f9f4:	2d0c      	cmp	r5, #12
 800f9f6:	bf38      	it	cc
 800f9f8:	250c      	movcc	r5, #12
 800f9fa:	2d00      	cmp	r5, #0
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	db01      	blt.n	800fa04 <_malloc_r+0x1c>
 800fa00:	42a9      	cmp	r1, r5
 800fa02:	d904      	bls.n	800fa0e <_malloc_r+0x26>
 800fa04:	230c      	movs	r3, #12
 800fa06:	6033      	str	r3, [r6, #0]
 800fa08:	2000      	movs	r0, #0
 800fa0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fae4 <_malloc_r+0xfc>
 800fa12:	f000 f869 	bl	800fae8 <__malloc_lock>
 800fa16:	f8d8 3000 	ldr.w	r3, [r8]
 800fa1a:	461c      	mov	r4, r3
 800fa1c:	bb44      	cbnz	r4, 800fa70 <_malloc_r+0x88>
 800fa1e:	4629      	mov	r1, r5
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7ff ffbf 	bl	800f9a4 <sbrk_aligned>
 800fa26:	1c43      	adds	r3, r0, #1
 800fa28:	4604      	mov	r4, r0
 800fa2a:	d158      	bne.n	800fade <_malloc_r+0xf6>
 800fa2c:	f8d8 4000 	ldr.w	r4, [r8]
 800fa30:	4627      	mov	r7, r4
 800fa32:	2f00      	cmp	r7, #0
 800fa34:	d143      	bne.n	800fabe <_malloc_r+0xd6>
 800fa36:	2c00      	cmp	r4, #0
 800fa38:	d04b      	beq.n	800fad2 <_malloc_r+0xea>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	4639      	mov	r1, r7
 800fa3e:	4630      	mov	r0, r6
 800fa40:	eb04 0903 	add.w	r9, r4, r3
 800fa44:	f000 fc7e 	bl	8010344 <_sbrk_r>
 800fa48:	4581      	cmp	r9, r0
 800fa4a:	d142      	bne.n	800fad2 <_malloc_r+0xea>
 800fa4c:	6821      	ldr	r1, [r4, #0]
 800fa4e:	1a6d      	subs	r5, r5, r1
 800fa50:	4629      	mov	r1, r5
 800fa52:	4630      	mov	r0, r6
 800fa54:	f7ff ffa6 	bl	800f9a4 <sbrk_aligned>
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d03a      	beq.n	800fad2 <_malloc_r+0xea>
 800fa5c:	6823      	ldr	r3, [r4, #0]
 800fa5e:	442b      	add	r3, r5
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	f8d8 3000 	ldr.w	r3, [r8]
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	bb62      	cbnz	r2, 800fac4 <_malloc_r+0xdc>
 800fa6a:	f8c8 7000 	str.w	r7, [r8]
 800fa6e:	e00f      	b.n	800fa90 <_malloc_r+0xa8>
 800fa70:	6822      	ldr	r2, [r4, #0]
 800fa72:	1b52      	subs	r2, r2, r5
 800fa74:	d420      	bmi.n	800fab8 <_malloc_r+0xd0>
 800fa76:	2a0b      	cmp	r2, #11
 800fa78:	d917      	bls.n	800faaa <_malloc_r+0xc2>
 800fa7a:	1961      	adds	r1, r4, r5
 800fa7c:	42a3      	cmp	r3, r4
 800fa7e:	6025      	str	r5, [r4, #0]
 800fa80:	bf18      	it	ne
 800fa82:	6059      	strne	r1, [r3, #4]
 800fa84:	6863      	ldr	r3, [r4, #4]
 800fa86:	bf08      	it	eq
 800fa88:	f8c8 1000 	streq.w	r1, [r8]
 800fa8c:	5162      	str	r2, [r4, r5]
 800fa8e:	604b      	str	r3, [r1, #4]
 800fa90:	4630      	mov	r0, r6
 800fa92:	f000 f82f 	bl	800faf4 <__malloc_unlock>
 800fa96:	f104 000b 	add.w	r0, r4, #11
 800fa9a:	1d23      	adds	r3, r4, #4
 800fa9c:	f020 0007 	bic.w	r0, r0, #7
 800faa0:	1ac2      	subs	r2, r0, r3
 800faa2:	bf1c      	itt	ne
 800faa4:	1a1b      	subne	r3, r3, r0
 800faa6:	50a3      	strne	r3, [r4, r2]
 800faa8:	e7af      	b.n	800fa0a <_malloc_r+0x22>
 800faaa:	6862      	ldr	r2, [r4, #4]
 800faac:	42a3      	cmp	r3, r4
 800faae:	bf0c      	ite	eq
 800fab0:	f8c8 2000 	streq.w	r2, [r8]
 800fab4:	605a      	strne	r2, [r3, #4]
 800fab6:	e7eb      	b.n	800fa90 <_malloc_r+0xa8>
 800fab8:	4623      	mov	r3, r4
 800faba:	6864      	ldr	r4, [r4, #4]
 800fabc:	e7ae      	b.n	800fa1c <_malloc_r+0x34>
 800fabe:	463c      	mov	r4, r7
 800fac0:	687f      	ldr	r7, [r7, #4]
 800fac2:	e7b6      	b.n	800fa32 <_malloc_r+0x4a>
 800fac4:	461a      	mov	r2, r3
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	42a3      	cmp	r3, r4
 800faca:	d1fb      	bne.n	800fac4 <_malloc_r+0xdc>
 800facc:	2300      	movs	r3, #0
 800face:	6053      	str	r3, [r2, #4]
 800fad0:	e7de      	b.n	800fa90 <_malloc_r+0xa8>
 800fad2:	230c      	movs	r3, #12
 800fad4:	6033      	str	r3, [r6, #0]
 800fad6:	4630      	mov	r0, r6
 800fad8:	f000 f80c 	bl	800faf4 <__malloc_unlock>
 800fadc:	e794      	b.n	800fa08 <_malloc_r+0x20>
 800fade:	6005      	str	r5, [r0, #0]
 800fae0:	e7d6      	b.n	800fa90 <_malloc_r+0xa8>
 800fae2:	bf00      	nop
 800fae4:	20008a14 	.word	0x20008a14

0800fae8 <__malloc_lock>:
 800fae8:	4801      	ldr	r0, [pc, #4]	@ (800faf0 <__malloc_lock+0x8>)
 800faea:	f7ff beda 	b.w	800f8a2 <__retarget_lock_acquire_recursive>
 800faee:	bf00      	nop
 800faf0:	20008a0c 	.word	0x20008a0c

0800faf4 <__malloc_unlock>:
 800faf4:	4801      	ldr	r0, [pc, #4]	@ (800fafc <__malloc_unlock+0x8>)
 800faf6:	f7ff bed5 	b.w	800f8a4 <__retarget_lock_release_recursive>
 800fafa:	bf00      	nop
 800fafc:	20008a0c 	.word	0x20008a0c

0800fb00 <__sfputc_r>:
 800fb00:	6893      	ldr	r3, [r2, #8]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	b410      	push	{r4}
 800fb08:	6093      	str	r3, [r2, #8]
 800fb0a:	da08      	bge.n	800fb1e <__sfputc_r+0x1e>
 800fb0c:	6994      	ldr	r4, [r2, #24]
 800fb0e:	42a3      	cmp	r3, r4
 800fb10:	db01      	blt.n	800fb16 <__sfputc_r+0x16>
 800fb12:	290a      	cmp	r1, #10
 800fb14:	d103      	bne.n	800fb1e <__sfputc_r+0x1e>
 800fb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb1a:	f000 bb7f 	b.w	801021c <__swbuf_r>
 800fb1e:	6813      	ldr	r3, [r2, #0]
 800fb20:	1c58      	adds	r0, r3, #1
 800fb22:	6010      	str	r0, [r2, #0]
 800fb24:	7019      	strb	r1, [r3, #0]
 800fb26:	4608      	mov	r0, r1
 800fb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <__sfputs_r>:
 800fb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb30:	4606      	mov	r6, r0
 800fb32:	460f      	mov	r7, r1
 800fb34:	4614      	mov	r4, r2
 800fb36:	18d5      	adds	r5, r2, r3
 800fb38:	42ac      	cmp	r4, r5
 800fb3a:	d101      	bne.n	800fb40 <__sfputs_r+0x12>
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	e007      	b.n	800fb50 <__sfputs_r+0x22>
 800fb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb44:	463a      	mov	r2, r7
 800fb46:	4630      	mov	r0, r6
 800fb48:	f7ff ffda 	bl	800fb00 <__sfputc_r>
 800fb4c:	1c43      	adds	r3, r0, #1
 800fb4e:	d1f3      	bne.n	800fb38 <__sfputs_r+0xa>
 800fb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb54 <_vfiprintf_r>:
 800fb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb58:	460d      	mov	r5, r1
 800fb5a:	b09d      	sub	sp, #116	@ 0x74
 800fb5c:	4614      	mov	r4, r2
 800fb5e:	4698      	mov	r8, r3
 800fb60:	4606      	mov	r6, r0
 800fb62:	b118      	cbz	r0, 800fb6c <_vfiprintf_r+0x18>
 800fb64:	6a03      	ldr	r3, [r0, #32]
 800fb66:	b90b      	cbnz	r3, 800fb6c <_vfiprintf_r+0x18>
 800fb68:	f7ff fd8c 	bl	800f684 <__sinit>
 800fb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb6e:	07d9      	lsls	r1, r3, #31
 800fb70:	d405      	bmi.n	800fb7e <_vfiprintf_r+0x2a>
 800fb72:	89ab      	ldrh	r3, [r5, #12]
 800fb74:	059a      	lsls	r2, r3, #22
 800fb76:	d402      	bmi.n	800fb7e <_vfiprintf_r+0x2a>
 800fb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb7a:	f7ff fe92 	bl	800f8a2 <__retarget_lock_acquire_recursive>
 800fb7e:	89ab      	ldrh	r3, [r5, #12]
 800fb80:	071b      	lsls	r3, r3, #28
 800fb82:	d501      	bpl.n	800fb88 <_vfiprintf_r+0x34>
 800fb84:	692b      	ldr	r3, [r5, #16]
 800fb86:	b99b      	cbnz	r3, 800fbb0 <_vfiprintf_r+0x5c>
 800fb88:	4629      	mov	r1, r5
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f000 fb84 	bl	8010298 <__swsetup_r>
 800fb90:	b170      	cbz	r0, 800fbb0 <_vfiprintf_r+0x5c>
 800fb92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb94:	07dc      	lsls	r4, r3, #31
 800fb96:	d504      	bpl.n	800fba2 <_vfiprintf_r+0x4e>
 800fb98:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9c:	b01d      	add	sp, #116	@ 0x74
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	89ab      	ldrh	r3, [r5, #12]
 800fba4:	0598      	lsls	r0, r3, #22
 800fba6:	d4f7      	bmi.n	800fb98 <_vfiprintf_r+0x44>
 800fba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbaa:	f7ff fe7b 	bl	800f8a4 <__retarget_lock_release_recursive>
 800fbae:	e7f3      	b.n	800fb98 <_vfiprintf_r+0x44>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbb4:	2320      	movs	r3, #32
 800fbb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fbba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbbe:	2330      	movs	r3, #48	@ 0x30
 800fbc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fd70 <_vfiprintf_r+0x21c>
 800fbc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fbc8:	f04f 0901 	mov.w	r9, #1
 800fbcc:	4623      	mov	r3, r4
 800fbce:	469a      	mov	sl, r3
 800fbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbd4:	b10a      	cbz	r2, 800fbda <_vfiprintf_r+0x86>
 800fbd6:	2a25      	cmp	r2, #37	@ 0x25
 800fbd8:	d1f9      	bne.n	800fbce <_vfiprintf_r+0x7a>
 800fbda:	ebba 0b04 	subs.w	fp, sl, r4
 800fbde:	d00b      	beq.n	800fbf8 <_vfiprintf_r+0xa4>
 800fbe0:	465b      	mov	r3, fp
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f7ff ffa1 	bl	800fb2e <__sfputs_r>
 800fbec:	3001      	adds	r0, #1
 800fbee:	f000 80a7 	beq.w	800fd40 <_vfiprintf_r+0x1ec>
 800fbf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbf4:	445a      	add	r2, fp
 800fbf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 809f 	beq.w	800fd40 <_vfiprintf_r+0x1ec>
 800fc02:	2300      	movs	r3, #0
 800fc04:	f04f 32ff 	mov.w	r2, #4294967295
 800fc08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc0c:	f10a 0a01 	add.w	sl, sl, #1
 800fc10:	9304      	str	r3, [sp, #16]
 800fc12:	9307      	str	r3, [sp, #28]
 800fc14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc18:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc1a:	4654      	mov	r4, sl
 800fc1c:	2205      	movs	r2, #5
 800fc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc22:	4853      	ldr	r0, [pc, #332]	@ (800fd70 <_vfiprintf_r+0x21c>)
 800fc24:	f7f0 fae4 	bl	80001f0 <memchr>
 800fc28:	9a04      	ldr	r2, [sp, #16]
 800fc2a:	b9d8      	cbnz	r0, 800fc64 <_vfiprintf_r+0x110>
 800fc2c:	06d1      	lsls	r1, r2, #27
 800fc2e:	bf44      	itt	mi
 800fc30:	2320      	movmi	r3, #32
 800fc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc36:	0713      	lsls	r3, r2, #28
 800fc38:	bf44      	itt	mi
 800fc3a:	232b      	movmi	r3, #43	@ 0x2b
 800fc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc40:	f89a 3000 	ldrb.w	r3, [sl]
 800fc44:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc46:	d015      	beq.n	800fc74 <_vfiprintf_r+0x120>
 800fc48:	9a07      	ldr	r2, [sp, #28]
 800fc4a:	4654      	mov	r4, sl
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	f04f 0c0a 	mov.w	ip, #10
 800fc52:	4621      	mov	r1, r4
 800fc54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc58:	3b30      	subs	r3, #48	@ 0x30
 800fc5a:	2b09      	cmp	r3, #9
 800fc5c:	d94b      	bls.n	800fcf6 <_vfiprintf_r+0x1a2>
 800fc5e:	b1b0      	cbz	r0, 800fc8e <_vfiprintf_r+0x13a>
 800fc60:	9207      	str	r2, [sp, #28]
 800fc62:	e014      	b.n	800fc8e <_vfiprintf_r+0x13a>
 800fc64:	eba0 0308 	sub.w	r3, r0, r8
 800fc68:	fa09 f303 	lsl.w	r3, r9, r3
 800fc6c:	4313      	orrs	r3, r2
 800fc6e:	9304      	str	r3, [sp, #16]
 800fc70:	46a2      	mov	sl, r4
 800fc72:	e7d2      	b.n	800fc1a <_vfiprintf_r+0xc6>
 800fc74:	9b03      	ldr	r3, [sp, #12]
 800fc76:	1d19      	adds	r1, r3, #4
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	9103      	str	r1, [sp, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	bfbb      	ittet	lt
 800fc80:	425b      	neglt	r3, r3
 800fc82:	f042 0202 	orrlt.w	r2, r2, #2
 800fc86:	9307      	strge	r3, [sp, #28]
 800fc88:	9307      	strlt	r3, [sp, #28]
 800fc8a:	bfb8      	it	lt
 800fc8c:	9204      	strlt	r2, [sp, #16]
 800fc8e:	7823      	ldrb	r3, [r4, #0]
 800fc90:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc92:	d10a      	bne.n	800fcaa <_vfiprintf_r+0x156>
 800fc94:	7863      	ldrb	r3, [r4, #1]
 800fc96:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc98:	d132      	bne.n	800fd00 <_vfiprintf_r+0x1ac>
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	1d1a      	adds	r2, r3, #4
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	9203      	str	r2, [sp, #12]
 800fca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fca6:	3402      	adds	r4, #2
 800fca8:	9305      	str	r3, [sp, #20]
 800fcaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fd80 <_vfiprintf_r+0x22c>
 800fcae:	7821      	ldrb	r1, [r4, #0]
 800fcb0:	2203      	movs	r2, #3
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	f7f0 fa9c 	bl	80001f0 <memchr>
 800fcb8:	b138      	cbz	r0, 800fcca <_vfiprintf_r+0x176>
 800fcba:	9b04      	ldr	r3, [sp, #16]
 800fcbc:	eba0 000a 	sub.w	r0, r0, sl
 800fcc0:	2240      	movs	r2, #64	@ 0x40
 800fcc2:	4082      	lsls	r2, r0
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	3401      	adds	r4, #1
 800fcc8:	9304      	str	r3, [sp, #16]
 800fcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcce:	4829      	ldr	r0, [pc, #164]	@ (800fd74 <_vfiprintf_r+0x220>)
 800fcd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fcd4:	2206      	movs	r2, #6
 800fcd6:	f7f0 fa8b 	bl	80001f0 <memchr>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d03f      	beq.n	800fd5e <_vfiprintf_r+0x20a>
 800fcde:	4b26      	ldr	r3, [pc, #152]	@ (800fd78 <_vfiprintf_r+0x224>)
 800fce0:	bb1b      	cbnz	r3, 800fd2a <_vfiprintf_r+0x1d6>
 800fce2:	9b03      	ldr	r3, [sp, #12]
 800fce4:	3307      	adds	r3, #7
 800fce6:	f023 0307 	bic.w	r3, r3, #7
 800fcea:	3308      	adds	r3, #8
 800fcec:	9303      	str	r3, [sp, #12]
 800fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf0:	443b      	add	r3, r7
 800fcf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcf4:	e76a      	b.n	800fbcc <_vfiprintf_r+0x78>
 800fcf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	e7a8      	b.n	800fc52 <_vfiprintf_r+0xfe>
 800fd00:	2300      	movs	r3, #0
 800fd02:	3401      	adds	r4, #1
 800fd04:	9305      	str	r3, [sp, #20]
 800fd06:	4619      	mov	r1, r3
 800fd08:	f04f 0c0a 	mov.w	ip, #10
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd12:	3a30      	subs	r2, #48	@ 0x30
 800fd14:	2a09      	cmp	r2, #9
 800fd16:	d903      	bls.n	800fd20 <_vfiprintf_r+0x1cc>
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d0c6      	beq.n	800fcaa <_vfiprintf_r+0x156>
 800fd1c:	9105      	str	r1, [sp, #20]
 800fd1e:	e7c4      	b.n	800fcaa <_vfiprintf_r+0x156>
 800fd20:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd24:	4604      	mov	r4, r0
 800fd26:	2301      	movs	r3, #1
 800fd28:	e7f0      	b.n	800fd0c <_vfiprintf_r+0x1b8>
 800fd2a:	ab03      	add	r3, sp, #12
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	462a      	mov	r2, r5
 800fd30:	4b12      	ldr	r3, [pc, #72]	@ (800fd7c <_vfiprintf_r+0x228>)
 800fd32:	a904      	add	r1, sp, #16
 800fd34:	4630      	mov	r0, r6
 800fd36:	f3af 8000 	nop.w
 800fd3a:	4607      	mov	r7, r0
 800fd3c:	1c78      	adds	r0, r7, #1
 800fd3e:	d1d6      	bne.n	800fcee <_vfiprintf_r+0x19a>
 800fd40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd42:	07d9      	lsls	r1, r3, #31
 800fd44:	d405      	bmi.n	800fd52 <_vfiprintf_r+0x1fe>
 800fd46:	89ab      	ldrh	r3, [r5, #12]
 800fd48:	059a      	lsls	r2, r3, #22
 800fd4a:	d402      	bmi.n	800fd52 <_vfiprintf_r+0x1fe>
 800fd4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd4e:	f7ff fda9 	bl	800f8a4 <__retarget_lock_release_recursive>
 800fd52:	89ab      	ldrh	r3, [r5, #12]
 800fd54:	065b      	lsls	r3, r3, #25
 800fd56:	f53f af1f 	bmi.w	800fb98 <_vfiprintf_r+0x44>
 800fd5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd5c:	e71e      	b.n	800fb9c <_vfiprintf_r+0x48>
 800fd5e:	ab03      	add	r3, sp, #12
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	462a      	mov	r2, r5
 800fd64:	4b05      	ldr	r3, [pc, #20]	@ (800fd7c <_vfiprintf_r+0x228>)
 800fd66:	a904      	add	r1, sp, #16
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f000 f879 	bl	800fe60 <_printf_i>
 800fd6e:	e7e4      	b.n	800fd3a <_vfiprintf_r+0x1e6>
 800fd70:	08013101 	.word	0x08013101
 800fd74:	0801310b 	.word	0x0801310b
 800fd78:	00000000 	.word	0x00000000
 800fd7c:	0800fb2f 	.word	0x0800fb2f
 800fd80:	08013107 	.word	0x08013107

0800fd84 <_printf_common>:
 800fd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd88:	4616      	mov	r6, r2
 800fd8a:	4698      	mov	r8, r3
 800fd8c:	688a      	ldr	r2, [r1, #8]
 800fd8e:	690b      	ldr	r3, [r1, #16]
 800fd90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd94:	4293      	cmp	r3, r2
 800fd96:	bfb8      	it	lt
 800fd98:	4613      	movlt	r3, r2
 800fd9a:	6033      	str	r3, [r6, #0]
 800fd9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fda0:	4607      	mov	r7, r0
 800fda2:	460c      	mov	r4, r1
 800fda4:	b10a      	cbz	r2, 800fdaa <_printf_common+0x26>
 800fda6:	3301      	adds	r3, #1
 800fda8:	6033      	str	r3, [r6, #0]
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	0699      	lsls	r1, r3, #26
 800fdae:	bf42      	ittt	mi
 800fdb0:	6833      	ldrmi	r3, [r6, #0]
 800fdb2:	3302      	addmi	r3, #2
 800fdb4:	6033      	strmi	r3, [r6, #0]
 800fdb6:	6825      	ldr	r5, [r4, #0]
 800fdb8:	f015 0506 	ands.w	r5, r5, #6
 800fdbc:	d106      	bne.n	800fdcc <_printf_common+0x48>
 800fdbe:	f104 0a19 	add.w	sl, r4, #25
 800fdc2:	68e3      	ldr	r3, [r4, #12]
 800fdc4:	6832      	ldr	r2, [r6, #0]
 800fdc6:	1a9b      	subs	r3, r3, r2
 800fdc8:	42ab      	cmp	r3, r5
 800fdca:	dc26      	bgt.n	800fe1a <_printf_common+0x96>
 800fdcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fdd0:	6822      	ldr	r2, [r4, #0]
 800fdd2:	3b00      	subs	r3, #0
 800fdd4:	bf18      	it	ne
 800fdd6:	2301      	movne	r3, #1
 800fdd8:	0692      	lsls	r2, r2, #26
 800fdda:	d42b      	bmi.n	800fe34 <_printf_common+0xb0>
 800fddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fde0:	4641      	mov	r1, r8
 800fde2:	4638      	mov	r0, r7
 800fde4:	47c8      	blx	r9
 800fde6:	3001      	adds	r0, #1
 800fde8:	d01e      	beq.n	800fe28 <_printf_common+0xa4>
 800fdea:	6823      	ldr	r3, [r4, #0]
 800fdec:	6922      	ldr	r2, [r4, #16]
 800fdee:	f003 0306 	and.w	r3, r3, #6
 800fdf2:	2b04      	cmp	r3, #4
 800fdf4:	bf02      	ittt	eq
 800fdf6:	68e5      	ldreq	r5, [r4, #12]
 800fdf8:	6833      	ldreq	r3, [r6, #0]
 800fdfa:	1aed      	subeq	r5, r5, r3
 800fdfc:	68a3      	ldr	r3, [r4, #8]
 800fdfe:	bf0c      	ite	eq
 800fe00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe04:	2500      	movne	r5, #0
 800fe06:	4293      	cmp	r3, r2
 800fe08:	bfc4      	itt	gt
 800fe0a:	1a9b      	subgt	r3, r3, r2
 800fe0c:	18ed      	addgt	r5, r5, r3
 800fe0e:	2600      	movs	r6, #0
 800fe10:	341a      	adds	r4, #26
 800fe12:	42b5      	cmp	r5, r6
 800fe14:	d11a      	bne.n	800fe4c <_printf_common+0xc8>
 800fe16:	2000      	movs	r0, #0
 800fe18:	e008      	b.n	800fe2c <_printf_common+0xa8>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4652      	mov	r2, sl
 800fe1e:	4641      	mov	r1, r8
 800fe20:	4638      	mov	r0, r7
 800fe22:	47c8      	blx	r9
 800fe24:	3001      	adds	r0, #1
 800fe26:	d103      	bne.n	800fe30 <_printf_common+0xac>
 800fe28:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe30:	3501      	adds	r5, #1
 800fe32:	e7c6      	b.n	800fdc2 <_printf_common+0x3e>
 800fe34:	18e1      	adds	r1, r4, r3
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	2030      	movs	r0, #48	@ 0x30
 800fe3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fe3e:	4422      	add	r2, r4
 800fe40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fe44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fe48:	3302      	adds	r3, #2
 800fe4a:	e7c7      	b.n	800fddc <_printf_common+0x58>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	4622      	mov	r2, r4
 800fe50:	4641      	mov	r1, r8
 800fe52:	4638      	mov	r0, r7
 800fe54:	47c8      	blx	r9
 800fe56:	3001      	adds	r0, #1
 800fe58:	d0e6      	beq.n	800fe28 <_printf_common+0xa4>
 800fe5a:	3601      	adds	r6, #1
 800fe5c:	e7d9      	b.n	800fe12 <_printf_common+0x8e>
	...

0800fe60 <_printf_i>:
 800fe60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe64:	7e0f      	ldrb	r7, [r1, #24]
 800fe66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe68:	2f78      	cmp	r7, #120	@ 0x78
 800fe6a:	4691      	mov	r9, r2
 800fe6c:	4680      	mov	r8, r0
 800fe6e:	460c      	mov	r4, r1
 800fe70:	469a      	mov	sl, r3
 800fe72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe76:	d807      	bhi.n	800fe88 <_printf_i+0x28>
 800fe78:	2f62      	cmp	r7, #98	@ 0x62
 800fe7a:	d80a      	bhi.n	800fe92 <_printf_i+0x32>
 800fe7c:	2f00      	cmp	r7, #0
 800fe7e:	f000 80d2 	beq.w	8010026 <_printf_i+0x1c6>
 800fe82:	2f58      	cmp	r7, #88	@ 0x58
 800fe84:	f000 80b9 	beq.w	800fffa <_printf_i+0x19a>
 800fe88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe90:	e03a      	b.n	800ff08 <_printf_i+0xa8>
 800fe92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe96:	2b15      	cmp	r3, #21
 800fe98:	d8f6      	bhi.n	800fe88 <_printf_i+0x28>
 800fe9a:	a101      	add	r1, pc, #4	@ (adr r1, 800fea0 <_printf_i+0x40>)
 800fe9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fea0:	0800fef9 	.word	0x0800fef9
 800fea4:	0800ff0d 	.word	0x0800ff0d
 800fea8:	0800fe89 	.word	0x0800fe89
 800feac:	0800fe89 	.word	0x0800fe89
 800feb0:	0800fe89 	.word	0x0800fe89
 800feb4:	0800fe89 	.word	0x0800fe89
 800feb8:	0800ff0d 	.word	0x0800ff0d
 800febc:	0800fe89 	.word	0x0800fe89
 800fec0:	0800fe89 	.word	0x0800fe89
 800fec4:	0800fe89 	.word	0x0800fe89
 800fec8:	0800fe89 	.word	0x0800fe89
 800fecc:	0801000d 	.word	0x0801000d
 800fed0:	0800ff37 	.word	0x0800ff37
 800fed4:	0800ffc7 	.word	0x0800ffc7
 800fed8:	0800fe89 	.word	0x0800fe89
 800fedc:	0800fe89 	.word	0x0800fe89
 800fee0:	0801002f 	.word	0x0801002f
 800fee4:	0800fe89 	.word	0x0800fe89
 800fee8:	0800ff37 	.word	0x0800ff37
 800feec:	0800fe89 	.word	0x0800fe89
 800fef0:	0800fe89 	.word	0x0800fe89
 800fef4:	0800ffcf 	.word	0x0800ffcf
 800fef8:	6833      	ldr	r3, [r6, #0]
 800fefa:	1d1a      	adds	r2, r3, #4
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	6032      	str	r2, [r6, #0]
 800ff00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e09d      	b.n	8010048 <_printf_i+0x1e8>
 800ff0c:	6833      	ldr	r3, [r6, #0]
 800ff0e:	6820      	ldr	r0, [r4, #0]
 800ff10:	1d19      	adds	r1, r3, #4
 800ff12:	6031      	str	r1, [r6, #0]
 800ff14:	0606      	lsls	r6, r0, #24
 800ff16:	d501      	bpl.n	800ff1c <_printf_i+0xbc>
 800ff18:	681d      	ldr	r5, [r3, #0]
 800ff1a:	e003      	b.n	800ff24 <_printf_i+0xc4>
 800ff1c:	0645      	lsls	r5, r0, #25
 800ff1e:	d5fb      	bpl.n	800ff18 <_printf_i+0xb8>
 800ff20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ff24:	2d00      	cmp	r5, #0
 800ff26:	da03      	bge.n	800ff30 <_printf_i+0xd0>
 800ff28:	232d      	movs	r3, #45	@ 0x2d
 800ff2a:	426d      	negs	r5, r5
 800ff2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff30:	4859      	ldr	r0, [pc, #356]	@ (8010098 <_printf_i+0x238>)
 800ff32:	230a      	movs	r3, #10
 800ff34:	e011      	b.n	800ff5a <_printf_i+0xfa>
 800ff36:	6821      	ldr	r1, [r4, #0]
 800ff38:	6833      	ldr	r3, [r6, #0]
 800ff3a:	0608      	lsls	r0, r1, #24
 800ff3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ff40:	d402      	bmi.n	800ff48 <_printf_i+0xe8>
 800ff42:	0649      	lsls	r1, r1, #25
 800ff44:	bf48      	it	mi
 800ff46:	b2ad      	uxthmi	r5, r5
 800ff48:	2f6f      	cmp	r7, #111	@ 0x6f
 800ff4a:	4853      	ldr	r0, [pc, #332]	@ (8010098 <_printf_i+0x238>)
 800ff4c:	6033      	str	r3, [r6, #0]
 800ff4e:	bf14      	ite	ne
 800ff50:	230a      	movne	r3, #10
 800ff52:	2308      	moveq	r3, #8
 800ff54:	2100      	movs	r1, #0
 800ff56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ff5a:	6866      	ldr	r6, [r4, #4]
 800ff5c:	60a6      	str	r6, [r4, #8]
 800ff5e:	2e00      	cmp	r6, #0
 800ff60:	bfa2      	ittt	ge
 800ff62:	6821      	ldrge	r1, [r4, #0]
 800ff64:	f021 0104 	bicge.w	r1, r1, #4
 800ff68:	6021      	strge	r1, [r4, #0]
 800ff6a:	b90d      	cbnz	r5, 800ff70 <_printf_i+0x110>
 800ff6c:	2e00      	cmp	r6, #0
 800ff6e:	d04b      	beq.n	8010008 <_printf_i+0x1a8>
 800ff70:	4616      	mov	r6, r2
 800ff72:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff76:	fb03 5711 	mls	r7, r3, r1, r5
 800ff7a:	5dc7      	ldrb	r7, [r0, r7]
 800ff7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff80:	462f      	mov	r7, r5
 800ff82:	42bb      	cmp	r3, r7
 800ff84:	460d      	mov	r5, r1
 800ff86:	d9f4      	bls.n	800ff72 <_printf_i+0x112>
 800ff88:	2b08      	cmp	r3, #8
 800ff8a:	d10b      	bne.n	800ffa4 <_printf_i+0x144>
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	07df      	lsls	r7, r3, #31
 800ff90:	d508      	bpl.n	800ffa4 <_printf_i+0x144>
 800ff92:	6923      	ldr	r3, [r4, #16]
 800ff94:	6861      	ldr	r1, [r4, #4]
 800ff96:	4299      	cmp	r1, r3
 800ff98:	bfde      	ittt	le
 800ff9a:	2330      	movle	r3, #48	@ 0x30
 800ff9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ffa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ffa4:	1b92      	subs	r2, r2, r6
 800ffa6:	6122      	str	r2, [r4, #16]
 800ffa8:	f8cd a000 	str.w	sl, [sp]
 800ffac:	464b      	mov	r3, r9
 800ffae:	aa03      	add	r2, sp, #12
 800ffb0:	4621      	mov	r1, r4
 800ffb2:	4640      	mov	r0, r8
 800ffb4:	f7ff fee6 	bl	800fd84 <_printf_common>
 800ffb8:	3001      	adds	r0, #1
 800ffba:	d14a      	bne.n	8010052 <_printf_i+0x1f2>
 800ffbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc0:	b004      	add	sp, #16
 800ffc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc6:	6823      	ldr	r3, [r4, #0]
 800ffc8:	f043 0320 	orr.w	r3, r3, #32
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	4833      	ldr	r0, [pc, #204]	@ (801009c <_printf_i+0x23c>)
 800ffd0:	2778      	movs	r7, #120	@ 0x78
 800ffd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ffd6:	6823      	ldr	r3, [r4, #0]
 800ffd8:	6831      	ldr	r1, [r6, #0]
 800ffda:	061f      	lsls	r7, r3, #24
 800ffdc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ffe0:	d402      	bmi.n	800ffe8 <_printf_i+0x188>
 800ffe2:	065f      	lsls	r7, r3, #25
 800ffe4:	bf48      	it	mi
 800ffe6:	b2ad      	uxthmi	r5, r5
 800ffe8:	6031      	str	r1, [r6, #0]
 800ffea:	07d9      	lsls	r1, r3, #31
 800ffec:	bf44      	itt	mi
 800ffee:	f043 0320 	orrmi.w	r3, r3, #32
 800fff2:	6023      	strmi	r3, [r4, #0]
 800fff4:	b11d      	cbz	r5, 800fffe <_printf_i+0x19e>
 800fff6:	2310      	movs	r3, #16
 800fff8:	e7ac      	b.n	800ff54 <_printf_i+0xf4>
 800fffa:	4827      	ldr	r0, [pc, #156]	@ (8010098 <_printf_i+0x238>)
 800fffc:	e7e9      	b.n	800ffd2 <_printf_i+0x172>
 800fffe:	6823      	ldr	r3, [r4, #0]
 8010000:	f023 0320 	bic.w	r3, r3, #32
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	e7f6      	b.n	800fff6 <_printf_i+0x196>
 8010008:	4616      	mov	r6, r2
 801000a:	e7bd      	b.n	800ff88 <_printf_i+0x128>
 801000c:	6833      	ldr	r3, [r6, #0]
 801000e:	6825      	ldr	r5, [r4, #0]
 8010010:	6961      	ldr	r1, [r4, #20]
 8010012:	1d18      	adds	r0, r3, #4
 8010014:	6030      	str	r0, [r6, #0]
 8010016:	062e      	lsls	r6, r5, #24
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	d501      	bpl.n	8010020 <_printf_i+0x1c0>
 801001c:	6019      	str	r1, [r3, #0]
 801001e:	e002      	b.n	8010026 <_printf_i+0x1c6>
 8010020:	0668      	lsls	r0, r5, #25
 8010022:	d5fb      	bpl.n	801001c <_printf_i+0x1bc>
 8010024:	8019      	strh	r1, [r3, #0]
 8010026:	2300      	movs	r3, #0
 8010028:	6123      	str	r3, [r4, #16]
 801002a:	4616      	mov	r6, r2
 801002c:	e7bc      	b.n	800ffa8 <_printf_i+0x148>
 801002e:	6833      	ldr	r3, [r6, #0]
 8010030:	1d1a      	adds	r2, r3, #4
 8010032:	6032      	str	r2, [r6, #0]
 8010034:	681e      	ldr	r6, [r3, #0]
 8010036:	6862      	ldr	r2, [r4, #4]
 8010038:	2100      	movs	r1, #0
 801003a:	4630      	mov	r0, r6
 801003c:	f7f0 f8d8 	bl	80001f0 <memchr>
 8010040:	b108      	cbz	r0, 8010046 <_printf_i+0x1e6>
 8010042:	1b80      	subs	r0, r0, r6
 8010044:	6060      	str	r0, [r4, #4]
 8010046:	6863      	ldr	r3, [r4, #4]
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	2300      	movs	r3, #0
 801004c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010050:	e7aa      	b.n	800ffa8 <_printf_i+0x148>
 8010052:	6923      	ldr	r3, [r4, #16]
 8010054:	4632      	mov	r2, r6
 8010056:	4649      	mov	r1, r9
 8010058:	4640      	mov	r0, r8
 801005a:	47d0      	blx	sl
 801005c:	3001      	adds	r0, #1
 801005e:	d0ad      	beq.n	800ffbc <_printf_i+0x15c>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	079b      	lsls	r3, r3, #30
 8010064:	d413      	bmi.n	801008e <_printf_i+0x22e>
 8010066:	68e0      	ldr	r0, [r4, #12]
 8010068:	9b03      	ldr	r3, [sp, #12]
 801006a:	4298      	cmp	r0, r3
 801006c:	bfb8      	it	lt
 801006e:	4618      	movlt	r0, r3
 8010070:	e7a6      	b.n	800ffc0 <_printf_i+0x160>
 8010072:	2301      	movs	r3, #1
 8010074:	4632      	mov	r2, r6
 8010076:	4649      	mov	r1, r9
 8010078:	4640      	mov	r0, r8
 801007a:	47d0      	blx	sl
 801007c:	3001      	adds	r0, #1
 801007e:	d09d      	beq.n	800ffbc <_printf_i+0x15c>
 8010080:	3501      	adds	r5, #1
 8010082:	68e3      	ldr	r3, [r4, #12]
 8010084:	9903      	ldr	r1, [sp, #12]
 8010086:	1a5b      	subs	r3, r3, r1
 8010088:	42ab      	cmp	r3, r5
 801008a:	dcf2      	bgt.n	8010072 <_printf_i+0x212>
 801008c:	e7eb      	b.n	8010066 <_printf_i+0x206>
 801008e:	2500      	movs	r5, #0
 8010090:	f104 0619 	add.w	r6, r4, #25
 8010094:	e7f5      	b.n	8010082 <_printf_i+0x222>
 8010096:	bf00      	nop
 8010098:	08013112 	.word	0x08013112
 801009c:	08013123 	.word	0x08013123

080100a0 <__sflush_r>:
 80100a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a8:	0716      	lsls	r6, r2, #28
 80100aa:	4605      	mov	r5, r0
 80100ac:	460c      	mov	r4, r1
 80100ae:	d454      	bmi.n	801015a <__sflush_r+0xba>
 80100b0:	684b      	ldr	r3, [r1, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	dc02      	bgt.n	80100bc <__sflush_r+0x1c>
 80100b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	dd48      	ble.n	801014e <__sflush_r+0xae>
 80100bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80100be:	2e00      	cmp	r6, #0
 80100c0:	d045      	beq.n	801014e <__sflush_r+0xae>
 80100c2:	2300      	movs	r3, #0
 80100c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80100c8:	682f      	ldr	r7, [r5, #0]
 80100ca:	6a21      	ldr	r1, [r4, #32]
 80100cc:	602b      	str	r3, [r5, #0]
 80100ce:	d030      	beq.n	8010132 <__sflush_r+0x92>
 80100d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80100d2:	89a3      	ldrh	r3, [r4, #12]
 80100d4:	0759      	lsls	r1, r3, #29
 80100d6:	d505      	bpl.n	80100e4 <__sflush_r+0x44>
 80100d8:	6863      	ldr	r3, [r4, #4]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80100de:	b10b      	cbz	r3, 80100e4 <__sflush_r+0x44>
 80100e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80100e2:	1ad2      	subs	r2, r2, r3
 80100e4:	2300      	movs	r3, #0
 80100e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80100e8:	6a21      	ldr	r1, [r4, #32]
 80100ea:	4628      	mov	r0, r5
 80100ec:	47b0      	blx	r6
 80100ee:	1c43      	adds	r3, r0, #1
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	d106      	bne.n	8010102 <__sflush_r+0x62>
 80100f4:	6829      	ldr	r1, [r5, #0]
 80100f6:	291d      	cmp	r1, #29
 80100f8:	d82b      	bhi.n	8010152 <__sflush_r+0xb2>
 80100fa:	4a2a      	ldr	r2, [pc, #168]	@ (80101a4 <__sflush_r+0x104>)
 80100fc:	410a      	asrs	r2, r1
 80100fe:	07d6      	lsls	r6, r2, #31
 8010100:	d427      	bmi.n	8010152 <__sflush_r+0xb2>
 8010102:	2200      	movs	r2, #0
 8010104:	6062      	str	r2, [r4, #4]
 8010106:	04d9      	lsls	r1, r3, #19
 8010108:	6922      	ldr	r2, [r4, #16]
 801010a:	6022      	str	r2, [r4, #0]
 801010c:	d504      	bpl.n	8010118 <__sflush_r+0x78>
 801010e:	1c42      	adds	r2, r0, #1
 8010110:	d101      	bne.n	8010116 <__sflush_r+0x76>
 8010112:	682b      	ldr	r3, [r5, #0]
 8010114:	b903      	cbnz	r3, 8010118 <__sflush_r+0x78>
 8010116:	6560      	str	r0, [r4, #84]	@ 0x54
 8010118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801011a:	602f      	str	r7, [r5, #0]
 801011c:	b1b9      	cbz	r1, 801014e <__sflush_r+0xae>
 801011e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010122:	4299      	cmp	r1, r3
 8010124:	d002      	beq.n	801012c <__sflush_r+0x8c>
 8010126:	4628      	mov	r0, r5
 8010128:	f7ff fbea 	bl	800f900 <_free_r>
 801012c:	2300      	movs	r3, #0
 801012e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010130:	e00d      	b.n	801014e <__sflush_r+0xae>
 8010132:	2301      	movs	r3, #1
 8010134:	4628      	mov	r0, r5
 8010136:	47b0      	blx	r6
 8010138:	4602      	mov	r2, r0
 801013a:	1c50      	adds	r0, r2, #1
 801013c:	d1c9      	bne.n	80100d2 <__sflush_r+0x32>
 801013e:	682b      	ldr	r3, [r5, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d0c6      	beq.n	80100d2 <__sflush_r+0x32>
 8010144:	2b1d      	cmp	r3, #29
 8010146:	d001      	beq.n	801014c <__sflush_r+0xac>
 8010148:	2b16      	cmp	r3, #22
 801014a:	d11e      	bne.n	801018a <__sflush_r+0xea>
 801014c:	602f      	str	r7, [r5, #0]
 801014e:	2000      	movs	r0, #0
 8010150:	e022      	b.n	8010198 <__sflush_r+0xf8>
 8010152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010156:	b21b      	sxth	r3, r3
 8010158:	e01b      	b.n	8010192 <__sflush_r+0xf2>
 801015a:	690f      	ldr	r7, [r1, #16]
 801015c:	2f00      	cmp	r7, #0
 801015e:	d0f6      	beq.n	801014e <__sflush_r+0xae>
 8010160:	0793      	lsls	r3, r2, #30
 8010162:	680e      	ldr	r6, [r1, #0]
 8010164:	bf08      	it	eq
 8010166:	694b      	ldreq	r3, [r1, #20]
 8010168:	600f      	str	r7, [r1, #0]
 801016a:	bf18      	it	ne
 801016c:	2300      	movne	r3, #0
 801016e:	eba6 0807 	sub.w	r8, r6, r7
 8010172:	608b      	str	r3, [r1, #8]
 8010174:	f1b8 0f00 	cmp.w	r8, #0
 8010178:	dde9      	ble.n	801014e <__sflush_r+0xae>
 801017a:	6a21      	ldr	r1, [r4, #32]
 801017c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801017e:	4643      	mov	r3, r8
 8010180:	463a      	mov	r2, r7
 8010182:	4628      	mov	r0, r5
 8010184:	47b0      	blx	r6
 8010186:	2800      	cmp	r0, #0
 8010188:	dc08      	bgt.n	801019c <__sflush_r+0xfc>
 801018a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801018e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010192:	81a3      	strh	r3, [r4, #12]
 8010194:	f04f 30ff 	mov.w	r0, #4294967295
 8010198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801019c:	4407      	add	r7, r0
 801019e:	eba8 0800 	sub.w	r8, r8, r0
 80101a2:	e7e7      	b.n	8010174 <__sflush_r+0xd4>
 80101a4:	dfbffffe 	.word	0xdfbffffe

080101a8 <_fflush_r>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	690b      	ldr	r3, [r1, #16]
 80101ac:	4605      	mov	r5, r0
 80101ae:	460c      	mov	r4, r1
 80101b0:	b913      	cbnz	r3, 80101b8 <_fflush_r+0x10>
 80101b2:	2500      	movs	r5, #0
 80101b4:	4628      	mov	r0, r5
 80101b6:	bd38      	pop	{r3, r4, r5, pc}
 80101b8:	b118      	cbz	r0, 80101c2 <_fflush_r+0x1a>
 80101ba:	6a03      	ldr	r3, [r0, #32]
 80101bc:	b90b      	cbnz	r3, 80101c2 <_fflush_r+0x1a>
 80101be:	f7ff fa61 	bl	800f684 <__sinit>
 80101c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d0f3      	beq.n	80101b2 <_fflush_r+0xa>
 80101ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80101cc:	07d0      	lsls	r0, r2, #31
 80101ce:	d404      	bmi.n	80101da <_fflush_r+0x32>
 80101d0:	0599      	lsls	r1, r3, #22
 80101d2:	d402      	bmi.n	80101da <_fflush_r+0x32>
 80101d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101d6:	f7ff fb64 	bl	800f8a2 <__retarget_lock_acquire_recursive>
 80101da:	4628      	mov	r0, r5
 80101dc:	4621      	mov	r1, r4
 80101de:	f7ff ff5f 	bl	80100a0 <__sflush_r>
 80101e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101e4:	07da      	lsls	r2, r3, #31
 80101e6:	4605      	mov	r5, r0
 80101e8:	d4e4      	bmi.n	80101b4 <_fflush_r+0xc>
 80101ea:	89a3      	ldrh	r3, [r4, #12]
 80101ec:	059b      	lsls	r3, r3, #22
 80101ee:	d4e1      	bmi.n	80101b4 <_fflush_r+0xc>
 80101f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101f2:	f7ff fb57 	bl	800f8a4 <__retarget_lock_release_recursive>
 80101f6:	e7dd      	b.n	80101b4 <_fflush_r+0xc>

080101f8 <fiprintf>:
 80101f8:	b40e      	push	{r1, r2, r3}
 80101fa:	b503      	push	{r0, r1, lr}
 80101fc:	4601      	mov	r1, r0
 80101fe:	ab03      	add	r3, sp, #12
 8010200:	4805      	ldr	r0, [pc, #20]	@ (8010218 <fiprintf+0x20>)
 8010202:	f853 2b04 	ldr.w	r2, [r3], #4
 8010206:	6800      	ldr	r0, [r0, #0]
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	f7ff fca3 	bl	800fb54 <_vfiprintf_r>
 801020e:	b002      	add	sp, #8
 8010210:	f85d eb04 	ldr.w	lr, [sp], #4
 8010214:	b003      	add	sp, #12
 8010216:	4770      	bx	lr
 8010218:	20000038 	.word	0x20000038

0801021c <__swbuf_r>:
 801021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801021e:	460e      	mov	r6, r1
 8010220:	4614      	mov	r4, r2
 8010222:	4605      	mov	r5, r0
 8010224:	b118      	cbz	r0, 801022e <__swbuf_r+0x12>
 8010226:	6a03      	ldr	r3, [r0, #32]
 8010228:	b90b      	cbnz	r3, 801022e <__swbuf_r+0x12>
 801022a:	f7ff fa2b 	bl	800f684 <__sinit>
 801022e:	69a3      	ldr	r3, [r4, #24]
 8010230:	60a3      	str	r3, [r4, #8]
 8010232:	89a3      	ldrh	r3, [r4, #12]
 8010234:	071a      	lsls	r2, r3, #28
 8010236:	d501      	bpl.n	801023c <__swbuf_r+0x20>
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	b943      	cbnz	r3, 801024e <__swbuf_r+0x32>
 801023c:	4621      	mov	r1, r4
 801023e:	4628      	mov	r0, r5
 8010240:	f000 f82a 	bl	8010298 <__swsetup_r>
 8010244:	b118      	cbz	r0, 801024e <__swbuf_r+0x32>
 8010246:	f04f 37ff 	mov.w	r7, #4294967295
 801024a:	4638      	mov	r0, r7
 801024c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	6922      	ldr	r2, [r4, #16]
 8010252:	1a98      	subs	r0, r3, r2
 8010254:	6963      	ldr	r3, [r4, #20]
 8010256:	b2f6      	uxtb	r6, r6
 8010258:	4283      	cmp	r3, r0
 801025a:	4637      	mov	r7, r6
 801025c:	dc05      	bgt.n	801026a <__swbuf_r+0x4e>
 801025e:	4621      	mov	r1, r4
 8010260:	4628      	mov	r0, r5
 8010262:	f7ff ffa1 	bl	80101a8 <_fflush_r>
 8010266:	2800      	cmp	r0, #0
 8010268:	d1ed      	bne.n	8010246 <__swbuf_r+0x2a>
 801026a:	68a3      	ldr	r3, [r4, #8]
 801026c:	3b01      	subs	r3, #1
 801026e:	60a3      	str	r3, [r4, #8]
 8010270:	6823      	ldr	r3, [r4, #0]
 8010272:	1c5a      	adds	r2, r3, #1
 8010274:	6022      	str	r2, [r4, #0]
 8010276:	701e      	strb	r6, [r3, #0]
 8010278:	6962      	ldr	r2, [r4, #20]
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	429a      	cmp	r2, r3
 801027e:	d004      	beq.n	801028a <__swbuf_r+0x6e>
 8010280:	89a3      	ldrh	r3, [r4, #12]
 8010282:	07db      	lsls	r3, r3, #31
 8010284:	d5e1      	bpl.n	801024a <__swbuf_r+0x2e>
 8010286:	2e0a      	cmp	r6, #10
 8010288:	d1df      	bne.n	801024a <__swbuf_r+0x2e>
 801028a:	4621      	mov	r1, r4
 801028c:	4628      	mov	r0, r5
 801028e:	f7ff ff8b 	bl	80101a8 <_fflush_r>
 8010292:	2800      	cmp	r0, #0
 8010294:	d0d9      	beq.n	801024a <__swbuf_r+0x2e>
 8010296:	e7d6      	b.n	8010246 <__swbuf_r+0x2a>

08010298 <__swsetup_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4b29      	ldr	r3, [pc, #164]	@ (8010340 <__swsetup_r+0xa8>)
 801029c:	4605      	mov	r5, r0
 801029e:	6818      	ldr	r0, [r3, #0]
 80102a0:	460c      	mov	r4, r1
 80102a2:	b118      	cbz	r0, 80102ac <__swsetup_r+0x14>
 80102a4:	6a03      	ldr	r3, [r0, #32]
 80102a6:	b90b      	cbnz	r3, 80102ac <__swsetup_r+0x14>
 80102a8:	f7ff f9ec 	bl	800f684 <__sinit>
 80102ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102b0:	0719      	lsls	r1, r3, #28
 80102b2:	d422      	bmi.n	80102fa <__swsetup_r+0x62>
 80102b4:	06da      	lsls	r2, r3, #27
 80102b6:	d407      	bmi.n	80102c8 <__swsetup_r+0x30>
 80102b8:	2209      	movs	r2, #9
 80102ba:	602a      	str	r2, [r5, #0]
 80102bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102c0:	81a3      	strh	r3, [r4, #12]
 80102c2:	f04f 30ff 	mov.w	r0, #4294967295
 80102c6:	e033      	b.n	8010330 <__swsetup_r+0x98>
 80102c8:	0758      	lsls	r0, r3, #29
 80102ca:	d512      	bpl.n	80102f2 <__swsetup_r+0x5a>
 80102cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102ce:	b141      	cbz	r1, 80102e2 <__swsetup_r+0x4a>
 80102d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80102d4:	4299      	cmp	r1, r3
 80102d6:	d002      	beq.n	80102de <__swsetup_r+0x46>
 80102d8:	4628      	mov	r0, r5
 80102da:	f7ff fb11 	bl	800f900 <_free_r>
 80102de:	2300      	movs	r3, #0
 80102e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80102e2:	89a3      	ldrh	r3, [r4, #12]
 80102e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80102e8:	81a3      	strh	r3, [r4, #12]
 80102ea:	2300      	movs	r3, #0
 80102ec:	6063      	str	r3, [r4, #4]
 80102ee:	6923      	ldr	r3, [r4, #16]
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f043 0308 	orr.w	r3, r3, #8
 80102f8:	81a3      	strh	r3, [r4, #12]
 80102fa:	6923      	ldr	r3, [r4, #16]
 80102fc:	b94b      	cbnz	r3, 8010312 <__swsetup_r+0x7a>
 80102fe:	89a3      	ldrh	r3, [r4, #12]
 8010300:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010308:	d003      	beq.n	8010312 <__swsetup_r+0x7a>
 801030a:	4621      	mov	r1, r4
 801030c:	4628      	mov	r0, r5
 801030e:	f000 f856 	bl	80103be <__smakebuf_r>
 8010312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010316:	f013 0201 	ands.w	r2, r3, #1
 801031a:	d00a      	beq.n	8010332 <__swsetup_r+0x9a>
 801031c:	2200      	movs	r2, #0
 801031e:	60a2      	str	r2, [r4, #8]
 8010320:	6962      	ldr	r2, [r4, #20]
 8010322:	4252      	negs	r2, r2
 8010324:	61a2      	str	r2, [r4, #24]
 8010326:	6922      	ldr	r2, [r4, #16]
 8010328:	b942      	cbnz	r2, 801033c <__swsetup_r+0xa4>
 801032a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801032e:	d1c5      	bne.n	80102bc <__swsetup_r+0x24>
 8010330:	bd38      	pop	{r3, r4, r5, pc}
 8010332:	0799      	lsls	r1, r3, #30
 8010334:	bf58      	it	pl
 8010336:	6962      	ldrpl	r2, [r4, #20]
 8010338:	60a2      	str	r2, [r4, #8]
 801033a:	e7f4      	b.n	8010326 <__swsetup_r+0x8e>
 801033c:	2000      	movs	r0, #0
 801033e:	e7f7      	b.n	8010330 <__swsetup_r+0x98>
 8010340:	20000038 	.word	0x20000038

08010344 <_sbrk_r>:
 8010344:	b538      	push	{r3, r4, r5, lr}
 8010346:	4d06      	ldr	r5, [pc, #24]	@ (8010360 <_sbrk_r+0x1c>)
 8010348:	2300      	movs	r3, #0
 801034a:	4604      	mov	r4, r0
 801034c:	4608      	mov	r0, r1
 801034e:	602b      	str	r3, [r5, #0]
 8010350:	f7f0 fc2c 	bl	8000bac <_sbrk>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	d102      	bne.n	801035e <_sbrk_r+0x1a>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	b103      	cbz	r3, 801035e <_sbrk_r+0x1a>
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	bd38      	pop	{r3, r4, r5, pc}
 8010360:	20008a08 	.word	0x20008a08

08010364 <abort>:
 8010364:	b508      	push	{r3, lr}
 8010366:	2006      	movs	r0, #6
 8010368:	f000 f88e 	bl	8010488 <raise>
 801036c:	2001      	movs	r0, #1
 801036e:	f7f0 fba5 	bl	8000abc <_exit>

08010372 <__swhatbuf_r>:
 8010372:	b570      	push	{r4, r5, r6, lr}
 8010374:	460c      	mov	r4, r1
 8010376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801037a:	2900      	cmp	r1, #0
 801037c:	b096      	sub	sp, #88	@ 0x58
 801037e:	4615      	mov	r5, r2
 8010380:	461e      	mov	r6, r3
 8010382:	da0d      	bge.n	80103a0 <__swhatbuf_r+0x2e>
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801038a:	f04f 0100 	mov.w	r1, #0
 801038e:	bf14      	ite	ne
 8010390:	2340      	movne	r3, #64	@ 0x40
 8010392:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010396:	2000      	movs	r0, #0
 8010398:	6031      	str	r1, [r6, #0]
 801039a:	602b      	str	r3, [r5, #0]
 801039c:	b016      	add	sp, #88	@ 0x58
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	466a      	mov	r2, sp
 80103a2:	f000 f879 	bl	8010498 <_fstat_r>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	dbec      	blt.n	8010384 <__swhatbuf_r+0x12>
 80103aa:	9901      	ldr	r1, [sp, #4]
 80103ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80103b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80103b4:	4259      	negs	r1, r3
 80103b6:	4159      	adcs	r1, r3
 80103b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103bc:	e7eb      	b.n	8010396 <__swhatbuf_r+0x24>

080103be <__smakebuf_r>:
 80103be:	898b      	ldrh	r3, [r1, #12]
 80103c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103c2:	079d      	lsls	r5, r3, #30
 80103c4:	4606      	mov	r6, r0
 80103c6:	460c      	mov	r4, r1
 80103c8:	d507      	bpl.n	80103da <__smakebuf_r+0x1c>
 80103ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80103ce:	6023      	str	r3, [r4, #0]
 80103d0:	6123      	str	r3, [r4, #16]
 80103d2:	2301      	movs	r3, #1
 80103d4:	6163      	str	r3, [r4, #20]
 80103d6:	b003      	add	sp, #12
 80103d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103da:	ab01      	add	r3, sp, #4
 80103dc:	466a      	mov	r2, sp
 80103de:	f7ff ffc8 	bl	8010372 <__swhatbuf_r>
 80103e2:	9f00      	ldr	r7, [sp, #0]
 80103e4:	4605      	mov	r5, r0
 80103e6:	4639      	mov	r1, r7
 80103e8:	4630      	mov	r0, r6
 80103ea:	f7ff fafd 	bl	800f9e8 <_malloc_r>
 80103ee:	b948      	cbnz	r0, 8010404 <__smakebuf_r+0x46>
 80103f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103f4:	059a      	lsls	r2, r3, #22
 80103f6:	d4ee      	bmi.n	80103d6 <__smakebuf_r+0x18>
 80103f8:	f023 0303 	bic.w	r3, r3, #3
 80103fc:	f043 0302 	orr.w	r3, r3, #2
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	e7e2      	b.n	80103ca <__smakebuf_r+0xc>
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	6020      	str	r0, [r4, #0]
 8010408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801040c:	81a3      	strh	r3, [r4, #12]
 801040e:	9b01      	ldr	r3, [sp, #4]
 8010410:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010414:	b15b      	cbz	r3, 801042e <__smakebuf_r+0x70>
 8010416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801041a:	4630      	mov	r0, r6
 801041c:	f000 f84e 	bl	80104bc <_isatty_r>
 8010420:	b128      	cbz	r0, 801042e <__smakebuf_r+0x70>
 8010422:	89a3      	ldrh	r3, [r4, #12]
 8010424:	f023 0303 	bic.w	r3, r3, #3
 8010428:	f043 0301 	orr.w	r3, r3, #1
 801042c:	81a3      	strh	r3, [r4, #12]
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	431d      	orrs	r5, r3
 8010432:	81a5      	strh	r5, [r4, #12]
 8010434:	e7cf      	b.n	80103d6 <__smakebuf_r+0x18>

08010436 <_raise_r>:
 8010436:	291f      	cmp	r1, #31
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4605      	mov	r5, r0
 801043c:	460c      	mov	r4, r1
 801043e:	d904      	bls.n	801044a <_raise_r+0x14>
 8010440:	2316      	movs	r3, #22
 8010442:	6003      	str	r3, [r0, #0]
 8010444:	f04f 30ff 	mov.w	r0, #4294967295
 8010448:	bd38      	pop	{r3, r4, r5, pc}
 801044a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801044c:	b112      	cbz	r2, 8010454 <_raise_r+0x1e>
 801044e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010452:	b94b      	cbnz	r3, 8010468 <_raise_r+0x32>
 8010454:	4628      	mov	r0, r5
 8010456:	f000 f853 	bl	8010500 <_getpid_r>
 801045a:	4622      	mov	r2, r4
 801045c:	4601      	mov	r1, r0
 801045e:	4628      	mov	r0, r5
 8010460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010464:	f000 b83a 	b.w	80104dc <_kill_r>
 8010468:	2b01      	cmp	r3, #1
 801046a:	d00a      	beq.n	8010482 <_raise_r+0x4c>
 801046c:	1c59      	adds	r1, r3, #1
 801046e:	d103      	bne.n	8010478 <_raise_r+0x42>
 8010470:	2316      	movs	r3, #22
 8010472:	6003      	str	r3, [r0, #0]
 8010474:	2001      	movs	r0, #1
 8010476:	e7e7      	b.n	8010448 <_raise_r+0x12>
 8010478:	2100      	movs	r1, #0
 801047a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801047e:	4620      	mov	r0, r4
 8010480:	4798      	blx	r3
 8010482:	2000      	movs	r0, #0
 8010484:	e7e0      	b.n	8010448 <_raise_r+0x12>
	...

08010488 <raise>:
 8010488:	4b02      	ldr	r3, [pc, #8]	@ (8010494 <raise+0xc>)
 801048a:	4601      	mov	r1, r0
 801048c:	6818      	ldr	r0, [r3, #0]
 801048e:	f7ff bfd2 	b.w	8010436 <_raise_r>
 8010492:	bf00      	nop
 8010494:	20000038 	.word	0x20000038

08010498 <_fstat_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d07      	ldr	r5, [pc, #28]	@ (80104b8 <_fstat_r+0x20>)
 801049c:	2300      	movs	r3, #0
 801049e:	4604      	mov	r4, r0
 80104a0:	4608      	mov	r0, r1
 80104a2:	4611      	mov	r1, r2
 80104a4:	602b      	str	r3, [r5, #0]
 80104a6:	f7f0 fb59 	bl	8000b5c <_fstat>
 80104aa:	1c43      	adds	r3, r0, #1
 80104ac:	d102      	bne.n	80104b4 <_fstat_r+0x1c>
 80104ae:	682b      	ldr	r3, [r5, #0]
 80104b0:	b103      	cbz	r3, 80104b4 <_fstat_r+0x1c>
 80104b2:	6023      	str	r3, [r4, #0]
 80104b4:	bd38      	pop	{r3, r4, r5, pc}
 80104b6:	bf00      	nop
 80104b8:	20008a08 	.word	0x20008a08

080104bc <_isatty_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d06      	ldr	r5, [pc, #24]	@ (80104d8 <_isatty_r+0x1c>)
 80104c0:	2300      	movs	r3, #0
 80104c2:	4604      	mov	r4, r0
 80104c4:	4608      	mov	r0, r1
 80104c6:	602b      	str	r3, [r5, #0]
 80104c8:	f7f0 fb58 	bl	8000b7c <_isatty>
 80104cc:	1c43      	adds	r3, r0, #1
 80104ce:	d102      	bne.n	80104d6 <_isatty_r+0x1a>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	b103      	cbz	r3, 80104d6 <_isatty_r+0x1a>
 80104d4:	6023      	str	r3, [r4, #0]
 80104d6:	bd38      	pop	{r3, r4, r5, pc}
 80104d8:	20008a08 	.word	0x20008a08

080104dc <_kill_r>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4d07      	ldr	r5, [pc, #28]	@ (80104fc <_kill_r+0x20>)
 80104e0:	2300      	movs	r3, #0
 80104e2:	4604      	mov	r4, r0
 80104e4:	4608      	mov	r0, r1
 80104e6:	4611      	mov	r1, r2
 80104e8:	602b      	str	r3, [r5, #0]
 80104ea:	f7f0 fad5 	bl	8000a98 <_kill>
 80104ee:	1c43      	adds	r3, r0, #1
 80104f0:	d102      	bne.n	80104f8 <_kill_r+0x1c>
 80104f2:	682b      	ldr	r3, [r5, #0]
 80104f4:	b103      	cbz	r3, 80104f8 <_kill_r+0x1c>
 80104f6:	6023      	str	r3, [r4, #0]
 80104f8:	bd38      	pop	{r3, r4, r5, pc}
 80104fa:	bf00      	nop
 80104fc:	20008a08 	.word	0x20008a08

08010500 <_getpid_r>:
 8010500:	f7f0 bac1 	b.w	8000a86 <_getpid>

08010504 <_init>:
 8010504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010506:	bf00      	nop
 8010508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801050a:	bc08      	pop	{r3}
 801050c:	469e      	mov	lr, r3
 801050e:	4770      	bx	lr

08010510 <_fini>:
 8010510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010512:	bf00      	nop
 8010514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010516:	bc08      	pop	{r3}
 8010518:	469e      	mov	lr, r3
 801051a:	4770      	bx	lr
