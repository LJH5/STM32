
test8_IR_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008064  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08008238  08008238  00018238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085dc  080085dc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e4  080085e4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e4  080085e4  000185e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080085ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  200001d4  080087c0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  080087c0  00020b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b21  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026cf  00000000  00000000  00031d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00034438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c91  00000000  00000000  00035458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023560  00000000  00000000  000360e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013098  00000000  00000000  00059649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5281  00000000  00000000  0006c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056e8  00000000  00000000  00141964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800821c 	.word	0x0800821c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800821c 	.word	0x0800821c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__io_putchar>:
uint32_t value1 = 0;
uint32_t value2 = 0;
int check_repeat = 0;

// USART
int __io_putchar(int ch){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 8000eec:	1d39      	adds	r1, r7, #4
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <__io_putchar+0x20>)
 8000ef6:	f003 fc33 	bl	8004760 <HAL_UART_Transmit>
    return ch;
 8000efa:	687b      	ldr	r3, [r7, #4]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000238 	.word	0x20000238

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0e2      	sub	sp, #392	; 0x188
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i, pre, ret;
	char printBuff[256] = {0,};
 8000f0e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	22fc      	movs	r2, #252	; 0xfc
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 f870 	bl	8006006 <memset>
	char imsiBuff[128] = {0,};
 8000f26:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f2a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	3304      	adds	r3, #4
 8000f34:	227c      	movs	r2, #124	; 0x7c
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 f864 	bl	8006006 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 fe29 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f879 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 f9b9 	bl	80012bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f4a:	f000 f95f 	bl	800120c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f4e:	f000 f987 	bl	8001260 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000f52:	f000 f8dd 	bl	8001110 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4830      	ldr	r0, [pc, #192]	; (800101c <main+0x114>)
 8000f5c:	f001 f956 	bl	800220c <HAL_GPIO_WritePin>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f60:	2100      	movs	r1, #0
 8000f62:	482f      	ldr	r0, [pc, #188]	; (8001020 <main+0x118>)
 8000f64:	f002 fcec 	bl	8003940 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000f68:	2104      	movs	r1, #4
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <main+0x118>)
 8000f6c:	f002 fce8 	bl	8003940 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f70:	482b      	ldr	r0, [pc, #172]	; (8001020 <main+0x118>)
 8000f72:	f002 fc1b 	bl	80037ac <HAL_TIM_Base_Start_IT>
  memset(&IRQueue, 0, sizeof(IRQUEUE));
 8000f76:	f240 2286 	movw	r2, #646	; 0x286
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4829      	ldr	r0, [pc, #164]	; (8001024 <main+0x11c>)
 8000f7e:	f005 f842 	bl	8006006 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		pre = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
		ret = CheckRemocon();
 8000f88:	f000 faea 	bl	8001560 <CheckRemocon>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
		if (ret != FAIL)
 8000f92:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f3      	beq.n	8000f82 <main+0x7a>
		{
			if (!check_repeat)
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <main+0x120>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d12b      	bne.n	8000ffa <main+0xf2>
			{
				*printBuff = 0;
 8000fa2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
				for(i = pre;i < pre + ret;i++) {
 8000fae:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8000fb2:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8000fb6:	e016      	b.n	8000fe6 <main+0xde>
					sprintf(imsiBuff,"%02X", RemoconCode.Code[i]);
 8000fb8:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <main+0x124>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	491a      	ldr	r1, [pc, #104]	; (8001030 <main+0x128>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 ffb9 	bl	8005f40 <siprintf>
					strcat(printBuff, imsiBuff);
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 f81d 	bl	8006016 <strcat>
				for(i = pre;i < pre + ret;i++) {
 8000fdc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8000fe6:	f897 2187 	ldrb.w	r2, [r7, #391]	; 0x187
 8000fea:	f897 1186 	ldrb.w	r1, [r7, #390]	; 0x186
 8000fee:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8000ff2:	440b      	add	r3, r1
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbdf      	blt.n	8000fb8 <main+0xb0>
 8000ff8:	e002      	b.n	8001000 <main+0xf8>
				}
			}
			else
			{
				check_repeat = 0;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <main+0x120>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
			}
			printf("%2dBits 0x%s\n\n\r", IRQueue.Bits, printBuff);
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <main+0x11c>)
 8001002:	791b      	ldrb	r3, [r3, #4]
 8001004:	4619      	mov	r1, r3
 8001006:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800100a:	461a      	mov	r2, r3
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <main+0x12c>)
 800100e:	f004 ff85 	bl	8005f1c <iprintf>
			pre = RemoconCode.Bytes;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <main+0x124>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
		pre = 0;
 800101a:	e7b2      	b.n	8000f82 <main+0x7a>
 800101c:	40020400 	.word	0x40020400
 8001020:	200001f0 	.word	0x200001f0
 8001024:	20000778 	.word	0x20000778
 8001028:	20000a08 	.word	0x20000a08
 800102c:	20000764 	.word	0x20000764
 8001030:	08008238 	.word	0x08008238
 8001034:	08008240 	.word	0x08008240

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2234      	movs	r2, #52	; 0x34
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 ffdd 	bl	8006006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <SystemClock_Config+0xd0>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a28      	ldr	r2, [pc, #160]	; (8001108 <SystemClock_Config+0xd0>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <SystemClock_Config+0xd0>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <SystemClock_Config+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <SystemClock_Config+0xd4>)
 8001082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <SystemClock_Config+0xd4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001098:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800109c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010ac:	23a8      	movs	r3, #168	; 0xa8
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b4:	2307      	movs	r3, #7
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 f885 	bl	80031d0 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010cc:	f000 faf8 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2105      	movs	r1, #5
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 f9fa 	bl	80024e8 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010fa:	f000 fae1 	bl	80016c0 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <MX_TIM2_Init+0xf8>)
 800113c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <MX_TIM2_Init+0xf8>)
 8001144:	2253      	movs	r2, #83	; 0x53
 8001146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <MX_TIM2_Init+0xf8>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <MX_TIM2_Init+0xf8>)
 8001150:	f242 720f 	movw	r2, #9999	; 0x270f
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <MX_TIM2_Init+0xf8>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <MX_TIM2_Init+0xf8>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <MX_TIM2_Init+0xf8>)
 8001164:	f002 fad2 	bl	800370c <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800116e:	f000 faa7 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4619      	mov	r1, r3
 800117e:	4822      	ldr	r0, [pc, #136]	; (8001208 <MX_TIM2_Init+0xf8>)
 8001180:	f002 fe92 	bl	8003ea8 <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800118a:	f000 fa99 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800118e:	481e      	ldr	r0, [pc, #120]	; (8001208 <MX_TIM2_Init+0xf8>)
 8001190:	f002 fb7c 	bl	800388c <HAL_TIM_IC_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800119a:	f000 fa91 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_TIM2_Init+0xf8>)
 80011ae:	f003 f9f7 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80011b8:	f000 fa82 	bl	80016c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011bc:	2302      	movs	r3, #2
 80011be:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011c0:	2301      	movs	r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0xf8>)
 80011d4:	f002 fdcc 	bl	8003d70 <HAL_TIM_IC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80011de:	f000 fa6f 	bl	80016c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011e6:	2302      	movs	r3, #2
 80011e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	2204      	movs	r2, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM2_Init+0xf8>)
 80011f2:	f002 fdbd 	bl	8003d70 <HAL_TIM_IC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80011fc:	f000 fa60 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001f0 	.word	0x200001f0

0800120c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART3_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001218:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800121c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001244:	f003 fa3c 	bl	80046c0 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 fa37 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000238 	.word	0x20000238
 800125c:	40004800 	.word	0x40004800

08001260 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001266:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800126a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126e:	2206      	movs	r2, #6
 8001270:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001274:	2202      	movs	r2, #2
 8001276:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001280:	2202      	movs	r2, #2
 8001282:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001286:	2201      	movs	r2, #1
 8001288:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001298:	2201      	movs	r2, #1
 800129a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a4:	f000 ffe5 	bl	8002272 <HAL_PCD_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012ae:	f000 fa07 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000280 	.word	0x20000280

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a44      	ldr	r2, [pc, #272]	; (8001408 <MX_GPIO_Init+0x14c>)
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b42      	ldr	r3, [pc, #264]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a3d      	ldr	r2, [pc, #244]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <MX_GPIO_Init+0x14c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <MX_GPIO_Init+0x14c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a36      	ldr	r2, [pc, #216]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <MX_GPIO_Init+0x14c>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a28      	ldr	r2, [pc, #160]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_GPIO_Init+0x14c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001380:	4822      	ldr	r0, [pc, #136]	; (800140c <MX_GPIO_Init+0x150>)
 8001382:	f000 ff43 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	4821      	ldr	r0, [pc, #132]	; (8001410 <MX_GPIO_Init+0x154>)
 800138c:	f000 ff3e 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001396:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	481b      	ldr	r0, [pc, #108]	; (8001414 <MX_GPIO_Init+0x158>)
 80013a8:	f000 fd9c 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_GPIO_Init+0x150>)
 80013c6:	f000 fd8d 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x154>)
 80013e2:	f000 fd7f 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_GPIO_Init+0x154>)
 80013fa:	f000 fd73 	bl	8001ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400
 8001410:	40021800 	.word	0x40021800
 8001414:	40020800 	.word	0x40020800

08001418 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d153      	bne.n	80014d2 <HAL_TIM_IC_CaptureCallback+0xba>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7f1b      	ldrb	r3, [r3, #28]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d135      	bne.n	800149e <HAL_TIM_IC_CaptureCallback+0x86>
		{
			value1 = TIM2->CCR1;
 8001432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001438:	4a28      	ldr	r2, [pc, #160]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc4>)
 800143a:	6013      	str	r3, [r2, #0]
			TIM2->CNT = 0;
 800143c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24

			if (IRQueue.State == IR_STANDBY)
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001446:	78db      	ldrb	r3, [r3, #3]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <HAL_TIM_IC_CaptureCallback+0x3c>
			{
				IRQueue.State = IR_DATA_IN;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800144e:	2201      	movs	r2, #1
 8001450:	70da      	strb	r2, [r3, #3]
				return;
 8001452:	e03e      	b.n	80014d2 <HAL_TIM_IC_CaptureCallback+0xba>
			}

			if (IRQueue.State != IR_DATA_IN)
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001456:	78db      	ldrb	r3, [r3, #3]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d139      	bne.n	80014d0 <HAL_TIM_IC_CaptureCallback+0xb8>
			{
				return;
			}

			IRQueue.QueueHigh[IRQueue.Head] = value1;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xc4>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b291      	uxth	r1, r2
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	460a      	mov	r2, r1
 800146e:	80da      	strh	r2, [r3, #6]

			IRQueue.Head = ((IRQueue.Head + 1) % MAX_IRQueueSIZE);
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001478:	fb83 1302 	smull	r1, r3, r3, r2
 800147c:	1199      	asrs	r1, r3, #6
 800147e:	17d3      	asrs	r3, r2, #31
 8001480:	1ac9      	subs	r1, r1, r3
 8001482:	460b      	mov	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	1ad1      	subs	r1, r2, r3
 800148c:	b2ca      	uxtb	r2, r1
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001490:	701a      	strb	r2, [r3, #0]
			IRQueue.Data++;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001494:	789b      	ldrb	r3, [r3, #2]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800149c:	709a      	strb	r2, [r3, #2]
		}

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7f1b      	ldrb	r3, [r3, #28]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d115      	bne.n	80014d2 <HAL_TIM_IC_CaptureCallback+0xba>
		{

			value2 = TIM2->CCR2;
 80014a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80014ae:	6013      	str	r3, [r2, #0]
			TIM2->CNT = 0;
 80014b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
			IRQueue.QueueLow[IRQueue.Head] = value2;
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b291      	uxth	r1, r2
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014c4:	33a0      	adds	r3, #160	; 0xa0
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	80da      	strh	r2, [r3, #6]
 80014ce:	e000      	b.n	80014d2 <HAL_TIM_IC_CaptureCallback+0xba>
				return;
 80014d0:	bf00      	nop

		}
	}
}
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20000a00 	.word	0x20000a00
 80014e0:	20000778 	.word	0x20000778
 80014e4:	66666667 	.word	0x66666667
 80014e8:	20000a04 	.word	0x20000a04

080014ec <HAL_TIM_PeriodElapsedCallback>:

// occur timer interrupt => finish data in
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	if (IRQueue.State == IR_DATA_IN)
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014f6:	78db      	ldrb	r3, [r3, #3]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		IRQueue.State = IR_NO_MORE;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014fe:	2205      	movs	r2, #5
 8001500:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001506:	f000 fe9a 	bl	800223e <HAL_GPIO_TogglePin>
	}
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000778 	.word	0x20000778
 8001518:	40020400 	.word	0x40020400

0800151c <ProcessQueueData>:

void ProcessQueueData(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_Delay(7);
 8001520:	2007      	movs	r0, #7
 8001522:	f000 fba9 	bl	8001c78 <HAL_Delay>
	IRQueue.Tail = (IRQueue.Tail + 1) % MAX_IRQueueSIZE;
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <ProcessQueueData+0x3c>)
 8001528:	785b      	ldrb	r3, [r3, #1]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <ProcessQueueData+0x40>)
 800152e:	fb83 1302 	smull	r1, r3, r3, r2
 8001532:	1199      	asrs	r1, r3, #6
 8001534:	17d3      	asrs	r3, r2, #31
 8001536:	1ac9      	subs	r1, r1, r3
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	015b      	lsls	r3, r3, #5
 8001540:	1ad1      	subs	r1, r2, r3
 8001542:	b2ca      	uxtb	r2, r1
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <ProcessQueueData+0x3c>)
 8001546:	705a      	strb	r2, [r3, #1]
	IRQueue.Data--;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <ProcessQueueData+0x3c>)
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	3b01      	subs	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b01      	ldr	r3, [pc, #4]	; (8001558 <ProcessQueueData+0x3c>)
 8001552:	709a      	strb	r2, [r3, #2]
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000778 	.word	0x20000778
 800155c:	66666667 	.word	0x66666667

08001560 <CheckRemocon>:

uint8_t CheckRemocon(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	uint16_t data = 0, high_data = 0, low_data = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	80fb      	strh	r3, [r7, #6]
 800156a:	2300      	movs	r3, #0
 800156c:	80bb      	strh	r3, [r7, #4]
 800156e:	2300      	movs	r3, #0
 8001570:	807b      	strh	r3, [r7, #2]

	if(IRQueue.State != IR_NO_MORE)
 8001572:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <CheckRemocon+0x154>)
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d001      	beq.n	800157e <CheckRemocon+0x1e>
		return FAIL;
 800157a:	2300      	movs	r3, #0
 800157c:	e095      	b.n	80016aa <CheckRemocon+0x14a>

	if(IRQueue.State == IR_NO_MORE)
 800157e:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <CheckRemocon+0x154>)
 8001580:	78db      	ldrb	r3, [r3, #3]
 8001582:	2b05      	cmp	r3, #5
 8001584:	d104      	bne.n	8001590 <CheckRemocon+0x30>
		memset(&RemoconCode, 0, sizeof(REMOCONCODE));
 8001586:	2211      	movs	r2, #17
 8001588:	2100      	movs	r1, #0
 800158a:	484b      	ldr	r0, [pc, #300]	; (80016b8 <CheckRemocon+0x158>)
 800158c:	f004 fd3b 	bl	8006006 <memset>

	if(IRQueue.Data == 0)
 8001590:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <CheckRemocon+0x154>)
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d104      	bne.n	80015a2 <CheckRemocon+0x42>
	{
		IRQueue.State = IR_STANDBY;
 8001598:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <CheckRemocon+0x154>)
 800159a:	2200      	movs	r2, #0
 800159c:	70da      	strb	r2, [r3, #3]
		return FAIL;
 800159e:	2300      	movs	r3, #0
 80015a0:	e083      	b.n	80016aa <CheckRemocon+0x14a>
	}
	IRQueue.Bits = 0;
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <CheckRemocon+0x154>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	711a      	strb	r2, [r3, #4]

	while(IRQueue.Data > 0)
 80015a8:	e066      	b.n	8001678 <CheckRemocon+0x118>
	{
		high_data = IRQueue.QueueHigh[IRQueue.Tail];
 80015aa:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <CheckRemocon+0x154>)
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	4a41      	ldr	r2, [pc, #260]	; (80016b4 <CheckRemocon+0x154>)
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	88db      	ldrh	r3, [r3, #6]
 80015b6:	80bb      	strh	r3, [r7, #4]
		low_data = IRQueue.QueueLow[IRQueue.Tail];
 80015b8:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <CheckRemocon+0x154>)
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <CheckRemocon+0x154>)
 80015be:	33a0      	adds	r3, #160	; 0xa0
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	88db      	ldrh	r3, [r3, #6]
 80015c6:	807b      	strh	r3, [r7, #2]
		data = high_data + low_data;
 80015c8:	88ba      	ldrh	r2, [r7, #4]
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	4413      	add	r3, r2
 80015ce:	80fb      	strh	r3, [r7, #6]

		ProcessQueueData();
 80015d0:	f7ff ffa4 	bl	800151c <ProcessQueueData>

		if (high_data >= MIN_REPEAT_HIGH && high_data <= MAX_REPEAT_HIGH)
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	f640 0265 	movw	r2, #2149	; 0x865
 80015da:	4293      	cmp	r3, r2
 80015dc:	d90b      	bls.n	80015f6 <CheckRemocon+0x96>
 80015de:	88bb      	ldrh	r3, [r7, #4]
 80015e0:	f640 122e 	movw	r2, #2350	; 0x92e
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d806      	bhi.n	80015f6 <CheckRemocon+0x96>
		{
			check_repeat = 1;
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <CheckRemocon+0x15c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
			IRQueue.Bits = 32;
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <CheckRemocon+0x154>)
 80015f0:	2220      	movs	r2, #32
 80015f2:	711a      	strb	r2, [r3, #4]
 80015f4:	e040      	b.n	8001678 <CheckRemocon+0x118>
		}
		else if(data >= MIN_0_LENGTH && data <= MAX_0_LENGTH)
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 80015fc:	d30b      	bcc.n	8001616 <CheckRemocon+0xb6>
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8001604:	4293      	cmp	r3, r2
 8001606:	d806      	bhi.n	8001616 <CheckRemocon+0xb6>
		{
			IRQueue.Bits++;
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <CheckRemocon+0x154>)
 800160a:	791b      	ldrb	r3, [r3, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <CheckRemocon+0x154>)
 8001612:	711a      	strb	r2, [r3, #4]
 8001614:	e030      	b.n	8001678 <CheckRemocon+0x118>
		}
		else if(data >= MIN_1_LENGTH && data <= MAX_1_LENGTH)
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800161c:	4293      	cmp	r3, r2
 800161e:	d92f      	bls.n	8001680 <CheckRemocon+0x120>
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	f640 1253 	movw	r2, #2387	; 0x953
 8001626:	4293      	cmp	r3, r2
 8001628:	d82a      	bhi.n	8001680 <CheckRemocon+0x120>
		{
			RemoconCode.Code[RemoconCode.Bytes + IRQueue.Bits / 8] |= (0x01 << (IRQueue.Bits % 8));
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <CheckRemocon+0x158>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <CheckRemocon+0x154>)
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	b2d8      	uxtb	r0, r3
 8001638:	4603      	mov	r3, r0
 800163a:	4413      	add	r3, r2
 800163c:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <CheckRemocon+0x158>)
 800163e:	4413      	add	r3, r2
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	b25a      	sxtb	r2, r3
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <CheckRemocon+0x154>)
 8001646:	791b      	ldrb	r3, [r3, #4]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b25a      	sxtb	r2, r3
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <CheckRemocon+0x158>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	4603      	mov	r3, r0
 8001660:	440b      	add	r3, r1
 8001662:	b2d1      	uxtb	r1, r2
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <CheckRemocon+0x158>)
 8001666:	4413      	add	r3, r2
 8001668:	460a      	mov	r2, r1
 800166a:	705a      	strb	r2, [r3, #1]
			IRQueue.Bits++;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <CheckRemocon+0x154>)
 800166e:	791b      	ldrb	r3, [r3, #4]
 8001670:	3301      	adds	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <CheckRemocon+0x154>)
 8001676:	711a      	strb	r2, [r3, #4]
	while(IRQueue.Data > 0)
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <CheckRemocon+0x154>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d194      	bne.n	80015aa <CheckRemocon+0x4a>
		{
			break;
		}
	}

	if(IRQueue.Data == 0){
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <CheckRemocon+0x154>)
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <CheckRemocon+0x12e>
		IRQueue.State = IR_STANDBY;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <CheckRemocon+0x154>)
 800168a:	2200      	movs	r2, #0
 800168c:	70da      	strb	r2, [r3, #3]
	}

	RemoconCode.Bytes += (IRQueue.Bits / 8);
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <CheckRemocon+0x158>)
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <CheckRemocon+0x154>)
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	08db      	lsrs	r3, r3, #3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4413      	add	r3, r2
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <CheckRemocon+0x158>)
 80016a0:	701a      	strb	r2, [r3, #0]
	return (IRQueue.Bits / 8);
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <CheckRemocon+0x154>)
 80016a4:	791b      	ldrb	r3, [r3, #4]
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	b2db      	uxtb	r3, r3
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000778 	.word	0x20000778
 80016b8:	20000764 	.word	0x20000764
 80016bc:	20000a08 	.word	0x20000a08

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_MspInit+0x4c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_MspInit+0x4c>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_MspInit+0x4c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_MspInit+0x4c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_MspInit+0x4c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173c:	d133      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_TIM_Base_MspInit+0x94>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <HAL_TIM_Base_MspInit+0x94>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_TIM_Base_MspInit+0x94>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_TIM_Base_MspInit+0x94>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <HAL_TIM_Base_MspInit+0x94>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_TIM_Base_MspInit+0x94>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001776:	2301      	movs	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001786:	2301      	movs	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <HAL_TIM_Base_MspInit+0x98>)
 8001792:	f000 fba7 	bl	8001ee4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	201c      	movs	r0, #28
 800179c:	f000 fb6b 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a0:	201c      	movs	r0, #28
 80017a2:	f000 fb84 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_UART_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12c      	bne.n	8001834 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_UART_MspInit+0x88>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_UART_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001824:	2307      	movs	r3, #7
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_UART_MspInit+0x8c>)
 8001830:	f000 fb58 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40004800 	.word	0x40004800
 8001840:	40023800 	.word	0x40023800
 8001844:	40020c00 	.word	0x40020c00

08001848 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b0a0      	sub	sp, #128	; 0x80
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	225c      	movs	r2, #92	; 0x5c
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f004 fbcc 	bl	8006006 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001876:	d14e      	bne.n	8001916 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800187e:	2300      	movs	r3, #0
 8001880:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4618      	mov	r0, r3
 8001888:	f000 ff48 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001892:	f7ff ff15 	bl	80016c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a20      	ldr	r2, [pc, #128]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c4:	230a      	movs	r3, #10
 80018c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4815      	ldr	r0, [pc, #84]	; (8001924 <HAL_PCD_MspInit+0xdc>)
 80018d0:	f000 fb08 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e6:	4619      	mov	r1, r3
 80018e8:	480e      	ldr	r0, [pc, #56]	; (8001924 <HAL_PCD_MspInit+0xdc>)
 80018ea:	f000 fafb 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	6353      	str	r3, [r2, #52]	; 0x34
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_PCD_MspInit+0xd8>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3780      	adds	r7, #128	; 0x80
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f960 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <TIM2_IRQHandler+0x10>)
 8001982:	f002 f905 	bl	8003b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200001f0 	.word	0x200001f0

08001990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019aa:	f004 fb8d 	bl	80060c8 <__errno>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2216      	movs	r2, #22
 80019b2:	601a      	str	r2, [r3, #0]
  return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_exit>:

void _exit (int status)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffe7 	bl	80019a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d2:	e7fe      	b.n	80019d2 <_exit+0x12>

080019d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e00a      	b.n	80019fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e6:	f3af 8000 	nop.w
 80019ea:	4601      	mov	r1, r0
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	60ba      	str	r2, [r7, #8]
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf0      	blt.n	80019e6 <_read+0x12>
  }

  return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e009      	b.n	8001a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fa5b 	bl	8000ee4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf1      	blt.n	8001a20 <_write+0x12>
  }
  return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_close>:

int _close(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f004 faf2 	bl	80060c8 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20020000 	.word	0x20020000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	20000a0c 	.word	0x20000a0c
 8001b18:	20000b60 	.word	0x20000b60

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b44:	f7ff ffea 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	; (8001b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f004 fab1 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff f9c9 	bl	8000f08 <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b84:	080085ec 	.word	0x080085ec
  ldr r2, =_sbss
 8001b88:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b8c:	20000b60 	.word	0x20000b60

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_Init+0x40>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_Init+0x40>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x40>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f94f 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fd80 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f967 	bl	8001eca <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f92f 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000a10 	.word	0x20000a10

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000a10 	.word	0x20000a10

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff29 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff3e 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff8e 	bl	8001db4 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff31 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e165      	b.n	80021cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 8154 	bne.w	80021c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d130      	bne.n	8001f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d017      	beq.n	8001fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d123      	bne.n	8002028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80ae 	beq.w	80021c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b5d      	ldr	r3, [pc, #372]	; (80021e4 <HAL_GPIO_Init+0x300>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a5c      	ldr	r2, [pc, #368]	; (80021e4 <HAL_GPIO_Init+0x300>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_GPIO_Init+0x300>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002086:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x308>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_GPIO_Init+0x310>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x314>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_GPIO_Init+0x318>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x20a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_GPIO_Init+0x31c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x206>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a49      	ldr	r2, [pc, #292]	; (8002204 <HAL_GPIO_Init+0x320>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x202>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020e6:	2307      	movs	r3, #7
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x21c>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002110:	4935      	ldr	r1, [pc, #212]	; (80021e8 <HAL_GPIO_Init+0x304>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x324>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a26      	ldr	r2, [pc, #152]	; (8002208 <HAL_GPIO_Init+0x324>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_GPIO_Init+0x324>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_GPIO_Init+0x324>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f ae96 	bls.w	8001f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40021400 	.word	0x40021400
 8002204:	40021800 	.word	0x40021800
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43d9      	mvns	r1, r3
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	400b      	ands	r3, r1
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af02      	add	r7, sp, #8
 8002278:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e108      	b.n	8002496 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fad2 	bl	8001848 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2203      	movs	r2, #3
 80022a8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fe6e 	bl	8004fa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7c1a      	ldrb	r2, [r3, #16]
 80022cc:	f88d 2000 	strb.w	r2, [sp]
 80022d0:	3304      	adds	r3, #4
 80022d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d4:	f002 fe00 	bl	8004ed8 <USB_CoreInit>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0d5      	b.n	8002496 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fe66 	bl	8004fc2 <USB_SetCurrentMode>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0c6      	b.n	8002496 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e04a      	b.n	80023a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3315      	adds	r3, #21
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3314      	adds	r3, #20
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b298      	uxth	r0, r3
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	332e      	adds	r3, #46	; 0x2e
 800234a:	4602      	mov	r2, r0
 800234c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3318      	adds	r3, #24
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	331c      	adds	r3, #28
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3320      	adds	r3, #32
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3324      	adds	r3, #36	; 0x24
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3301      	adds	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	791b      	ldrb	r3, [r3, #4]
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3af      	bcc.n	800230e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e044      	b.n	800243e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f203 2355 	addw	r3, r3, #597	; 0x255
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	791b      	ldrb	r3, [r3, #4]
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	429a      	cmp	r2, r3
 8002446:	d3b5      	bcc.n	80023b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7c1a      	ldrb	r2, [r3, #16]
 8002450:	f88d 2000 	strb.w	r2, [sp]
 8002454:	3304      	adds	r3, #4
 8002456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002458:	f002 fe00 	bl	800505c <USB_DevInit>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e013      	b.n	8002496 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7b1b      	ldrb	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f80a 	bl	800249e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f002 ffbb 	bl	800540a <USB_DevDisconnect>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	f043 0303 	orr.w	r3, r3, #3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0cc      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d90c      	bls.n	8002524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b8      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800255e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	494d      	ldr	r1, [pc, #308]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d044      	beq.n	8002608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d119      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e07f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e067      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4934      	ldr	r1, [pc, #208]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d8:	f7ff fb42 	bl	8001c60 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7ff fb3e 	bl	8001c60 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e04f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d20c      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e032      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4916      	ldr	r1, [pc, #88]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	490e      	ldr	r1, [pc, #56]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800266e:	f000 fb7f 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	490a      	ldr	r1, [pc, #40]	; (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	5ccb      	ldrb	r3, [r1, r3]
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff faa2 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00
 80026a4:	40023800 	.word	0x40023800
 80026a8:	08008250 	.word	0x08008250
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000000 	.word	0x20000000

080026cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0a9b      	lsrs	r3, r3, #10
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4903      	ldr	r1, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08008260 	.word	0x08008260

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f8:	f7ff ffdc 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	0b5b      	lsrs	r3, r3, #13
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4903      	ldr	r1, [pc, #12]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40023800 	.word	0x40023800
 8002718:	08008260 	.word	0x08008260

0800271c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d010      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002754:	4b6f      	ldr	r3, [pc, #444]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	496c      	ldr	r1, [pc, #432]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002772:	2301      	movs	r3, #1
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d010      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002782:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002788:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	4960      	ldr	r1, [pc, #384]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d017      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027b0:	4b58      	ldr	r3, [pc, #352]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4955      	ldr	r1, [pc, #340]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ce:	d101      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80027d0:	2301      	movs	r3, #1
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80027dc:	2301      	movs	r3, #1
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d017      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	4946      	ldr	r1, [pc, #280]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280a:	d101      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800280c:	2301      	movs	r3, #1
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002818:	2301      	movs	r3, #1
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 808a 	beq.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a33      	ldr	r2, [pc, #204]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002852:	f7ff fa05 	bl	8001c60 <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7ff fa01 	bl	8001c60 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e278      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002878:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002880:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02f      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	429a      	cmp	r2, r3
 8002894:	d028      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d114      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028be:	f7ff f9cf 	bl	8001c60 <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7ff f9cb 	bl	8001c60 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e240      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ee      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f4:	d114      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290a:	4902      	ldr	r1, [pc, #8]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
 8002910:	e00c      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000
 800291c:	42470e40 	.word	0x42470e40
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a49      	ldr	r2, [pc, #292]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002926:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800292a:	6093      	str	r3, [r2, #8]
 800292c:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800292e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	4944      	ldr	r1, [pc, #272]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800293a:	4313      	orrs	r3, r2
 800293c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002950:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002952:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002966:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002982:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002988:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	492e      	ldr	r1, [pc, #184]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d011      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	4926      	ldr	r1, [pc, #152]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c2:	d101      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	491a      	ldr	r1, [pc, #104]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d011      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a04:	4911      	ldr	r1, [pc, #68]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002a16:	2301      	movs	r3, #1
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a28:	f040 80ff 	bne.w	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a32:	f7ff f915 	bl	8001c60 <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a3a:	f7ff f911 	bl	8001c60 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e188      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	424711e0 	.word	0x424711e0
 8002a54:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d028      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d124      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a8c:	4b71      	ldr	r3, [pc, #452]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa4:	0e1b      	lsrs	r3, r3, #24
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	071b      	lsls	r3, r3, #28
 8002ace:	4961      	ldr	r1, [pc, #388]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d035      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b00:	d130      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b02:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1a:	0f1b      	lsrs	r3, r3, #28
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	019b      	lsls	r3, r3, #6
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	3b01      	subs	r3, #1
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	071b      	lsls	r3, r3, #28
 8002b44:	4943      	ldr	r1, [pc, #268]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b52:	f023 021f 	bic.w	r2, r3, #31
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	493d      	ldr	r1, [pc, #244]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d029      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b78:	d124      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b8c:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b92:	0f1b      	lsrs	r3, r3, #28
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	019b      	lsls	r3, r3, #6
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	071b      	lsls	r3, r3, #28
 8002bbc:	4925      	ldr	r1, [pc, #148]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	071b      	lsls	r3, r3, #28
 8002bf6:	4917      	ldr	r1, [pc, #92]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c04:	f7ff f82c 	bl	8001c60 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c0c:	f7ff f828 	bl	8001c60 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e09f      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 8095 	bne.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c38:	f7ff f812 	bl	8001c60 <HAL_GetTick>
 8002c3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c3e:	e00f      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c40:	f7ff f80e 	bl	8001c60 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d908      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e085      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470068 	.word	0x42470068
 8002c5c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6c:	d0e8      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02b      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d127      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	041b      	lsls	r3, r3, #16
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	061b      	lsls	r3, r3, #24
 8002cc4:	4928      	ldr	r1, [pc, #160]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ccc:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	4922      	ldr	r1, [pc, #136]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01d      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cfa:	d118      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	0e1b      	lsrs	r3, r3, #24
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	019b      	lsls	r3, r3, #6
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	4910      	ldr	r1, [pc, #64]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe ff94 	bl	8001c60 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d3c:	f7fe ff90 	bl	8001c60 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e007      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d5a:	d1ef      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3730      	adds	r7, #48	; 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	42470070 	.word	0x42470070

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b0ae      	sub	sp, #184	; 0xb8
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d96:	4bcb      	ldr	r3, [pc, #812]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	f200 8206 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x440>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_RCC_GetSysClockFreq+0x3c>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	080031b1 	.word	0x080031b1
 8002db4:	080031b1 	.word	0x080031b1
 8002db8:	080031b1 	.word	0x080031b1
 8002dbc:	08002de9 	.word	0x08002de9
 8002dc0:	080031b1 	.word	0x080031b1
 8002dc4:	080031b1 	.word	0x080031b1
 8002dc8:	080031b1 	.word	0x080031b1
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	080031b1 	.word	0x080031b1
 8002dd4:	080031b1 	.word	0x080031b1
 8002dd8:	080031b1 	.word	0x080031b1
 8002ddc:	08002fe1 	.word	0x08002fe1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4bb9      	ldr	r3, [pc, #740]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002de6:	e1e7      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4bb8      	ldr	r3, [pc, #736]	; (80030cc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dee:	e1e3      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df0:	4bb4      	ldr	r3, [pc, #720]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfc:	4bb1      	ldr	r3, [pc, #708]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d071      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e08:	4bae      	ldr	r3, [pc, #696]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e2e:	4622      	mov	r2, r4
 8002e30:	462b      	mov	r3, r5
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e40:	0150      	lsls	r0, r2, #5
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4621      	mov	r1, r4
 8002e48:	1a51      	subs	r1, r2, r1
 8002e4a:	6439      	str	r1, [r7, #64]	; 0x40
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e52:	647b      	str	r3, [r7, #68]	; 0x44
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e60:	4649      	mov	r1, r9
 8002e62:	018b      	lsls	r3, r1, #6
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	018a      	lsls	r2, r1, #6
 8002e6e:	4641      	mov	r1, r8
 8002e70:	1a51      	subs	r1, r2, r1
 8002e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e74:	4649      	mov	r1, r9
 8002e76:	eb63 0301 	sbc.w	r3, r3, r1
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e88:	4649      	mov	r1, r9
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4641      	mov	r1, r8
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	eb42 0303 	adc.w	r3, r2, r3
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eb8:	4629      	mov	r1, r5
 8002eba:	024b      	lsls	r3, r1, #9
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	024a      	lsls	r2, r1, #9
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ed4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002edc:	f7fd fe84 	bl	8000be8 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eea:	e067      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eec:	4b75      	ldr	r3, [pc, #468]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f06:	2300      	movs	r3, #0
 8002f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	0159      	lsls	r1, r3, #5
 8002f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f20:	0150      	lsls	r0, r2, #5
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4621      	mov	r1, r4
 8002f28:	1a51      	subs	r1, r2, r1
 8002f2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f40:	4649      	mov	r1, r9
 8002f42:	018b      	lsls	r3, r1, #6
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	018a      	lsls	r2, r1, #6
 8002f4e:	4641      	mov	r1, r8
 8002f50:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f54:	4649      	mov	r1, r9
 8002f56:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6e:	4692      	mov	sl, r2
 8002f70:	469b      	mov	fp, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	eb1a 0303 	adds.w	r3, sl, r3
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	462b      	mov	r3, r5
 8002f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f8e:	4629      	mov	r1, r5
 8002f90:	028b      	lsls	r3, r1, #10
 8002f92:	4621      	mov	r1, r4
 8002f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f98:	4621      	mov	r1, r4
 8002f9a:	028a      	lsls	r2, r1, #10
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8002fa8:	677a      	str	r2, [r7, #116]	; 0x74
 8002faa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fae:	f7fd fe1b 	bl	8000be8 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fde:	e0eb      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fec:	4b35      	ldr	r3, [pc, #212]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d06b      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	2200      	movs	r2, #0
 8003000:	66bb      	str	r3, [r7, #104]	; 0x68
 8003002:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300a:	663b      	str	r3, [r7, #96]	; 0x60
 800300c:	2300      	movs	r3, #0
 800300e:	667b      	str	r3, [r7, #100]	; 0x64
 8003010:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003014:	4622      	mov	r2, r4
 8003016:	462b      	mov	r3, r5
 8003018:	f04f 0000 	mov.w	r0, #0
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	0159      	lsls	r1, r3, #5
 8003022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003026:	0150      	lsls	r0, r2, #5
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4621      	mov	r1, r4
 800302e:	1a51      	subs	r1, r2, r1
 8003030:	61b9      	str	r1, [r7, #24]
 8003032:	4629      	mov	r1, r5
 8003034:	eb63 0301 	sbc.w	r3, r3, r1
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003046:	4659      	mov	r1, fp
 8003048:	018b      	lsls	r3, r1, #6
 800304a:	4651      	mov	r1, sl
 800304c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003050:	4651      	mov	r1, sl
 8003052:	018a      	lsls	r2, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ebb2 0801 	subs.w	r8, r2, r1
 800305a:	4659      	mov	r1, fp
 800305c:	eb63 0901 	sbc.w	r9, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003070:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003074:	4690      	mov	r8, r2
 8003076:	4699      	mov	r9, r3
 8003078:	4623      	mov	r3, r4
 800307a:	eb18 0303 	adds.w	r3, r8, r3
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	462b      	mov	r3, r5
 8003082:	eb49 0303 	adc.w	r3, r9, r3
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003094:	4629      	mov	r1, r5
 8003096:	024b      	lsls	r3, r1, #9
 8003098:	4621      	mov	r1, r4
 800309a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800309e:	4621      	mov	r1, r4
 80030a0:	024a      	lsls	r2, r1, #9
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030aa:	2200      	movs	r2, #0
 80030ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030b4:	f7fd fd98 	bl	8000be8 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4613      	mov	r3, r2
 80030be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030c2:	e065      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x420>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	2200      	movs	r2, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	4611      	mov	r1, r2
 80030dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
 80030e2:	2300      	movs	r3, #0
 80030e4:	657b      	str	r3, [r7, #84]	; 0x54
 80030e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030ea:	4642      	mov	r2, r8
 80030ec:	464b      	mov	r3, r9
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0159      	lsls	r1, r3, #5
 80030f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fc:	0150      	lsls	r0, r2, #5
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4641      	mov	r1, r8
 8003104:	1a51      	subs	r1, r2, r1
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	4649      	mov	r1, r9
 800310a:	eb63 0301 	sbc.w	r3, r3, r1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800311c:	4659      	mov	r1, fp
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003126:	4651      	mov	r1, sl
 8003128:	018a      	lsls	r2, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	1a54      	subs	r4, r2, r1
 800312e:	4659      	mov	r1, fp
 8003130:	eb63 0501 	sbc.w	r5, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	00eb      	lsls	r3, r5, #3
 800313e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003142:	00e2      	lsls	r2, r4, #3
 8003144:	4614      	mov	r4, r2
 8003146:	461d      	mov	r5, r3
 8003148:	4643      	mov	r3, r8
 800314a:	18e3      	adds	r3, r4, r3
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	464b      	mov	r3, r9
 8003150:	eb45 0303 	adc.w	r3, r5, r3
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003162:	4629      	mov	r1, r5
 8003164:	028b      	lsls	r3, r1, #10
 8003166:	4621      	mov	r1, r4
 8003168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800316c:	4621      	mov	r1, r4
 800316e:	028a      	lsls	r2, r1, #10
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003178:	2200      	movs	r2, #0
 800317a:	64bb      	str	r3, [r7, #72]	; 0x48
 800317c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800317e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003182:	f7fd fd31 	bl	8000be8 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4613      	mov	r3, r2
 800318c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0f1b      	lsrs	r3, r3, #28
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800319e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ae:	e003      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80031b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	37b8      	adds	r7, #184	; 0xb8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	00f42400 	.word	0x00f42400

080031d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e28d      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8083 	beq.w	80032f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031f0:	4b94      	ldr	r3, [pc, #592]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d019      	beq.n	8003230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031fc:	4b91      	ldr	r3, [pc, #580]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003204:	2b08      	cmp	r3, #8
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003208:	4b8e      	ldr	r3, [pc, #568]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003214:	d00c      	beq.n	8003230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b8b      	ldr	r3, [pc, #556]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d112      	bne.n	8003248 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322e:	d10b      	bne.n	8003248 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	4b84      	ldr	r3, [pc, #528]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05b      	beq.n	80032f4 <HAL_RCC_OscConfig+0x124>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d157      	bne.n	80032f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e25a      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x90>
 8003252:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7b      	ldr	r2, [pc, #492]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xcc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0xb4>
 800326a:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a72      	ldr	r2, [pc, #456]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xcc>
 8003284:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b6c      	ldr	r3, [pc, #432]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6b      	ldr	r2, [pc, #428]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fcdc 	bl	8001c60 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fcd8 	bl	8001c60 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e21f      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xdc>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fcc8 	bl	8001c60 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fcc4 	bl	8001c60 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e20b      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x104>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06f      	beq.n	80033e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003302:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d017      	beq.n	800333e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800330e:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800331a:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x186>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1d3      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4937      	ldr	r1, [pc, #220]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x278>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe fc71 	bl	8001c60 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe fc6d 	bl	8001c60 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1b4      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4925      	ldr	r1, [pc, #148]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x278>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fc50 	bl	8001c60 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe fc4c 	bl	8001c60 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e193      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCC_OscConfig+0x27c>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fc30 	bl	8001c60 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe fc2c 	bl	8001c60 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e173      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x274>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x234>
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_OscConfig+0x27c>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fc19 	bl	8001c60 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe fc15 	bl	8001c60 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d907      	bls.n	8003450 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e15c      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b8a      	ldr	r3, [pc, #552]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ea      	bne.n	8003432 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b83      	ldr	r3, [pc, #524]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b7f      	ldr	r3, [pc, #508]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a7e      	ldr	r2, [pc, #504]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b7c      	ldr	r3, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b79      	ldr	r3, [pc, #484]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a75      	ldr	r2, [pc, #468]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fbd5 	bl	8001c60 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe fbd1 	bl	8001c60 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e118      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x31e>
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x358>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x340>
 80034f6:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b5e      	ldr	r3, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x358>
 8003510:	4b5a      	ldr	r3, [pc, #360]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a59      	ldr	r2, [pc, #356]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	4b57      	ldr	r3, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a56      	ldr	r2, [pc, #344]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe fb96 	bl	8001c60 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe fb92 	bl	8001c60 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0d7      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x368>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fb80 	bl	8001c60 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe fb7c 	bl	8001c60 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0c1      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a3a      	ldr	r2, [pc, #232]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ad 	beq.w	80036fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d060      	beq.n	8003670 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d145      	bne.n	8003642 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x4b4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe fb50 	bl	8001c60 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fb4c 	bl	8001c60 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e093      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	491b      	ldr	r1, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4b4>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe fb21 	bl	8001c60 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe fb1d 	bl	8001c60 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e064      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x452>
 8003640:	e05c      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_OscConfig+0x4b4>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fb0a 	bl	8001c60 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fb06 	bl	8001c60 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04d      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x480>
 800366e:	e045      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e040      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_RCC_OscConfig+0x538>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d030      	beq.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d129      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d122      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d119      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10f      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e041      	b.n	80037a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fff2 	bl	800171c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f000 fc92 	bl	8004074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d001      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e04e      	b.n	8003862 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a23      	ldr	r2, [pc, #140]	; (8003870 <HAL_TIM_Base_Start_IT+0xc4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x80>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ee:	d01d      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x80>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <HAL_TIM_Base_Start_IT+0xc8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x80>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <HAL_TIM_Base_Start_IT+0xcc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x80>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1c      	ldr	r2, [pc, #112]	; (800387c <HAL_TIM_Base_Start_IT+0xd0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x80>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_TIM_Base_Start_IT+0xd4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x80>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a19      	ldr	r2, [pc, #100]	; (8003884 <HAL_TIM_Base_Start_IT+0xd8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x80>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a18      	ldr	r2, [pc, #96]	; (8003888 <HAL_TIM_Base_Start_IT+0xdc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b06      	cmp	r3, #6
 800383c:	d010      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	e007      	b.n	8003860 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800
 800387c:	40000c00 	.word	0x40000c00
 8003880:	40010400 	.word	0x40010400
 8003884:	40014000 	.word	0x40014000
 8003888:	40001800 	.word	0x40001800

0800388c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e041      	b.n	8003922 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f839 	bl	800392a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f000 fbd2 	bl	8004074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <HAL_TIM_IC_Start_IT+0x1e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e013      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x46>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d104      	bne.n	800396e <HAL_TIM_IC_Start_IT+0x2e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e00b      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x46>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d104      	bne.n	800397e <HAL_TIM_IC_Start_IT+0x3e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e003      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x46>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_TIM_IC_Start_IT+0x58>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e013      	b.n	80039c0 <HAL_TIM_IC_Start_IT+0x80>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d104      	bne.n	80039a8 <HAL_TIM_IC_Start_IT+0x68>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e00b      	b.n	80039c0 <HAL_TIM_IC_Start_IT+0x80>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d104      	bne.n	80039b8 <HAL_TIM_IC_Start_IT+0x78>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e003      	b.n	80039c0 <HAL_TIM_IC_Start_IT+0x80>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80039c2:	7bbb      	ldrb	r3, [r7, #14]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d102      	bne.n	80039ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80039c8:	7b7b      	ldrb	r3, [r7, #13]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d001      	beq.n	80039d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0cc      	b.n	8003b6c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_IC_Start_IT+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e0:	e013      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0xca>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_IC_Start_IT+0xb2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f0:	e00b      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0xca>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start_IT+0xc2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	e003      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0xca>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_IC_Start_IT+0xda>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a18:	e013      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x102>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_IC_Start_IT+0xea>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a28:	e00b      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x102>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIM_IC_Start_IT+0xfa>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a38:	e003      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x102>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d841      	bhi.n	8003acc <HAL_TIM_IC_Start_IT+0x18c>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HAL_TIM_IC_Start_IT+0x110>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003acd 	.word	0x08003acd
 8003a58:	08003acd 	.word	0x08003acd
 8003a5c:	08003acd 	.word	0x08003acd
 8003a60:	08003a97 	.word	0x08003a97
 8003a64:	08003acd 	.word	0x08003acd
 8003a68:	08003acd 	.word	0x08003acd
 8003a6c:	08003acd 	.word	0x08003acd
 8003a70:	08003aa9 	.word	0x08003aa9
 8003a74:	08003acd 	.word	0x08003acd
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003abb 	.word	0x08003abb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0202 	orr.w	r2, r2, #2
 8003a92:	60da      	str	r2, [r3, #12]
      break;
 8003a94:	e01d      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0204 	orr.w	r2, r2, #4
 8003aa4:	60da      	str	r2, [r3, #12]
      break;
 8003aa6:	e014      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	60da      	str	r2, [r3, #12]
      break;
 8003ab8:	e00b      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0210 	orr.w	r2, r2, #16
 8003ac8:	60da      	str	r2, [r3, #12]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d148      	bne.n	8003b6a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fd37 	bl	8004554 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <HAL_TIM_IC_Start_IT+0x234>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af8:	d01d      	beq.n	8003b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_TIM_IC_Start_IT+0x238>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d018      	beq.n	8003b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <HAL_TIM_IC_Start_IT+0x23c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <HAL_TIM_IC_Start_IT+0x240>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <HAL_TIM_IC_Start_IT+0x244>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <HAL_TIM_IC_Start_IT+0x248>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_TIM_IC_Start_IT+0x24c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d111      	bne.n	8003b5a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d010      	beq.n	8003b6a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	e007      	b.n	8003b6a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40000c00 	.word	0x40000c00
 8003b84:	40010400 	.word	0x40010400
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40001800 	.word	0x40001800

08003b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d020      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01b      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0202 	mvn.w	r2, #2
 8003bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fd fc1c 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa27 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fa2e 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d020      	beq.n	8003c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01b      	beq.n	8003c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0204 	mvn.w	r2, #4
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fbf6 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa01 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fa08 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d020      	beq.n	8003c8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01b      	beq.n	8003c8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0208 	mvn.w	r2, #8
 8003c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2204      	movs	r2, #4
 8003c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fbd0 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9db 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f9e2 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d020      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01b      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0210 	mvn.w	r2, #16
 8003ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2208      	movs	r2, #8
 8003cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fbaa 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 8003cc4:	e005      	b.n	8003cd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9b5 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f9bc 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0201 	mvn.w	r2, #1
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fbf8 	bl	80014ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fcc6 	bl	80046ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00c      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f98d 	bl	800405e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0220 	mvn.w	r2, #32
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fc98 	bl	8004698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e088      	b.n	8003ea0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003dac:	f000 fa0e 	bl	80041cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 020c 	bic.w	r2, r2, #12
 8003dbe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	619a      	str	r2, [r3, #24]
 8003dd2:	e060      	b.n	8003e96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d11c      	bne.n	8003e14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003dea:	f000 fa92 	bl	8004312 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003dfc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6999      	ldr	r1, [r3, #24]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	021a      	lsls	r2, r3, #8
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
 8003e12:	e040      	b.n	8003e96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d11b      	bne.n	8003e52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003e2a:	f000 fadf 	bl	80043ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 020c 	bic.w	r2, r2, #12
 8003e3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	61da      	str	r2, [r3, #28]
 8003e50:	e021      	b.n	8003e96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d11c      	bne.n	8003e92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003e68:	f000 fafc 	bl	8004464 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69d9      	ldr	r1, [r3, #28]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	61da      	str	r2, [r3, #28]
 8003e90:	e001      	b.n	8003e96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0b4      	b.n	800402e <HAL_TIM_ConfigClockSource+0x186>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efc:	d03e      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0xd4>
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f02:	f200 8087 	bhi.w	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	f000 8086 	beq.w	800401a <HAL_TIM_ConfigClockSource+0x172>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d87f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b70      	cmp	r3, #112	; 0x70
 8003f16:	d01a      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xa6>
 8003f18:	2b70      	cmp	r3, #112	; 0x70
 8003f1a:	d87b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	d050      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f20:	2b60      	cmp	r3, #96	; 0x60
 8003f22:	d877      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d03c      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f28:	2b50      	cmp	r3, #80	; 0x50
 8003f2a:	d873      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d058      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d86f      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d064      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d86b      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d060      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d867      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d05c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d05a      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	e062      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f5e:	f000 fad9 	bl	8004514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	609a      	str	r2, [r3, #8]
      break;
 8003f7a:	e04f      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f8c:	f000 fac2 	bl	8004514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9e:	609a      	str	r2, [r3, #8]
      break;
 8003fa0:	e03c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 f980 	bl	80042b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2150      	movs	r1, #80	; 0x50
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fa8f 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e02c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 f9dc 	bl	800438c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2160      	movs	r1, #96	; 0x60
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fa7f 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e01c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 f960 	bl	80042b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fa6f 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8004000:	e00c      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f000 fa66 	bl	80044de <TIM_ITRx_SetConfig>
      break;
 8004012:	e003      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	e000      	b.n	800401c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800401a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <TIM_Base_SetConfig+0x12c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004092:	d00f      	beq.n	80040b4 <TIM_Base_SetConfig+0x40>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a43      	ldr	r2, [pc, #268]	; (80041a4 <TIM_Base_SetConfig+0x130>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00b      	beq.n	80040b4 <TIM_Base_SetConfig+0x40>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a42      	ldr	r2, [pc, #264]	; (80041a8 <TIM_Base_SetConfig+0x134>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <TIM_Base_SetConfig+0x40>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a41      	ldr	r2, [pc, #260]	; (80041ac <TIM_Base_SetConfig+0x138>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_Base_SetConfig+0x40>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a40      	ldr	r2, [pc, #256]	; (80041b0 <TIM_Base_SetConfig+0x13c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d108      	bne.n	80040c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a35      	ldr	r2, [pc, #212]	; (80041a0 <TIM_Base_SetConfig+0x12c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d02b      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d4:	d027      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a32      	ldr	r2, [pc, #200]	; (80041a4 <TIM_Base_SetConfig+0x130>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d023      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <TIM_Base_SetConfig+0x134>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01f      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a30      	ldr	r2, [pc, #192]	; (80041ac <TIM_Base_SetConfig+0x138>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01b      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <TIM_Base_SetConfig+0x13c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d017      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2e      	ldr	r2, [pc, #184]	; (80041b4 <TIM_Base_SetConfig+0x140>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <TIM_Base_SetConfig+0x144>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00f      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <TIM_Base_SetConfig+0x148>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00b      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2b      	ldr	r2, [pc, #172]	; (80041c0 <TIM_Base_SetConfig+0x14c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <TIM_Base_SetConfig+0x150>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <TIM_Base_SetConfig+0x154>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d108      	bne.n	8004138 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a10      	ldr	r2, [pc, #64]	; (80041a0 <TIM_Base_SetConfig+0x12c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0xf8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <TIM_Base_SetConfig+0x13c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d103      	bne.n	8004174 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f023 0201 	bic.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	611a      	str	r2, [r3, #16]
  }
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40010400 	.word	0x40010400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800
 80041c0:	40001800 	.word	0x40001800
 80041c4:	40001c00 	.word	0x40001c00
 80041c8:	40002000 	.word	0x40002000

080041cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0201 	bic.w	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a28      	ldr	r2, [pc, #160]	; (8004298 <TIM_TI1_SetConfig+0xcc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01b      	beq.n	8004232 <TIM_TI1_SetConfig+0x66>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d017      	beq.n	8004232 <TIM_TI1_SetConfig+0x66>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <TIM_TI1_SetConfig+0xd0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <TIM_TI1_SetConfig+0x66>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <TIM_TI1_SetConfig+0xd4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00f      	beq.n	8004232 <TIM_TI1_SetConfig+0x66>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <TIM_TI1_SetConfig+0xd8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00b      	beq.n	8004232 <TIM_TI1_SetConfig+0x66>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <TIM_TI1_SetConfig+0xdc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <TIM_TI1_SetConfig+0x66>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a21      	ldr	r2, [pc, #132]	; (80042ac <TIM_TI1_SetConfig+0xe0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_TI1_SetConfig+0x66>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a20      	ldr	r2, [pc, #128]	; (80042b0 <TIM_TI1_SetConfig+0xe4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d101      	bne.n	8004236 <TIM_TI1_SetConfig+0x6a>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <TIM_TI1_SetConfig+0x6c>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e003      	b.n	8004256 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	b2db      	uxtb	r3, r3
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f023 030a 	bic.w	r3, r3, #10
 8004270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 030a 	and.w	r3, r3, #10
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40010400 	.word	0x40010400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40001800 	.word	0x40001800

080042b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f023 030a 	bic.w	r3, r3, #10
 80042f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004312:	b480      	push	{r7}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0210 	bic.w	r2, r3, #16
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	b29b      	uxth	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004364:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0210 	bic.w	r2, r3, #16
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	031b      	lsls	r3, r3, #12
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f023 0303 	bic.w	r3, r3, #3
 8004418:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004428:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	b2db      	uxtb	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	031b      	lsls	r3, r3, #12
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	031b      	lsls	r3, r3, #12
 80044bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f043 0307 	orr.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800452e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	021a      	lsls	r2, r3, #8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	431a      	orrs	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e05a      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d01d      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a15      	ldr	r2, [pc, #84]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40010400 	.word	0x40010400
 8004690:	40014000 	.word	0x40014000
 8004694:	40001800 	.word	0x40001800

08004698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e042      	b.n	8004758 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd f866 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f973 	bl	80049f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b20      	cmp	r3, #32
 800477e:	d175      	bne.n	800486c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_UART_Transmit+0x2c>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e06e      	b.n	800486e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2221      	movs	r2, #33	; 0x21
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479e:	f7fd fa5f 	bl	8001c60 <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d108      	bne.n	80047cc <HAL_UART_Transmit+0x6c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e003      	b.n	80047d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047d4:	e02e      	b.n	8004834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f848 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e03a      	b.n	800486e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800480c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3302      	adds	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e007      	b.n	8004826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	3301      	adds	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1cb      	bne.n	80047d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f814 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e006      	b.n	800486e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004886:	e03b      	b.n	8004900 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d037      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fd f9e6 	bl	8001c60 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e03a      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d023      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b80      	cmp	r3, #128	; 0x80
 80048bc:	d020      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d01d      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d116      	bne.n	8004900 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f81d 	bl	8004928 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2208      	movs	r2, #8
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e00f      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	429a      	cmp	r2, r3
 800491c:	d0b4      	beq.n	8004888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b095      	sub	sp, #84	; 0x54
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004950:	643a      	str	r2, [r7, #64]	; 0x40
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	61fb      	str	r3, [r7, #28]
   return(result);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	2b01      	cmp	r3, #1
 800499e:	d119      	bne.n	80049d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c0:	61ba      	str	r2, [r7, #24]
 80049c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049e2:	bf00      	nop
 80049e4:	3754      	adds	r7, #84	; 0x54
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b0c0      	sub	sp, #256	; 0x100
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	68d9      	ldr	r1, [r3, #12]
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	ea40 0301 	orr.w	r3, r0, r1
 8004a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a48:	f021 010c 	bic.w	r1, r1, #12
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a56:	430b      	orrs	r3, r1
 8004a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	6999      	ldr	r1, [r3, #24]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	ea40 0301 	orr.w	r3, r0, r1
 8004a76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b8f      	ldr	r3, [pc, #572]	; (8004cbc <UART_SetConfig+0x2cc>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d005      	beq.n	8004a90 <UART_SetConfig+0xa0>
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b8d      	ldr	r3, [pc, #564]	; (8004cc0 <UART_SetConfig+0x2d0>)
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d104      	bne.n	8004a9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7fd fe30 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8004a94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a98:	e003      	b.n	8004aa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a9a:	f7fd fe17 	bl	80026cc <HAL_RCC_GetPCLK1Freq>
 8004a9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	f040 810c 	bne.w	8004cc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aca:	415b      	adcs	r3, r3
 8004acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	eb12 0801 	adds.w	r8, r2, r1
 8004ad8:	4629      	mov	r1, r5
 8004ada:	eb43 0901 	adc.w	r9, r3, r1
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af2:	4690      	mov	r8, r2
 8004af4:	4699      	mov	r9, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	eb18 0303 	adds.w	r3, r8, r3
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b00:	462b      	mov	r3, r5
 8004b02:	eb49 0303 	adc.w	r3, r9, r3
 8004b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b1e:	460b      	mov	r3, r1
 8004b20:	18db      	adds	r3, r3, r3
 8004b22:	653b      	str	r3, [r7, #80]	; 0x50
 8004b24:	4613      	mov	r3, r2
 8004b26:	eb42 0303 	adc.w	r3, r2, r3
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b34:	f7fc f858 	bl	8000be8 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4b61      	ldr	r3, [pc, #388]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	011c      	lsls	r4, r3, #4
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b60:	415b      	adcs	r3, r3
 8004b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b68:	4641      	mov	r1, r8
 8004b6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb43 0b01 	adc.w	fp, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b88:	4692      	mov	sl, r2
 8004b8a:	469b      	mov	fp, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b96:	464b      	mov	r3, r9
 8004b98:	eb4b 0303 	adc.w	r3, fp, r3
 8004b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	18db      	adds	r3, r3, r3
 8004bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bba:	4613      	mov	r3, r2
 8004bbc:	eb42 0303 	adc.w	r3, r2, r3
 8004bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bca:	f7fc f80d 	bl	8000be8 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	; 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bea:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004bec:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf8:	441c      	add	r4, r3
 8004bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	1891      	adds	r1, r2, r2
 8004c12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c14:	415b      	adcs	r3, r3
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	1851      	adds	r1, r2, r1
 8004c20:	6339      	str	r1, [r7, #48]	; 0x30
 8004c22:	4649      	mov	r1, r9
 8004c24:	414b      	adcs	r3, r1
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c34:	4659      	mov	r1, fp
 8004c36:	00cb      	lsls	r3, r1, #3
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3e:	4651      	mov	r1, sl
 8004c40:	00ca      	lsls	r2, r1, #3
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c50:	464b      	mov	r3, r9
 8004c52:	460a      	mov	r2, r1
 8004c54:	eb42 0303 	adc.w	r3, r2, r3
 8004c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c70:	460b      	mov	r3, r1
 8004c72:	18db      	adds	r3, r3, r3
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	4613      	mov	r3, r2
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c86:	f7fb ffaf 	bl	8000be8 <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004c90:	fba3 1302 	umull	r1, r3, r3, r2
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	2164      	movs	r1, #100	; 0x64
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	3332      	adds	r3, #50	; 0x32
 8004ca2:	4a08      	ldr	r2, [pc, #32]	; (8004cc4 <UART_SetConfig+0x2d4>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	f003 0207 	and.w	r2, r3, #7
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4422      	add	r2, r4
 8004cb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cb8:	e106      	b.n	8004ec8 <UART_SetConfig+0x4d8>
 8004cba:	bf00      	nop
 8004cbc:	40011000 	.word	0x40011000
 8004cc0:	40011400 	.word	0x40011400
 8004cc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cda:	4642      	mov	r2, r8
 8004cdc:	464b      	mov	r3, r9
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	6239      	str	r1, [r7, #32]
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cea:	4641      	mov	r1, r8
 8004cec:	1854      	adds	r4, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0501 	adc.w	r5, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	00eb      	lsls	r3, r5, #3
 8004cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d02:	00e2      	lsls	r2, r4, #3
 8004d04:	4614      	mov	r4, r2
 8004d06:	461d      	mov	r5, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	18e3      	adds	r3, r4, r3
 8004d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d10:	464b      	mov	r3, r9
 8004d12:	eb45 0303 	adc.w	r3, r5, r3
 8004d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d36:	4629      	mov	r1, r5
 8004d38:	008b      	lsls	r3, r1, #2
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d40:	4621      	mov	r1, r4
 8004d42:	008a      	lsls	r2, r1, #2
 8004d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d48:	f7fb ff4e 	bl	8000be8 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4b60      	ldr	r3, [pc, #384]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004d52:	fba3 2302 	umull	r2, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	011c      	lsls	r4, r3, #4
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	61b9      	str	r1, [r7, #24]
 8004d74:	415b      	adcs	r3, r3
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6139      	str	r1, [r7, #16]
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004db0:	464b      	mov	r3, r9
 8004db2:	460a      	mov	r2, r1
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	008b      	lsls	r3, r1, #2
 8004dd8:	4641      	mov	r1, r8
 8004dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dde:	4641      	mov	r1, r8
 8004de0:	008a      	lsls	r2, r1, #2
 8004de2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004de6:	f7fb feff 	bl	8000be8 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	4b38      	ldr	r3, [pc, #224]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004df2:	fba3 2301 	umull	r2, r3, r3, r1
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2264      	movs	r2, #100	; 0x64
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	1acb      	subs	r3, r1, r3
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	3332      	adds	r3, #50	; 0x32
 8004e04:	4a33      	ldr	r2, [pc, #204]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e10:	441c      	add	r4, r3
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	673b      	str	r3, [r7, #112]	; 0x70
 8004e1a:	677a      	str	r2, [r7, #116]	; 0x74
 8004e1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e30:	4641      	mov	r1, r8
 8004e32:	1851      	adds	r1, r2, r1
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	4649      	mov	r1, r9
 8004e38:	414b      	adcs	r3, r1
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e48:	4659      	mov	r1, fp
 8004e4a:	00cb      	lsls	r3, r1, #3
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e52:	4651      	mov	r1, sl
 8004e54:	00ca      	lsls	r2, r1, #3
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e62:	464b      	mov	r3, r9
 8004e64:	460a      	mov	r2, r1
 8004e66:	eb42 0303 	adc.w	r3, r2, r3
 8004e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	663b      	str	r3, [r7, #96]	; 0x60
 8004e76:	667a      	str	r2, [r7, #100]	; 0x64
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e84:	4649      	mov	r1, r9
 8004e86:	008b      	lsls	r3, r1, #2
 8004e88:	4641      	mov	r1, r8
 8004e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8e:	4641      	mov	r1, r8
 8004e90:	008a      	lsls	r2, r1, #2
 8004e92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e96:	f7fb fea7 	bl	8000be8 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2164      	movs	r1, #100	; 0x64
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	3332      	adds	r3, #50	; 0x32
 8004eb2:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <UART_SetConfig+0x4e4>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4422      	add	r2, r4
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed4:	51eb851f 	.word	0x51eb851f

08004ed8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed8:	b084      	sub	sp, #16
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	f107 001c 	add.w	r0, r7, #28
 8004ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d123      	bne.n	8004f3a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d105      	bne.n	8004f2e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa9a 	bl	8005468 <USB_CoreReset>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	e01b      	b.n	8004f72 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa8e 	bl	8005468 <USB_CoreReset>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
 8004f64:	e005      	b.n	8004f72 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f72:	7fbb      	ldrb	r3, [r7, #30]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d10b      	bne.n	8004f90 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f043 0206 	orr.w	r2, r3, #6
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f9c:	b004      	add	sp, #16
 8004f9e:	4770      	bx	lr

08004fa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 0201 	bic.w	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d115      	bne.n	8005010 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ff0:	200a      	movs	r0, #10
 8004ff2:	f7fc fe41 	bl	8001c78 <HAL_Delay>
      ms += 10U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	330a      	adds	r3, #10
 8004ffa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa25 	bl	800544c <USB_GetMode>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d01e      	beq.n	8005046 <USB_SetCurrentMode+0x84>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2bc7      	cmp	r3, #199	; 0xc7
 800500c:	d9f0      	bls.n	8004ff0 <USB_SetCurrentMode+0x2e>
 800500e:	e01a      	b.n	8005046 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d115      	bne.n	8005042 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005022:	200a      	movs	r0, #10
 8005024:	f7fc fe28 	bl	8001c78 <HAL_Delay>
      ms += 10U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	330a      	adds	r3, #10
 800502c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa0c 	bl	800544c <USB_GetMode>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <USB_SetCurrentMode+0x84>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2bc7      	cmp	r3, #199	; 0xc7
 800503e:	d9f0      	bls.n	8005022 <USB_SetCurrentMode+0x60>
 8005040:	e001      	b.n	8005046 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e005      	b.n	8005052 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2bc8      	cmp	r3, #200	; 0xc8
 800504a:	d101      	bne.n	8005050 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800505c:	b084      	sub	sp, #16
 800505e:	b580      	push	{r7, lr}
 8005060:	b086      	sub	sp, #24
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800506a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e009      	b.n	8005090 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3340      	adds	r3, #64	; 0x40
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	2200      	movs	r2, #0
 8005088:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	3301      	adds	r3, #1
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b0e      	cmp	r3, #14
 8005094:	d9f2      	bls.n	800507c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005096:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11c      	bne.n	80050d8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ac:	f043 0302 	orr.w	r3, r3, #2
 80050b0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e005      	b.n	80050e4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050ea:	461a      	mov	r2, r3
 80050ec:	2300      	movs	r3, #0
 80050ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d10d      	bne.n	8005114 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005100:	2100      	movs	r1, #0
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f968 	bl	80053d8 <USB_SetDevSpeed>
 8005108:	e008      	b.n	800511c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800510a:	2101      	movs	r1, #1
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f963 	bl	80053d8 <USB_SetDevSpeed>
 8005112:	e003      	b.n	800511c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005114:	2103      	movs	r1, #3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f95e 	bl	80053d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800511c:	2110      	movs	r1, #16
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8fa 	bl	8005318 <USB_FlushTxFifo>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f924 	bl	800537c <USB_FlushRxFifo>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005144:	461a      	mov	r2, r3
 8005146:	2300      	movs	r3, #0
 8005148:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e043      	b.n	80051f0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517e:	d118      	bne.n	80051b2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	461a      	mov	r2, r3
 8005194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e013      	b.n	80051c4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e008      	b.n	80051c4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	461a      	mov	r2, r3
 80051e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	3301      	adds	r3, #1
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051f4:	461a      	mov	r2, r3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d3b5      	bcc.n	8005168 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	e043      	b.n	800528a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005218:	d118      	bne.n	800524c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	e013      	b.n	800525e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005242:	461a      	mov	r2, r3
 8005244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e008      	b.n	800525e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005258:	461a      	mov	r2, r3
 800525a:	2300      	movs	r3, #0
 800525c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	461a      	mov	r2, r3
 800526c:	2300      	movs	r3, #0
 800526e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	461a      	mov	r2, r3
 800527e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	3301      	adds	r3, #1
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800528e:	461a      	mov	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4293      	cmp	r3, r2
 8005294:	d3b5      	bcc.n	8005202 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f043 0210 	orr.w	r2, r3, #16
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	4b10      	ldr	r3, [pc, #64]	; (8005314 <USB_DevInit+0x2b8>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f043 0208 	orr.w	r2, r3, #8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	f043 0304 	orr.w	r3, r3, #4
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005310:	b004      	add	sp, #16
 8005312:	4770      	bx	lr
 8005314:	803c3800 	.word	0x803c3800

08005318 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3301      	adds	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005332:	d901      	bls.n	8005338 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e01b      	b.n	8005370 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	daf2      	bge.n	8005326 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	019b      	lsls	r3, r3, #6
 8005348:	f043 0220 	orr.w	r2, r3, #32
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800535c:	d901      	bls.n	8005362 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e006      	b.n	8005370 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d0f0      	beq.n	8005350 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005394:	d901      	bls.n	800539a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e018      	b.n	80053cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	daf2      	bge.n	8005388 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2210      	movs	r2, #16
 80053aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80053b8:	d901      	bls.n	80053be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e006      	b.n	80053cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d0f0      	beq.n	80053ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f8:	4313      	orrs	r3, r2
 80053fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005424:	f023 0303 	bic.w	r3, r3, #3
 8005428:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005438:	f043 0302 	orr.w	r3, r3, #2
 800543c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f003 0301 	and.w	r3, r3, #1
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005480:	d901      	bls.n	8005486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e01b      	b.n	80054be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80054aa:	d901      	bls.n	80054b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e006      	b.n	80054be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d0f0      	beq.n	800549e <USB_CoreReset+0x36>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <__cvt>:
 80054ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ce:	ec55 4b10 	vmov	r4, r5, d0
 80054d2:	2d00      	cmp	r5, #0
 80054d4:	460e      	mov	r6, r1
 80054d6:	4619      	mov	r1, r3
 80054d8:	462b      	mov	r3, r5
 80054da:	bfbb      	ittet	lt
 80054dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054e0:	461d      	movlt	r5, r3
 80054e2:	2300      	movge	r3, #0
 80054e4:	232d      	movlt	r3, #45	; 0x2d
 80054e6:	700b      	strb	r3, [r1, #0]
 80054e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054ee:	4691      	mov	r9, r2
 80054f0:	f023 0820 	bic.w	r8, r3, #32
 80054f4:	bfbc      	itt	lt
 80054f6:	4622      	movlt	r2, r4
 80054f8:	4614      	movlt	r4, r2
 80054fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054fe:	d005      	beq.n	800550c <__cvt+0x42>
 8005500:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005504:	d100      	bne.n	8005508 <__cvt+0x3e>
 8005506:	3601      	adds	r6, #1
 8005508:	2102      	movs	r1, #2
 800550a:	e000      	b.n	800550e <__cvt+0x44>
 800550c:	2103      	movs	r1, #3
 800550e:	ab03      	add	r3, sp, #12
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	ab02      	add	r3, sp, #8
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	ec45 4b10 	vmov	d0, r4, r5
 800551a:	4653      	mov	r3, sl
 800551c:	4632      	mov	r2, r6
 800551e:	f000 fe8b 	bl	8006238 <_dtoa_r>
 8005522:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005526:	4607      	mov	r7, r0
 8005528:	d102      	bne.n	8005530 <__cvt+0x66>
 800552a:	f019 0f01 	tst.w	r9, #1
 800552e:	d022      	beq.n	8005576 <__cvt+0xac>
 8005530:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005534:	eb07 0906 	add.w	r9, r7, r6
 8005538:	d110      	bne.n	800555c <__cvt+0x92>
 800553a:	783b      	ldrb	r3, [r7, #0]
 800553c:	2b30      	cmp	r3, #48	; 0x30
 800553e:	d10a      	bne.n	8005556 <__cvt+0x8c>
 8005540:	2200      	movs	r2, #0
 8005542:	2300      	movs	r3, #0
 8005544:	4620      	mov	r0, r4
 8005546:	4629      	mov	r1, r5
 8005548:	f7fb fade 	bl	8000b08 <__aeabi_dcmpeq>
 800554c:	b918      	cbnz	r0, 8005556 <__cvt+0x8c>
 800554e:	f1c6 0601 	rsb	r6, r6, #1
 8005552:	f8ca 6000 	str.w	r6, [sl]
 8005556:	f8da 3000 	ldr.w	r3, [sl]
 800555a:	4499      	add	r9, r3
 800555c:	2200      	movs	r2, #0
 800555e:	2300      	movs	r3, #0
 8005560:	4620      	mov	r0, r4
 8005562:	4629      	mov	r1, r5
 8005564:	f7fb fad0 	bl	8000b08 <__aeabi_dcmpeq>
 8005568:	b108      	cbz	r0, 800556e <__cvt+0xa4>
 800556a:	f8cd 900c 	str.w	r9, [sp, #12]
 800556e:	2230      	movs	r2, #48	; 0x30
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	454b      	cmp	r3, r9
 8005574:	d307      	bcc.n	8005586 <__cvt+0xbc>
 8005576:	9b03      	ldr	r3, [sp, #12]
 8005578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800557a:	1bdb      	subs	r3, r3, r7
 800557c:	4638      	mov	r0, r7
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	b004      	add	sp, #16
 8005582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	9103      	str	r1, [sp, #12]
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e7f0      	b.n	8005570 <__cvt+0xa6>

0800558e <__exponent>:
 800558e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005590:	4603      	mov	r3, r0
 8005592:	2900      	cmp	r1, #0
 8005594:	bfb8      	it	lt
 8005596:	4249      	neglt	r1, r1
 8005598:	f803 2b02 	strb.w	r2, [r3], #2
 800559c:	bfb4      	ite	lt
 800559e:	222d      	movlt	r2, #45	; 0x2d
 80055a0:	222b      	movge	r2, #43	; 0x2b
 80055a2:	2909      	cmp	r1, #9
 80055a4:	7042      	strb	r2, [r0, #1]
 80055a6:	dd2a      	ble.n	80055fe <__exponent+0x70>
 80055a8:	f10d 0207 	add.w	r2, sp, #7
 80055ac:	4617      	mov	r7, r2
 80055ae:	260a      	movs	r6, #10
 80055b0:	4694      	mov	ip, r2
 80055b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80055b6:	fb06 1415 	mls	r4, r6, r5, r1
 80055ba:	3430      	adds	r4, #48	; 0x30
 80055bc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80055c0:	460c      	mov	r4, r1
 80055c2:	2c63      	cmp	r4, #99	; 0x63
 80055c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80055c8:	4629      	mov	r1, r5
 80055ca:	dcf1      	bgt.n	80055b0 <__exponent+0x22>
 80055cc:	3130      	adds	r1, #48	; 0x30
 80055ce:	f1ac 0402 	sub.w	r4, ip, #2
 80055d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055d6:	1c41      	adds	r1, r0, #1
 80055d8:	4622      	mov	r2, r4
 80055da:	42ba      	cmp	r2, r7
 80055dc:	d30a      	bcc.n	80055f4 <__exponent+0x66>
 80055de:	f10d 0209 	add.w	r2, sp, #9
 80055e2:	eba2 020c 	sub.w	r2, r2, ip
 80055e6:	42bc      	cmp	r4, r7
 80055e8:	bf88      	it	hi
 80055ea:	2200      	movhi	r2, #0
 80055ec:	4413      	add	r3, r2
 80055ee:	1a18      	subs	r0, r3, r0
 80055f0:	b003      	add	sp, #12
 80055f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80055f8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80055fc:	e7ed      	b.n	80055da <__exponent+0x4c>
 80055fe:	2330      	movs	r3, #48	; 0x30
 8005600:	3130      	adds	r1, #48	; 0x30
 8005602:	7083      	strb	r3, [r0, #2]
 8005604:	70c1      	strb	r1, [r0, #3]
 8005606:	1d03      	adds	r3, r0, #4
 8005608:	e7f1      	b.n	80055ee <__exponent+0x60>
	...

0800560c <_printf_float>:
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	ed2d 8b02 	vpush	{d8}
 8005614:	b08d      	sub	sp, #52	; 0x34
 8005616:	460c      	mov	r4, r1
 8005618:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800561c:	4616      	mov	r6, r2
 800561e:	461f      	mov	r7, r3
 8005620:	4605      	mov	r5, r0
 8005622:	f000 fd07 	bl	8006034 <_localeconv_r>
 8005626:	f8d0 a000 	ldr.w	sl, [r0]
 800562a:	4650      	mov	r0, sl
 800562c:	f7fa fe40 	bl	80002b0 <strlen>
 8005630:	2300      	movs	r3, #0
 8005632:	930a      	str	r3, [sp, #40]	; 0x28
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	9305      	str	r3, [sp, #20]
 8005638:	f8d8 3000 	ldr.w	r3, [r8]
 800563c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005640:	3307      	adds	r3, #7
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	f103 0208 	add.w	r2, r3, #8
 800564a:	f8c8 2000 	str.w	r2, [r8]
 800564e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005652:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	f8cd 8018 	str.w	r8, [sp, #24]
 800565c:	ee08 0a10 	vmov	s16, r0
 8005660:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005668:	4b9e      	ldr	r3, [pc, #632]	; (80058e4 <_printf_float+0x2d8>)
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	f7fb fa7d 	bl	8000b6c <__aeabi_dcmpun>
 8005672:	bb88      	cbnz	r0, 80056d8 <_printf_float+0xcc>
 8005674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005678:	4b9a      	ldr	r3, [pc, #616]	; (80058e4 <_printf_float+0x2d8>)
 800567a:	f04f 32ff 	mov.w	r2, #4294967295
 800567e:	f7fb fa57 	bl	8000b30 <__aeabi_dcmple>
 8005682:	bb48      	cbnz	r0, 80056d8 <_printf_float+0xcc>
 8005684:	2200      	movs	r2, #0
 8005686:	2300      	movs	r3, #0
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fb fa46 	bl	8000b1c <__aeabi_dcmplt>
 8005690:	b110      	cbz	r0, 8005698 <_printf_float+0x8c>
 8005692:	232d      	movs	r3, #45	; 0x2d
 8005694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005698:	4a93      	ldr	r2, [pc, #588]	; (80058e8 <_printf_float+0x2dc>)
 800569a:	4b94      	ldr	r3, [pc, #592]	; (80058ec <_printf_float+0x2e0>)
 800569c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056a0:	bf94      	ite	ls
 80056a2:	4690      	movls	r8, r2
 80056a4:	4698      	movhi	r8, r3
 80056a6:	2303      	movs	r3, #3
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	9b05      	ldr	r3, [sp, #20]
 80056ac:	f023 0304 	bic.w	r3, r3, #4
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	f04f 0900 	mov.w	r9, #0
 80056b6:	9700      	str	r7, [sp, #0]
 80056b8:	4633      	mov	r3, r6
 80056ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80056bc:	4621      	mov	r1, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 f9da 	bl	8005a78 <_printf_common>
 80056c4:	3001      	adds	r0, #1
 80056c6:	f040 8090 	bne.w	80057ea <_printf_float+0x1de>
 80056ca:	f04f 30ff 	mov.w	r0, #4294967295
 80056ce:	b00d      	add	sp, #52	; 0x34
 80056d0:	ecbd 8b02 	vpop	{d8}
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	f7fb fa44 	bl	8000b6c <__aeabi_dcmpun>
 80056e4:	b140      	cbz	r0, 80056f8 <_printf_float+0xec>
 80056e6:	464b      	mov	r3, r9
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfbc      	itt	lt
 80056ec:	232d      	movlt	r3, #45	; 0x2d
 80056ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056f2:	4a7f      	ldr	r2, [pc, #508]	; (80058f0 <_printf_float+0x2e4>)
 80056f4:	4b7f      	ldr	r3, [pc, #508]	; (80058f4 <_printf_float+0x2e8>)
 80056f6:	e7d1      	b.n	800569c <_printf_float+0x90>
 80056f8:	6863      	ldr	r3, [r4, #4]
 80056fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056fe:	9206      	str	r2, [sp, #24]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	d13f      	bne.n	8005784 <_printf_float+0x178>
 8005704:	2306      	movs	r3, #6
 8005706:	6063      	str	r3, [r4, #4]
 8005708:	9b05      	ldr	r3, [sp, #20]
 800570a:	6861      	ldr	r1, [r4, #4]
 800570c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005710:	2300      	movs	r3, #0
 8005712:	9303      	str	r3, [sp, #12]
 8005714:	ab0a      	add	r3, sp, #40	; 0x28
 8005716:	e9cd b301 	strd	fp, r3, [sp, #4]
 800571a:	ab09      	add	r3, sp, #36	; 0x24
 800571c:	ec49 8b10 	vmov	d0, r8, r9
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	6022      	str	r2, [r4, #0]
 8005724:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005728:	4628      	mov	r0, r5
 800572a:	f7ff fece 	bl	80054ca <__cvt>
 800572e:	9b06      	ldr	r3, [sp, #24]
 8005730:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005732:	2b47      	cmp	r3, #71	; 0x47
 8005734:	4680      	mov	r8, r0
 8005736:	d108      	bne.n	800574a <_printf_float+0x13e>
 8005738:	1cc8      	adds	r0, r1, #3
 800573a:	db02      	blt.n	8005742 <_printf_float+0x136>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	4299      	cmp	r1, r3
 8005740:	dd41      	ble.n	80057c6 <_printf_float+0x1ba>
 8005742:	f1ab 0302 	sub.w	r3, fp, #2
 8005746:	fa5f fb83 	uxtb.w	fp, r3
 800574a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800574e:	d820      	bhi.n	8005792 <_printf_float+0x186>
 8005750:	3901      	subs	r1, #1
 8005752:	465a      	mov	r2, fp
 8005754:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005758:	9109      	str	r1, [sp, #36]	; 0x24
 800575a:	f7ff ff18 	bl	800558e <__exponent>
 800575e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005760:	1813      	adds	r3, r2, r0
 8005762:	2a01      	cmp	r2, #1
 8005764:	4681      	mov	r9, r0
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	dc02      	bgt.n	8005770 <_printf_float+0x164>
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	07d2      	lsls	r2, r2, #31
 800576e:	d501      	bpl.n	8005774 <_printf_float+0x168>
 8005770:	3301      	adds	r3, #1
 8005772:	6123      	str	r3, [r4, #16]
 8005774:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005778:	2b00      	cmp	r3, #0
 800577a:	d09c      	beq.n	80056b6 <_printf_float+0xaa>
 800577c:	232d      	movs	r3, #45	; 0x2d
 800577e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005782:	e798      	b.n	80056b6 <_printf_float+0xaa>
 8005784:	9a06      	ldr	r2, [sp, #24]
 8005786:	2a47      	cmp	r2, #71	; 0x47
 8005788:	d1be      	bne.n	8005708 <_printf_float+0xfc>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1bc      	bne.n	8005708 <_printf_float+0xfc>
 800578e:	2301      	movs	r3, #1
 8005790:	e7b9      	b.n	8005706 <_printf_float+0xfa>
 8005792:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005796:	d118      	bne.n	80057ca <_printf_float+0x1be>
 8005798:	2900      	cmp	r1, #0
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	dd0b      	ble.n	80057b6 <_printf_float+0x1aa>
 800579e:	6121      	str	r1, [r4, #16]
 80057a0:	b913      	cbnz	r3, 80057a8 <_printf_float+0x19c>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	07d0      	lsls	r0, r2, #31
 80057a6:	d502      	bpl.n	80057ae <_printf_float+0x1a2>
 80057a8:	3301      	adds	r3, #1
 80057aa:	440b      	add	r3, r1
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80057b0:	f04f 0900 	mov.w	r9, #0
 80057b4:	e7de      	b.n	8005774 <_printf_float+0x168>
 80057b6:	b913      	cbnz	r3, 80057be <_printf_float+0x1b2>
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	07d2      	lsls	r2, r2, #31
 80057bc:	d501      	bpl.n	80057c2 <_printf_float+0x1b6>
 80057be:	3302      	adds	r3, #2
 80057c0:	e7f4      	b.n	80057ac <_printf_float+0x1a0>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e7f2      	b.n	80057ac <_printf_float+0x1a0>
 80057c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057cc:	4299      	cmp	r1, r3
 80057ce:	db05      	blt.n	80057dc <_printf_float+0x1d0>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	6121      	str	r1, [r4, #16]
 80057d4:	07d8      	lsls	r0, r3, #31
 80057d6:	d5ea      	bpl.n	80057ae <_printf_float+0x1a2>
 80057d8:	1c4b      	adds	r3, r1, #1
 80057da:	e7e7      	b.n	80057ac <_printf_float+0x1a0>
 80057dc:	2900      	cmp	r1, #0
 80057de:	bfd4      	ite	le
 80057e0:	f1c1 0202 	rsble	r2, r1, #2
 80057e4:	2201      	movgt	r2, #1
 80057e6:	4413      	add	r3, r2
 80057e8:	e7e0      	b.n	80057ac <_printf_float+0x1a0>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	055a      	lsls	r2, r3, #21
 80057ee:	d407      	bmi.n	8005800 <_printf_float+0x1f4>
 80057f0:	6923      	ldr	r3, [r4, #16]
 80057f2:	4642      	mov	r2, r8
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	d12c      	bne.n	8005858 <_printf_float+0x24c>
 80057fe:	e764      	b.n	80056ca <_printf_float+0xbe>
 8005800:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005804:	f240 80e0 	bls.w	80059c8 <_printf_float+0x3bc>
 8005808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	f7fb f97a 	bl	8000b08 <__aeabi_dcmpeq>
 8005814:	2800      	cmp	r0, #0
 8005816:	d034      	beq.n	8005882 <_printf_float+0x276>
 8005818:	4a37      	ldr	r2, [pc, #220]	; (80058f8 <_printf_float+0x2ec>)
 800581a:	2301      	movs	r3, #1
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f af51 	beq.w	80056ca <_printf_float+0xbe>
 8005828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800582c:	429a      	cmp	r2, r3
 800582e:	db02      	blt.n	8005836 <_printf_float+0x22a>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	07d8      	lsls	r0, r3, #31
 8005834:	d510      	bpl.n	8005858 <_printf_float+0x24c>
 8005836:	ee18 3a10 	vmov	r3, s16
 800583a:	4652      	mov	r2, sl
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	47b8      	blx	r7
 8005842:	3001      	adds	r0, #1
 8005844:	f43f af41 	beq.w	80056ca <_printf_float+0xbe>
 8005848:	f04f 0800 	mov.w	r8, #0
 800584c:	f104 091a 	add.w	r9, r4, #26
 8005850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005852:	3b01      	subs	r3, #1
 8005854:	4543      	cmp	r3, r8
 8005856:	dc09      	bgt.n	800586c <_printf_float+0x260>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	079b      	lsls	r3, r3, #30
 800585c:	f100 8107 	bmi.w	8005a6e <_printf_float+0x462>
 8005860:	68e0      	ldr	r0, [r4, #12]
 8005862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005864:	4298      	cmp	r0, r3
 8005866:	bfb8      	it	lt
 8005868:	4618      	movlt	r0, r3
 800586a:	e730      	b.n	80056ce <_printf_float+0xc2>
 800586c:	2301      	movs	r3, #1
 800586e:	464a      	mov	r2, r9
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f af27 	beq.w	80056ca <_printf_float+0xbe>
 800587c:	f108 0801 	add.w	r8, r8, #1
 8005880:	e7e6      	b.n	8005850 <_printf_float+0x244>
 8005882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	dc39      	bgt.n	80058fc <_printf_float+0x2f0>
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <_printf_float+0x2ec>)
 800588a:	2301      	movs	r3, #1
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	f43f af19 	beq.w	80056ca <_printf_float+0xbe>
 8005898:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800589c:	4313      	orrs	r3, r2
 800589e:	d102      	bne.n	80058a6 <_printf_float+0x29a>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07d9      	lsls	r1, r3, #31
 80058a4:	d5d8      	bpl.n	8005858 <_printf_float+0x24c>
 80058a6:	ee18 3a10 	vmov	r3, s16
 80058aa:	4652      	mov	r2, sl
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f af09 	beq.w	80056ca <_printf_float+0xbe>
 80058b8:	f04f 0900 	mov.w	r9, #0
 80058bc:	f104 0a1a 	add.w	sl, r4, #26
 80058c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c2:	425b      	negs	r3, r3
 80058c4:	454b      	cmp	r3, r9
 80058c6:	dc01      	bgt.n	80058cc <_printf_float+0x2c0>
 80058c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ca:	e792      	b.n	80057f2 <_printf_float+0x1e6>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4652      	mov	r2, sl
 80058d0:	4631      	mov	r1, r6
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	f43f aef7 	beq.w	80056ca <_printf_float+0xbe>
 80058dc:	f109 0901 	add.w	r9, r9, #1
 80058e0:	e7ee      	b.n	80058c0 <_printf_float+0x2b4>
 80058e2:	bf00      	nop
 80058e4:	7fefffff 	.word	0x7fefffff
 80058e8:	08008268 	.word	0x08008268
 80058ec:	0800826c 	.word	0x0800826c
 80058f0:	08008270 	.word	0x08008270
 80058f4:	08008274 	.word	0x08008274
 80058f8:	08008278 	.word	0x08008278
 80058fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005900:	429a      	cmp	r2, r3
 8005902:	bfa8      	it	ge
 8005904:	461a      	movge	r2, r3
 8005906:	2a00      	cmp	r2, #0
 8005908:	4691      	mov	r9, r2
 800590a:	dc37      	bgt.n	800597c <_printf_float+0x370>
 800590c:	f04f 0b00 	mov.w	fp, #0
 8005910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005914:	f104 021a 	add.w	r2, r4, #26
 8005918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	eba3 0309 	sub.w	r3, r3, r9
 8005920:	455b      	cmp	r3, fp
 8005922:	dc33      	bgt.n	800598c <_printf_float+0x380>
 8005924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005928:	429a      	cmp	r2, r3
 800592a:	db3b      	blt.n	80059a4 <_printf_float+0x398>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07da      	lsls	r2, r3, #31
 8005930:	d438      	bmi.n	80059a4 <_printf_float+0x398>
 8005932:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005936:	eba2 0903 	sub.w	r9, r2, r3
 800593a:	9b05      	ldr	r3, [sp, #20]
 800593c:	1ad2      	subs	r2, r2, r3
 800593e:	4591      	cmp	r9, r2
 8005940:	bfa8      	it	ge
 8005942:	4691      	movge	r9, r2
 8005944:	f1b9 0f00 	cmp.w	r9, #0
 8005948:	dc35      	bgt.n	80059b6 <_printf_float+0x3aa>
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005952:	f104 0a1a 	add.w	sl, r4, #26
 8005956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	eba3 0309 	sub.w	r3, r3, r9
 8005960:	4543      	cmp	r3, r8
 8005962:	f77f af79 	ble.w	8005858 <_printf_float+0x24c>
 8005966:	2301      	movs	r3, #1
 8005968:	4652      	mov	r2, sl
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f aeaa 	beq.w	80056ca <_printf_float+0xbe>
 8005976:	f108 0801 	add.w	r8, r8, #1
 800597a:	e7ec      	b.n	8005956 <_printf_float+0x34a>
 800597c:	4613      	mov	r3, r2
 800597e:	4631      	mov	r1, r6
 8005980:	4642      	mov	r2, r8
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	d1c0      	bne.n	800590c <_printf_float+0x300>
 800598a:	e69e      	b.n	80056ca <_printf_float+0xbe>
 800598c:	2301      	movs	r3, #1
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	9205      	str	r2, [sp, #20]
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f ae97 	beq.w	80056ca <_printf_float+0xbe>
 800599c:	9a05      	ldr	r2, [sp, #20]
 800599e:	f10b 0b01 	add.w	fp, fp, #1
 80059a2:	e7b9      	b.n	8005918 <_printf_float+0x30c>
 80059a4:	ee18 3a10 	vmov	r3, s16
 80059a8:	4652      	mov	r2, sl
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	d1be      	bne.n	8005932 <_printf_float+0x326>
 80059b4:	e689      	b.n	80056ca <_printf_float+0xbe>
 80059b6:	9a05      	ldr	r2, [sp, #20]
 80059b8:	464b      	mov	r3, r9
 80059ba:	4442      	add	r2, r8
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	d1c1      	bne.n	800594a <_printf_float+0x33e>
 80059c6:	e680      	b.n	80056ca <_printf_float+0xbe>
 80059c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ca:	2a01      	cmp	r2, #1
 80059cc:	dc01      	bgt.n	80059d2 <_printf_float+0x3c6>
 80059ce:	07db      	lsls	r3, r3, #31
 80059d0:	d53a      	bpl.n	8005a48 <_printf_float+0x43c>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4642      	mov	r2, r8
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f ae74 	beq.w	80056ca <_printf_float+0xbe>
 80059e2:	ee18 3a10 	vmov	r3, s16
 80059e6:	4652      	mov	r2, sl
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	f43f ae6b 	beq.w	80056ca <_printf_float+0xbe>
 80059f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059f8:	2200      	movs	r2, #0
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a00:	f7fb f882 	bl	8000b08 <__aeabi_dcmpeq>
 8005a04:	b9d8      	cbnz	r0, 8005a3e <_printf_float+0x432>
 8005a06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a0a:	f108 0201 	add.w	r2, r8, #1
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	d10e      	bne.n	8005a36 <_printf_float+0x42a>
 8005a18:	e657      	b.n	80056ca <_printf_float+0xbe>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	f43f ae50 	beq.w	80056ca <_printf_float+0xbe>
 8005a2a:	f108 0801 	add.w	r8, r8, #1
 8005a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a30:	3b01      	subs	r3, #1
 8005a32:	4543      	cmp	r3, r8
 8005a34:	dcf1      	bgt.n	8005a1a <_printf_float+0x40e>
 8005a36:	464b      	mov	r3, r9
 8005a38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a3c:	e6da      	b.n	80057f4 <_printf_float+0x1e8>
 8005a3e:	f04f 0800 	mov.w	r8, #0
 8005a42:	f104 0a1a 	add.w	sl, r4, #26
 8005a46:	e7f2      	b.n	8005a2e <_printf_float+0x422>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4642      	mov	r2, r8
 8005a4c:	e7df      	b.n	8005a0e <_printf_float+0x402>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	464a      	mov	r2, r9
 8005a52:	4631      	mov	r1, r6
 8005a54:	4628      	mov	r0, r5
 8005a56:	47b8      	blx	r7
 8005a58:	3001      	adds	r0, #1
 8005a5a:	f43f ae36 	beq.w	80056ca <_printf_float+0xbe>
 8005a5e:	f108 0801 	add.w	r8, r8, #1
 8005a62:	68e3      	ldr	r3, [r4, #12]
 8005a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a66:	1a5b      	subs	r3, r3, r1
 8005a68:	4543      	cmp	r3, r8
 8005a6a:	dcf0      	bgt.n	8005a4e <_printf_float+0x442>
 8005a6c:	e6f8      	b.n	8005860 <_printf_float+0x254>
 8005a6e:	f04f 0800 	mov.w	r8, #0
 8005a72:	f104 0919 	add.w	r9, r4, #25
 8005a76:	e7f4      	b.n	8005a62 <_printf_float+0x456>

08005a78 <_printf_common>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	4699      	mov	r9, r3
 8005a80:	688a      	ldr	r2, [r1, #8]
 8005a82:	690b      	ldr	r3, [r1, #16]
 8005a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	bfb8      	it	lt
 8005a8c:	4613      	movlt	r3, r2
 8005a8e:	6033      	str	r3, [r6, #0]
 8005a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a94:	4607      	mov	r7, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	b10a      	cbz	r2, 8005a9e <_printf_common+0x26>
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	0699      	lsls	r1, r3, #26
 8005aa2:	bf42      	ittt	mi
 8005aa4:	6833      	ldrmi	r3, [r6, #0]
 8005aa6:	3302      	addmi	r3, #2
 8005aa8:	6033      	strmi	r3, [r6, #0]
 8005aaa:	6825      	ldr	r5, [r4, #0]
 8005aac:	f015 0506 	ands.w	r5, r5, #6
 8005ab0:	d106      	bne.n	8005ac0 <_printf_common+0x48>
 8005ab2:	f104 0a19 	add.w	sl, r4, #25
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	6832      	ldr	r2, [r6, #0]
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dc26      	bgt.n	8005b0e <_printf_common+0x96>
 8005ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ac4:	1e13      	subs	r3, r2, #0
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	bf18      	it	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	0692      	lsls	r2, r2, #26
 8005ace:	d42b      	bmi.n	8005b28 <_printf_common+0xb0>
 8005ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c0      	blx	r8
 8005ada:	3001      	adds	r0, #1
 8005adc:	d01e      	beq.n	8005b1c <_printf_common+0xa4>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	f003 0306 	and.w	r3, r3, #6
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	bf02      	ittt	eq
 8005aea:	68e5      	ldreq	r5, [r4, #12]
 8005aec:	6833      	ldreq	r3, [r6, #0]
 8005aee:	1aed      	subeq	r5, r5, r3
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	bf0c      	ite	eq
 8005af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af8:	2500      	movne	r5, #0
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bfc4      	itt	gt
 8005afe:	1a9b      	subgt	r3, r3, r2
 8005b00:	18ed      	addgt	r5, r5, r3
 8005b02:	2600      	movs	r6, #0
 8005b04:	341a      	adds	r4, #26
 8005b06:	42b5      	cmp	r5, r6
 8005b08:	d11a      	bne.n	8005b40 <_printf_common+0xc8>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e008      	b.n	8005b20 <_printf_common+0xa8>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4652      	mov	r2, sl
 8005b12:	4649      	mov	r1, r9
 8005b14:	4638      	mov	r0, r7
 8005b16:	47c0      	blx	r8
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d103      	bne.n	8005b24 <_printf_common+0xac>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	3501      	adds	r5, #1
 8005b26:	e7c6      	b.n	8005ab6 <_printf_common+0x3e>
 8005b28:	18e1      	adds	r1, r4, r3
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	2030      	movs	r0, #48	; 0x30
 8005b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b32:	4422      	add	r2, r4
 8005b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	e7c7      	b.n	8005ad0 <_printf_common+0x58>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4622      	mov	r2, r4
 8005b44:	4649      	mov	r1, r9
 8005b46:	4638      	mov	r0, r7
 8005b48:	47c0      	blx	r8
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d0e6      	beq.n	8005b1c <_printf_common+0xa4>
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7d9      	b.n	8005b06 <_printf_common+0x8e>
	...

08005b54 <_printf_i>:
 8005b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	7e0f      	ldrb	r7, [r1, #24]
 8005b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b5c:	2f78      	cmp	r7, #120	; 0x78
 8005b5e:	4691      	mov	r9, r2
 8005b60:	4680      	mov	r8, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	469a      	mov	sl, r3
 8005b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b6a:	d807      	bhi.n	8005b7c <_printf_i+0x28>
 8005b6c:	2f62      	cmp	r7, #98	; 0x62
 8005b6e:	d80a      	bhi.n	8005b86 <_printf_i+0x32>
 8005b70:	2f00      	cmp	r7, #0
 8005b72:	f000 80d4 	beq.w	8005d1e <_printf_i+0x1ca>
 8005b76:	2f58      	cmp	r7, #88	; 0x58
 8005b78:	f000 80c0 	beq.w	8005cfc <_printf_i+0x1a8>
 8005b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b84:	e03a      	b.n	8005bfc <_printf_i+0xa8>
 8005b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b8a:	2b15      	cmp	r3, #21
 8005b8c:	d8f6      	bhi.n	8005b7c <_printf_i+0x28>
 8005b8e:	a101      	add	r1, pc, #4	; (adr r1, 8005b94 <_printf_i+0x40>)
 8005b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b94:	08005bed 	.word	0x08005bed
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005b7d 	.word	0x08005b7d
 8005ba0:	08005b7d 	.word	0x08005b7d
 8005ba4:	08005b7d 	.word	0x08005b7d
 8005ba8:	08005b7d 	.word	0x08005b7d
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005b7d 	.word	0x08005b7d
 8005bb4:	08005b7d 	.word	0x08005b7d
 8005bb8:	08005b7d 	.word	0x08005b7d
 8005bbc:	08005b7d 	.word	0x08005b7d
 8005bc0:	08005d05 	.word	0x08005d05
 8005bc4:	08005c2d 	.word	0x08005c2d
 8005bc8:	08005cbf 	.word	0x08005cbf
 8005bcc:	08005b7d 	.word	0x08005b7d
 8005bd0:	08005b7d 	.word	0x08005b7d
 8005bd4:	08005d27 	.word	0x08005d27
 8005bd8:	08005b7d 	.word	0x08005b7d
 8005bdc:	08005c2d 	.word	0x08005c2d
 8005be0:	08005b7d 	.word	0x08005b7d
 8005be4:	08005b7d 	.word	0x08005b7d
 8005be8:	08005cc7 	.word	0x08005cc7
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	602a      	str	r2, [r5, #0]
 8005bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e09f      	b.n	8005d40 <_printf_i+0x1ec>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	0607      	lsls	r7, r0, #24
 8005c06:	f103 0104 	add.w	r1, r3, #4
 8005c0a:	6029      	str	r1, [r5, #0]
 8005c0c:	d501      	bpl.n	8005c12 <_printf_i+0xbe>
 8005c0e:	681e      	ldr	r6, [r3, #0]
 8005c10:	e003      	b.n	8005c1a <_printf_i+0xc6>
 8005c12:	0646      	lsls	r6, r0, #25
 8005c14:	d5fb      	bpl.n	8005c0e <_printf_i+0xba>
 8005c16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c1a:	2e00      	cmp	r6, #0
 8005c1c:	da03      	bge.n	8005c26 <_printf_i+0xd2>
 8005c1e:	232d      	movs	r3, #45	; 0x2d
 8005c20:	4276      	negs	r6, r6
 8005c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c26:	485a      	ldr	r0, [pc, #360]	; (8005d90 <_printf_i+0x23c>)
 8005c28:	230a      	movs	r3, #10
 8005c2a:	e012      	b.n	8005c52 <_printf_i+0xfe>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	1d19      	adds	r1, r3, #4
 8005c32:	6029      	str	r1, [r5, #0]
 8005c34:	0605      	lsls	r5, r0, #24
 8005c36:	d501      	bpl.n	8005c3c <_printf_i+0xe8>
 8005c38:	681e      	ldr	r6, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <_printf_i+0xee>
 8005c3c:	0641      	lsls	r1, r0, #25
 8005c3e:	d5fb      	bpl.n	8005c38 <_printf_i+0xe4>
 8005c40:	881e      	ldrh	r6, [r3, #0]
 8005c42:	4853      	ldr	r0, [pc, #332]	; (8005d90 <_printf_i+0x23c>)
 8005c44:	2f6f      	cmp	r7, #111	; 0x6f
 8005c46:	bf0c      	ite	eq
 8005c48:	2308      	moveq	r3, #8
 8005c4a:	230a      	movne	r3, #10
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c52:	6865      	ldr	r5, [r4, #4]
 8005c54:	60a5      	str	r5, [r4, #8]
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	bfa2      	ittt	ge
 8005c5a:	6821      	ldrge	r1, [r4, #0]
 8005c5c:	f021 0104 	bicge.w	r1, r1, #4
 8005c60:	6021      	strge	r1, [r4, #0]
 8005c62:	b90e      	cbnz	r6, 8005c68 <_printf_i+0x114>
 8005c64:	2d00      	cmp	r5, #0
 8005c66:	d04b      	beq.n	8005d00 <_printf_i+0x1ac>
 8005c68:	4615      	mov	r5, r2
 8005c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c72:	5dc7      	ldrb	r7, [r0, r7]
 8005c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c78:	4637      	mov	r7, r6
 8005c7a:	42bb      	cmp	r3, r7
 8005c7c:	460e      	mov	r6, r1
 8005c7e:	d9f4      	bls.n	8005c6a <_printf_i+0x116>
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d10b      	bne.n	8005c9c <_printf_i+0x148>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	07de      	lsls	r6, r3, #31
 8005c88:	d508      	bpl.n	8005c9c <_printf_i+0x148>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	6861      	ldr	r1, [r4, #4]
 8005c8e:	4299      	cmp	r1, r3
 8005c90:	bfde      	ittt	le
 8005c92:	2330      	movle	r3, #48	; 0x30
 8005c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c9c:	1b52      	subs	r2, r2, r5
 8005c9e:	6122      	str	r2, [r4, #16]
 8005ca0:	f8cd a000 	str.w	sl, [sp]
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	aa03      	add	r2, sp, #12
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4640      	mov	r0, r8
 8005cac:	f7ff fee4 	bl	8005a78 <_printf_common>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d14a      	bne.n	8005d4a <_printf_i+0x1f6>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	b004      	add	sp, #16
 8005cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	f043 0320 	orr.w	r3, r3, #32
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	4833      	ldr	r0, [pc, #204]	; (8005d94 <_printf_i+0x240>)
 8005cc8:	2778      	movs	r7, #120	; 0x78
 8005cca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	6829      	ldr	r1, [r5, #0]
 8005cd2:	061f      	lsls	r7, r3, #24
 8005cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cd8:	d402      	bmi.n	8005ce0 <_printf_i+0x18c>
 8005cda:	065f      	lsls	r7, r3, #25
 8005cdc:	bf48      	it	mi
 8005cde:	b2b6      	uxthmi	r6, r6
 8005ce0:	07df      	lsls	r7, r3, #31
 8005ce2:	bf48      	it	mi
 8005ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce8:	6029      	str	r1, [r5, #0]
 8005cea:	bf48      	it	mi
 8005cec:	6023      	strmi	r3, [r4, #0]
 8005cee:	b91e      	cbnz	r6, 8005cf8 <_printf_i+0x1a4>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	f023 0320 	bic.w	r3, r3, #32
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	e7a7      	b.n	8005c4c <_printf_i+0xf8>
 8005cfc:	4824      	ldr	r0, [pc, #144]	; (8005d90 <_printf_i+0x23c>)
 8005cfe:	e7e4      	b.n	8005cca <_printf_i+0x176>
 8005d00:	4615      	mov	r5, r2
 8005d02:	e7bd      	b.n	8005c80 <_printf_i+0x12c>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	6826      	ldr	r6, [r4, #0]
 8005d08:	6961      	ldr	r1, [r4, #20]
 8005d0a:	1d18      	adds	r0, r3, #4
 8005d0c:	6028      	str	r0, [r5, #0]
 8005d0e:	0635      	lsls	r5, r6, #24
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	d501      	bpl.n	8005d18 <_printf_i+0x1c4>
 8005d14:	6019      	str	r1, [r3, #0]
 8005d16:	e002      	b.n	8005d1e <_printf_i+0x1ca>
 8005d18:	0670      	lsls	r0, r6, #25
 8005d1a:	d5fb      	bpl.n	8005d14 <_printf_i+0x1c0>
 8005d1c:	8019      	strh	r1, [r3, #0]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	4615      	mov	r5, r2
 8005d24:	e7bc      	b.n	8005ca0 <_printf_i+0x14c>
 8005d26:	682b      	ldr	r3, [r5, #0]
 8005d28:	1d1a      	adds	r2, r3, #4
 8005d2a:	602a      	str	r2, [r5, #0]
 8005d2c:	681d      	ldr	r5, [r3, #0]
 8005d2e:	6862      	ldr	r2, [r4, #4]
 8005d30:	2100      	movs	r1, #0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7fa fa6c 	bl	8000210 <memchr>
 8005d38:	b108      	cbz	r0, 8005d3e <_printf_i+0x1ea>
 8005d3a:	1b40      	subs	r0, r0, r5
 8005d3c:	6060      	str	r0, [r4, #4]
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	2300      	movs	r3, #0
 8005d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d48:	e7aa      	b.n	8005ca0 <_printf_i+0x14c>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	462a      	mov	r2, r5
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4640      	mov	r0, r8
 8005d52:	47d0      	blx	sl
 8005d54:	3001      	adds	r0, #1
 8005d56:	d0ad      	beq.n	8005cb4 <_printf_i+0x160>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	079b      	lsls	r3, r3, #30
 8005d5c:	d413      	bmi.n	8005d86 <_printf_i+0x232>
 8005d5e:	68e0      	ldr	r0, [r4, #12]
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	4298      	cmp	r0, r3
 8005d64:	bfb8      	it	lt
 8005d66:	4618      	movlt	r0, r3
 8005d68:	e7a6      	b.n	8005cb8 <_printf_i+0x164>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4640      	mov	r0, r8
 8005d72:	47d0      	blx	sl
 8005d74:	3001      	adds	r0, #1
 8005d76:	d09d      	beq.n	8005cb4 <_printf_i+0x160>
 8005d78:	3501      	adds	r5, #1
 8005d7a:	68e3      	ldr	r3, [r4, #12]
 8005d7c:	9903      	ldr	r1, [sp, #12]
 8005d7e:	1a5b      	subs	r3, r3, r1
 8005d80:	42ab      	cmp	r3, r5
 8005d82:	dcf2      	bgt.n	8005d6a <_printf_i+0x216>
 8005d84:	e7eb      	b.n	8005d5e <_printf_i+0x20a>
 8005d86:	2500      	movs	r5, #0
 8005d88:	f104 0619 	add.w	r6, r4, #25
 8005d8c:	e7f5      	b.n	8005d7a <_printf_i+0x226>
 8005d8e:	bf00      	nop
 8005d90:	0800827a 	.word	0x0800827a
 8005d94:	0800828b 	.word	0x0800828b

08005d98 <std>:
 8005d98:	2300      	movs	r3, #0
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005da6:	6083      	str	r3, [r0, #8]
 8005da8:	8181      	strh	r1, [r0, #12]
 8005daa:	6643      	str	r3, [r0, #100]	; 0x64
 8005dac:	81c2      	strh	r2, [r0, #14]
 8005dae:	6183      	str	r3, [r0, #24]
 8005db0:	4619      	mov	r1, r3
 8005db2:	2208      	movs	r2, #8
 8005db4:	305c      	adds	r0, #92	; 0x5c
 8005db6:	f000 f926 	bl	8006006 <memset>
 8005dba:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <std+0x58>)
 8005dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <std+0x5c>)
 8005dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <std+0x60>)
 8005dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <std+0x64>)
 8005dc8:	6323      	str	r3, [r4, #48]	; 0x30
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <std+0x68>)
 8005dcc:	6224      	str	r4, [r4, #32]
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d006      	beq.n	8005de0 <std+0x48>
 8005dd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005dd6:	4294      	cmp	r4, r2
 8005dd8:	d002      	beq.n	8005de0 <std+0x48>
 8005dda:	33d0      	adds	r3, #208	; 0xd0
 8005ddc:	429c      	cmp	r4, r3
 8005dde:	d105      	bne.n	8005dec <std+0x54>
 8005de0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de8:	f000 b998 	b.w	800611c <__retarget_lock_init_recursive>
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	bf00      	nop
 8005df0:	08005f81 	.word	0x08005f81
 8005df4:	08005fa3 	.word	0x08005fa3
 8005df8:	08005fdb 	.word	0x08005fdb
 8005dfc:	08005fff 	.word	0x08005fff
 8005e00:	20000a14 	.word	0x20000a14

08005e04 <stdio_exit_handler>:
 8005e04:	4a02      	ldr	r2, [pc, #8]	; (8005e10 <stdio_exit_handler+0xc>)
 8005e06:	4903      	ldr	r1, [pc, #12]	; (8005e14 <stdio_exit_handler+0x10>)
 8005e08:	4803      	ldr	r0, [pc, #12]	; (8005e18 <stdio_exit_handler+0x14>)
 8005e0a:	f000 b869 	b.w	8005ee0 <_fwalk_sglue>
 8005e0e:	bf00      	nop
 8005e10:	2000000c 	.word	0x2000000c
 8005e14:	08007d59 	.word	0x08007d59
 8005e18:	20000018 	.word	0x20000018

08005e1c <cleanup_stdio>:
 8005e1c:	6841      	ldr	r1, [r0, #4]
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <cleanup_stdio+0x34>)
 8005e20:	4299      	cmp	r1, r3
 8005e22:	b510      	push	{r4, lr}
 8005e24:	4604      	mov	r4, r0
 8005e26:	d001      	beq.n	8005e2c <cleanup_stdio+0x10>
 8005e28:	f001 ff96 	bl	8007d58 <_fflush_r>
 8005e2c:	68a1      	ldr	r1, [r4, #8]
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <cleanup_stdio+0x38>)
 8005e30:	4299      	cmp	r1, r3
 8005e32:	d002      	beq.n	8005e3a <cleanup_stdio+0x1e>
 8005e34:	4620      	mov	r0, r4
 8005e36:	f001 ff8f 	bl	8007d58 <_fflush_r>
 8005e3a:	68e1      	ldr	r1, [r4, #12]
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <cleanup_stdio+0x3c>)
 8005e3e:	4299      	cmp	r1, r3
 8005e40:	d004      	beq.n	8005e4c <cleanup_stdio+0x30>
 8005e42:	4620      	mov	r0, r4
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f001 bf86 	b.w	8007d58 <_fflush_r>
 8005e4c:	bd10      	pop	{r4, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000a14 	.word	0x20000a14
 8005e54:	20000a7c 	.word	0x20000a7c
 8005e58:	20000ae4 	.word	0x20000ae4

08005e5c <global_stdio_init.part.0>:
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <global_stdio_init.part.0+0x30>)
 8005e60:	4c0b      	ldr	r4, [pc, #44]	; (8005e90 <global_stdio_init.part.0+0x34>)
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <global_stdio_init.part.0+0x38>)
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	4620      	mov	r0, r4
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2104      	movs	r1, #4
 8005e6c:	f7ff ff94 	bl	8005d98 <std>
 8005e70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e74:	2201      	movs	r2, #1
 8005e76:	2109      	movs	r1, #9
 8005e78:	f7ff ff8e 	bl	8005d98 <std>
 8005e7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e80:	2202      	movs	r2, #2
 8005e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e86:	2112      	movs	r1, #18
 8005e88:	f7ff bf86 	b.w	8005d98 <std>
 8005e8c:	20000b4c 	.word	0x20000b4c
 8005e90:	20000a14 	.word	0x20000a14
 8005e94:	08005e05 	.word	0x08005e05

08005e98 <__sfp_lock_acquire>:
 8005e98:	4801      	ldr	r0, [pc, #4]	; (8005ea0 <__sfp_lock_acquire+0x8>)
 8005e9a:	f000 b940 	b.w	800611e <__retarget_lock_acquire_recursive>
 8005e9e:	bf00      	nop
 8005ea0:	20000b55 	.word	0x20000b55

08005ea4 <__sfp_lock_release>:
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <__sfp_lock_release+0x8>)
 8005ea6:	f000 b93b 	b.w	8006120 <__retarget_lock_release_recursive>
 8005eaa:	bf00      	nop
 8005eac:	20000b55 	.word	0x20000b55

08005eb0 <__sinit>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	f7ff fff0 	bl	8005e98 <__sfp_lock_acquire>
 8005eb8:	6a23      	ldr	r3, [r4, #32]
 8005eba:	b11b      	cbz	r3, 8005ec4 <__sinit+0x14>
 8005ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec0:	f7ff bff0 	b.w	8005ea4 <__sfp_lock_release>
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <__sinit+0x28>)
 8005ec6:	6223      	str	r3, [r4, #32]
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <__sinit+0x2c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f5      	bne.n	8005ebc <__sinit+0xc>
 8005ed0:	f7ff ffc4 	bl	8005e5c <global_stdio_init.part.0>
 8005ed4:	e7f2      	b.n	8005ebc <__sinit+0xc>
 8005ed6:	bf00      	nop
 8005ed8:	08005e1d 	.word	0x08005e1d
 8005edc:	20000b4c 	.word	0x20000b4c

08005ee0 <_fwalk_sglue>:
 8005ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	4688      	mov	r8, r1
 8005ee8:	4614      	mov	r4, r2
 8005eea:	2600      	movs	r6, #0
 8005eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ef4:	d505      	bpl.n	8005f02 <_fwalk_sglue+0x22>
 8005ef6:	6824      	ldr	r4, [r4, #0]
 8005ef8:	2c00      	cmp	r4, #0
 8005efa:	d1f7      	bne.n	8005eec <_fwalk_sglue+0xc>
 8005efc:	4630      	mov	r0, r6
 8005efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f02:	89ab      	ldrh	r3, [r5, #12]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d907      	bls.n	8005f18 <_fwalk_sglue+0x38>
 8005f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	d003      	beq.n	8005f18 <_fwalk_sglue+0x38>
 8005f10:	4629      	mov	r1, r5
 8005f12:	4638      	mov	r0, r7
 8005f14:	47c0      	blx	r8
 8005f16:	4306      	orrs	r6, r0
 8005f18:	3568      	adds	r5, #104	; 0x68
 8005f1a:	e7e9      	b.n	8005ef0 <_fwalk_sglue+0x10>

08005f1c <iprintf>:
 8005f1c:	b40f      	push	{r0, r1, r2, r3}
 8005f1e:	b507      	push	{r0, r1, r2, lr}
 8005f20:	4906      	ldr	r1, [pc, #24]	; (8005f3c <iprintf+0x20>)
 8005f22:	ab04      	add	r3, sp, #16
 8005f24:	6808      	ldr	r0, [r1, #0]
 8005f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f2a:	6881      	ldr	r1, [r0, #8]
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	f001 fd73 	bl	8007a18 <_vfiprintf_r>
 8005f32:	b003      	add	sp, #12
 8005f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f38:	b004      	add	sp, #16
 8005f3a:	4770      	bx	lr
 8005f3c:	20000064 	.word	0x20000064

08005f40 <siprintf>:
 8005f40:	b40e      	push	{r1, r2, r3}
 8005f42:	b500      	push	{lr}
 8005f44:	b09c      	sub	sp, #112	; 0x70
 8005f46:	ab1d      	add	r3, sp, #116	; 0x74
 8005f48:	9002      	str	r0, [sp, #8]
 8005f4a:	9006      	str	r0, [sp, #24]
 8005f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f50:	4809      	ldr	r0, [pc, #36]	; (8005f78 <siprintf+0x38>)
 8005f52:	9107      	str	r1, [sp, #28]
 8005f54:	9104      	str	r1, [sp, #16]
 8005f56:	4909      	ldr	r1, [pc, #36]	; (8005f7c <siprintf+0x3c>)
 8005f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f5c:	9105      	str	r1, [sp, #20]
 8005f5e:	6800      	ldr	r0, [r0, #0]
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	a902      	add	r1, sp, #8
 8005f64:	f001 fc30 	bl	80077c8 <_svfiprintf_r>
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	b01c      	add	sp, #112	; 0x70
 8005f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f74:	b003      	add	sp, #12
 8005f76:	4770      	bx	lr
 8005f78:	20000064 	.word	0x20000064
 8005f7c:	ffff0208 	.word	0xffff0208

08005f80 <__sread>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	460c      	mov	r4, r1
 8005f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f88:	f000 f87a 	bl	8006080 <_read_r>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	bfab      	itete	ge
 8005f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f92:	89a3      	ldrhlt	r3, [r4, #12]
 8005f94:	181b      	addge	r3, r3, r0
 8005f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f9a:	bfac      	ite	ge
 8005f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f9e:	81a3      	strhlt	r3, [r4, #12]
 8005fa0:	bd10      	pop	{r4, pc}

08005fa2 <__swrite>:
 8005fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	898b      	ldrh	r3, [r1, #12]
 8005faa:	05db      	lsls	r3, r3, #23
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	d505      	bpl.n	8005fc0 <__swrite+0x1e>
 8005fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb8:	2302      	movs	r3, #2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f000 f84e 	bl	800605c <_lseek_r>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	463b      	mov	r3, r7
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd6:	f000 b865 	b.w	80060a4 <_write_r>

08005fda <__sseek>:
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	460c      	mov	r4, r1
 8005fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe2:	f000 f83b 	bl	800605c <_lseek_r>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	bf15      	itete	ne
 8005fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ff6:	81a3      	strheq	r3, [r4, #12]
 8005ff8:	bf18      	it	ne
 8005ffa:	81a3      	strhne	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__sclose>:
 8005ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006002:	f000 b81b 	b.w	800603c <_close_r>

08006006 <memset>:
 8006006:	4402      	add	r2, r0
 8006008:	4603      	mov	r3, r0
 800600a:	4293      	cmp	r3, r2
 800600c:	d100      	bne.n	8006010 <memset+0xa>
 800600e:	4770      	bx	lr
 8006010:	f803 1b01 	strb.w	r1, [r3], #1
 8006014:	e7f9      	b.n	800600a <memset+0x4>

08006016 <strcat>:
 8006016:	b510      	push	{r4, lr}
 8006018:	4602      	mov	r2, r0
 800601a:	7814      	ldrb	r4, [r2, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	3201      	adds	r2, #1
 8006020:	2c00      	cmp	r4, #0
 8006022:	d1fa      	bne.n	800601a <strcat+0x4>
 8006024:	3b01      	subs	r3, #1
 8006026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800602a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800602e:	2a00      	cmp	r2, #0
 8006030:	d1f9      	bne.n	8006026 <strcat+0x10>
 8006032:	bd10      	pop	{r4, pc}

08006034 <_localeconv_r>:
 8006034:	4800      	ldr	r0, [pc, #0]	; (8006038 <_localeconv_r+0x4>)
 8006036:	4770      	bx	lr
 8006038:	20000158 	.word	0x20000158

0800603c <_close_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d06      	ldr	r5, [pc, #24]	; (8006058 <_close_r+0x1c>)
 8006040:	2300      	movs	r3, #0
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	f7fb fcfd 	bl	8001a46 <_close>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_close_r+0x1a>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_close_r+0x1a>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	20000b50 	.word	0x20000b50

0800605c <_lseek_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4d07      	ldr	r5, [pc, #28]	; (800607c <_lseek_r+0x20>)
 8006060:	4604      	mov	r4, r0
 8006062:	4608      	mov	r0, r1
 8006064:	4611      	mov	r1, r2
 8006066:	2200      	movs	r2, #0
 8006068:	602a      	str	r2, [r5, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	f7fb fd12 	bl	8001a94 <_lseek>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_lseek_r+0x1e>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_lseek_r+0x1e>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000b50 	.word	0x20000b50

08006080 <_read_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4d07      	ldr	r5, [pc, #28]	; (80060a0 <_read_r+0x20>)
 8006084:	4604      	mov	r4, r0
 8006086:	4608      	mov	r0, r1
 8006088:	4611      	mov	r1, r2
 800608a:	2200      	movs	r2, #0
 800608c:	602a      	str	r2, [r5, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	f7fb fca0 	bl	80019d4 <_read>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_read_r+0x1e>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b103      	cbz	r3, 800609e <_read_r+0x1e>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	20000b50 	.word	0x20000b50

080060a4 <_write_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_write_r+0x20>)
 80060a8:	4604      	mov	r4, r0
 80060aa:	4608      	mov	r0, r1
 80060ac:	4611      	mov	r1, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fb fcab 	bl	8001a0e <_write>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_write_r+0x1e>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_write_r+0x1e>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000b50 	.word	0x20000b50

080060c8 <__errno>:
 80060c8:	4b01      	ldr	r3, [pc, #4]	; (80060d0 <__errno+0x8>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000064 	.word	0x20000064

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4d0d      	ldr	r5, [pc, #52]	; (800610c <__libc_init_array+0x38>)
 80060d8:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060da:	1b64      	subs	r4, r4, r5
 80060dc:	10a4      	asrs	r4, r4, #2
 80060de:	2600      	movs	r6, #0
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	4d0b      	ldr	r5, [pc, #44]	; (8006114 <__libc_init_array+0x40>)
 80060e6:	4c0c      	ldr	r4, [pc, #48]	; (8006118 <__libc_init_array+0x44>)
 80060e8:	f002 f898 	bl	800821c <_init>
 80060ec:	1b64      	subs	r4, r4, r5
 80060ee:	10a4      	asrs	r4, r4, #2
 80060f0:	2600      	movs	r6, #0
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	080085e4 	.word	0x080085e4
 8006110:	080085e4 	.word	0x080085e4
 8006114:	080085e4 	.word	0x080085e4
 8006118:	080085e8 	.word	0x080085e8

0800611c <__retarget_lock_init_recursive>:
 800611c:	4770      	bx	lr

0800611e <__retarget_lock_acquire_recursive>:
 800611e:	4770      	bx	lr

08006120 <__retarget_lock_release_recursive>:
 8006120:	4770      	bx	lr

08006122 <quorem>:
 8006122:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006126:	6903      	ldr	r3, [r0, #16]
 8006128:	690c      	ldr	r4, [r1, #16]
 800612a:	42a3      	cmp	r3, r4
 800612c:	4607      	mov	r7, r0
 800612e:	db7e      	blt.n	800622e <quorem+0x10c>
 8006130:	3c01      	subs	r4, #1
 8006132:	f101 0814 	add.w	r8, r1, #20
 8006136:	f100 0514 	add.w	r5, r0, #20
 800613a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006148:	3301      	adds	r3, #1
 800614a:	429a      	cmp	r2, r3
 800614c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006154:	fbb2 f6f3 	udiv	r6, r2, r3
 8006158:	d331      	bcc.n	80061be <quorem+0x9c>
 800615a:	f04f 0e00 	mov.w	lr, #0
 800615e:	4640      	mov	r0, r8
 8006160:	46ac      	mov	ip, r5
 8006162:	46f2      	mov	sl, lr
 8006164:	f850 2b04 	ldr.w	r2, [r0], #4
 8006168:	b293      	uxth	r3, r2
 800616a:	fb06 e303 	mla	r3, r6, r3, lr
 800616e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006172:	0c1a      	lsrs	r2, r3, #16
 8006174:	b29b      	uxth	r3, r3
 8006176:	ebaa 0303 	sub.w	r3, sl, r3
 800617a:	f8dc a000 	ldr.w	sl, [ip]
 800617e:	fa13 f38a 	uxtah	r3, r3, sl
 8006182:	fb06 220e 	mla	r2, r6, lr, r2
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	9b00      	ldr	r3, [sp, #0]
 800618a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800618e:	b292      	uxth	r2, r2
 8006190:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006198:	f8bd 3000 	ldrh.w	r3, [sp]
 800619c:	4581      	cmp	r9, r0
 800619e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a2:	f84c 3b04 	str.w	r3, [ip], #4
 80061a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061aa:	d2db      	bcs.n	8006164 <quorem+0x42>
 80061ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80061b0:	b92b      	cbnz	r3, 80061be <quorem+0x9c>
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	429d      	cmp	r5, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	d32c      	bcc.n	8006216 <quorem+0xf4>
 80061bc:	613c      	str	r4, [r7, #16]
 80061be:	4638      	mov	r0, r7
 80061c0:	f001 f9a8 	bl	8007514 <__mcmp>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	db22      	blt.n	800620e <quorem+0xec>
 80061c8:	3601      	adds	r6, #1
 80061ca:	4629      	mov	r1, r5
 80061cc:	2000      	movs	r0, #0
 80061ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80061d2:	f8d1 c000 	ldr.w	ip, [r1]
 80061d6:	b293      	uxth	r3, r2
 80061d8:	1ac3      	subs	r3, r0, r3
 80061da:	0c12      	lsrs	r2, r2, #16
 80061dc:	fa13 f38c 	uxtah	r3, r3, ip
 80061e0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80061e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ee:	45c1      	cmp	r9, r8
 80061f0:	f841 3b04 	str.w	r3, [r1], #4
 80061f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061f8:	d2e9      	bcs.n	80061ce <quorem+0xac>
 80061fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006202:	b922      	cbnz	r2, 800620e <quorem+0xec>
 8006204:	3b04      	subs	r3, #4
 8006206:	429d      	cmp	r5, r3
 8006208:	461a      	mov	r2, r3
 800620a:	d30a      	bcc.n	8006222 <quorem+0x100>
 800620c:	613c      	str	r4, [r7, #16]
 800620e:	4630      	mov	r0, r6
 8006210:	b003      	add	sp, #12
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	3b04      	subs	r3, #4
 800621a:	2a00      	cmp	r2, #0
 800621c:	d1ce      	bne.n	80061bc <quorem+0x9a>
 800621e:	3c01      	subs	r4, #1
 8006220:	e7c9      	b.n	80061b6 <quorem+0x94>
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	3b04      	subs	r3, #4
 8006226:	2a00      	cmp	r2, #0
 8006228:	d1f0      	bne.n	800620c <quorem+0xea>
 800622a:	3c01      	subs	r4, #1
 800622c:	e7eb      	b.n	8006206 <quorem+0xe4>
 800622e:	2000      	movs	r0, #0
 8006230:	e7ee      	b.n	8006210 <quorem+0xee>
 8006232:	0000      	movs	r0, r0
 8006234:	0000      	movs	r0, r0
	...

08006238 <_dtoa_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	ed2d 8b04 	vpush	{d8-d9}
 8006240:	69c5      	ldr	r5, [r0, #28]
 8006242:	b093      	sub	sp, #76	; 0x4c
 8006244:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006248:	ec57 6b10 	vmov	r6, r7, d0
 800624c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006250:	9107      	str	r1, [sp, #28]
 8006252:	4604      	mov	r4, r0
 8006254:	920a      	str	r2, [sp, #40]	; 0x28
 8006256:	930d      	str	r3, [sp, #52]	; 0x34
 8006258:	b975      	cbnz	r5, 8006278 <_dtoa_r+0x40>
 800625a:	2010      	movs	r0, #16
 800625c:	f000 fe2a 	bl	8006eb4 <malloc>
 8006260:	4602      	mov	r2, r0
 8006262:	61e0      	str	r0, [r4, #28]
 8006264:	b920      	cbnz	r0, 8006270 <_dtoa_r+0x38>
 8006266:	4bae      	ldr	r3, [pc, #696]	; (8006520 <_dtoa_r+0x2e8>)
 8006268:	21ef      	movs	r1, #239	; 0xef
 800626a:	48ae      	ldr	r0, [pc, #696]	; (8006524 <_dtoa_r+0x2ec>)
 800626c:	f001 fe6a 	bl	8007f44 <__assert_func>
 8006270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006274:	6005      	str	r5, [r0, #0]
 8006276:	60c5      	str	r5, [r0, #12]
 8006278:	69e3      	ldr	r3, [r4, #28]
 800627a:	6819      	ldr	r1, [r3, #0]
 800627c:	b151      	cbz	r1, 8006294 <_dtoa_r+0x5c>
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	604a      	str	r2, [r1, #4]
 8006282:	2301      	movs	r3, #1
 8006284:	4093      	lsls	r3, r2
 8006286:	608b      	str	r3, [r1, #8]
 8006288:	4620      	mov	r0, r4
 800628a:	f000 ff07 	bl	800709c <_Bfree>
 800628e:	69e3      	ldr	r3, [r4, #28]
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	1e3b      	subs	r3, r7, #0
 8006296:	bfbb      	ittet	lt
 8006298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800629c:	9303      	strlt	r3, [sp, #12]
 800629e:	2300      	movge	r3, #0
 80062a0:	2201      	movlt	r2, #1
 80062a2:	bfac      	ite	ge
 80062a4:	f8c8 3000 	strge.w	r3, [r8]
 80062a8:	f8c8 2000 	strlt.w	r2, [r8]
 80062ac:	4b9e      	ldr	r3, [pc, #632]	; (8006528 <_dtoa_r+0x2f0>)
 80062ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80062b2:	ea33 0308 	bics.w	r3, r3, r8
 80062b6:	d11b      	bne.n	80062f0 <_dtoa_r+0xb8>
 80062b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80062c4:	4333      	orrs	r3, r6
 80062c6:	f000 8593 	beq.w	8006df0 <_dtoa_r+0xbb8>
 80062ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062cc:	b963      	cbnz	r3, 80062e8 <_dtoa_r+0xb0>
 80062ce:	4b97      	ldr	r3, [pc, #604]	; (800652c <_dtoa_r+0x2f4>)
 80062d0:	e027      	b.n	8006322 <_dtoa_r+0xea>
 80062d2:	4b97      	ldr	r3, [pc, #604]	; (8006530 <_dtoa_r+0x2f8>)
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	3308      	adds	r3, #8
 80062d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	9800      	ldr	r0, [sp, #0]
 80062de:	b013      	add	sp, #76	; 0x4c
 80062e0:	ecbd 8b04 	vpop	{d8-d9}
 80062e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e8:	4b90      	ldr	r3, [pc, #576]	; (800652c <_dtoa_r+0x2f4>)
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	3303      	adds	r3, #3
 80062ee:	e7f3      	b.n	80062d8 <_dtoa_r+0xa0>
 80062f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	ec51 0b17 	vmov	r0, r1, d7
 80062fa:	eeb0 8a47 	vmov.f32	s16, s14
 80062fe:	eef0 8a67 	vmov.f32	s17, s15
 8006302:	2300      	movs	r3, #0
 8006304:	f7fa fc00 	bl	8000b08 <__aeabi_dcmpeq>
 8006308:	4681      	mov	r9, r0
 800630a:	b160      	cbz	r0, 8006326 <_dtoa_r+0xee>
 800630c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800630e:	2301      	movs	r3, #1
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8568 	beq.w	8006dea <_dtoa_r+0xbb2>
 800631a:	4b86      	ldr	r3, [pc, #536]	; (8006534 <_dtoa_r+0x2fc>)
 800631c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	3b01      	subs	r3, #1
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	e7da      	b.n	80062dc <_dtoa_r+0xa4>
 8006326:	aa10      	add	r2, sp, #64	; 0x40
 8006328:	a911      	add	r1, sp, #68	; 0x44
 800632a:	4620      	mov	r0, r4
 800632c:	eeb0 0a48 	vmov.f32	s0, s16
 8006330:	eef0 0a68 	vmov.f32	s1, s17
 8006334:	f001 f994 	bl	8007660 <__d2b>
 8006338:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800633c:	4682      	mov	sl, r0
 800633e:	2d00      	cmp	r5, #0
 8006340:	d07f      	beq.n	8006442 <_dtoa_r+0x20a>
 8006342:	ee18 3a90 	vmov	r3, s17
 8006346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800634a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800634e:	ec51 0b18 	vmov	r0, r1, d8
 8006352:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800635a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800635e:	4619      	mov	r1, r3
 8006360:	2200      	movs	r2, #0
 8006362:	4b75      	ldr	r3, [pc, #468]	; (8006538 <_dtoa_r+0x300>)
 8006364:	f7f9 ffb0 	bl	80002c8 <__aeabi_dsub>
 8006368:	a367      	add	r3, pc, #412	; (adr r3, 8006508 <_dtoa_r+0x2d0>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7fa f963 	bl	8000638 <__aeabi_dmul>
 8006372:	a367      	add	r3, pc, #412	; (adr r3, 8006510 <_dtoa_r+0x2d8>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f7f9 ffa8 	bl	80002cc <__adddf3>
 800637c:	4606      	mov	r6, r0
 800637e:	4628      	mov	r0, r5
 8006380:	460f      	mov	r7, r1
 8006382:	f7fa f8ef 	bl	8000564 <__aeabi_i2d>
 8006386:	a364      	add	r3, pc, #400	; (adr r3, 8006518 <_dtoa_r+0x2e0>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7fa f954 	bl	8000638 <__aeabi_dmul>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4630      	mov	r0, r6
 8006396:	4639      	mov	r1, r7
 8006398:	f7f9 ff98 	bl	80002cc <__adddf3>
 800639c:	4606      	mov	r6, r0
 800639e:	460f      	mov	r7, r1
 80063a0:	f7fa fbfa 	bl	8000b98 <__aeabi_d2iz>
 80063a4:	2200      	movs	r2, #0
 80063a6:	4683      	mov	fp, r0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4630      	mov	r0, r6
 80063ac:	4639      	mov	r1, r7
 80063ae:	f7fa fbb5 	bl	8000b1c <__aeabi_dcmplt>
 80063b2:	b148      	cbz	r0, 80063c8 <_dtoa_r+0x190>
 80063b4:	4658      	mov	r0, fp
 80063b6:	f7fa f8d5 	bl	8000564 <__aeabi_i2d>
 80063ba:	4632      	mov	r2, r6
 80063bc:	463b      	mov	r3, r7
 80063be:	f7fa fba3 	bl	8000b08 <__aeabi_dcmpeq>
 80063c2:	b908      	cbnz	r0, 80063c8 <_dtoa_r+0x190>
 80063c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063c8:	f1bb 0f16 	cmp.w	fp, #22
 80063cc:	d857      	bhi.n	800647e <_dtoa_r+0x246>
 80063ce:	4b5b      	ldr	r3, [pc, #364]	; (800653c <_dtoa_r+0x304>)
 80063d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	ec51 0b18 	vmov	r0, r1, d8
 80063dc:	f7fa fb9e 	bl	8000b1c <__aeabi_dcmplt>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d04e      	beq.n	8006482 <_dtoa_r+0x24a>
 80063e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063e8:	2300      	movs	r3, #0
 80063ea:	930c      	str	r3, [sp, #48]	; 0x30
 80063ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063ee:	1b5b      	subs	r3, r3, r5
 80063f0:	1e5a      	subs	r2, r3, #1
 80063f2:	bf45      	ittet	mi
 80063f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80063f8:	9305      	strmi	r3, [sp, #20]
 80063fa:	2300      	movpl	r3, #0
 80063fc:	2300      	movmi	r3, #0
 80063fe:	9206      	str	r2, [sp, #24]
 8006400:	bf54      	ite	pl
 8006402:	9305      	strpl	r3, [sp, #20]
 8006404:	9306      	strmi	r3, [sp, #24]
 8006406:	f1bb 0f00 	cmp.w	fp, #0
 800640a:	db3c      	blt.n	8006486 <_dtoa_r+0x24e>
 800640c:	9b06      	ldr	r3, [sp, #24]
 800640e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006412:	445b      	add	r3, fp
 8006414:	9306      	str	r3, [sp, #24]
 8006416:	2300      	movs	r3, #0
 8006418:	9308      	str	r3, [sp, #32]
 800641a:	9b07      	ldr	r3, [sp, #28]
 800641c:	2b09      	cmp	r3, #9
 800641e:	d868      	bhi.n	80064f2 <_dtoa_r+0x2ba>
 8006420:	2b05      	cmp	r3, #5
 8006422:	bfc4      	itt	gt
 8006424:	3b04      	subgt	r3, #4
 8006426:	9307      	strgt	r3, [sp, #28]
 8006428:	9b07      	ldr	r3, [sp, #28]
 800642a:	f1a3 0302 	sub.w	r3, r3, #2
 800642e:	bfcc      	ite	gt
 8006430:	2500      	movgt	r5, #0
 8006432:	2501      	movle	r5, #1
 8006434:	2b03      	cmp	r3, #3
 8006436:	f200 8085 	bhi.w	8006544 <_dtoa_r+0x30c>
 800643a:	e8df f003 	tbb	[pc, r3]
 800643e:	3b2e      	.short	0x3b2e
 8006440:	5839      	.short	0x5839
 8006442:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006446:	441d      	add	r5, r3
 8006448:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800644c:	2b20      	cmp	r3, #32
 800644e:	bfc1      	itttt	gt
 8006450:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006454:	fa08 f803 	lslgt.w	r8, r8, r3
 8006458:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800645c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006460:	bfd6      	itet	le
 8006462:	f1c3 0320 	rsble	r3, r3, #32
 8006466:	ea48 0003 	orrgt.w	r0, r8, r3
 800646a:	fa06 f003 	lslle.w	r0, r6, r3
 800646e:	f7fa f869 	bl	8000544 <__aeabi_ui2d>
 8006472:	2201      	movs	r2, #1
 8006474:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006478:	3d01      	subs	r5, #1
 800647a:	920e      	str	r2, [sp, #56]	; 0x38
 800647c:	e76f      	b.n	800635e <_dtoa_r+0x126>
 800647e:	2301      	movs	r3, #1
 8006480:	e7b3      	b.n	80063ea <_dtoa_r+0x1b2>
 8006482:	900c      	str	r0, [sp, #48]	; 0x30
 8006484:	e7b2      	b.n	80063ec <_dtoa_r+0x1b4>
 8006486:	9b05      	ldr	r3, [sp, #20]
 8006488:	eba3 030b 	sub.w	r3, r3, fp
 800648c:	9305      	str	r3, [sp, #20]
 800648e:	f1cb 0300 	rsb	r3, fp, #0
 8006492:	9308      	str	r3, [sp, #32]
 8006494:	2300      	movs	r3, #0
 8006496:	930b      	str	r3, [sp, #44]	; 0x2c
 8006498:	e7bf      	b.n	800641a <_dtoa_r+0x1e2>
 800649a:	2300      	movs	r3, #0
 800649c:	9309      	str	r3, [sp, #36]	; 0x24
 800649e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dc52      	bgt.n	800654a <_dtoa_r+0x312>
 80064a4:	2301      	movs	r3, #1
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	461a      	mov	r2, r3
 80064ac:	920a      	str	r2, [sp, #40]	; 0x28
 80064ae:	e00b      	b.n	80064c8 <_dtoa_r+0x290>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e7f3      	b.n	800649c <_dtoa_r+0x264>
 80064b4:	2300      	movs	r3, #0
 80064b6:	9309      	str	r3, [sp, #36]	; 0x24
 80064b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ba:	445b      	add	r3, fp
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	3301      	adds	r3, #1
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	bfb8      	it	lt
 80064c6:	2301      	movlt	r3, #1
 80064c8:	69e0      	ldr	r0, [r4, #28]
 80064ca:	2100      	movs	r1, #0
 80064cc:	2204      	movs	r2, #4
 80064ce:	f102 0614 	add.w	r6, r2, #20
 80064d2:	429e      	cmp	r6, r3
 80064d4:	d93d      	bls.n	8006552 <_dtoa_r+0x31a>
 80064d6:	6041      	str	r1, [r0, #4]
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fd9f 	bl	800701c <_Balloc>
 80064de:	9000      	str	r0, [sp, #0]
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d139      	bne.n	8006558 <_dtoa_r+0x320>
 80064e4:	4b16      	ldr	r3, [pc, #88]	; (8006540 <_dtoa_r+0x308>)
 80064e6:	4602      	mov	r2, r0
 80064e8:	f240 11af 	movw	r1, #431	; 0x1af
 80064ec:	e6bd      	b.n	800626a <_dtoa_r+0x32>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e7e1      	b.n	80064b6 <_dtoa_r+0x27e>
 80064f2:	2501      	movs	r5, #1
 80064f4:	2300      	movs	r3, #0
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	9509      	str	r5, [sp, #36]	; 0x24
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	9304      	str	r3, [sp, #16]
 8006502:	2200      	movs	r2, #0
 8006504:	2312      	movs	r3, #18
 8006506:	e7d1      	b.n	80064ac <_dtoa_r+0x274>
 8006508:	636f4361 	.word	0x636f4361
 800650c:	3fd287a7 	.word	0x3fd287a7
 8006510:	8b60c8b3 	.word	0x8b60c8b3
 8006514:	3fc68a28 	.word	0x3fc68a28
 8006518:	509f79fb 	.word	0x509f79fb
 800651c:	3fd34413 	.word	0x3fd34413
 8006520:	080082a9 	.word	0x080082a9
 8006524:	080082c0 	.word	0x080082c0
 8006528:	7ff00000 	.word	0x7ff00000
 800652c:	080082a5 	.word	0x080082a5
 8006530:	0800829c 	.word	0x0800829c
 8006534:	08008279 	.word	0x08008279
 8006538:	3ff80000 	.word	0x3ff80000
 800653c:	080083b0 	.word	0x080083b0
 8006540:	08008318 	.word	0x08008318
 8006544:	2301      	movs	r3, #1
 8006546:	9309      	str	r3, [sp, #36]	; 0x24
 8006548:	e7d7      	b.n	80064fa <_dtoa_r+0x2c2>
 800654a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	e7ba      	b.n	80064c8 <_dtoa_r+0x290>
 8006552:	3101      	adds	r1, #1
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	e7ba      	b.n	80064ce <_dtoa_r+0x296>
 8006558:	69e3      	ldr	r3, [r4, #28]
 800655a:	9a00      	ldr	r2, [sp, #0]
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	9b04      	ldr	r3, [sp, #16]
 8006560:	2b0e      	cmp	r3, #14
 8006562:	f200 80a8 	bhi.w	80066b6 <_dtoa_r+0x47e>
 8006566:	2d00      	cmp	r5, #0
 8006568:	f000 80a5 	beq.w	80066b6 <_dtoa_r+0x47e>
 800656c:	f1bb 0f00 	cmp.w	fp, #0
 8006570:	dd38      	ble.n	80065e4 <_dtoa_r+0x3ac>
 8006572:	4bc0      	ldr	r3, [pc, #768]	; (8006874 <_dtoa_r+0x63c>)
 8006574:	f00b 020f 	and.w	r2, fp, #15
 8006578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800657c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006580:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006584:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006588:	d019      	beq.n	80065be <_dtoa_r+0x386>
 800658a:	4bbb      	ldr	r3, [pc, #748]	; (8006878 <_dtoa_r+0x640>)
 800658c:	ec51 0b18 	vmov	r0, r1, d8
 8006590:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006594:	f7fa f97a 	bl	800088c <__aeabi_ddiv>
 8006598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800659c:	f008 080f 	and.w	r8, r8, #15
 80065a0:	2503      	movs	r5, #3
 80065a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006878 <_dtoa_r+0x640>
 80065a6:	f1b8 0f00 	cmp.w	r8, #0
 80065aa:	d10a      	bne.n	80065c2 <_dtoa_r+0x38a>
 80065ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b0:	4632      	mov	r2, r6
 80065b2:	463b      	mov	r3, r7
 80065b4:	f7fa f96a 	bl	800088c <__aeabi_ddiv>
 80065b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065bc:	e02b      	b.n	8006616 <_dtoa_r+0x3de>
 80065be:	2502      	movs	r5, #2
 80065c0:	e7ef      	b.n	80065a2 <_dtoa_r+0x36a>
 80065c2:	f018 0f01 	tst.w	r8, #1
 80065c6:	d008      	beq.n	80065da <_dtoa_r+0x3a2>
 80065c8:	4630      	mov	r0, r6
 80065ca:	4639      	mov	r1, r7
 80065cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80065d0:	f7fa f832 	bl	8000638 <__aeabi_dmul>
 80065d4:	3501      	adds	r5, #1
 80065d6:	4606      	mov	r6, r0
 80065d8:	460f      	mov	r7, r1
 80065da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80065de:	f109 0908 	add.w	r9, r9, #8
 80065e2:	e7e0      	b.n	80065a6 <_dtoa_r+0x36e>
 80065e4:	f000 809f 	beq.w	8006726 <_dtoa_r+0x4ee>
 80065e8:	f1cb 0600 	rsb	r6, fp, #0
 80065ec:	4ba1      	ldr	r3, [pc, #644]	; (8006874 <_dtoa_r+0x63c>)
 80065ee:	4fa2      	ldr	r7, [pc, #648]	; (8006878 <_dtoa_r+0x640>)
 80065f0:	f006 020f 	and.w	r2, r6, #15
 80065f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	ec51 0b18 	vmov	r0, r1, d8
 8006600:	f7fa f81a 	bl	8000638 <__aeabi_dmul>
 8006604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006608:	1136      	asrs	r6, r6, #4
 800660a:	2300      	movs	r3, #0
 800660c:	2502      	movs	r5, #2
 800660e:	2e00      	cmp	r6, #0
 8006610:	d17e      	bne.n	8006710 <_dtoa_r+0x4d8>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1d0      	bne.n	80065b8 <_dtoa_r+0x380>
 8006616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006618:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8084 	beq.w	800672a <_dtoa_r+0x4f2>
 8006622:	4b96      	ldr	r3, [pc, #600]	; (800687c <_dtoa_r+0x644>)
 8006624:	2200      	movs	r2, #0
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	f7fa fa77 	bl	8000b1c <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d07b      	beq.n	800672a <_dtoa_r+0x4f2>
 8006632:	9b04      	ldr	r3, [sp, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d078      	beq.n	800672a <_dtoa_r+0x4f2>
 8006638:	9b01      	ldr	r3, [sp, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	dd39      	ble.n	80066b2 <_dtoa_r+0x47a>
 800663e:	4b90      	ldr	r3, [pc, #576]	; (8006880 <_dtoa_r+0x648>)
 8006640:	2200      	movs	r2, #0
 8006642:	4640      	mov	r0, r8
 8006644:	4649      	mov	r1, r9
 8006646:	f7f9 fff7 	bl	8000638 <__aeabi_dmul>
 800664a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800664e:	9e01      	ldr	r6, [sp, #4]
 8006650:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006654:	3501      	adds	r5, #1
 8006656:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800665a:	4628      	mov	r0, r5
 800665c:	f7f9 ff82 	bl	8000564 <__aeabi_i2d>
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	f7f9 ffe8 	bl	8000638 <__aeabi_dmul>
 8006668:	4b86      	ldr	r3, [pc, #536]	; (8006884 <_dtoa_r+0x64c>)
 800666a:	2200      	movs	r2, #0
 800666c:	f7f9 fe2e 	bl	80002cc <__adddf3>
 8006670:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	2e00      	cmp	r6, #0
 800667c:	d158      	bne.n	8006730 <_dtoa_r+0x4f8>
 800667e:	4b82      	ldr	r3, [pc, #520]	; (8006888 <_dtoa_r+0x650>)
 8006680:	2200      	movs	r2, #0
 8006682:	4640      	mov	r0, r8
 8006684:	4649      	mov	r1, r9
 8006686:	f7f9 fe1f 	bl	80002c8 <__aeabi_dsub>
 800668a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800668e:	4680      	mov	r8, r0
 8006690:	4689      	mov	r9, r1
 8006692:	f7fa fa61 	bl	8000b58 <__aeabi_dcmpgt>
 8006696:	2800      	cmp	r0, #0
 8006698:	f040 8296 	bne.w	8006bc8 <_dtoa_r+0x990>
 800669c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80066a0:	4640      	mov	r0, r8
 80066a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066a6:	4649      	mov	r1, r9
 80066a8:	f7fa fa38 	bl	8000b1c <__aeabi_dcmplt>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f040 8289 	bne.w	8006bc4 <_dtoa_r+0x98c>
 80066b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80066b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f2c0 814e 	blt.w	800695a <_dtoa_r+0x722>
 80066be:	f1bb 0f0e 	cmp.w	fp, #14
 80066c2:	f300 814a 	bgt.w	800695a <_dtoa_r+0x722>
 80066c6:	4b6b      	ldr	r3, [pc, #428]	; (8006874 <_dtoa_r+0x63c>)
 80066c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f280 80dc 	bge.w	8006890 <_dtoa_r+0x658>
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f300 80d8 	bgt.w	8006890 <_dtoa_r+0x658>
 80066e0:	f040 826f 	bne.w	8006bc2 <_dtoa_r+0x98a>
 80066e4:	4b68      	ldr	r3, [pc, #416]	; (8006888 <_dtoa_r+0x650>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7f9 ffa4 	bl	8000638 <__aeabi_dmul>
 80066f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f4:	f7fa fa26 	bl	8000b44 <__aeabi_dcmpge>
 80066f8:	9e04      	ldr	r6, [sp, #16]
 80066fa:	4637      	mov	r7, r6
 80066fc:	2800      	cmp	r0, #0
 80066fe:	f040 8245 	bne.w	8006b8c <_dtoa_r+0x954>
 8006702:	9d00      	ldr	r5, [sp, #0]
 8006704:	2331      	movs	r3, #49	; 0x31
 8006706:	f805 3b01 	strb.w	r3, [r5], #1
 800670a:	f10b 0b01 	add.w	fp, fp, #1
 800670e:	e241      	b.n	8006b94 <_dtoa_r+0x95c>
 8006710:	07f2      	lsls	r2, r6, #31
 8006712:	d505      	bpl.n	8006720 <_dtoa_r+0x4e8>
 8006714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006718:	f7f9 ff8e 	bl	8000638 <__aeabi_dmul>
 800671c:	3501      	adds	r5, #1
 800671e:	2301      	movs	r3, #1
 8006720:	1076      	asrs	r6, r6, #1
 8006722:	3708      	adds	r7, #8
 8006724:	e773      	b.n	800660e <_dtoa_r+0x3d6>
 8006726:	2502      	movs	r5, #2
 8006728:	e775      	b.n	8006616 <_dtoa_r+0x3de>
 800672a:	9e04      	ldr	r6, [sp, #16]
 800672c:	465f      	mov	r7, fp
 800672e:	e792      	b.n	8006656 <_dtoa_r+0x41e>
 8006730:	9900      	ldr	r1, [sp, #0]
 8006732:	4b50      	ldr	r3, [pc, #320]	; (8006874 <_dtoa_r+0x63c>)
 8006734:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006738:	4431      	add	r1, r6
 800673a:	9102      	str	r1, [sp, #8]
 800673c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673e:	eeb0 9a47 	vmov.f32	s18, s14
 8006742:	eef0 9a67 	vmov.f32	s19, s15
 8006746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800674a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800674e:	2900      	cmp	r1, #0
 8006750:	d044      	beq.n	80067dc <_dtoa_r+0x5a4>
 8006752:	494e      	ldr	r1, [pc, #312]	; (800688c <_dtoa_r+0x654>)
 8006754:	2000      	movs	r0, #0
 8006756:	f7fa f899 	bl	800088c <__aeabi_ddiv>
 800675a:	ec53 2b19 	vmov	r2, r3, d9
 800675e:	f7f9 fdb3 	bl	80002c8 <__aeabi_dsub>
 8006762:	9d00      	ldr	r5, [sp, #0]
 8006764:	ec41 0b19 	vmov	d9, r0, r1
 8006768:	4649      	mov	r1, r9
 800676a:	4640      	mov	r0, r8
 800676c:	f7fa fa14 	bl	8000b98 <__aeabi_d2iz>
 8006770:	4606      	mov	r6, r0
 8006772:	f7f9 fef7 	bl	8000564 <__aeabi_i2d>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4640      	mov	r0, r8
 800677c:	4649      	mov	r1, r9
 800677e:	f7f9 fda3 	bl	80002c8 <__aeabi_dsub>
 8006782:	3630      	adds	r6, #48	; 0x30
 8006784:	f805 6b01 	strb.w	r6, [r5], #1
 8006788:	ec53 2b19 	vmov	r2, r3, d9
 800678c:	4680      	mov	r8, r0
 800678e:	4689      	mov	r9, r1
 8006790:	f7fa f9c4 	bl	8000b1c <__aeabi_dcmplt>
 8006794:	2800      	cmp	r0, #0
 8006796:	d164      	bne.n	8006862 <_dtoa_r+0x62a>
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	4937      	ldr	r1, [pc, #220]	; (800687c <_dtoa_r+0x644>)
 800679e:	2000      	movs	r0, #0
 80067a0:	f7f9 fd92 	bl	80002c8 <__aeabi_dsub>
 80067a4:	ec53 2b19 	vmov	r2, r3, d9
 80067a8:	f7fa f9b8 	bl	8000b1c <__aeabi_dcmplt>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	f040 80b6 	bne.w	800691e <_dtoa_r+0x6e6>
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	429d      	cmp	r5, r3
 80067b6:	f43f af7c 	beq.w	80066b2 <_dtoa_r+0x47a>
 80067ba:	4b31      	ldr	r3, [pc, #196]	; (8006880 <_dtoa_r+0x648>)
 80067bc:	ec51 0b19 	vmov	r0, r1, d9
 80067c0:	2200      	movs	r2, #0
 80067c2:	f7f9 ff39 	bl	8000638 <__aeabi_dmul>
 80067c6:	4b2e      	ldr	r3, [pc, #184]	; (8006880 <_dtoa_r+0x648>)
 80067c8:	ec41 0b19 	vmov	d9, r0, r1
 80067cc:	2200      	movs	r2, #0
 80067ce:	4640      	mov	r0, r8
 80067d0:	4649      	mov	r1, r9
 80067d2:	f7f9 ff31 	bl	8000638 <__aeabi_dmul>
 80067d6:	4680      	mov	r8, r0
 80067d8:	4689      	mov	r9, r1
 80067da:	e7c5      	b.n	8006768 <_dtoa_r+0x530>
 80067dc:	ec51 0b17 	vmov	r0, r1, d7
 80067e0:	f7f9 ff2a 	bl	8000638 <__aeabi_dmul>
 80067e4:	9b02      	ldr	r3, [sp, #8]
 80067e6:	9d00      	ldr	r5, [sp, #0]
 80067e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ea:	ec41 0b19 	vmov	d9, r0, r1
 80067ee:	4649      	mov	r1, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	f7fa f9d1 	bl	8000b98 <__aeabi_d2iz>
 80067f6:	4606      	mov	r6, r0
 80067f8:	f7f9 feb4 	bl	8000564 <__aeabi_i2d>
 80067fc:	3630      	adds	r6, #48	; 0x30
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4640      	mov	r0, r8
 8006804:	4649      	mov	r1, r9
 8006806:	f7f9 fd5f 	bl	80002c8 <__aeabi_dsub>
 800680a:	f805 6b01 	strb.w	r6, [r5], #1
 800680e:	9b02      	ldr	r3, [sp, #8]
 8006810:	429d      	cmp	r5, r3
 8006812:	4680      	mov	r8, r0
 8006814:	4689      	mov	r9, r1
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	d124      	bne.n	8006866 <_dtoa_r+0x62e>
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <_dtoa_r+0x654>)
 800681e:	ec51 0b19 	vmov	r0, r1, d9
 8006822:	f7f9 fd53 	bl	80002cc <__adddf3>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7fa f993 	bl	8000b58 <__aeabi_dcmpgt>
 8006832:	2800      	cmp	r0, #0
 8006834:	d173      	bne.n	800691e <_dtoa_r+0x6e6>
 8006836:	ec53 2b19 	vmov	r2, r3, d9
 800683a:	4914      	ldr	r1, [pc, #80]	; (800688c <_dtoa_r+0x654>)
 800683c:	2000      	movs	r0, #0
 800683e:	f7f9 fd43 	bl	80002c8 <__aeabi_dsub>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4640      	mov	r0, r8
 8006848:	4649      	mov	r1, r9
 800684a:	f7fa f967 	bl	8000b1c <__aeabi_dcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	f43f af2f 	beq.w	80066b2 <_dtoa_r+0x47a>
 8006854:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006856:	1e6b      	subs	r3, r5, #1
 8006858:	930f      	str	r3, [sp, #60]	; 0x3c
 800685a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d0f8      	beq.n	8006854 <_dtoa_r+0x61c>
 8006862:	46bb      	mov	fp, r7
 8006864:	e04a      	b.n	80068fc <_dtoa_r+0x6c4>
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <_dtoa_r+0x648>)
 8006868:	f7f9 fee6 	bl	8000638 <__aeabi_dmul>
 800686c:	4680      	mov	r8, r0
 800686e:	4689      	mov	r9, r1
 8006870:	e7bd      	b.n	80067ee <_dtoa_r+0x5b6>
 8006872:	bf00      	nop
 8006874:	080083b0 	.word	0x080083b0
 8006878:	08008388 	.word	0x08008388
 800687c:	3ff00000 	.word	0x3ff00000
 8006880:	40240000 	.word	0x40240000
 8006884:	401c0000 	.word	0x401c0000
 8006888:	40140000 	.word	0x40140000
 800688c:	3fe00000 	.word	0x3fe00000
 8006890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006894:	9d00      	ldr	r5, [sp, #0]
 8006896:	4642      	mov	r2, r8
 8006898:	464b      	mov	r3, r9
 800689a:	4630      	mov	r0, r6
 800689c:	4639      	mov	r1, r7
 800689e:	f7f9 fff5 	bl	800088c <__aeabi_ddiv>
 80068a2:	f7fa f979 	bl	8000b98 <__aeabi_d2iz>
 80068a6:	9001      	str	r0, [sp, #4]
 80068a8:	f7f9 fe5c 	bl	8000564 <__aeabi_i2d>
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	f7f9 fec2 	bl	8000638 <__aeabi_dmul>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7f9 fd04 	bl	80002c8 <__aeabi_dsub>
 80068c0:	9e01      	ldr	r6, [sp, #4]
 80068c2:	9f04      	ldr	r7, [sp, #16]
 80068c4:	3630      	adds	r6, #48	; 0x30
 80068c6:	f805 6b01 	strb.w	r6, [r5], #1
 80068ca:	9e00      	ldr	r6, [sp, #0]
 80068cc:	1bae      	subs	r6, r5, r6
 80068ce:	42b7      	cmp	r7, r6
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	d134      	bne.n	8006940 <_dtoa_r+0x708>
 80068d6:	f7f9 fcf9 	bl	80002cc <__adddf3>
 80068da:	4642      	mov	r2, r8
 80068dc:	464b      	mov	r3, r9
 80068de:	4606      	mov	r6, r0
 80068e0:	460f      	mov	r7, r1
 80068e2:	f7fa f939 	bl	8000b58 <__aeabi_dcmpgt>
 80068e6:	b9c8      	cbnz	r0, 800691c <_dtoa_r+0x6e4>
 80068e8:	4642      	mov	r2, r8
 80068ea:	464b      	mov	r3, r9
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7fa f90a 	bl	8000b08 <__aeabi_dcmpeq>
 80068f4:	b110      	cbz	r0, 80068fc <_dtoa_r+0x6c4>
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	07db      	lsls	r3, r3, #31
 80068fa:	d40f      	bmi.n	800691c <_dtoa_r+0x6e4>
 80068fc:	4651      	mov	r1, sl
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fbcc 	bl	800709c <_Bfree>
 8006904:	2300      	movs	r3, #0
 8006906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006908:	702b      	strb	r3, [r5, #0]
 800690a:	f10b 0301 	add.w	r3, fp, #1
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006912:	2b00      	cmp	r3, #0
 8006914:	f43f ace2 	beq.w	80062dc <_dtoa_r+0xa4>
 8006918:	601d      	str	r5, [r3, #0]
 800691a:	e4df      	b.n	80062dc <_dtoa_r+0xa4>
 800691c:	465f      	mov	r7, fp
 800691e:	462b      	mov	r3, r5
 8006920:	461d      	mov	r5, r3
 8006922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006926:	2a39      	cmp	r2, #57	; 0x39
 8006928:	d106      	bne.n	8006938 <_dtoa_r+0x700>
 800692a:	9a00      	ldr	r2, [sp, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d1f7      	bne.n	8006920 <_dtoa_r+0x6e8>
 8006930:	9900      	ldr	r1, [sp, #0]
 8006932:	2230      	movs	r2, #48	; 0x30
 8006934:	3701      	adds	r7, #1
 8006936:	700a      	strb	r2, [r1, #0]
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	3201      	adds	r2, #1
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	e790      	b.n	8006862 <_dtoa_r+0x62a>
 8006940:	4ba3      	ldr	r3, [pc, #652]	; (8006bd0 <_dtoa_r+0x998>)
 8006942:	2200      	movs	r2, #0
 8006944:	f7f9 fe78 	bl	8000638 <__aeabi_dmul>
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	4606      	mov	r6, r0
 800694e:	460f      	mov	r7, r1
 8006950:	f7fa f8da 	bl	8000b08 <__aeabi_dcmpeq>
 8006954:	2800      	cmp	r0, #0
 8006956:	d09e      	beq.n	8006896 <_dtoa_r+0x65e>
 8006958:	e7d0      	b.n	80068fc <_dtoa_r+0x6c4>
 800695a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800695c:	2a00      	cmp	r2, #0
 800695e:	f000 80ca 	beq.w	8006af6 <_dtoa_r+0x8be>
 8006962:	9a07      	ldr	r2, [sp, #28]
 8006964:	2a01      	cmp	r2, #1
 8006966:	f300 80ad 	bgt.w	8006ac4 <_dtoa_r+0x88c>
 800696a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800696c:	2a00      	cmp	r2, #0
 800696e:	f000 80a5 	beq.w	8006abc <_dtoa_r+0x884>
 8006972:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006976:	9e08      	ldr	r6, [sp, #32]
 8006978:	9d05      	ldr	r5, [sp, #20]
 800697a:	9a05      	ldr	r2, [sp, #20]
 800697c:	441a      	add	r2, r3
 800697e:	9205      	str	r2, [sp, #20]
 8006980:	9a06      	ldr	r2, [sp, #24]
 8006982:	2101      	movs	r1, #1
 8006984:	441a      	add	r2, r3
 8006986:	4620      	mov	r0, r4
 8006988:	9206      	str	r2, [sp, #24]
 800698a:	f000 fc3d 	bl	8007208 <__i2b>
 800698e:	4607      	mov	r7, r0
 8006990:	b165      	cbz	r5, 80069ac <_dtoa_r+0x774>
 8006992:	9b06      	ldr	r3, [sp, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	dd09      	ble.n	80069ac <_dtoa_r+0x774>
 8006998:	42ab      	cmp	r3, r5
 800699a:	9a05      	ldr	r2, [sp, #20]
 800699c:	bfa8      	it	ge
 800699e:	462b      	movge	r3, r5
 80069a0:	1ad2      	subs	r2, r2, r3
 80069a2:	9205      	str	r2, [sp, #20]
 80069a4:	9a06      	ldr	r2, [sp, #24]
 80069a6:	1aed      	subs	r5, r5, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	9306      	str	r3, [sp, #24]
 80069ac:	9b08      	ldr	r3, [sp, #32]
 80069ae:	b1f3      	cbz	r3, 80069ee <_dtoa_r+0x7b6>
 80069b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80a3 	beq.w	8006afe <_dtoa_r+0x8c6>
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	dd10      	ble.n	80069de <_dtoa_r+0x7a6>
 80069bc:	4639      	mov	r1, r7
 80069be:	4632      	mov	r2, r6
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fce1 	bl	8007388 <__pow5mult>
 80069c6:	4652      	mov	r2, sl
 80069c8:	4601      	mov	r1, r0
 80069ca:	4607      	mov	r7, r0
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fc31 	bl	8007234 <__multiply>
 80069d2:	4651      	mov	r1, sl
 80069d4:	4680      	mov	r8, r0
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fb60 	bl	800709c <_Bfree>
 80069dc:	46c2      	mov	sl, r8
 80069de:	9b08      	ldr	r3, [sp, #32]
 80069e0:	1b9a      	subs	r2, r3, r6
 80069e2:	d004      	beq.n	80069ee <_dtoa_r+0x7b6>
 80069e4:	4651      	mov	r1, sl
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 fcce 	bl	8007388 <__pow5mult>
 80069ec:	4682      	mov	sl, r0
 80069ee:	2101      	movs	r1, #1
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fc09 	bl	8007208 <__i2b>
 80069f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	4606      	mov	r6, r0
 80069fc:	f340 8081 	ble.w	8006b02 <_dtoa_r+0x8ca>
 8006a00:	461a      	mov	r2, r3
 8006a02:	4601      	mov	r1, r0
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 fcbf 	bl	8007388 <__pow5mult>
 8006a0a:	9b07      	ldr	r3, [sp, #28]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	4606      	mov	r6, r0
 8006a10:	dd7a      	ble.n	8006b08 <_dtoa_r+0x8d0>
 8006a12:	f04f 0800 	mov.w	r8, #0
 8006a16:	6933      	ldr	r3, [r6, #16]
 8006a18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a1c:	6918      	ldr	r0, [r3, #16]
 8006a1e:	f000 fba5 	bl	800716c <__hi0bits>
 8006a22:	f1c0 0020 	rsb	r0, r0, #32
 8006a26:	9b06      	ldr	r3, [sp, #24]
 8006a28:	4418      	add	r0, r3
 8006a2a:	f010 001f 	ands.w	r0, r0, #31
 8006a2e:	f000 8094 	beq.w	8006b5a <_dtoa_r+0x922>
 8006a32:	f1c0 0320 	rsb	r3, r0, #32
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	f340 8085 	ble.w	8006b46 <_dtoa_r+0x90e>
 8006a3c:	9b05      	ldr	r3, [sp, #20]
 8006a3e:	f1c0 001c 	rsb	r0, r0, #28
 8006a42:	4403      	add	r3, r0
 8006a44:	9305      	str	r3, [sp, #20]
 8006a46:	9b06      	ldr	r3, [sp, #24]
 8006a48:	4403      	add	r3, r0
 8006a4a:	4405      	add	r5, r0
 8006a4c:	9306      	str	r3, [sp, #24]
 8006a4e:	9b05      	ldr	r3, [sp, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	dd05      	ble.n	8006a60 <_dtoa_r+0x828>
 8006a54:	4651      	mov	r1, sl
 8006a56:	461a      	mov	r2, r3
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 fcef 	bl	800743c <__lshift>
 8006a5e:	4682      	mov	sl, r0
 8006a60:	9b06      	ldr	r3, [sp, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dd05      	ble.n	8006a72 <_dtoa_r+0x83a>
 8006a66:	4631      	mov	r1, r6
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fce6 	bl	800743c <__lshift>
 8006a70:	4606      	mov	r6, r0
 8006a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d072      	beq.n	8006b5e <_dtoa_r+0x926>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4650      	mov	r0, sl
 8006a7c:	f000 fd4a 	bl	8007514 <__mcmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	da6c      	bge.n	8006b5e <_dtoa_r+0x926>
 8006a84:	2300      	movs	r3, #0
 8006a86:	4651      	mov	r1, sl
 8006a88:	220a      	movs	r2, #10
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 fb28 	bl	80070e0 <__multadd>
 8006a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a96:	4682      	mov	sl, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 81b0 	beq.w	8006dfe <_dtoa_r+0xbc6>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	220a      	movs	r2, #10
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fb1b 	bl	80070e0 <__multadd>
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	4607      	mov	r7, r0
 8006ab0:	f300 8096 	bgt.w	8006be0 <_dtoa_r+0x9a8>
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	dc59      	bgt.n	8006b6e <_dtoa_r+0x936>
 8006aba:	e091      	b.n	8006be0 <_dtoa_r+0x9a8>
 8006abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ac2:	e758      	b.n	8006976 <_dtoa_r+0x73e>
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	1e5e      	subs	r6, r3, #1
 8006ac8:	9b08      	ldr	r3, [sp, #32]
 8006aca:	42b3      	cmp	r3, r6
 8006acc:	bfbf      	itttt	lt
 8006ace:	9b08      	ldrlt	r3, [sp, #32]
 8006ad0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006ad2:	9608      	strlt	r6, [sp, #32]
 8006ad4:	1af3      	sublt	r3, r6, r3
 8006ad6:	bfb4      	ite	lt
 8006ad8:	18d2      	addlt	r2, r2, r3
 8006ada:	1b9e      	subge	r6, r3, r6
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	bfbc      	itt	lt
 8006ae0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006ae2:	2600      	movlt	r6, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bfb7      	itett	lt
 8006ae8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006aec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006af0:	1a9d      	sublt	r5, r3, r2
 8006af2:	2300      	movlt	r3, #0
 8006af4:	e741      	b.n	800697a <_dtoa_r+0x742>
 8006af6:	9e08      	ldr	r6, [sp, #32]
 8006af8:	9d05      	ldr	r5, [sp, #20]
 8006afa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006afc:	e748      	b.n	8006990 <_dtoa_r+0x758>
 8006afe:	9a08      	ldr	r2, [sp, #32]
 8006b00:	e770      	b.n	80069e4 <_dtoa_r+0x7ac>
 8006b02:	9b07      	ldr	r3, [sp, #28]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	dc19      	bgt.n	8006b3c <_dtoa_r+0x904>
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	b9bb      	cbnz	r3, 8006b3c <_dtoa_r+0x904>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b12:	b99b      	cbnz	r3, 8006b3c <_dtoa_r+0x904>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b1a:	0d1b      	lsrs	r3, r3, #20
 8006b1c:	051b      	lsls	r3, r3, #20
 8006b1e:	b183      	cbz	r3, 8006b42 <_dtoa_r+0x90a>
 8006b20:	9b05      	ldr	r3, [sp, #20]
 8006b22:	3301      	adds	r3, #1
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	9b06      	ldr	r3, [sp, #24]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	9306      	str	r3, [sp, #24]
 8006b2c:	f04f 0801 	mov.w	r8, #1
 8006b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f47f af6f 	bne.w	8006a16 <_dtoa_r+0x7de>
 8006b38:	2001      	movs	r0, #1
 8006b3a:	e774      	b.n	8006a26 <_dtoa_r+0x7ee>
 8006b3c:	f04f 0800 	mov.w	r8, #0
 8006b40:	e7f6      	b.n	8006b30 <_dtoa_r+0x8f8>
 8006b42:	4698      	mov	r8, r3
 8006b44:	e7f4      	b.n	8006b30 <_dtoa_r+0x8f8>
 8006b46:	d082      	beq.n	8006a4e <_dtoa_r+0x816>
 8006b48:	9a05      	ldr	r2, [sp, #20]
 8006b4a:	331c      	adds	r3, #28
 8006b4c:	441a      	add	r2, r3
 8006b4e:	9205      	str	r2, [sp, #20]
 8006b50:	9a06      	ldr	r2, [sp, #24]
 8006b52:	441a      	add	r2, r3
 8006b54:	441d      	add	r5, r3
 8006b56:	9206      	str	r2, [sp, #24]
 8006b58:	e779      	b.n	8006a4e <_dtoa_r+0x816>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	e7f4      	b.n	8006b48 <_dtoa_r+0x910>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dc37      	bgt.n	8006bd4 <_dtoa_r+0x99c>
 8006b64:	9b07      	ldr	r3, [sp, #28]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	dd34      	ble.n	8006bd4 <_dtoa_r+0x99c>
 8006b6a:	9b04      	ldr	r3, [sp, #16]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	b963      	cbnz	r3, 8006b8c <_dtoa_r+0x954>
 8006b72:	4631      	mov	r1, r6
 8006b74:	2205      	movs	r2, #5
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 fab2 	bl	80070e0 <__multadd>
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	4606      	mov	r6, r0
 8006b80:	4650      	mov	r0, sl
 8006b82:	f000 fcc7 	bl	8007514 <__mcmp>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f73f adbb 	bgt.w	8006702 <_dtoa_r+0x4ca>
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8e:	9d00      	ldr	r5, [sp, #0]
 8006b90:	ea6f 0b03 	mvn.w	fp, r3
 8006b94:	f04f 0800 	mov.w	r8, #0
 8006b98:	4631      	mov	r1, r6
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fa7e 	bl	800709c <_Bfree>
 8006ba0:	2f00      	cmp	r7, #0
 8006ba2:	f43f aeab 	beq.w	80068fc <_dtoa_r+0x6c4>
 8006ba6:	f1b8 0f00 	cmp.w	r8, #0
 8006baa:	d005      	beq.n	8006bb8 <_dtoa_r+0x980>
 8006bac:	45b8      	cmp	r8, r7
 8006bae:	d003      	beq.n	8006bb8 <_dtoa_r+0x980>
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 fa72 	bl	800709c <_Bfree>
 8006bb8:	4639      	mov	r1, r7
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fa6e 	bl	800709c <_Bfree>
 8006bc0:	e69c      	b.n	80068fc <_dtoa_r+0x6c4>
 8006bc2:	2600      	movs	r6, #0
 8006bc4:	4637      	mov	r7, r6
 8006bc6:	e7e1      	b.n	8006b8c <_dtoa_r+0x954>
 8006bc8:	46bb      	mov	fp, r7
 8006bca:	4637      	mov	r7, r6
 8006bcc:	e599      	b.n	8006702 <_dtoa_r+0x4ca>
 8006bce:	bf00      	nop
 8006bd0:	40240000 	.word	0x40240000
 8006bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80c8 	beq.w	8006d6c <_dtoa_r+0xb34>
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	dd05      	ble.n	8006bf0 <_dtoa_r+0x9b8>
 8006be4:	4639      	mov	r1, r7
 8006be6:	462a      	mov	r2, r5
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fc27 	bl	800743c <__lshift>
 8006bee:	4607      	mov	r7, r0
 8006bf0:	f1b8 0f00 	cmp.w	r8, #0
 8006bf4:	d05b      	beq.n	8006cae <_dtoa_r+0xa76>
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fa0f 	bl	800701c <_Balloc>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b928      	cbnz	r0, 8006c0e <_dtoa_r+0x9d6>
 8006c02:	4b83      	ldr	r3, [pc, #524]	; (8006e10 <_dtoa_r+0xbd8>)
 8006c04:	4602      	mov	r2, r0
 8006c06:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c0a:	f7ff bb2e 	b.w	800626a <_dtoa_r+0x32>
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	3202      	adds	r2, #2
 8006c12:	0092      	lsls	r2, r2, #2
 8006c14:	f107 010c 	add.w	r1, r7, #12
 8006c18:	300c      	adds	r0, #12
 8006c1a:	f001 f985 	bl	8007f28 <memcpy>
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4629      	mov	r1, r5
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fc0a 	bl	800743c <__lshift>
 8006c28:	9b00      	ldr	r3, [sp, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c32:	4413      	add	r3, r2
 8006c34:	9308      	str	r3, [sp, #32]
 8006c36:	9b02      	ldr	r3, [sp, #8]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	46b8      	mov	r8, r7
 8006c3e:	9306      	str	r3, [sp, #24]
 8006c40:	4607      	mov	r7, r0
 8006c42:	9b04      	ldr	r3, [sp, #16]
 8006c44:	4631      	mov	r1, r6
 8006c46:	3b01      	subs	r3, #1
 8006c48:	4650      	mov	r0, sl
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	f7ff fa69 	bl	8006122 <quorem>
 8006c50:	4641      	mov	r1, r8
 8006c52:	9002      	str	r0, [sp, #8]
 8006c54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c58:	4650      	mov	r0, sl
 8006c5a:	f000 fc5b 	bl	8007514 <__mcmp>
 8006c5e:	463a      	mov	r2, r7
 8006c60:	9005      	str	r0, [sp, #20]
 8006c62:	4631      	mov	r1, r6
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 fc71 	bl	800754c <__mdiff>
 8006c6a:	68c2      	ldr	r2, [r0, #12]
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	bb02      	cbnz	r2, 8006cb2 <_dtoa_r+0xa7a>
 8006c70:	4601      	mov	r1, r0
 8006c72:	4650      	mov	r0, sl
 8006c74:	f000 fc4e 	bl	8007514 <__mcmp>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c80:	f000 fa0c 	bl	800709c <_Bfree>
 8006c84:	9b07      	ldr	r3, [sp, #28]
 8006c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c88:	9d04      	ldr	r5, [sp, #16]
 8006c8a:	ea43 0102 	orr.w	r1, r3, r2
 8006c8e:	9b06      	ldr	r3, [sp, #24]
 8006c90:	4319      	orrs	r1, r3
 8006c92:	d110      	bne.n	8006cb6 <_dtoa_r+0xa7e>
 8006c94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c98:	d029      	beq.n	8006cee <_dtoa_r+0xab6>
 8006c9a:	9b05      	ldr	r3, [sp, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dd02      	ble.n	8006ca6 <_dtoa_r+0xa6e>
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	f883 9000 	strb.w	r9, [r3]
 8006cac:	e774      	b.n	8006b98 <_dtoa_r+0x960>
 8006cae:	4638      	mov	r0, r7
 8006cb0:	e7ba      	b.n	8006c28 <_dtoa_r+0x9f0>
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	e7e1      	b.n	8006c7a <_dtoa_r+0xa42>
 8006cb6:	9b05      	ldr	r3, [sp, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	db04      	blt.n	8006cc6 <_dtoa_r+0xa8e>
 8006cbc:	9907      	ldr	r1, [sp, #28]
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	9906      	ldr	r1, [sp, #24]
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	d120      	bne.n	8006d08 <_dtoa_r+0xad0>
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	dded      	ble.n	8006ca6 <_dtoa_r+0xa6e>
 8006cca:	4651      	mov	r1, sl
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 fbb4 	bl	800743c <__lshift>
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	f000 fc1c 	bl	8007514 <__mcmp>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	dc03      	bgt.n	8006ce8 <_dtoa_r+0xab0>
 8006ce0:	d1e1      	bne.n	8006ca6 <_dtoa_r+0xa6e>
 8006ce2:	f019 0f01 	tst.w	r9, #1
 8006ce6:	d0de      	beq.n	8006ca6 <_dtoa_r+0xa6e>
 8006ce8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cec:	d1d8      	bne.n	8006ca0 <_dtoa_r+0xa68>
 8006cee:	9a01      	ldr	r2, [sp, #4]
 8006cf0:	2339      	movs	r3, #57	; 0x39
 8006cf2:	7013      	strb	r3, [r2, #0]
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cfe:	2a39      	cmp	r2, #57	; 0x39
 8006d00:	d06c      	beq.n	8006ddc <_dtoa_r+0xba4>
 8006d02:	3201      	adds	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e747      	b.n	8006b98 <_dtoa_r+0x960>
 8006d08:	2a00      	cmp	r2, #0
 8006d0a:	dd07      	ble.n	8006d1c <_dtoa_r+0xae4>
 8006d0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d10:	d0ed      	beq.n	8006cee <_dtoa_r+0xab6>
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	f109 0301 	add.w	r3, r9, #1
 8006d18:	7013      	strb	r3, [r2, #0]
 8006d1a:	e73d      	b.n	8006b98 <_dtoa_r+0x960>
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	9a08      	ldr	r2, [sp, #32]
 8006d20:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d043      	beq.n	8006db0 <_dtoa_r+0xb78>
 8006d28:	4651      	mov	r1, sl
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 f9d6 	bl	80070e0 <__multadd>
 8006d34:	45b8      	cmp	r8, r7
 8006d36:	4682      	mov	sl, r0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	f04f 020a 	mov.w	r2, #10
 8006d40:	4641      	mov	r1, r8
 8006d42:	4620      	mov	r0, r4
 8006d44:	d107      	bne.n	8006d56 <_dtoa_r+0xb1e>
 8006d46:	f000 f9cb 	bl	80070e0 <__multadd>
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	3301      	adds	r3, #1
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	e775      	b.n	8006c42 <_dtoa_r+0xa0a>
 8006d56:	f000 f9c3 	bl	80070e0 <__multadd>
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	4680      	mov	r8, r0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	220a      	movs	r2, #10
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 f9bc 	bl	80070e0 <__multadd>
 8006d68:	4607      	mov	r7, r0
 8006d6a:	e7f0      	b.n	8006d4e <_dtoa_r+0xb16>
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	9d00      	ldr	r5, [sp, #0]
 8006d72:	4631      	mov	r1, r6
 8006d74:	4650      	mov	r0, sl
 8006d76:	f7ff f9d4 	bl	8006122 <quorem>
 8006d7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	f805 9b01 	strb.w	r9, [r5], #1
 8006d84:	1aea      	subs	r2, r5, r3
 8006d86:	9b01      	ldr	r3, [sp, #4]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	dd07      	ble.n	8006d9c <_dtoa_r+0xb64>
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	2300      	movs	r3, #0
 8006d90:	220a      	movs	r2, #10
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 f9a4 	bl	80070e0 <__multadd>
 8006d98:	4682      	mov	sl, r0
 8006d9a:	e7ea      	b.n	8006d72 <_dtoa_r+0xb3a>
 8006d9c:	9b01      	ldr	r3, [sp, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfc8      	it	gt
 8006da2:	461d      	movgt	r5, r3
 8006da4:	9b00      	ldr	r3, [sp, #0]
 8006da6:	bfd8      	it	le
 8006da8:	2501      	movle	r5, #1
 8006daa:	441d      	add	r5, r3
 8006dac:	f04f 0800 	mov.w	r8, #0
 8006db0:	4651      	mov	r1, sl
 8006db2:	2201      	movs	r2, #1
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fb41 	bl	800743c <__lshift>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4682      	mov	sl, r0
 8006dbe:	f000 fba9 	bl	8007514 <__mcmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	dc96      	bgt.n	8006cf4 <_dtoa_r+0xabc>
 8006dc6:	d102      	bne.n	8006dce <_dtoa_r+0xb96>
 8006dc8:	f019 0f01 	tst.w	r9, #1
 8006dcc:	d192      	bne.n	8006cf4 <_dtoa_r+0xabc>
 8006dce:	462b      	mov	r3, r5
 8006dd0:	461d      	mov	r5, r3
 8006dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dd6:	2a30      	cmp	r2, #48	; 0x30
 8006dd8:	d0fa      	beq.n	8006dd0 <_dtoa_r+0xb98>
 8006dda:	e6dd      	b.n	8006b98 <_dtoa_r+0x960>
 8006ddc:	9a00      	ldr	r2, [sp, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d189      	bne.n	8006cf6 <_dtoa_r+0xabe>
 8006de2:	f10b 0b01 	add.w	fp, fp, #1
 8006de6:	2331      	movs	r3, #49	; 0x31
 8006de8:	e796      	b.n	8006d18 <_dtoa_r+0xae0>
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <_dtoa_r+0xbdc>)
 8006dec:	f7ff ba99 	b.w	8006322 <_dtoa_r+0xea>
 8006df0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f47f aa6d 	bne.w	80062d2 <_dtoa_r+0x9a>
 8006df8:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <_dtoa_r+0xbe0>)
 8006dfa:	f7ff ba92 	b.w	8006322 <_dtoa_r+0xea>
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dcb5      	bgt.n	8006d70 <_dtoa_r+0xb38>
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	f73f aeb1 	bgt.w	8006b6e <_dtoa_r+0x936>
 8006e0c:	e7b0      	b.n	8006d70 <_dtoa_r+0xb38>
 8006e0e:	bf00      	nop
 8006e10:	08008318 	.word	0x08008318
 8006e14:	08008278 	.word	0x08008278
 8006e18:	0800829c 	.word	0x0800829c

08006e1c <_free_r>:
 8006e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	d044      	beq.n	8006eac <_free_r+0x90>
 8006e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e26:	9001      	str	r0, [sp, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e2e:	bfb8      	it	lt
 8006e30:	18e4      	addlt	r4, r4, r3
 8006e32:	f000 f8e7 	bl	8007004 <__malloc_lock>
 8006e36:	4a1e      	ldr	r2, [pc, #120]	; (8006eb0 <_free_r+0x94>)
 8006e38:	9801      	ldr	r0, [sp, #4]
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	b933      	cbnz	r3, 8006e4c <_free_r+0x30>
 8006e3e:	6063      	str	r3, [r4, #4]
 8006e40:	6014      	str	r4, [r2, #0]
 8006e42:	b003      	add	sp, #12
 8006e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e48:	f000 b8e2 	b.w	8007010 <__malloc_unlock>
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d908      	bls.n	8006e62 <_free_r+0x46>
 8006e50:	6825      	ldr	r5, [r4, #0]
 8006e52:	1961      	adds	r1, r4, r5
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf01      	itttt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	1949      	addeq	r1, r1, r5
 8006e5e:	6021      	streq	r1, [r4, #0]
 8006e60:	e7ed      	b.n	8006e3e <_free_r+0x22>
 8006e62:	461a      	mov	r2, r3
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	b10b      	cbz	r3, 8006e6c <_free_r+0x50>
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d9fa      	bls.n	8006e62 <_free_r+0x46>
 8006e6c:	6811      	ldr	r1, [r2, #0]
 8006e6e:	1855      	adds	r5, r2, r1
 8006e70:	42a5      	cmp	r5, r4
 8006e72:	d10b      	bne.n	8006e8c <_free_r+0x70>
 8006e74:	6824      	ldr	r4, [r4, #0]
 8006e76:	4421      	add	r1, r4
 8006e78:	1854      	adds	r4, r2, r1
 8006e7a:	42a3      	cmp	r3, r4
 8006e7c:	6011      	str	r1, [r2, #0]
 8006e7e:	d1e0      	bne.n	8006e42 <_free_r+0x26>
 8006e80:	681c      	ldr	r4, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	6053      	str	r3, [r2, #4]
 8006e86:	440c      	add	r4, r1
 8006e88:	6014      	str	r4, [r2, #0]
 8006e8a:	e7da      	b.n	8006e42 <_free_r+0x26>
 8006e8c:	d902      	bls.n	8006e94 <_free_r+0x78>
 8006e8e:	230c      	movs	r3, #12
 8006e90:	6003      	str	r3, [r0, #0]
 8006e92:	e7d6      	b.n	8006e42 <_free_r+0x26>
 8006e94:	6825      	ldr	r5, [r4, #0]
 8006e96:	1961      	adds	r1, r4, r5
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	bf04      	itt	eq
 8006e9c:	6819      	ldreq	r1, [r3, #0]
 8006e9e:	685b      	ldreq	r3, [r3, #4]
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	bf04      	itt	eq
 8006ea4:	1949      	addeq	r1, r1, r5
 8006ea6:	6021      	streq	r1, [r4, #0]
 8006ea8:	6054      	str	r4, [r2, #4]
 8006eaa:	e7ca      	b.n	8006e42 <_free_r+0x26>
 8006eac:	b003      	add	sp, #12
 8006eae:	bd30      	pop	{r4, r5, pc}
 8006eb0:	20000b58 	.word	0x20000b58

08006eb4 <malloc>:
 8006eb4:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <malloc+0xc>)
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	f000 b823 	b.w	8006f04 <_malloc_r>
 8006ebe:	bf00      	nop
 8006ec0:	20000064 	.word	0x20000064

08006ec4 <sbrk_aligned>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4e0e      	ldr	r6, [pc, #56]	; (8006f00 <sbrk_aligned+0x3c>)
 8006ec8:	460c      	mov	r4, r1
 8006eca:	6831      	ldr	r1, [r6, #0]
 8006ecc:	4605      	mov	r5, r0
 8006ece:	b911      	cbnz	r1, 8006ed6 <sbrk_aligned+0x12>
 8006ed0:	f001 f81a 	bl	8007f08 <_sbrk_r>
 8006ed4:	6030      	str	r0, [r6, #0]
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f001 f815 	bl	8007f08 <_sbrk_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d00a      	beq.n	8006ef8 <sbrk_aligned+0x34>
 8006ee2:	1cc4      	adds	r4, r0, #3
 8006ee4:	f024 0403 	bic.w	r4, r4, #3
 8006ee8:	42a0      	cmp	r0, r4
 8006eea:	d007      	beq.n	8006efc <sbrk_aligned+0x38>
 8006eec:	1a21      	subs	r1, r4, r0
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f001 f80a 	bl	8007f08 <_sbrk_r>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d101      	bne.n	8006efc <sbrk_aligned+0x38>
 8006ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8006efc:	4620      	mov	r0, r4
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	20000b5c 	.word	0x20000b5c

08006f04 <_malloc_r>:
 8006f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f08:	1ccd      	adds	r5, r1, #3
 8006f0a:	f025 0503 	bic.w	r5, r5, #3
 8006f0e:	3508      	adds	r5, #8
 8006f10:	2d0c      	cmp	r5, #12
 8006f12:	bf38      	it	cc
 8006f14:	250c      	movcc	r5, #12
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	4607      	mov	r7, r0
 8006f1a:	db01      	blt.n	8006f20 <_malloc_r+0x1c>
 8006f1c:	42a9      	cmp	r1, r5
 8006f1e:	d905      	bls.n	8006f2c <_malloc_r+0x28>
 8006f20:	230c      	movs	r3, #12
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	2600      	movs	r6, #0
 8006f26:	4630      	mov	r0, r6
 8006f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007000 <_malloc_r+0xfc>
 8006f30:	f000 f868 	bl	8007004 <__malloc_lock>
 8006f34:	f8d8 3000 	ldr.w	r3, [r8]
 8006f38:	461c      	mov	r4, r3
 8006f3a:	bb5c      	cbnz	r4, 8006f94 <_malloc_r+0x90>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f7ff ffc0 	bl	8006ec4 <sbrk_aligned>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	4604      	mov	r4, r0
 8006f48:	d155      	bne.n	8006ff6 <_malloc_r+0xf2>
 8006f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8006f4e:	4626      	mov	r6, r4
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	d145      	bne.n	8006fe0 <_malloc_r+0xdc>
 8006f54:	2c00      	cmp	r4, #0
 8006f56:	d048      	beq.n	8006fea <_malloc_r+0xe6>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	eb04 0903 	add.w	r9, r4, r3
 8006f62:	f000 ffd1 	bl	8007f08 <_sbrk_r>
 8006f66:	4581      	cmp	r9, r0
 8006f68:	d13f      	bne.n	8006fea <_malloc_r+0xe6>
 8006f6a:	6821      	ldr	r1, [r4, #0]
 8006f6c:	1a6d      	subs	r5, r5, r1
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4638      	mov	r0, r7
 8006f72:	f7ff ffa7 	bl	8006ec4 <sbrk_aligned>
 8006f76:	3001      	adds	r0, #1
 8006f78:	d037      	beq.n	8006fea <_malloc_r+0xe6>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	442b      	add	r3, r5
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	f8d8 3000 	ldr.w	r3, [r8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d038      	beq.n	8006ffa <_malloc_r+0xf6>
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	42a2      	cmp	r2, r4
 8006f8c:	d12b      	bne.n	8006fe6 <_malloc_r+0xe2>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	605a      	str	r2, [r3, #4]
 8006f92:	e00f      	b.n	8006fb4 <_malloc_r+0xb0>
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	1b52      	subs	r2, r2, r5
 8006f98:	d41f      	bmi.n	8006fda <_malloc_r+0xd6>
 8006f9a:	2a0b      	cmp	r2, #11
 8006f9c:	d917      	bls.n	8006fce <_malloc_r+0xca>
 8006f9e:	1961      	adds	r1, r4, r5
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	6025      	str	r5, [r4, #0]
 8006fa4:	bf18      	it	ne
 8006fa6:	6059      	strne	r1, [r3, #4]
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	bf08      	it	eq
 8006fac:	f8c8 1000 	streq.w	r1, [r8]
 8006fb0:	5162      	str	r2, [r4, r5]
 8006fb2:	604b      	str	r3, [r1, #4]
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f104 060b 	add.w	r6, r4, #11
 8006fba:	f000 f829 	bl	8007010 <__malloc_unlock>
 8006fbe:	f026 0607 	bic.w	r6, r6, #7
 8006fc2:	1d23      	adds	r3, r4, #4
 8006fc4:	1af2      	subs	r2, r6, r3
 8006fc6:	d0ae      	beq.n	8006f26 <_malloc_r+0x22>
 8006fc8:	1b9b      	subs	r3, r3, r6
 8006fca:	50a3      	str	r3, [r4, r2]
 8006fcc:	e7ab      	b.n	8006f26 <_malloc_r+0x22>
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	6862      	ldr	r2, [r4, #4]
 8006fd2:	d1dd      	bne.n	8006f90 <_malloc_r+0x8c>
 8006fd4:	f8c8 2000 	str.w	r2, [r8]
 8006fd8:	e7ec      	b.n	8006fb4 <_malloc_r+0xb0>
 8006fda:	4623      	mov	r3, r4
 8006fdc:	6864      	ldr	r4, [r4, #4]
 8006fde:	e7ac      	b.n	8006f3a <_malloc_r+0x36>
 8006fe0:	4634      	mov	r4, r6
 8006fe2:	6876      	ldr	r6, [r6, #4]
 8006fe4:	e7b4      	b.n	8006f50 <_malloc_r+0x4c>
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	e7cc      	b.n	8006f84 <_malloc_r+0x80>
 8006fea:	230c      	movs	r3, #12
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f000 f80e 	bl	8007010 <__malloc_unlock>
 8006ff4:	e797      	b.n	8006f26 <_malloc_r+0x22>
 8006ff6:	6025      	str	r5, [r4, #0]
 8006ff8:	e7dc      	b.n	8006fb4 <_malloc_r+0xb0>
 8006ffa:	605b      	str	r3, [r3, #4]
 8006ffc:	deff      	udf	#255	; 0xff
 8006ffe:	bf00      	nop
 8007000:	20000b58 	.word	0x20000b58

08007004 <__malloc_lock>:
 8007004:	4801      	ldr	r0, [pc, #4]	; (800700c <__malloc_lock+0x8>)
 8007006:	f7ff b88a 	b.w	800611e <__retarget_lock_acquire_recursive>
 800700a:	bf00      	nop
 800700c:	20000b54 	.word	0x20000b54

08007010 <__malloc_unlock>:
 8007010:	4801      	ldr	r0, [pc, #4]	; (8007018 <__malloc_unlock+0x8>)
 8007012:	f7ff b885 	b.w	8006120 <__retarget_lock_release_recursive>
 8007016:	bf00      	nop
 8007018:	20000b54 	.word	0x20000b54

0800701c <_Balloc>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	69c6      	ldr	r6, [r0, #28]
 8007020:	4604      	mov	r4, r0
 8007022:	460d      	mov	r5, r1
 8007024:	b976      	cbnz	r6, 8007044 <_Balloc+0x28>
 8007026:	2010      	movs	r0, #16
 8007028:	f7ff ff44 	bl	8006eb4 <malloc>
 800702c:	4602      	mov	r2, r0
 800702e:	61e0      	str	r0, [r4, #28]
 8007030:	b920      	cbnz	r0, 800703c <_Balloc+0x20>
 8007032:	4b18      	ldr	r3, [pc, #96]	; (8007094 <_Balloc+0x78>)
 8007034:	4818      	ldr	r0, [pc, #96]	; (8007098 <_Balloc+0x7c>)
 8007036:	216b      	movs	r1, #107	; 0x6b
 8007038:	f000 ff84 	bl	8007f44 <__assert_func>
 800703c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007040:	6006      	str	r6, [r0, #0]
 8007042:	60c6      	str	r6, [r0, #12]
 8007044:	69e6      	ldr	r6, [r4, #28]
 8007046:	68f3      	ldr	r3, [r6, #12]
 8007048:	b183      	cbz	r3, 800706c <_Balloc+0x50>
 800704a:	69e3      	ldr	r3, [r4, #28]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007052:	b9b8      	cbnz	r0, 8007084 <_Balloc+0x68>
 8007054:	2101      	movs	r1, #1
 8007056:	fa01 f605 	lsl.w	r6, r1, r5
 800705a:	1d72      	adds	r2, r6, #5
 800705c:	0092      	lsls	r2, r2, #2
 800705e:	4620      	mov	r0, r4
 8007060:	f000 ff8e 	bl	8007f80 <_calloc_r>
 8007064:	b160      	cbz	r0, 8007080 <_Balloc+0x64>
 8007066:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800706a:	e00e      	b.n	800708a <_Balloc+0x6e>
 800706c:	2221      	movs	r2, #33	; 0x21
 800706e:	2104      	movs	r1, #4
 8007070:	4620      	mov	r0, r4
 8007072:	f000 ff85 	bl	8007f80 <_calloc_r>
 8007076:	69e3      	ldr	r3, [r4, #28]
 8007078:	60f0      	str	r0, [r6, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e4      	bne.n	800704a <_Balloc+0x2e>
 8007080:	2000      	movs	r0, #0
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	6802      	ldr	r2, [r0, #0]
 8007086:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800708a:	2300      	movs	r3, #0
 800708c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007090:	e7f7      	b.n	8007082 <_Balloc+0x66>
 8007092:	bf00      	nop
 8007094:	080082a9 	.word	0x080082a9
 8007098:	08008329 	.word	0x08008329

0800709c <_Bfree>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	69c6      	ldr	r6, [r0, #28]
 80070a0:	4605      	mov	r5, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	b976      	cbnz	r6, 80070c4 <_Bfree+0x28>
 80070a6:	2010      	movs	r0, #16
 80070a8:	f7ff ff04 	bl	8006eb4 <malloc>
 80070ac:	4602      	mov	r2, r0
 80070ae:	61e8      	str	r0, [r5, #28]
 80070b0:	b920      	cbnz	r0, 80070bc <_Bfree+0x20>
 80070b2:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <_Bfree+0x3c>)
 80070b4:	4809      	ldr	r0, [pc, #36]	; (80070dc <_Bfree+0x40>)
 80070b6:	218f      	movs	r1, #143	; 0x8f
 80070b8:	f000 ff44 	bl	8007f44 <__assert_func>
 80070bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070c0:	6006      	str	r6, [r0, #0]
 80070c2:	60c6      	str	r6, [r0, #12]
 80070c4:	b13c      	cbz	r4, 80070d6 <_Bfree+0x3a>
 80070c6:	69eb      	ldr	r3, [r5, #28]
 80070c8:	6862      	ldr	r2, [r4, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d0:	6021      	str	r1, [r4, #0]
 80070d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	080082a9 	.word	0x080082a9
 80070dc:	08008329 	.word	0x08008329

080070e0 <__multadd>:
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	690d      	ldr	r5, [r1, #16]
 80070e6:	4607      	mov	r7, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	461e      	mov	r6, r3
 80070ec:	f101 0c14 	add.w	ip, r1, #20
 80070f0:	2000      	movs	r0, #0
 80070f2:	f8dc 3000 	ldr.w	r3, [ip]
 80070f6:	b299      	uxth	r1, r3
 80070f8:	fb02 6101 	mla	r1, r2, r1, r6
 80070fc:	0c1e      	lsrs	r6, r3, #16
 80070fe:	0c0b      	lsrs	r3, r1, #16
 8007100:	fb02 3306 	mla	r3, r2, r6, r3
 8007104:	b289      	uxth	r1, r1
 8007106:	3001      	adds	r0, #1
 8007108:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800710c:	4285      	cmp	r5, r0
 800710e:	f84c 1b04 	str.w	r1, [ip], #4
 8007112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007116:	dcec      	bgt.n	80070f2 <__multadd+0x12>
 8007118:	b30e      	cbz	r6, 800715e <__multadd+0x7e>
 800711a:	68a3      	ldr	r3, [r4, #8]
 800711c:	42ab      	cmp	r3, r5
 800711e:	dc19      	bgt.n	8007154 <__multadd+0x74>
 8007120:	6861      	ldr	r1, [r4, #4]
 8007122:	4638      	mov	r0, r7
 8007124:	3101      	adds	r1, #1
 8007126:	f7ff ff79 	bl	800701c <_Balloc>
 800712a:	4680      	mov	r8, r0
 800712c:	b928      	cbnz	r0, 800713a <__multadd+0x5a>
 800712e:	4602      	mov	r2, r0
 8007130:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <__multadd+0x84>)
 8007132:	480d      	ldr	r0, [pc, #52]	; (8007168 <__multadd+0x88>)
 8007134:	21ba      	movs	r1, #186	; 0xba
 8007136:	f000 ff05 	bl	8007f44 <__assert_func>
 800713a:	6922      	ldr	r2, [r4, #16]
 800713c:	3202      	adds	r2, #2
 800713e:	f104 010c 	add.w	r1, r4, #12
 8007142:	0092      	lsls	r2, r2, #2
 8007144:	300c      	adds	r0, #12
 8007146:	f000 feef 	bl	8007f28 <memcpy>
 800714a:	4621      	mov	r1, r4
 800714c:	4638      	mov	r0, r7
 800714e:	f7ff ffa5 	bl	800709c <_Bfree>
 8007152:	4644      	mov	r4, r8
 8007154:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007158:	3501      	adds	r5, #1
 800715a:	615e      	str	r6, [r3, #20]
 800715c:	6125      	str	r5, [r4, #16]
 800715e:	4620      	mov	r0, r4
 8007160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007164:	08008318 	.word	0x08008318
 8007168:	08008329 	.word	0x08008329

0800716c <__hi0bits>:
 800716c:	0c03      	lsrs	r3, r0, #16
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	b9d3      	cbnz	r3, 80071a8 <__hi0bits+0x3c>
 8007172:	0400      	lsls	r0, r0, #16
 8007174:	2310      	movs	r3, #16
 8007176:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800717a:	bf04      	itt	eq
 800717c:	0200      	lsleq	r0, r0, #8
 800717e:	3308      	addeq	r3, #8
 8007180:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007184:	bf04      	itt	eq
 8007186:	0100      	lsleq	r0, r0, #4
 8007188:	3304      	addeq	r3, #4
 800718a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800718e:	bf04      	itt	eq
 8007190:	0080      	lsleq	r0, r0, #2
 8007192:	3302      	addeq	r3, #2
 8007194:	2800      	cmp	r0, #0
 8007196:	db05      	blt.n	80071a4 <__hi0bits+0x38>
 8007198:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800719c:	f103 0301 	add.w	r3, r3, #1
 80071a0:	bf08      	it	eq
 80071a2:	2320      	moveq	r3, #32
 80071a4:	4618      	mov	r0, r3
 80071a6:	4770      	bx	lr
 80071a8:	2300      	movs	r3, #0
 80071aa:	e7e4      	b.n	8007176 <__hi0bits+0xa>

080071ac <__lo0bits>:
 80071ac:	6803      	ldr	r3, [r0, #0]
 80071ae:	f013 0207 	ands.w	r2, r3, #7
 80071b2:	d00c      	beq.n	80071ce <__lo0bits+0x22>
 80071b4:	07d9      	lsls	r1, r3, #31
 80071b6:	d422      	bmi.n	80071fe <__lo0bits+0x52>
 80071b8:	079a      	lsls	r2, r3, #30
 80071ba:	bf49      	itett	mi
 80071bc:	085b      	lsrmi	r3, r3, #1
 80071be:	089b      	lsrpl	r3, r3, #2
 80071c0:	6003      	strmi	r3, [r0, #0]
 80071c2:	2201      	movmi	r2, #1
 80071c4:	bf5c      	itt	pl
 80071c6:	6003      	strpl	r3, [r0, #0]
 80071c8:	2202      	movpl	r2, #2
 80071ca:	4610      	mov	r0, r2
 80071cc:	4770      	bx	lr
 80071ce:	b299      	uxth	r1, r3
 80071d0:	b909      	cbnz	r1, 80071d6 <__lo0bits+0x2a>
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	2210      	movs	r2, #16
 80071d6:	b2d9      	uxtb	r1, r3
 80071d8:	b909      	cbnz	r1, 80071de <__lo0bits+0x32>
 80071da:	3208      	adds	r2, #8
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	0719      	lsls	r1, r3, #28
 80071e0:	bf04      	itt	eq
 80071e2:	091b      	lsreq	r3, r3, #4
 80071e4:	3204      	addeq	r2, #4
 80071e6:	0799      	lsls	r1, r3, #30
 80071e8:	bf04      	itt	eq
 80071ea:	089b      	lsreq	r3, r3, #2
 80071ec:	3202      	addeq	r2, #2
 80071ee:	07d9      	lsls	r1, r3, #31
 80071f0:	d403      	bmi.n	80071fa <__lo0bits+0x4e>
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	f102 0201 	add.w	r2, r2, #1
 80071f8:	d003      	beq.n	8007202 <__lo0bits+0x56>
 80071fa:	6003      	str	r3, [r0, #0]
 80071fc:	e7e5      	b.n	80071ca <__lo0bits+0x1e>
 80071fe:	2200      	movs	r2, #0
 8007200:	e7e3      	b.n	80071ca <__lo0bits+0x1e>
 8007202:	2220      	movs	r2, #32
 8007204:	e7e1      	b.n	80071ca <__lo0bits+0x1e>
	...

08007208 <__i2b>:
 8007208:	b510      	push	{r4, lr}
 800720a:	460c      	mov	r4, r1
 800720c:	2101      	movs	r1, #1
 800720e:	f7ff ff05 	bl	800701c <_Balloc>
 8007212:	4602      	mov	r2, r0
 8007214:	b928      	cbnz	r0, 8007222 <__i2b+0x1a>
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <__i2b+0x24>)
 8007218:	4805      	ldr	r0, [pc, #20]	; (8007230 <__i2b+0x28>)
 800721a:	f240 1145 	movw	r1, #325	; 0x145
 800721e:	f000 fe91 	bl	8007f44 <__assert_func>
 8007222:	2301      	movs	r3, #1
 8007224:	6144      	str	r4, [r0, #20]
 8007226:	6103      	str	r3, [r0, #16]
 8007228:	bd10      	pop	{r4, pc}
 800722a:	bf00      	nop
 800722c:	08008318 	.word	0x08008318
 8007230:	08008329 	.word	0x08008329

08007234 <__multiply>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	4691      	mov	r9, r2
 800723a:	690a      	ldr	r2, [r1, #16]
 800723c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	bfb8      	it	lt
 8007244:	460b      	movlt	r3, r1
 8007246:	460c      	mov	r4, r1
 8007248:	bfbc      	itt	lt
 800724a:	464c      	movlt	r4, r9
 800724c:	4699      	movlt	r9, r3
 800724e:	6927      	ldr	r7, [r4, #16]
 8007250:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	6861      	ldr	r1, [r4, #4]
 8007258:	eb07 060a 	add.w	r6, r7, sl
 800725c:	42b3      	cmp	r3, r6
 800725e:	b085      	sub	sp, #20
 8007260:	bfb8      	it	lt
 8007262:	3101      	addlt	r1, #1
 8007264:	f7ff feda 	bl	800701c <_Balloc>
 8007268:	b930      	cbnz	r0, 8007278 <__multiply+0x44>
 800726a:	4602      	mov	r2, r0
 800726c:	4b44      	ldr	r3, [pc, #272]	; (8007380 <__multiply+0x14c>)
 800726e:	4845      	ldr	r0, [pc, #276]	; (8007384 <__multiply+0x150>)
 8007270:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007274:	f000 fe66 	bl	8007f44 <__assert_func>
 8007278:	f100 0514 	add.w	r5, r0, #20
 800727c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007280:	462b      	mov	r3, r5
 8007282:	2200      	movs	r2, #0
 8007284:	4543      	cmp	r3, r8
 8007286:	d321      	bcc.n	80072cc <__multiply+0x98>
 8007288:	f104 0314 	add.w	r3, r4, #20
 800728c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007290:	f109 0314 	add.w	r3, r9, #20
 8007294:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007298:	9202      	str	r2, [sp, #8]
 800729a:	1b3a      	subs	r2, r7, r4
 800729c:	3a15      	subs	r2, #21
 800729e:	f022 0203 	bic.w	r2, r2, #3
 80072a2:	3204      	adds	r2, #4
 80072a4:	f104 0115 	add.w	r1, r4, #21
 80072a8:	428f      	cmp	r7, r1
 80072aa:	bf38      	it	cc
 80072ac:	2204      	movcc	r2, #4
 80072ae:	9201      	str	r2, [sp, #4]
 80072b0:	9a02      	ldr	r2, [sp, #8]
 80072b2:	9303      	str	r3, [sp, #12]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d80c      	bhi.n	80072d2 <__multiply+0x9e>
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	dd03      	ble.n	80072c4 <__multiply+0x90>
 80072bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d05b      	beq.n	800737c <__multiply+0x148>
 80072c4:	6106      	str	r6, [r0, #16]
 80072c6:	b005      	add	sp, #20
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	f843 2b04 	str.w	r2, [r3], #4
 80072d0:	e7d8      	b.n	8007284 <__multiply+0x50>
 80072d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80072d6:	f1ba 0f00 	cmp.w	sl, #0
 80072da:	d024      	beq.n	8007326 <__multiply+0xf2>
 80072dc:	f104 0e14 	add.w	lr, r4, #20
 80072e0:	46a9      	mov	r9, r5
 80072e2:	f04f 0c00 	mov.w	ip, #0
 80072e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072ea:	f8d9 1000 	ldr.w	r1, [r9]
 80072ee:	fa1f fb82 	uxth.w	fp, r2
 80072f2:	b289      	uxth	r1, r1
 80072f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80072f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072fc:	f8d9 2000 	ldr.w	r2, [r9]
 8007300:	4461      	add	r1, ip
 8007302:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007306:	fb0a c20b 	mla	r2, sl, fp, ip
 800730a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800730e:	b289      	uxth	r1, r1
 8007310:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007314:	4577      	cmp	r7, lr
 8007316:	f849 1b04 	str.w	r1, [r9], #4
 800731a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800731e:	d8e2      	bhi.n	80072e6 <__multiply+0xb2>
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	f845 c002 	str.w	ip, [r5, r2]
 8007326:	9a03      	ldr	r2, [sp, #12]
 8007328:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800732c:	3304      	adds	r3, #4
 800732e:	f1b9 0f00 	cmp.w	r9, #0
 8007332:	d021      	beq.n	8007378 <__multiply+0x144>
 8007334:	6829      	ldr	r1, [r5, #0]
 8007336:	f104 0c14 	add.w	ip, r4, #20
 800733a:	46ae      	mov	lr, r5
 800733c:	f04f 0a00 	mov.w	sl, #0
 8007340:	f8bc b000 	ldrh.w	fp, [ip]
 8007344:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007348:	fb09 220b 	mla	r2, r9, fp, r2
 800734c:	4452      	add	r2, sl
 800734e:	b289      	uxth	r1, r1
 8007350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007354:	f84e 1b04 	str.w	r1, [lr], #4
 8007358:	f85c 1b04 	ldr.w	r1, [ip], #4
 800735c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007360:	f8be 1000 	ldrh.w	r1, [lr]
 8007364:	fb09 110a 	mla	r1, r9, sl, r1
 8007368:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800736c:	4567      	cmp	r7, ip
 800736e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007372:	d8e5      	bhi.n	8007340 <__multiply+0x10c>
 8007374:	9a01      	ldr	r2, [sp, #4]
 8007376:	50a9      	str	r1, [r5, r2]
 8007378:	3504      	adds	r5, #4
 800737a:	e799      	b.n	80072b0 <__multiply+0x7c>
 800737c:	3e01      	subs	r6, #1
 800737e:	e79b      	b.n	80072b8 <__multiply+0x84>
 8007380:	08008318 	.word	0x08008318
 8007384:	08008329 	.word	0x08008329

08007388 <__pow5mult>:
 8007388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	4615      	mov	r5, r2
 800738e:	f012 0203 	ands.w	r2, r2, #3
 8007392:	4606      	mov	r6, r0
 8007394:	460f      	mov	r7, r1
 8007396:	d007      	beq.n	80073a8 <__pow5mult+0x20>
 8007398:	4c25      	ldr	r4, [pc, #148]	; (8007430 <__pow5mult+0xa8>)
 800739a:	3a01      	subs	r2, #1
 800739c:	2300      	movs	r3, #0
 800739e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073a2:	f7ff fe9d 	bl	80070e0 <__multadd>
 80073a6:	4607      	mov	r7, r0
 80073a8:	10ad      	asrs	r5, r5, #2
 80073aa:	d03d      	beq.n	8007428 <__pow5mult+0xa0>
 80073ac:	69f4      	ldr	r4, [r6, #28]
 80073ae:	b97c      	cbnz	r4, 80073d0 <__pow5mult+0x48>
 80073b0:	2010      	movs	r0, #16
 80073b2:	f7ff fd7f 	bl	8006eb4 <malloc>
 80073b6:	4602      	mov	r2, r0
 80073b8:	61f0      	str	r0, [r6, #28]
 80073ba:	b928      	cbnz	r0, 80073c8 <__pow5mult+0x40>
 80073bc:	4b1d      	ldr	r3, [pc, #116]	; (8007434 <__pow5mult+0xac>)
 80073be:	481e      	ldr	r0, [pc, #120]	; (8007438 <__pow5mult+0xb0>)
 80073c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80073c4:	f000 fdbe 	bl	8007f44 <__assert_func>
 80073c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073cc:	6004      	str	r4, [r0, #0]
 80073ce:	60c4      	str	r4, [r0, #12]
 80073d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80073d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073d8:	b94c      	cbnz	r4, 80073ee <__pow5mult+0x66>
 80073da:	f240 2171 	movw	r1, #625	; 0x271
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff ff12 	bl	8007208 <__i2b>
 80073e4:	2300      	movs	r3, #0
 80073e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80073ea:	4604      	mov	r4, r0
 80073ec:	6003      	str	r3, [r0, #0]
 80073ee:	f04f 0900 	mov.w	r9, #0
 80073f2:	07eb      	lsls	r3, r5, #31
 80073f4:	d50a      	bpl.n	800740c <__pow5mult+0x84>
 80073f6:	4639      	mov	r1, r7
 80073f8:	4622      	mov	r2, r4
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7ff ff1a 	bl	8007234 <__multiply>
 8007400:	4639      	mov	r1, r7
 8007402:	4680      	mov	r8, r0
 8007404:	4630      	mov	r0, r6
 8007406:	f7ff fe49 	bl	800709c <_Bfree>
 800740a:	4647      	mov	r7, r8
 800740c:	106d      	asrs	r5, r5, #1
 800740e:	d00b      	beq.n	8007428 <__pow5mult+0xa0>
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	b938      	cbnz	r0, 8007424 <__pow5mult+0x9c>
 8007414:	4622      	mov	r2, r4
 8007416:	4621      	mov	r1, r4
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff ff0b 	bl	8007234 <__multiply>
 800741e:	6020      	str	r0, [r4, #0]
 8007420:	f8c0 9000 	str.w	r9, [r0]
 8007424:	4604      	mov	r4, r0
 8007426:	e7e4      	b.n	80073f2 <__pow5mult+0x6a>
 8007428:	4638      	mov	r0, r7
 800742a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742e:	bf00      	nop
 8007430:	08008478 	.word	0x08008478
 8007434:	080082a9 	.word	0x080082a9
 8007438:	08008329 	.word	0x08008329

0800743c <__lshift>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	460c      	mov	r4, r1
 8007442:	6849      	ldr	r1, [r1, #4]
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	4607      	mov	r7, r0
 800744e:	4691      	mov	r9, r2
 8007450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007454:	f108 0601 	add.w	r6, r8, #1
 8007458:	42b3      	cmp	r3, r6
 800745a:	db0b      	blt.n	8007474 <__lshift+0x38>
 800745c:	4638      	mov	r0, r7
 800745e:	f7ff fddd 	bl	800701c <_Balloc>
 8007462:	4605      	mov	r5, r0
 8007464:	b948      	cbnz	r0, 800747a <__lshift+0x3e>
 8007466:	4602      	mov	r2, r0
 8007468:	4b28      	ldr	r3, [pc, #160]	; (800750c <__lshift+0xd0>)
 800746a:	4829      	ldr	r0, [pc, #164]	; (8007510 <__lshift+0xd4>)
 800746c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007470:	f000 fd68 	bl	8007f44 <__assert_func>
 8007474:	3101      	adds	r1, #1
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	e7ee      	b.n	8007458 <__lshift+0x1c>
 800747a:	2300      	movs	r3, #0
 800747c:	f100 0114 	add.w	r1, r0, #20
 8007480:	f100 0210 	add.w	r2, r0, #16
 8007484:	4618      	mov	r0, r3
 8007486:	4553      	cmp	r3, sl
 8007488:	db33      	blt.n	80074f2 <__lshift+0xb6>
 800748a:	6920      	ldr	r0, [r4, #16]
 800748c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007490:	f104 0314 	add.w	r3, r4, #20
 8007494:	f019 091f 	ands.w	r9, r9, #31
 8007498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800749c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074a0:	d02b      	beq.n	80074fa <__lshift+0xbe>
 80074a2:	f1c9 0e20 	rsb	lr, r9, #32
 80074a6:	468a      	mov	sl, r1
 80074a8:	2200      	movs	r2, #0
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	fa00 f009 	lsl.w	r0, r0, r9
 80074b0:	4310      	orrs	r0, r2
 80074b2:	f84a 0b04 	str.w	r0, [sl], #4
 80074b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ba:	459c      	cmp	ip, r3
 80074bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80074c0:	d8f3      	bhi.n	80074aa <__lshift+0x6e>
 80074c2:	ebac 0304 	sub.w	r3, ip, r4
 80074c6:	3b15      	subs	r3, #21
 80074c8:	f023 0303 	bic.w	r3, r3, #3
 80074cc:	3304      	adds	r3, #4
 80074ce:	f104 0015 	add.w	r0, r4, #21
 80074d2:	4584      	cmp	ip, r0
 80074d4:	bf38      	it	cc
 80074d6:	2304      	movcc	r3, #4
 80074d8:	50ca      	str	r2, [r1, r3]
 80074da:	b10a      	cbz	r2, 80074e0 <__lshift+0xa4>
 80074dc:	f108 0602 	add.w	r6, r8, #2
 80074e0:	3e01      	subs	r6, #1
 80074e2:	4638      	mov	r0, r7
 80074e4:	612e      	str	r6, [r5, #16]
 80074e6:	4621      	mov	r1, r4
 80074e8:	f7ff fdd8 	bl	800709c <_Bfree>
 80074ec:	4628      	mov	r0, r5
 80074ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80074f6:	3301      	adds	r3, #1
 80074f8:	e7c5      	b.n	8007486 <__lshift+0x4a>
 80074fa:	3904      	subs	r1, #4
 80074fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007500:	f841 2f04 	str.w	r2, [r1, #4]!
 8007504:	459c      	cmp	ip, r3
 8007506:	d8f9      	bhi.n	80074fc <__lshift+0xc0>
 8007508:	e7ea      	b.n	80074e0 <__lshift+0xa4>
 800750a:	bf00      	nop
 800750c:	08008318 	.word	0x08008318
 8007510:	08008329 	.word	0x08008329

08007514 <__mcmp>:
 8007514:	b530      	push	{r4, r5, lr}
 8007516:	6902      	ldr	r2, [r0, #16]
 8007518:	690c      	ldr	r4, [r1, #16]
 800751a:	1b12      	subs	r2, r2, r4
 800751c:	d10e      	bne.n	800753c <__mcmp+0x28>
 800751e:	f100 0314 	add.w	r3, r0, #20
 8007522:	3114      	adds	r1, #20
 8007524:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007528:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800752c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007530:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007534:	42a5      	cmp	r5, r4
 8007536:	d003      	beq.n	8007540 <__mcmp+0x2c>
 8007538:	d305      	bcc.n	8007546 <__mcmp+0x32>
 800753a:	2201      	movs	r2, #1
 800753c:	4610      	mov	r0, r2
 800753e:	bd30      	pop	{r4, r5, pc}
 8007540:	4283      	cmp	r3, r0
 8007542:	d3f3      	bcc.n	800752c <__mcmp+0x18>
 8007544:	e7fa      	b.n	800753c <__mcmp+0x28>
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	e7f7      	b.n	800753c <__mcmp+0x28>

0800754c <__mdiff>:
 800754c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	4606      	mov	r6, r0
 8007554:	4611      	mov	r1, r2
 8007556:	4620      	mov	r0, r4
 8007558:	4690      	mov	r8, r2
 800755a:	f7ff ffdb 	bl	8007514 <__mcmp>
 800755e:	1e05      	subs	r5, r0, #0
 8007560:	d110      	bne.n	8007584 <__mdiff+0x38>
 8007562:	4629      	mov	r1, r5
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff fd59 	bl	800701c <_Balloc>
 800756a:	b930      	cbnz	r0, 800757a <__mdiff+0x2e>
 800756c:	4b3a      	ldr	r3, [pc, #232]	; (8007658 <__mdiff+0x10c>)
 800756e:	4602      	mov	r2, r0
 8007570:	f240 2137 	movw	r1, #567	; 0x237
 8007574:	4839      	ldr	r0, [pc, #228]	; (800765c <__mdiff+0x110>)
 8007576:	f000 fce5 	bl	8007f44 <__assert_func>
 800757a:	2301      	movs	r3, #1
 800757c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	bfa4      	itt	ge
 8007586:	4643      	movge	r3, r8
 8007588:	46a0      	movge	r8, r4
 800758a:	4630      	mov	r0, r6
 800758c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007590:	bfa6      	itte	ge
 8007592:	461c      	movge	r4, r3
 8007594:	2500      	movge	r5, #0
 8007596:	2501      	movlt	r5, #1
 8007598:	f7ff fd40 	bl	800701c <_Balloc>
 800759c:	b920      	cbnz	r0, 80075a8 <__mdiff+0x5c>
 800759e:	4b2e      	ldr	r3, [pc, #184]	; (8007658 <__mdiff+0x10c>)
 80075a0:	4602      	mov	r2, r0
 80075a2:	f240 2145 	movw	r1, #581	; 0x245
 80075a6:	e7e5      	b.n	8007574 <__mdiff+0x28>
 80075a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075ac:	6926      	ldr	r6, [r4, #16]
 80075ae:	60c5      	str	r5, [r0, #12]
 80075b0:	f104 0914 	add.w	r9, r4, #20
 80075b4:	f108 0514 	add.w	r5, r8, #20
 80075b8:	f100 0e14 	add.w	lr, r0, #20
 80075bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075c4:	f108 0210 	add.w	r2, r8, #16
 80075c8:	46f2      	mov	sl, lr
 80075ca:	2100      	movs	r1, #0
 80075cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80075d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075d4:	fa11 f88b 	uxtah	r8, r1, fp
 80075d8:	b299      	uxth	r1, r3
 80075da:	0c1b      	lsrs	r3, r3, #16
 80075dc:	eba8 0801 	sub.w	r8, r8, r1
 80075e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075e8:	fa1f f888 	uxth.w	r8, r8
 80075ec:	1419      	asrs	r1, r3, #16
 80075ee:	454e      	cmp	r6, r9
 80075f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075f4:	f84a 3b04 	str.w	r3, [sl], #4
 80075f8:	d8e8      	bhi.n	80075cc <__mdiff+0x80>
 80075fa:	1b33      	subs	r3, r6, r4
 80075fc:	3b15      	subs	r3, #21
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	3304      	adds	r3, #4
 8007604:	3415      	adds	r4, #21
 8007606:	42a6      	cmp	r6, r4
 8007608:	bf38      	it	cc
 800760a:	2304      	movcc	r3, #4
 800760c:	441d      	add	r5, r3
 800760e:	4473      	add	r3, lr
 8007610:	469e      	mov	lr, r3
 8007612:	462e      	mov	r6, r5
 8007614:	4566      	cmp	r6, ip
 8007616:	d30e      	bcc.n	8007636 <__mdiff+0xea>
 8007618:	f10c 0203 	add.w	r2, ip, #3
 800761c:	1b52      	subs	r2, r2, r5
 800761e:	f022 0203 	bic.w	r2, r2, #3
 8007622:	3d03      	subs	r5, #3
 8007624:	45ac      	cmp	ip, r5
 8007626:	bf38      	it	cc
 8007628:	2200      	movcc	r2, #0
 800762a:	4413      	add	r3, r2
 800762c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007630:	b17a      	cbz	r2, 8007652 <__mdiff+0x106>
 8007632:	6107      	str	r7, [r0, #16]
 8007634:	e7a4      	b.n	8007580 <__mdiff+0x34>
 8007636:	f856 8b04 	ldr.w	r8, [r6], #4
 800763a:	fa11 f288 	uxtah	r2, r1, r8
 800763e:	1414      	asrs	r4, r2, #16
 8007640:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007644:	b292      	uxth	r2, r2
 8007646:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800764a:	f84e 2b04 	str.w	r2, [lr], #4
 800764e:	1421      	asrs	r1, r4, #16
 8007650:	e7e0      	b.n	8007614 <__mdiff+0xc8>
 8007652:	3f01      	subs	r7, #1
 8007654:	e7ea      	b.n	800762c <__mdiff+0xe0>
 8007656:	bf00      	nop
 8007658:	08008318 	.word	0x08008318
 800765c:	08008329 	.word	0x08008329

08007660 <__d2b>:
 8007660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007664:	460f      	mov	r7, r1
 8007666:	2101      	movs	r1, #1
 8007668:	ec59 8b10 	vmov	r8, r9, d0
 800766c:	4616      	mov	r6, r2
 800766e:	f7ff fcd5 	bl	800701c <_Balloc>
 8007672:	4604      	mov	r4, r0
 8007674:	b930      	cbnz	r0, 8007684 <__d2b+0x24>
 8007676:	4602      	mov	r2, r0
 8007678:	4b24      	ldr	r3, [pc, #144]	; (800770c <__d2b+0xac>)
 800767a:	4825      	ldr	r0, [pc, #148]	; (8007710 <__d2b+0xb0>)
 800767c:	f240 310f 	movw	r1, #783	; 0x30f
 8007680:	f000 fc60 	bl	8007f44 <__assert_func>
 8007684:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800768c:	bb2d      	cbnz	r5, 80076da <__d2b+0x7a>
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f1b8 0300 	subs.w	r3, r8, #0
 8007694:	d026      	beq.n	80076e4 <__d2b+0x84>
 8007696:	4668      	mov	r0, sp
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	f7ff fd87 	bl	80071ac <__lo0bits>
 800769e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076a2:	b1e8      	cbz	r0, 80076e0 <__d2b+0x80>
 80076a4:	f1c0 0320 	rsb	r3, r0, #32
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	430b      	orrs	r3, r1
 80076ae:	40c2      	lsrs	r2, r0
 80076b0:	6163      	str	r3, [r4, #20]
 80076b2:	9201      	str	r2, [sp, #4]
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	61a3      	str	r3, [r4, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bf14      	ite	ne
 80076bc:	2202      	movne	r2, #2
 80076be:	2201      	moveq	r2, #1
 80076c0:	6122      	str	r2, [r4, #16]
 80076c2:	b1bd      	cbz	r5, 80076f4 <__d2b+0x94>
 80076c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076c8:	4405      	add	r5, r0
 80076ca:	603d      	str	r5, [r7, #0]
 80076cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076d0:	6030      	str	r0, [r6, #0]
 80076d2:	4620      	mov	r0, r4
 80076d4:	b003      	add	sp, #12
 80076d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076de:	e7d6      	b.n	800768e <__d2b+0x2e>
 80076e0:	6161      	str	r1, [r4, #20]
 80076e2:	e7e7      	b.n	80076b4 <__d2b+0x54>
 80076e4:	a801      	add	r0, sp, #4
 80076e6:	f7ff fd61 	bl	80071ac <__lo0bits>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	6163      	str	r3, [r4, #20]
 80076ee:	3020      	adds	r0, #32
 80076f0:	2201      	movs	r2, #1
 80076f2:	e7e5      	b.n	80076c0 <__d2b+0x60>
 80076f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076fc:	6038      	str	r0, [r7, #0]
 80076fe:	6918      	ldr	r0, [r3, #16]
 8007700:	f7ff fd34 	bl	800716c <__hi0bits>
 8007704:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007708:	e7e2      	b.n	80076d0 <__d2b+0x70>
 800770a:	bf00      	nop
 800770c:	08008318 	.word	0x08008318
 8007710:	08008329 	.word	0x08008329

08007714 <__ssputs_r>:
 8007714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007718:	688e      	ldr	r6, [r1, #8]
 800771a:	461f      	mov	r7, r3
 800771c:	42be      	cmp	r6, r7
 800771e:	680b      	ldr	r3, [r1, #0]
 8007720:	4682      	mov	sl, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4690      	mov	r8, r2
 8007726:	d82c      	bhi.n	8007782 <__ssputs_r+0x6e>
 8007728:	898a      	ldrh	r2, [r1, #12]
 800772a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800772e:	d026      	beq.n	800777e <__ssputs_r+0x6a>
 8007730:	6965      	ldr	r5, [r4, #20]
 8007732:	6909      	ldr	r1, [r1, #16]
 8007734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007738:	eba3 0901 	sub.w	r9, r3, r1
 800773c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007740:	1c7b      	adds	r3, r7, #1
 8007742:	444b      	add	r3, r9
 8007744:	106d      	asrs	r5, r5, #1
 8007746:	429d      	cmp	r5, r3
 8007748:	bf38      	it	cc
 800774a:	461d      	movcc	r5, r3
 800774c:	0553      	lsls	r3, r2, #21
 800774e:	d527      	bpl.n	80077a0 <__ssputs_r+0x8c>
 8007750:	4629      	mov	r1, r5
 8007752:	f7ff fbd7 	bl	8006f04 <_malloc_r>
 8007756:	4606      	mov	r6, r0
 8007758:	b360      	cbz	r0, 80077b4 <__ssputs_r+0xa0>
 800775a:	6921      	ldr	r1, [r4, #16]
 800775c:	464a      	mov	r2, r9
 800775e:	f000 fbe3 	bl	8007f28 <memcpy>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776c:	81a3      	strh	r3, [r4, #12]
 800776e:	6126      	str	r6, [r4, #16]
 8007770:	6165      	str	r5, [r4, #20]
 8007772:	444e      	add	r6, r9
 8007774:	eba5 0509 	sub.w	r5, r5, r9
 8007778:	6026      	str	r6, [r4, #0]
 800777a:	60a5      	str	r5, [r4, #8]
 800777c:	463e      	mov	r6, r7
 800777e:	42be      	cmp	r6, r7
 8007780:	d900      	bls.n	8007784 <__ssputs_r+0x70>
 8007782:	463e      	mov	r6, r7
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	4632      	mov	r2, r6
 8007788:	4641      	mov	r1, r8
 800778a:	f000 fba3 	bl	8007ed4 <memmove>
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	1b9b      	subs	r3, r3, r6
 8007792:	60a3      	str	r3, [r4, #8]
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	4433      	add	r3, r6
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	2000      	movs	r0, #0
 800779c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a0:	462a      	mov	r2, r5
 80077a2:	f000 fc15 	bl	8007fd0 <_realloc_r>
 80077a6:	4606      	mov	r6, r0
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d1e0      	bne.n	800776e <__ssputs_r+0x5a>
 80077ac:	6921      	ldr	r1, [r4, #16]
 80077ae:	4650      	mov	r0, sl
 80077b0:	f7ff fb34 	bl	8006e1c <_free_r>
 80077b4:	230c      	movs	r3, #12
 80077b6:	f8ca 3000 	str.w	r3, [sl]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	f04f 30ff 	mov.w	r0, #4294967295
 80077c6:	e7e9      	b.n	800779c <__ssputs_r+0x88>

080077c8 <_svfiprintf_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	4698      	mov	r8, r3
 80077ce:	898b      	ldrh	r3, [r1, #12]
 80077d0:	061b      	lsls	r3, r3, #24
 80077d2:	b09d      	sub	sp, #116	; 0x74
 80077d4:	4607      	mov	r7, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	d50e      	bpl.n	80077fa <_svfiprintf_r+0x32>
 80077dc:	690b      	ldr	r3, [r1, #16]
 80077de:	b963      	cbnz	r3, 80077fa <_svfiprintf_r+0x32>
 80077e0:	2140      	movs	r1, #64	; 0x40
 80077e2:	f7ff fb8f 	bl	8006f04 <_malloc_r>
 80077e6:	6028      	str	r0, [r5, #0]
 80077e8:	6128      	str	r0, [r5, #16]
 80077ea:	b920      	cbnz	r0, 80077f6 <_svfiprintf_r+0x2e>
 80077ec:	230c      	movs	r3, #12
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e0d0      	b.n	8007998 <_svfiprintf_r+0x1d0>
 80077f6:	2340      	movs	r3, #64	; 0x40
 80077f8:	616b      	str	r3, [r5, #20]
 80077fa:	2300      	movs	r3, #0
 80077fc:	9309      	str	r3, [sp, #36]	; 0x24
 80077fe:	2320      	movs	r3, #32
 8007800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007804:	f8cd 800c 	str.w	r8, [sp, #12]
 8007808:	2330      	movs	r3, #48	; 0x30
 800780a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079b0 <_svfiprintf_r+0x1e8>
 800780e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007812:	f04f 0901 	mov.w	r9, #1
 8007816:	4623      	mov	r3, r4
 8007818:	469a      	mov	sl, r3
 800781a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800781e:	b10a      	cbz	r2, 8007824 <_svfiprintf_r+0x5c>
 8007820:	2a25      	cmp	r2, #37	; 0x25
 8007822:	d1f9      	bne.n	8007818 <_svfiprintf_r+0x50>
 8007824:	ebba 0b04 	subs.w	fp, sl, r4
 8007828:	d00b      	beq.n	8007842 <_svfiprintf_r+0x7a>
 800782a:	465b      	mov	r3, fp
 800782c:	4622      	mov	r2, r4
 800782e:	4629      	mov	r1, r5
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff ff6f 	bl	8007714 <__ssputs_r>
 8007836:	3001      	adds	r0, #1
 8007838:	f000 80a9 	beq.w	800798e <_svfiprintf_r+0x1c6>
 800783c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800783e:	445a      	add	r2, fp
 8007840:	9209      	str	r2, [sp, #36]	; 0x24
 8007842:	f89a 3000 	ldrb.w	r3, [sl]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80a1 	beq.w	800798e <_svfiprintf_r+0x1c6>
 800784c:	2300      	movs	r3, #0
 800784e:	f04f 32ff 	mov.w	r2, #4294967295
 8007852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007856:	f10a 0a01 	add.w	sl, sl, #1
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	9307      	str	r3, [sp, #28]
 800785e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007862:	931a      	str	r3, [sp, #104]	; 0x68
 8007864:	4654      	mov	r4, sl
 8007866:	2205      	movs	r2, #5
 8007868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786c:	4850      	ldr	r0, [pc, #320]	; (80079b0 <_svfiprintf_r+0x1e8>)
 800786e:	f7f8 fccf 	bl	8000210 <memchr>
 8007872:	9a04      	ldr	r2, [sp, #16]
 8007874:	b9d8      	cbnz	r0, 80078ae <_svfiprintf_r+0xe6>
 8007876:	06d0      	lsls	r0, r2, #27
 8007878:	bf44      	itt	mi
 800787a:	2320      	movmi	r3, #32
 800787c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007880:	0711      	lsls	r1, r2, #28
 8007882:	bf44      	itt	mi
 8007884:	232b      	movmi	r3, #43	; 0x2b
 8007886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800788a:	f89a 3000 	ldrb.w	r3, [sl]
 800788e:	2b2a      	cmp	r3, #42	; 0x2a
 8007890:	d015      	beq.n	80078be <_svfiprintf_r+0xf6>
 8007892:	9a07      	ldr	r2, [sp, #28]
 8007894:	4654      	mov	r4, sl
 8007896:	2000      	movs	r0, #0
 8007898:	f04f 0c0a 	mov.w	ip, #10
 800789c:	4621      	mov	r1, r4
 800789e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a2:	3b30      	subs	r3, #48	; 0x30
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	d94d      	bls.n	8007944 <_svfiprintf_r+0x17c>
 80078a8:	b1b0      	cbz	r0, 80078d8 <_svfiprintf_r+0x110>
 80078aa:	9207      	str	r2, [sp, #28]
 80078ac:	e014      	b.n	80078d8 <_svfiprintf_r+0x110>
 80078ae:	eba0 0308 	sub.w	r3, r0, r8
 80078b2:	fa09 f303 	lsl.w	r3, r9, r3
 80078b6:	4313      	orrs	r3, r2
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	46a2      	mov	sl, r4
 80078bc:	e7d2      	b.n	8007864 <_svfiprintf_r+0x9c>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	1d19      	adds	r1, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	9103      	str	r1, [sp, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfbb      	ittet	lt
 80078ca:	425b      	neglt	r3, r3
 80078cc:	f042 0202 	orrlt.w	r2, r2, #2
 80078d0:	9307      	strge	r3, [sp, #28]
 80078d2:	9307      	strlt	r3, [sp, #28]
 80078d4:	bfb8      	it	lt
 80078d6:	9204      	strlt	r2, [sp, #16]
 80078d8:	7823      	ldrb	r3, [r4, #0]
 80078da:	2b2e      	cmp	r3, #46	; 0x2e
 80078dc:	d10c      	bne.n	80078f8 <_svfiprintf_r+0x130>
 80078de:	7863      	ldrb	r3, [r4, #1]
 80078e0:	2b2a      	cmp	r3, #42	; 0x2a
 80078e2:	d134      	bne.n	800794e <_svfiprintf_r+0x186>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	1d1a      	adds	r2, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	9203      	str	r2, [sp, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bfb8      	it	lt
 80078f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80078f4:	3402      	adds	r4, #2
 80078f6:	9305      	str	r3, [sp, #20]
 80078f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80079c0 <_svfiprintf_r+0x1f8>
 80078fc:	7821      	ldrb	r1, [r4, #0]
 80078fe:	2203      	movs	r2, #3
 8007900:	4650      	mov	r0, sl
 8007902:	f7f8 fc85 	bl	8000210 <memchr>
 8007906:	b138      	cbz	r0, 8007918 <_svfiprintf_r+0x150>
 8007908:	9b04      	ldr	r3, [sp, #16]
 800790a:	eba0 000a 	sub.w	r0, r0, sl
 800790e:	2240      	movs	r2, #64	; 0x40
 8007910:	4082      	lsls	r2, r0
 8007912:	4313      	orrs	r3, r2
 8007914:	3401      	adds	r4, #1
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800791c:	4825      	ldr	r0, [pc, #148]	; (80079b4 <_svfiprintf_r+0x1ec>)
 800791e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007922:	2206      	movs	r2, #6
 8007924:	f7f8 fc74 	bl	8000210 <memchr>
 8007928:	2800      	cmp	r0, #0
 800792a:	d038      	beq.n	800799e <_svfiprintf_r+0x1d6>
 800792c:	4b22      	ldr	r3, [pc, #136]	; (80079b8 <_svfiprintf_r+0x1f0>)
 800792e:	bb1b      	cbnz	r3, 8007978 <_svfiprintf_r+0x1b0>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	3307      	adds	r3, #7
 8007934:	f023 0307 	bic.w	r3, r3, #7
 8007938:	3308      	adds	r3, #8
 800793a:	9303      	str	r3, [sp, #12]
 800793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793e:	4433      	add	r3, r6
 8007940:	9309      	str	r3, [sp, #36]	; 0x24
 8007942:	e768      	b.n	8007816 <_svfiprintf_r+0x4e>
 8007944:	fb0c 3202 	mla	r2, ip, r2, r3
 8007948:	460c      	mov	r4, r1
 800794a:	2001      	movs	r0, #1
 800794c:	e7a6      	b.n	800789c <_svfiprintf_r+0xd4>
 800794e:	2300      	movs	r3, #0
 8007950:	3401      	adds	r4, #1
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	4619      	mov	r1, r3
 8007956:	f04f 0c0a 	mov.w	ip, #10
 800795a:	4620      	mov	r0, r4
 800795c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007960:	3a30      	subs	r2, #48	; 0x30
 8007962:	2a09      	cmp	r2, #9
 8007964:	d903      	bls.n	800796e <_svfiprintf_r+0x1a6>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0c6      	beq.n	80078f8 <_svfiprintf_r+0x130>
 800796a:	9105      	str	r1, [sp, #20]
 800796c:	e7c4      	b.n	80078f8 <_svfiprintf_r+0x130>
 800796e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007972:	4604      	mov	r4, r0
 8007974:	2301      	movs	r3, #1
 8007976:	e7f0      	b.n	800795a <_svfiprintf_r+0x192>
 8007978:	ab03      	add	r3, sp, #12
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	462a      	mov	r2, r5
 800797e:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <_svfiprintf_r+0x1f4>)
 8007980:	a904      	add	r1, sp, #16
 8007982:	4638      	mov	r0, r7
 8007984:	f7fd fe42 	bl	800560c <_printf_float>
 8007988:	1c42      	adds	r2, r0, #1
 800798a:	4606      	mov	r6, r0
 800798c:	d1d6      	bne.n	800793c <_svfiprintf_r+0x174>
 800798e:	89ab      	ldrh	r3, [r5, #12]
 8007990:	065b      	lsls	r3, r3, #25
 8007992:	f53f af2d 	bmi.w	80077f0 <_svfiprintf_r+0x28>
 8007996:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007998:	b01d      	add	sp, #116	; 0x74
 800799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799e:	ab03      	add	r3, sp, #12
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	462a      	mov	r2, r5
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <_svfiprintf_r+0x1f4>)
 80079a6:	a904      	add	r1, sp, #16
 80079a8:	4638      	mov	r0, r7
 80079aa:	f7fe f8d3 	bl	8005b54 <_printf_i>
 80079ae:	e7eb      	b.n	8007988 <_svfiprintf_r+0x1c0>
 80079b0:	08008484 	.word	0x08008484
 80079b4:	0800848e 	.word	0x0800848e
 80079b8:	0800560d 	.word	0x0800560d
 80079bc:	08007715 	.word	0x08007715
 80079c0:	0800848a 	.word	0x0800848a

080079c4 <__sfputc_r>:
 80079c4:	6893      	ldr	r3, [r2, #8]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	b410      	push	{r4}
 80079cc:	6093      	str	r3, [r2, #8]
 80079ce:	da08      	bge.n	80079e2 <__sfputc_r+0x1e>
 80079d0:	6994      	ldr	r4, [r2, #24]
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	db01      	blt.n	80079da <__sfputc_r+0x16>
 80079d6:	290a      	cmp	r1, #10
 80079d8:	d103      	bne.n	80079e2 <__sfputc_r+0x1e>
 80079da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079de:	f000 b9e3 	b.w	8007da8 <__swbuf_r>
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	1c58      	adds	r0, r3, #1
 80079e6:	6010      	str	r0, [r2, #0]
 80079e8:	7019      	strb	r1, [r3, #0]
 80079ea:	4608      	mov	r0, r1
 80079ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <__sfputs_r>:
 80079f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f4:	4606      	mov	r6, r0
 80079f6:	460f      	mov	r7, r1
 80079f8:	4614      	mov	r4, r2
 80079fa:	18d5      	adds	r5, r2, r3
 80079fc:	42ac      	cmp	r4, r5
 80079fe:	d101      	bne.n	8007a04 <__sfputs_r+0x12>
 8007a00:	2000      	movs	r0, #0
 8007a02:	e007      	b.n	8007a14 <__sfputs_r+0x22>
 8007a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a08:	463a      	mov	r2, r7
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ffda 	bl	80079c4 <__sfputc_r>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d1f3      	bne.n	80079fc <__sfputs_r+0xa>
 8007a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a18 <_vfiprintf_r>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	b09d      	sub	sp, #116	; 0x74
 8007a20:	4614      	mov	r4, r2
 8007a22:	4698      	mov	r8, r3
 8007a24:	4606      	mov	r6, r0
 8007a26:	b118      	cbz	r0, 8007a30 <_vfiprintf_r+0x18>
 8007a28:	6a03      	ldr	r3, [r0, #32]
 8007a2a:	b90b      	cbnz	r3, 8007a30 <_vfiprintf_r+0x18>
 8007a2c:	f7fe fa40 	bl	8005eb0 <__sinit>
 8007a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a32:	07d9      	lsls	r1, r3, #31
 8007a34:	d405      	bmi.n	8007a42 <_vfiprintf_r+0x2a>
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	059a      	lsls	r2, r3, #22
 8007a3a:	d402      	bmi.n	8007a42 <_vfiprintf_r+0x2a>
 8007a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a3e:	f7fe fb6e 	bl	800611e <__retarget_lock_acquire_recursive>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	071b      	lsls	r3, r3, #28
 8007a46:	d501      	bpl.n	8007a4c <_vfiprintf_r+0x34>
 8007a48:	692b      	ldr	r3, [r5, #16]
 8007a4a:	b99b      	cbnz	r3, 8007a74 <_vfiprintf_r+0x5c>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f000 f9e8 	bl	8007e24 <__swsetup_r>
 8007a54:	b170      	cbz	r0, 8007a74 <_vfiprintf_r+0x5c>
 8007a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a58:	07dc      	lsls	r4, r3, #31
 8007a5a:	d504      	bpl.n	8007a66 <_vfiprintf_r+0x4e>
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	b01d      	add	sp, #116	; 0x74
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	0598      	lsls	r0, r3, #22
 8007a6a:	d4f7      	bmi.n	8007a5c <_vfiprintf_r+0x44>
 8007a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6e:	f7fe fb57 	bl	8006120 <__retarget_lock_release_recursive>
 8007a72:	e7f3      	b.n	8007a5c <_vfiprintf_r+0x44>
 8007a74:	2300      	movs	r3, #0
 8007a76:	9309      	str	r3, [sp, #36]	; 0x24
 8007a78:	2320      	movs	r3, #32
 8007a7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a82:	2330      	movs	r3, #48	; 0x30
 8007a84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c38 <_vfiprintf_r+0x220>
 8007a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a8c:	f04f 0901 	mov.w	r9, #1
 8007a90:	4623      	mov	r3, r4
 8007a92:	469a      	mov	sl, r3
 8007a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a98:	b10a      	cbz	r2, 8007a9e <_vfiprintf_r+0x86>
 8007a9a:	2a25      	cmp	r2, #37	; 0x25
 8007a9c:	d1f9      	bne.n	8007a92 <_vfiprintf_r+0x7a>
 8007a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa2:	d00b      	beq.n	8007abc <_vfiprintf_r+0xa4>
 8007aa4:	465b      	mov	r3, fp
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7ff ffa1 	bl	80079f2 <__sfputs_r>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	f000 80a9 	beq.w	8007c08 <_vfiprintf_r+0x1f0>
 8007ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab8:	445a      	add	r2, fp
 8007aba:	9209      	str	r2, [sp, #36]	; 0x24
 8007abc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80a1 	beq.w	8007c08 <_vfiprintf_r+0x1f0>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8007acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ad0:	f10a 0a01 	add.w	sl, sl, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	9307      	str	r3, [sp, #28]
 8007ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007adc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ade:	4654      	mov	r4, sl
 8007ae0:	2205      	movs	r2, #5
 8007ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae6:	4854      	ldr	r0, [pc, #336]	; (8007c38 <_vfiprintf_r+0x220>)
 8007ae8:	f7f8 fb92 	bl	8000210 <memchr>
 8007aec:	9a04      	ldr	r2, [sp, #16]
 8007aee:	b9d8      	cbnz	r0, 8007b28 <_vfiprintf_r+0x110>
 8007af0:	06d1      	lsls	r1, r2, #27
 8007af2:	bf44      	itt	mi
 8007af4:	2320      	movmi	r3, #32
 8007af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007afa:	0713      	lsls	r3, r2, #28
 8007afc:	bf44      	itt	mi
 8007afe:	232b      	movmi	r3, #43	; 0x2b
 8007b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b04:	f89a 3000 	ldrb.w	r3, [sl]
 8007b08:	2b2a      	cmp	r3, #42	; 0x2a
 8007b0a:	d015      	beq.n	8007b38 <_vfiprintf_r+0x120>
 8007b0c:	9a07      	ldr	r2, [sp, #28]
 8007b0e:	4654      	mov	r4, sl
 8007b10:	2000      	movs	r0, #0
 8007b12:	f04f 0c0a 	mov.w	ip, #10
 8007b16:	4621      	mov	r1, r4
 8007b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b1c:	3b30      	subs	r3, #48	; 0x30
 8007b1e:	2b09      	cmp	r3, #9
 8007b20:	d94d      	bls.n	8007bbe <_vfiprintf_r+0x1a6>
 8007b22:	b1b0      	cbz	r0, 8007b52 <_vfiprintf_r+0x13a>
 8007b24:	9207      	str	r2, [sp, #28]
 8007b26:	e014      	b.n	8007b52 <_vfiprintf_r+0x13a>
 8007b28:	eba0 0308 	sub.w	r3, r0, r8
 8007b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	46a2      	mov	sl, r4
 8007b36:	e7d2      	b.n	8007ade <_vfiprintf_r+0xc6>
 8007b38:	9b03      	ldr	r3, [sp, #12]
 8007b3a:	1d19      	adds	r1, r3, #4
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	9103      	str	r1, [sp, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bfbb      	ittet	lt
 8007b44:	425b      	neglt	r3, r3
 8007b46:	f042 0202 	orrlt.w	r2, r2, #2
 8007b4a:	9307      	strge	r3, [sp, #28]
 8007b4c:	9307      	strlt	r3, [sp, #28]
 8007b4e:	bfb8      	it	lt
 8007b50:	9204      	strlt	r2, [sp, #16]
 8007b52:	7823      	ldrb	r3, [r4, #0]
 8007b54:	2b2e      	cmp	r3, #46	; 0x2e
 8007b56:	d10c      	bne.n	8007b72 <_vfiprintf_r+0x15a>
 8007b58:	7863      	ldrb	r3, [r4, #1]
 8007b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b5c:	d134      	bne.n	8007bc8 <_vfiprintf_r+0x1b0>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	1d1a      	adds	r2, r3, #4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	9203      	str	r2, [sp, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bfb8      	it	lt
 8007b6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b6e:	3402      	adds	r4, #2
 8007b70:	9305      	str	r3, [sp, #20]
 8007b72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c48 <_vfiprintf_r+0x230>
 8007b76:	7821      	ldrb	r1, [r4, #0]
 8007b78:	2203      	movs	r2, #3
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	f7f8 fb48 	bl	8000210 <memchr>
 8007b80:	b138      	cbz	r0, 8007b92 <_vfiprintf_r+0x17a>
 8007b82:	9b04      	ldr	r3, [sp, #16]
 8007b84:	eba0 000a 	sub.w	r0, r0, sl
 8007b88:	2240      	movs	r2, #64	; 0x40
 8007b8a:	4082      	lsls	r2, r0
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	3401      	adds	r4, #1
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b96:	4829      	ldr	r0, [pc, #164]	; (8007c3c <_vfiprintf_r+0x224>)
 8007b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b9c:	2206      	movs	r2, #6
 8007b9e:	f7f8 fb37 	bl	8000210 <memchr>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d03f      	beq.n	8007c26 <_vfiprintf_r+0x20e>
 8007ba6:	4b26      	ldr	r3, [pc, #152]	; (8007c40 <_vfiprintf_r+0x228>)
 8007ba8:	bb1b      	cbnz	r3, 8007bf2 <_vfiprintf_r+0x1da>
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	3307      	adds	r3, #7
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	9303      	str	r3, [sp, #12]
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	443b      	add	r3, r7
 8007bba:	9309      	str	r3, [sp, #36]	; 0x24
 8007bbc:	e768      	b.n	8007a90 <_vfiprintf_r+0x78>
 8007bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	e7a6      	b.n	8007b16 <_vfiprintf_r+0xfe>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	3401      	adds	r4, #1
 8007bcc:	9305      	str	r3, [sp, #20]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	f04f 0c0a 	mov.w	ip, #10
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bda:	3a30      	subs	r2, #48	; 0x30
 8007bdc:	2a09      	cmp	r2, #9
 8007bde:	d903      	bls.n	8007be8 <_vfiprintf_r+0x1d0>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0c6      	beq.n	8007b72 <_vfiprintf_r+0x15a>
 8007be4:	9105      	str	r1, [sp, #20]
 8007be6:	e7c4      	b.n	8007b72 <_vfiprintf_r+0x15a>
 8007be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bec:	4604      	mov	r4, r0
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e7f0      	b.n	8007bd4 <_vfiprintf_r+0x1bc>
 8007bf2:	ab03      	add	r3, sp, #12
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	462a      	mov	r2, r5
 8007bf8:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <_vfiprintf_r+0x22c>)
 8007bfa:	a904      	add	r1, sp, #16
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7fd fd05 	bl	800560c <_printf_float>
 8007c02:	4607      	mov	r7, r0
 8007c04:	1c78      	adds	r0, r7, #1
 8007c06:	d1d6      	bne.n	8007bb6 <_vfiprintf_r+0x19e>
 8007c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c0a:	07d9      	lsls	r1, r3, #31
 8007c0c:	d405      	bmi.n	8007c1a <_vfiprintf_r+0x202>
 8007c0e:	89ab      	ldrh	r3, [r5, #12]
 8007c10:	059a      	lsls	r2, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_vfiprintf_r+0x202>
 8007c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c16:	f7fe fa83 	bl	8006120 <__retarget_lock_release_recursive>
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	065b      	lsls	r3, r3, #25
 8007c1e:	f53f af1d 	bmi.w	8007a5c <_vfiprintf_r+0x44>
 8007c22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c24:	e71c      	b.n	8007a60 <_vfiprintf_r+0x48>
 8007c26:	ab03      	add	r3, sp, #12
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <_vfiprintf_r+0x22c>)
 8007c2e:	a904      	add	r1, sp, #16
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7fd ff8f 	bl	8005b54 <_printf_i>
 8007c36:	e7e4      	b.n	8007c02 <_vfiprintf_r+0x1ea>
 8007c38:	08008484 	.word	0x08008484
 8007c3c:	0800848e 	.word	0x0800848e
 8007c40:	0800560d 	.word	0x0800560d
 8007c44:	080079f3 	.word	0x080079f3
 8007c48:	0800848a 	.word	0x0800848a

08007c4c <__sflush_r>:
 8007c4c:	898a      	ldrh	r2, [r1, #12]
 8007c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c52:	4605      	mov	r5, r0
 8007c54:	0710      	lsls	r0, r2, #28
 8007c56:	460c      	mov	r4, r1
 8007c58:	d458      	bmi.n	8007d0c <__sflush_r+0xc0>
 8007c5a:	684b      	ldr	r3, [r1, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	dc05      	bgt.n	8007c6c <__sflush_r+0x20>
 8007c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	dc02      	bgt.n	8007c6c <__sflush_r+0x20>
 8007c66:	2000      	movs	r0, #0
 8007c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	d0f9      	beq.n	8007c66 <__sflush_r+0x1a>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c78:	682f      	ldr	r7, [r5, #0]
 8007c7a:	6a21      	ldr	r1, [r4, #32]
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	d032      	beq.n	8007ce6 <__sflush_r+0x9a>
 8007c80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	075a      	lsls	r2, r3, #29
 8007c86:	d505      	bpl.n	8007c94 <__sflush_r+0x48>
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	1ac0      	subs	r0, r0, r3
 8007c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c8e:	b10b      	cbz	r3, 8007c94 <__sflush_r+0x48>
 8007c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c92:	1ac0      	subs	r0, r0, r3
 8007c94:	2300      	movs	r3, #0
 8007c96:	4602      	mov	r2, r0
 8007c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c9a:	6a21      	ldr	r1, [r4, #32]
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	47b0      	blx	r6
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	d106      	bne.n	8007cb4 <__sflush_r+0x68>
 8007ca6:	6829      	ldr	r1, [r5, #0]
 8007ca8:	291d      	cmp	r1, #29
 8007caa:	d82b      	bhi.n	8007d04 <__sflush_r+0xb8>
 8007cac:	4a29      	ldr	r2, [pc, #164]	; (8007d54 <__sflush_r+0x108>)
 8007cae:	410a      	asrs	r2, r1
 8007cb0:	07d6      	lsls	r6, r2, #31
 8007cb2:	d427      	bmi.n	8007d04 <__sflush_r+0xb8>
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	6062      	str	r2, [r4, #4]
 8007cb8:	04d9      	lsls	r1, r3, #19
 8007cba:	6922      	ldr	r2, [r4, #16]
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	d504      	bpl.n	8007cca <__sflush_r+0x7e>
 8007cc0:	1c42      	adds	r2, r0, #1
 8007cc2:	d101      	bne.n	8007cc8 <__sflush_r+0x7c>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b903      	cbnz	r3, 8007cca <__sflush_r+0x7e>
 8007cc8:	6560      	str	r0, [r4, #84]	; 0x54
 8007cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ccc:	602f      	str	r7, [r5, #0]
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	d0c9      	beq.n	8007c66 <__sflush_r+0x1a>
 8007cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	d002      	beq.n	8007ce0 <__sflush_r+0x94>
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f7ff f89e 	bl	8006e1c <_free_r>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ce4:	e7c0      	b.n	8007c68 <__sflush_r+0x1c>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b0      	blx	r6
 8007cec:	1c41      	adds	r1, r0, #1
 8007cee:	d1c8      	bne.n	8007c82 <__sflush_r+0x36>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0c5      	beq.n	8007c82 <__sflush_r+0x36>
 8007cf6:	2b1d      	cmp	r3, #29
 8007cf8:	d001      	beq.n	8007cfe <__sflush_r+0xb2>
 8007cfa:	2b16      	cmp	r3, #22
 8007cfc:	d101      	bne.n	8007d02 <__sflush_r+0xb6>
 8007cfe:	602f      	str	r7, [r5, #0]
 8007d00:	e7b1      	b.n	8007c66 <__sflush_r+0x1a>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	e7ad      	b.n	8007c68 <__sflush_r+0x1c>
 8007d0c:	690f      	ldr	r7, [r1, #16]
 8007d0e:	2f00      	cmp	r7, #0
 8007d10:	d0a9      	beq.n	8007c66 <__sflush_r+0x1a>
 8007d12:	0793      	lsls	r3, r2, #30
 8007d14:	680e      	ldr	r6, [r1, #0]
 8007d16:	bf08      	it	eq
 8007d18:	694b      	ldreq	r3, [r1, #20]
 8007d1a:	600f      	str	r7, [r1, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	2300      	movne	r3, #0
 8007d20:	eba6 0807 	sub.w	r8, r6, r7
 8007d24:	608b      	str	r3, [r1, #8]
 8007d26:	f1b8 0f00 	cmp.w	r8, #0
 8007d2a:	dd9c      	ble.n	8007c66 <__sflush_r+0x1a>
 8007d2c:	6a21      	ldr	r1, [r4, #32]
 8007d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d30:	4643      	mov	r3, r8
 8007d32:	463a      	mov	r2, r7
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	dc06      	bgt.n	8007d4a <__sflush_r+0xfe>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e78e      	b.n	8007c68 <__sflush_r+0x1c>
 8007d4a:	4407      	add	r7, r0
 8007d4c:	eba8 0800 	sub.w	r8, r8, r0
 8007d50:	e7e9      	b.n	8007d26 <__sflush_r+0xda>
 8007d52:	bf00      	nop
 8007d54:	dfbffffe 	.word	0xdfbffffe

08007d58 <_fflush_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	690b      	ldr	r3, [r1, #16]
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	b913      	cbnz	r3, 8007d68 <_fflush_r+0x10>
 8007d62:	2500      	movs	r5, #0
 8007d64:	4628      	mov	r0, r5
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	b118      	cbz	r0, 8007d72 <_fflush_r+0x1a>
 8007d6a:	6a03      	ldr	r3, [r0, #32]
 8007d6c:	b90b      	cbnz	r3, 8007d72 <_fflush_r+0x1a>
 8007d6e:	f7fe f89f 	bl	8005eb0 <__sinit>
 8007d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f3      	beq.n	8007d62 <_fflush_r+0xa>
 8007d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d7c:	07d0      	lsls	r0, r2, #31
 8007d7e:	d404      	bmi.n	8007d8a <_fflush_r+0x32>
 8007d80:	0599      	lsls	r1, r3, #22
 8007d82:	d402      	bmi.n	8007d8a <_fflush_r+0x32>
 8007d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d86:	f7fe f9ca 	bl	800611e <__retarget_lock_acquire_recursive>
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	f7ff ff5d 	bl	8007c4c <__sflush_r>
 8007d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d94:	07da      	lsls	r2, r3, #31
 8007d96:	4605      	mov	r5, r0
 8007d98:	d4e4      	bmi.n	8007d64 <_fflush_r+0xc>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	059b      	lsls	r3, r3, #22
 8007d9e:	d4e1      	bmi.n	8007d64 <_fflush_r+0xc>
 8007da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007da2:	f7fe f9bd 	bl	8006120 <__retarget_lock_release_recursive>
 8007da6:	e7dd      	b.n	8007d64 <_fflush_r+0xc>

08007da8 <__swbuf_r>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	460e      	mov	r6, r1
 8007dac:	4614      	mov	r4, r2
 8007dae:	4605      	mov	r5, r0
 8007db0:	b118      	cbz	r0, 8007dba <__swbuf_r+0x12>
 8007db2:	6a03      	ldr	r3, [r0, #32]
 8007db4:	b90b      	cbnz	r3, 8007dba <__swbuf_r+0x12>
 8007db6:	f7fe f87b 	bl	8005eb0 <__sinit>
 8007dba:	69a3      	ldr	r3, [r4, #24]
 8007dbc:	60a3      	str	r3, [r4, #8]
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	071a      	lsls	r2, r3, #28
 8007dc2:	d525      	bpl.n	8007e10 <__swbuf_r+0x68>
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	b31b      	cbz	r3, 8007e10 <__swbuf_r+0x68>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	6922      	ldr	r2, [r4, #16]
 8007dcc:	1a98      	subs	r0, r3, r2
 8007dce:	6963      	ldr	r3, [r4, #20]
 8007dd0:	b2f6      	uxtb	r6, r6
 8007dd2:	4283      	cmp	r3, r0
 8007dd4:	4637      	mov	r7, r6
 8007dd6:	dc04      	bgt.n	8007de2 <__swbuf_r+0x3a>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f7ff ffbc 	bl	8007d58 <_fflush_r>
 8007de0:	b9e0      	cbnz	r0, 8007e1c <__swbuf_r+0x74>
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	60a3      	str	r3, [r4, #8]
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	6022      	str	r2, [r4, #0]
 8007dee:	701e      	strb	r6, [r3, #0]
 8007df0:	6962      	ldr	r2, [r4, #20]
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d004      	beq.n	8007e02 <__swbuf_r+0x5a>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	07db      	lsls	r3, r3, #31
 8007dfc:	d506      	bpl.n	8007e0c <__swbuf_r+0x64>
 8007dfe:	2e0a      	cmp	r6, #10
 8007e00:	d104      	bne.n	8007e0c <__swbuf_r+0x64>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f7ff ffa7 	bl	8007d58 <_fflush_r>
 8007e0a:	b938      	cbnz	r0, 8007e1c <__swbuf_r+0x74>
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f806 	bl	8007e24 <__swsetup_r>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d0d5      	beq.n	8007dc8 <__swbuf_r+0x20>
 8007e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e20:	e7f4      	b.n	8007e0c <__swbuf_r+0x64>
	...

08007e24 <__swsetup_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4b2a      	ldr	r3, [pc, #168]	; (8007ed0 <__swsetup_r+0xac>)
 8007e28:	4605      	mov	r5, r0
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	b118      	cbz	r0, 8007e38 <__swsetup_r+0x14>
 8007e30:	6a03      	ldr	r3, [r0, #32]
 8007e32:	b90b      	cbnz	r3, 8007e38 <__swsetup_r+0x14>
 8007e34:	f7fe f83c 	bl	8005eb0 <__sinit>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e3e:	0718      	lsls	r0, r3, #28
 8007e40:	d422      	bmi.n	8007e88 <__swsetup_r+0x64>
 8007e42:	06d9      	lsls	r1, r3, #27
 8007e44:	d407      	bmi.n	8007e56 <__swsetup_r+0x32>
 8007e46:	2309      	movs	r3, #9
 8007e48:	602b      	str	r3, [r5, #0]
 8007e4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	e034      	b.n	8007ec0 <__swsetup_r+0x9c>
 8007e56:	0758      	lsls	r0, r3, #29
 8007e58:	d512      	bpl.n	8007e80 <__swsetup_r+0x5c>
 8007e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e5c:	b141      	cbz	r1, 8007e70 <__swsetup_r+0x4c>
 8007e5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e62:	4299      	cmp	r1, r3
 8007e64:	d002      	beq.n	8007e6c <__swsetup_r+0x48>
 8007e66:	4628      	mov	r0, r5
 8007e68:	f7fe ffd8 	bl	8006e1c <_free_r>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6363      	str	r3, [r4, #52]	; 0x34
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e76:	81a3      	strh	r3, [r4, #12]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6063      	str	r3, [r4, #4]
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f043 0308 	orr.w	r3, r3, #8
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	b94b      	cbnz	r3, 8007ea0 <__swsetup_r+0x7c>
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e96:	d003      	beq.n	8007ea0 <__swsetup_r+0x7c>
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f000 f90c 	bl	80080b8 <__smakebuf_r>
 8007ea0:	89a0      	ldrh	r0, [r4, #12]
 8007ea2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ea6:	f010 0301 	ands.w	r3, r0, #1
 8007eaa:	d00a      	beq.n	8007ec2 <__swsetup_r+0x9e>
 8007eac:	2300      	movs	r3, #0
 8007eae:	60a3      	str	r3, [r4, #8]
 8007eb0:	6963      	ldr	r3, [r4, #20]
 8007eb2:	425b      	negs	r3, r3
 8007eb4:	61a3      	str	r3, [r4, #24]
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	b943      	cbnz	r3, 8007ecc <__swsetup_r+0xa8>
 8007eba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ebe:	d1c4      	bne.n	8007e4a <__swsetup_r+0x26>
 8007ec0:	bd38      	pop	{r3, r4, r5, pc}
 8007ec2:	0781      	lsls	r1, r0, #30
 8007ec4:	bf58      	it	pl
 8007ec6:	6963      	ldrpl	r3, [r4, #20]
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	e7f4      	b.n	8007eb6 <__swsetup_r+0x92>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	e7f7      	b.n	8007ec0 <__swsetup_r+0x9c>
 8007ed0:	20000064 	.word	0x20000064

08007ed4 <memmove>:
 8007ed4:	4288      	cmp	r0, r1
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	eb01 0402 	add.w	r4, r1, r2
 8007edc:	d902      	bls.n	8007ee4 <memmove+0x10>
 8007ede:	4284      	cmp	r4, r0
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	d807      	bhi.n	8007ef4 <memmove+0x20>
 8007ee4:	1e43      	subs	r3, r0, #1
 8007ee6:	42a1      	cmp	r1, r4
 8007ee8:	d008      	beq.n	8007efc <memmove+0x28>
 8007eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ef2:	e7f8      	b.n	8007ee6 <memmove+0x12>
 8007ef4:	4402      	add	r2, r0
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	428a      	cmp	r2, r1
 8007efa:	d100      	bne.n	8007efe <memmove+0x2a>
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f06:	e7f7      	b.n	8007ef8 <memmove+0x24>

08007f08 <_sbrk_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d06      	ldr	r5, [pc, #24]	; (8007f24 <_sbrk_r+0x1c>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	602b      	str	r3, [r5, #0]
 8007f14:	f7f9 fdcc 	bl	8001ab0 <_sbrk>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_sbrk_r+0x1a>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_sbrk_r+0x1a>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	20000b50 	.word	0x20000b50

08007f28 <memcpy>:
 8007f28:	440a      	add	r2, r1
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f30:	d100      	bne.n	8007f34 <memcpy+0xc>
 8007f32:	4770      	bx	lr
 8007f34:	b510      	push	{r4, lr}
 8007f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f3e:	4291      	cmp	r1, r2
 8007f40:	d1f9      	bne.n	8007f36 <memcpy+0xe>
 8007f42:	bd10      	pop	{r4, pc}

08007f44 <__assert_func>:
 8007f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f46:	4614      	mov	r4, r2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <__assert_func+0x2c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4605      	mov	r5, r0
 8007f50:	68d8      	ldr	r0, [r3, #12]
 8007f52:	b14c      	cbz	r4, 8007f68 <__assert_func+0x24>
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <__assert_func+0x30>)
 8007f56:	9100      	str	r1, [sp, #0]
 8007f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f5c:	4906      	ldr	r1, [pc, #24]	; (8007f78 <__assert_func+0x34>)
 8007f5e:	462b      	mov	r3, r5
 8007f60:	f000 f872 	bl	8008048 <fiprintf>
 8007f64:	f000 f906 	bl	8008174 <abort>
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <__assert_func+0x38>)
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	e7f3      	b.n	8007f56 <__assert_func+0x12>
 8007f6e:	bf00      	nop
 8007f70:	20000064 	.word	0x20000064
 8007f74:	0800849f 	.word	0x0800849f
 8007f78:	080084ac 	.word	0x080084ac
 8007f7c:	080084da 	.word	0x080084da

08007f80 <_calloc_r>:
 8007f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f82:	fba1 2402 	umull	r2, r4, r1, r2
 8007f86:	b94c      	cbnz	r4, 8007f9c <_calloc_r+0x1c>
 8007f88:	4611      	mov	r1, r2
 8007f8a:	9201      	str	r2, [sp, #4]
 8007f8c:	f7fe ffba 	bl	8006f04 <_malloc_r>
 8007f90:	9a01      	ldr	r2, [sp, #4]
 8007f92:	4605      	mov	r5, r0
 8007f94:	b930      	cbnz	r0, 8007fa4 <_calloc_r+0x24>
 8007f96:	4628      	mov	r0, r5
 8007f98:	b003      	add	sp, #12
 8007f9a:	bd30      	pop	{r4, r5, pc}
 8007f9c:	220c      	movs	r2, #12
 8007f9e:	6002      	str	r2, [r0, #0]
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	e7f8      	b.n	8007f96 <_calloc_r+0x16>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	f7fe f82e 	bl	8006006 <memset>
 8007faa:	e7f4      	b.n	8007f96 <_calloc_r+0x16>

08007fac <__ascii_mbtowc>:
 8007fac:	b082      	sub	sp, #8
 8007fae:	b901      	cbnz	r1, 8007fb2 <__ascii_mbtowc+0x6>
 8007fb0:	a901      	add	r1, sp, #4
 8007fb2:	b142      	cbz	r2, 8007fc6 <__ascii_mbtowc+0x1a>
 8007fb4:	b14b      	cbz	r3, 8007fca <__ascii_mbtowc+0x1e>
 8007fb6:	7813      	ldrb	r3, [r2, #0]
 8007fb8:	600b      	str	r3, [r1, #0]
 8007fba:	7812      	ldrb	r2, [r2, #0]
 8007fbc:	1e10      	subs	r0, r2, #0
 8007fbe:	bf18      	it	ne
 8007fc0:	2001      	movne	r0, #1
 8007fc2:	b002      	add	sp, #8
 8007fc4:	4770      	bx	lr
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	e7fb      	b.n	8007fc2 <__ascii_mbtowc+0x16>
 8007fca:	f06f 0001 	mvn.w	r0, #1
 8007fce:	e7f8      	b.n	8007fc2 <__ascii_mbtowc+0x16>

08007fd0 <_realloc_r>:
 8007fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd4:	4680      	mov	r8, r0
 8007fd6:	4614      	mov	r4, r2
 8007fd8:	460e      	mov	r6, r1
 8007fda:	b921      	cbnz	r1, 8007fe6 <_realloc_r+0x16>
 8007fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	f7fe bf8f 	b.w	8006f04 <_malloc_r>
 8007fe6:	b92a      	cbnz	r2, 8007ff4 <_realloc_r+0x24>
 8007fe8:	f7fe ff18 	bl	8006e1c <_free_r>
 8007fec:	4625      	mov	r5, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff4:	f000 f8c5 	bl	8008182 <_malloc_usable_size_r>
 8007ff8:	4284      	cmp	r4, r0
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	d802      	bhi.n	8008004 <_realloc_r+0x34>
 8007ffe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008002:	d812      	bhi.n	800802a <_realloc_r+0x5a>
 8008004:	4621      	mov	r1, r4
 8008006:	4640      	mov	r0, r8
 8008008:	f7fe ff7c 	bl	8006f04 <_malloc_r>
 800800c:	4605      	mov	r5, r0
 800800e:	2800      	cmp	r0, #0
 8008010:	d0ed      	beq.n	8007fee <_realloc_r+0x1e>
 8008012:	42bc      	cmp	r4, r7
 8008014:	4622      	mov	r2, r4
 8008016:	4631      	mov	r1, r6
 8008018:	bf28      	it	cs
 800801a:	463a      	movcs	r2, r7
 800801c:	f7ff ff84 	bl	8007f28 <memcpy>
 8008020:	4631      	mov	r1, r6
 8008022:	4640      	mov	r0, r8
 8008024:	f7fe fefa 	bl	8006e1c <_free_r>
 8008028:	e7e1      	b.n	8007fee <_realloc_r+0x1e>
 800802a:	4635      	mov	r5, r6
 800802c:	e7df      	b.n	8007fee <_realloc_r+0x1e>

0800802e <__ascii_wctomb>:
 800802e:	b149      	cbz	r1, 8008044 <__ascii_wctomb+0x16>
 8008030:	2aff      	cmp	r2, #255	; 0xff
 8008032:	bf85      	ittet	hi
 8008034:	238a      	movhi	r3, #138	; 0x8a
 8008036:	6003      	strhi	r3, [r0, #0]
 8008038:	700a      	strbls	r2, [r1, #0]
 800803a:	f04f 30ff 	movhi.w	r0, #4294967295
 800803e:	bf98      	it	ls
 8008040:	2001      	movls	r0, #1
 8008042:	4770      	bx	lr
 8008044:	4608      	mov	r0, r1
 8008046:	4770      	bx	lr

08008048 <fiprintf>:
 8008048:	b40e      	push	{r1, r2, r3}
 800804a:	b503      	push	{r0, r1, lr}
 800804c:	4601      	mov	r1, r0
 800804e:	ab03      	add	r3, sp, #12
 8008050:	4805      	ldr	r0, [pc, #20]	; (8008068 <fiprintf+0x20>)
 8008052:	f853 2b04 	ldr.w	r2, [r3], #4
 8008056:	6800      	ldr	r0, [r0, #0]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	f7ff fcdd 	bl	8007a18 <_vfiprintf_r>
 800805e:	b002      	add	sp, #8
 8008060:	f85d eb04 	ldr.w	lr, [sp], #4
 8008064:	b003      	add	sp, #12
 8008066:	4770      	bx	lr
 8008068:	20000064 	.word	0x20000064

0800806c <__swhatbuf_r>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	460c      	mov	r4, r1
 8008070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008074:	2900      	cmp	r1, #0
 8008076:	b096      	sub	sp, #88	; 0x58
 8008078:	4615      	mov	r5, r2
 800807a:	461e      	mov	r6, r3
 800807c:	da0d      	bge.n	800809a <__swhatbuf_r+0x2e>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008084:	f04f 0100 	mov.w	r1, #0
 8008088:	bf0c      	ite	eq
 800808a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800808e:	2340      	movne	r3, #64	; 0x40
 8008090:	2000      	movs	r0, #0
 8008092:	6031      	str	r1, [r6, #0]
 8008094:	602b      	str	r3, [r5, #0]
 8008096:	b016      	add	sp, #88	; 0x58
 8008098:	bd70      	pop	{r4, r5, r6, pc}
 800809a:	466a      	mov	r2, sp
 800809c:	f000 f848 	bl	8008130 <_fstat_r>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	dbec      	blt.n	800807e <__swhatbuf_r+0x12>
 80080a4:	9901      	ldr	r1, [sp, #4]
 80080a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080ae:	4259      	negs	r1, r3
 80080b0:	4159      	adcs	r1, r3
 80080b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b6:	e7eb      	b.n	8008090 <__swhatbuf_r+0x24>

080080b8 <__smakebuf_r>:
 80080b8:	898b      	ldrh	r3, [r1, #12]
 80080ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080bc:	079d      	lsls	r5, r3, #30
 80080be:	4606      	mov	r6, r0
 80080c0:	460c      	mov	r4, r1
 80080c2:	d507      	bpl.n	80080d4 <__smakebuf_r+0x1c>
 80080c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	6123      	str	r3, [r4, #16]
 80080cc:	2301      	movs	r3, #1
 80080ce:	6163      	str	r3, [r4, #20]
 80080d0:	b002      	add	sp, #8
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	ab01      	add	r3, sp, #4
 80080d6:	466a      	mov	r2, sp
 80080d8:	f7ff ffc8 	bl	800806c <__swhatbuf_r>
 80080dc:	9900      	ldr	r1, [sp, #0]
 80080de:	4605      	mov	r5, r0
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7fe ff0f 	bl	8006f04 <_malloc_r>
 80080e6:	b948      	cbnz	r0, 80080fc <__smakebuf_r+0x44>
 80080e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ec:	059a      	lsls	r2, r3, #22
 80080ee:	d4ef      	bmi.n	80080d0 <__smakebuf_r+0x18>
 80080f0:	f023 0303 	bic.w	r3, r3, #3
 80080f4:	f043 0302 	orr.w	r3, r3, #2
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	e7e3      	b.n	80080c4 <__smakebuf_r+0xc>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	6020      	str	r0, [r4, #0]
 8008100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	6163      	str	r3, [r4, #20]
 800810a:	9b01      	ldr	r3, [sp, #4]
 800810c:	6120      	str	r0, [r4, #16]
 800810e:	b15b      	cbz	r3, 8008128 <__smakebuf_r+0x70>
 8008110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008114:	4630      	mov	r0, r6
 8008116:	f000 f81d 	bl	8008154 <_isatty_r>
 800811a:	b128      	cbz	r0, 8008128 <__smakebuf_r+0x70>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	431d      	orrs	r5, r3
 800812c:	81a5      	strh	r5, [r4, #12]
 800812e:	e7cf      	b.n	80080d0 <__smakebuf_r+0x18>

08008130 <_fstat_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	; (8008150 <_fstat_r+0x20>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	f7f9 fc8e 	bl	8001a5e <_fstat>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d102      	bne.n	800814c <_fstat_r+0x1c>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	b103      	cbz	r3, 800814c <_fstat_r+0x1c>
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	20000b50 	.word	0x20000b50

08008154 <_isatty_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d06      	ldr	r5, [pc, #24]	; (8008170 <_isatty_r+0x1c>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7f9 fc8d 	bl	8001a7e <_isatty>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_isatty_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_isatty_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20000b50 	.word	0x20000b50

08008174 <abort>:
 8008174:	b508      	push	{r3, lr}
 8008176:	2006      	movs	r0, #6
 8008178:	f000 f834 	bl	80081e4 <raise>
 800817c:	2001      	movs	r0, #1
 800817e:	f7f9 fc1f 	bl	80019c0 <_exit>

08008182 <_malloc_usable_size_r>:
 8008182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008186:	1f18      	subs	r0, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	bfbc      	itt	lt
 800818c:	580b      	ldrlt	r3, [r1, r0]
 800818e:	18c0      	addlt	r0, r0, r3
 8008190:	4770      	bx	lr

08008192 <_raise_r>:
 8008192:	291f      	cmp	r1, #31
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4604      	mov	r4, r0
 8008198:	460d      	mov	r5, r1
 800819a:	d904      	bls.n	80081a6 <_raise_r+0x14>
 800819c:	2316      	movs	r3, #22
 800819e:	6003      	str	r3, [r0, #0]
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80081a8:	b112      	cbz	r2, 80081b0 <_raise_r+0x1e>
 80081aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081ae:	b94b      	cbnz	r3, 80081c4 <_raise_r+0x32>
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 f831 	bl	8008218 <_getpid_r>
 80081b6:	462a      	mov	r2, r5
 80081b8:	4601      	mov	r1, r0
 80081ba:	4620      	mov	r0, r4
 80081bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c0:	f000 b818 	b.w	80081f4 <_kill_r>
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d00a      	beq.n	80081de <_raise_r+0x4c>
 80081c8:	1c59      	adds	r1, r3, #1
 80081ca:	d103      	bne.n	80081d4 <_raise_r+0x42>
 80081cc:	2316      	movs	r3, #22
 80081ce:	6003      	str	r3, [r0, #0]
 80081d0:	2001      	movs	r0, #1
 80081d2:	e7e7      	b.n	80081a4 <_raise_r+0x12>
 80081d4:	2400      	movs	r4, #0
 80081d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081da:	4628      	mov	r0, r5
 80081dc:	4798      	blx	r3
 80081de:	2000      	movs	r0, #0
 80081e0:	e7e0      	b.n	80081a4 <_raise_r+0x12>
	...

080081e4 <raise>:
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <raise+0xc>)
 80081e6:	4601      	mov	r1, r0
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f7ff bfd2 	b.w	8008192 <_raise_r>
 80081ee:	bf00      	nop
 80081f0:	20000064 	.word	0x20000064

080081f4 <_kill_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d07      	ldr	r5, [pc, #28]	; (8008214 <_kill_r+0x20>)
 80081f8:	2300      	movs	r3, #0
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	4611      	mov	r1, r2
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	f7f9 fbcd 	bl	80019a0 <_kill>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d102      	bne.n	8008210 <_kill_r+0x1c>
 800820a:	682b      	ldr	r3, [r5, #0]
 800820c:	b103      	cbz	r3, 8008210 <_kill_r+0x1c>
 800820e:	6023      	str	r3, [r4, #0]
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	bf00      	nop
 8008214:	20000b50 	.word	0x20000b50

08008218 <_getpid_r>:
 8008218:	f7f9 bbba 	b.w	8001990 <_getpid>

0800821c <_init>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	bf00      	nop
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr

08008228 <_fini>:
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	bf00      	nop
 800822c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822e:	bc08      	pop	{r3}
 8008230:	469e      	mov	lr, r3
 8008232:	4770      	bx	lr
