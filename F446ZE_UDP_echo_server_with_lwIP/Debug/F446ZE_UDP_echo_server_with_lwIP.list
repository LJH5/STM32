
F446ZE_UDP_echo_server_with_lwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010088  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  08010238  08010238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012dfc  08012dfc  00014088  2**0
                  CONTENTS
  4 .ARM          00000008  08012dfc  08012dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e04  08012e04  00014088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e04  08012e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e08  08012e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012e0c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014088  2**0
                  CONTENTS
 10 .bss          000089d8  20000088  20000088  00014088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a60  20008a60  00014088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228d0  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059af  00000000  00000000  00036988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  0003c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001665  00000000  00000000  0003df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000315ec  00000000  00000000  0003f59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d275  00000000  00000000  00070b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5e8e  00000000  00000000  0009ddfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00193c8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dfc  00000000  00000000  00193cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0019bacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010220 	.word	0x08010220

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08010220 	.word	0x08010220

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fdd4 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f81e 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f92e 	bl	80007ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f8d4 	bl	800073c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000594:	f000 f8fc 	bl	8000790 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000598:	f004 f850 	bl	800463c <MX_LWIP_Init>
  MX_TIM1_Init();
 800059c:	f000 f87e 	bl	800069c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  udp_echoserver_init();
 80005a0:	f000 fbfa 	bl	8000d98 <udp_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	ethernetif_notify_conn_changed(&gnetif);
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0x40>)
 80005a6:	f000 f9cf 	bl	8000948 <ethernetif_notify_conn_changed>
  	if (is_t)
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <main+0x44>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f8      	beq.n	80005a4 <main+0x24>
  	{
  		MX_LWIP_Process();
 80005b2:	f004 f983 	bl	80048bc <MX_LWIP_Process>
  		is_t = false;
 80005b6:	4b03      	ldr	r3, [pc, #12]	@ (80005c4 <main+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
  	ethernetif_notify_conn_changed(&gnetif);
 80005bc:	e7f2      	b.n	80005a4 <main+0x24>
 80005be:	bf00      	nop
 80005c0:	20000628 	.word	0x20000628
 80005c4:	20000618 	.word	0x20000618

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00e ff7d 	bl	800f4d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000628:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800063c:	23a8      	movs	r3, #168	@ 0xa8
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fac1 	bl	8002bd4 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f9a0 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000668:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2105      	movs	r1, #5
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fd22 	bl	80030c4 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000686:	f000 f989 	bl	800099c <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	463b      	mov	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006ba:	4a1f      	ldr	r2, [pc, #124]	@ (8000738 <MX_TIM1_Init+0x9c>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 80006be:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006c0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80006c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80006cc:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006ce:	2209      	movs	r2, #9
 80006d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e4:	4813      	ldr	r0, [pc, #76]	@ (8000734 <MX_TIM1_Init+0x98>)
 80006e6:	f002 ff0d 	bl	8003504 <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006f0:	f000 f954 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4619      	mov	r1, r3
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <MX_TIM1_Init+0x98>)
 8000702:	f002 ff4e 	bl	80035a2 <HAL_TIM_ConfigClockSource>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800070c:	f000 f946 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_TIM1_Init+0x98>)
 800071e:	f003 f94d 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000728:	f000 f938 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000a4 	.word	0x200000a4
 8000738:	40010000 	.word	0x40010000

0800073c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_USART3_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART3_UART_Init+0x4c>)
 8000774:	f003 f99e 	bl	8003ab4 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f90d 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000ec 	.word	0x200000ec
 800078c:	40004800 	.word	0x40004800

08000790 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800079a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2204      	movs	r2, #4
 80007a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	f002 f8ef 	bl	80029b6 <HAL_PCD_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f8dd 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000134 	.word	0x20000134

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	@ 0x30
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a4b      	ldr	r2, [pc, #300]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b45      	ldr	r3, [pc, #276]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a44      	ldr	r2, [pc, #272]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b42      	ldr	r3, [pc, #264]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b3e      	ldr	r3, [pc, #248]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a3d      	ldr	r2, [pc, #244]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a36      	ldr	r2, [pc, #216]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b30      	ldr	r3, [pc, #192]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a2f      	ldr	r2, [pc, #188]	@ (8000938 <MX_GPIO_Init+0x14c>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a28      	ldr	r2, [pc, #160]	@ (8000938 <MX_GPIO_Init+0x14c>)
 8000898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008b0:	4822      	ldr	r0, [pc, #136]	@ (800093c <MX_GPIO_Init+0x150>)
 80008b2:	f002 f867 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2140      	movs	r1, #64	@ 0x40
 80008ba:	4821      	ldr	r0, [pc, #132]	@ (8000940 <MX_GPIO_Init+0x154>)
 80008bc:	f002 f862 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	481b      	ldr	r0, [pc, #108]	@ (8000944 <MX_GPIO_Init+0x158>)
 80008d8:	f001 fea8 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008dc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <MX_GPIO_Init+0x150>)
 80008f6:	f001 fe99 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	@ (8000940 <MX_GPIO_Init+0x154>)
 8000912:	f001 fe8b 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_GPIO_Init+0x154>)
 800092a:	f001 fe7f 	bl	800262c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3730      	adds	r7, #48	@ 0x30
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40021800 	.word	0x40021800
 8000944:	40020800 	.word	0x40020800

08000948 <ethernetif_notify_conn_changed>:

/* USER CODE BEGIN 4 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	/* NOTE : This is function could be implemented in user file
	 when the callback is needed,
	 */
	if (netif_is_link_up(netif))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00b      	beq.n	800097a <ethernetif_notify_conn_changed+0x32>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2101      	movs	r1, #1
 8000966:	480c      	ldr	r0, [pc, #48]	@ (8000998 <ethernetif_notify_conn_changed+0x50>)
 8000968:	f002 f80c 	bl	8002984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <ethernetif_notify_conn_changed+0x50>)
 8000974:	f002 f806 	bl	8002984 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 8000978:	e00a      	b.n	8000990 <ethernetif_notify_conn_changed+0x48>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2101      	movs	r1, #1
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <ethernetif_notify_conn_changed+0x50>)
 8000980:	f002 f800 	bl	8002984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <ethernetif_notify_conn_changed+0x50>)
 800098c:	f001 fffa 	bl	8002984 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020400 	.word	0x40020400

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <HAL_TIM_Base_MspInit+0x3c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10d      	bne.n	8000a26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <HAL_TIM_Base_MspInit+0x40>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a09      	ldr	r2, [pc, #36]	@ (8000a38 <HAL_TIM_Base_MspInit+0x40>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <HAL_TIM_Base_MspInit+0x40>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40010000 	.word	0x40010000
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12c      	bne.n	8000ab8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_UART_MspInit+0x8c>)
 8000ab4:	f001 fdba 	bl	800262c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40004800 	.word	0x40004800
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aec:	d13f      	bne.n	8000b6e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a20      	ldr	r2, [pc, #128]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b0a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4815      	ldr	r0, [pc, #84]	@ (8000b7c <HAL_PCD_MspInit+0xb0>)
 8000b28:	f001 fd80 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <HAL_PCD_MspInit+0xb0>)
 8000b42:	f001 fd73 	bl	800262c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b50:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <HAL_PCD_MspInit+0xac>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 fafd 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  return 1;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_kill>:

int _kill(int pid, int sig)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <_kill+0x20>)
 8000bfc:	2216      	movs	r2, #22
 8000bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20008a50 	.word	0x20008a50

08000c14 <_exit>:

void _exit (int status)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffe5 	bl	8000bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c26:	bf00      	nop
 8000c28:	e7fd      	b.n	8000c26 <_exit+0x12>

08000c2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e00a      	b.n	8000c52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3c:	f3af 8000 	nop.w
 8000c40:	4601      	mov	r1, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	60ba      	str	r2, [r7, #8]
 8000c48:	b2ca      	uxtb	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbf0      	blt.n	8000c3c <_read+0x12>
  }

  return len;
 8000c5a:	687b      	ldr	r3, [r7, #4]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e009      	b.n	8000c8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbf1      	blt.n	8000c76 <_write+0x12>
  }
  return len;
 8000c92:	687b      	ldr	r3, [r7, #4]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_close>:

int _close(int file)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc4:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_isatty>:

int _isatty(int file)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	@ (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d205      	bcs.n	8000d40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <_sbrk+0x6c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	371c      	adds	r7, #28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20030000 	.word	0x20030000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	2000061c 	.word	0x2000061c
 8000d6c:	20008a60 	.word	0x20008a60
 8000d70:	20008a50 	.word	0x20008a50

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000d9e:	f00b ff27 	bl	800cbf0 <udp_new>
 8000da2:	60f8      	str	r0, [r7, #12]

   // static IP address
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 1, 194);
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <udp_echoserver_init+0x48>)
 8000da6:	607b      	str	r3, [r7, #4]

   if (upcb)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d014      	beq.n	8000dd8 <udp_echoserver_init+0x40>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, &myIPADDR, UDP_SERVER_PORT);
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2207      	movs	r2, #7
 8000db2:	4619      	mov	r1, r3
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f00b fd9b 	bl	800c8f0 <udp_bind>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	72fb      	strb	r3, [r7, #11]
      
      if(err == ERR_OK)
 8000dbe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d105      	bne.n	8000dd2 <udp_echoserver_init+0x3a>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4906      	ldr	r1, [pc, #24]	@ (8000de4 <udp_echoserver_init+0x4c>)
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f00b feae 	bl	800cb2c <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000dd0:	e002      	b.n	8000dd8 <udp_echoserver_init+0x40>
        udp_remove(upcb);
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f00b feca 	bl	800cb6c <udp_remove>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	c201a8c0 	.word	0xc201a8c0
 8000de4:	08000de9 	.word	0x08000de9

08000de8 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000df6:	2207      	movs	r2, #7
 8000df8:	6839      	ldr	r1, [r7, #0]
 8000dfa:	68b8      	ldr	r0, [r7, #8]
 8000dfc:	f00b fe00 	bl	800ca00 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	68b8      	ldr	r0, [r7, #8]
 8000e04:	f00b fb8a 	bl	800c51c <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000e08:	68b8      	ldr	r0, [r7, #8]
 8000e0a:	f00b fe67 	bl	800cadc <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f005 fc82 	bl	8006718 <pbuf_free>
   
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e20:	f7ff ffa8 	bl	8000d74 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f00e fb93 	bl	800f574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb97 	bl	8000580 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e60:	08012e0c 	.word	0x08012e0c
  ldr r2, =_sbss
 8000e64:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e68:	20008a60 	.word	0x20008a60

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>

08000e6e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <LAN8742_RegisterBusIO+0x28>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <LAN8742_RegisterBusIO+0x28>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <LAN8742_RegisterBusIO+0x28>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e014      	b.n	8000ec6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d17c      	bne.n	8000fec <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2220      	movs	r2, #32
 8000f04:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e01c      	b.n	8000f46 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	f107 0208 	add.w	r2, r7, #8
 8000f14:	2112      	movs	r1, #18
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	4798      	blx	r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da03      	bge.n	8000f28 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f20:	f06f 0304 	mvn.w	r3, #4
 8000f24:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f26:	e00b      	b.n	8000f40 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f003 031f 	and.w	r3, r3, #31
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d105      	bne.n	8000f40 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
         break;
 8000f3e:	e005      	b.n	8000f4c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b1f      	cmp	r3, #31
 8000f4a:	d9df      	bls.n	8000f0c <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b1f      	cmp	r3, #31
 8000f52:	d902      	bls.n	8000f5a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f54:	f06f 0302 	mvn.w	r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d145      	bne.n	8000fec <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6810      	ldr	r0, [r2, #0]
 8000f68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4798      	blx	r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db37      	blt.n	8000fe6 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6810      	ldr	r0, [r2, #0]
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	2100      	movs	r1, #0
 8000f84:	4798      	blx	r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db28      	blt.n	8000fde <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4798      	blx	r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f96:	e01c      	b.n	8000fd2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4798      	blx	r3
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000faa:	d80e      	bhi.n	8000fca <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	f107 0208 	add.w	r2, r7, #8
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4798      	blx	r3
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da07      	bge.n	8000fd2 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000fc2:	f06f 0304 	mvn.w	r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
                 break;
 8000fc8:	e010      	b.n	8000fec <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000fca:	f06f 0301 	mvn.w	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
               break;
 8000fd0:	e00c      	b.n	8000fec <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1dd      	bne.n	8000f98 <LAN8742_Init+0xc6>
 8000fdc:	e006      	b.n	8000fec <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000fde:	f06f 0304 	mvn.w	r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	e002      	b.n	8000fec <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fe6:	f06f 0303 	mvn.w	r3, #3
 8000fea:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d112      	bne.n	8001018 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4798      	blx	r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ffc:	bf00      	nop
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4798      	blx	r3
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001010:	d9f5      	bls.n	8000ffe <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001018:	693b      	ldr	r3, [r7, #16]
 }
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6810      	ldr	r0, [r2, #0]
 8001036:	f107 020c 	add.w	r2, r7, #12
 800103a:	2101      	movs	r1, #1
 800103c:	4798      	blx	r3
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	da02      	bge.n	800104a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001044:	f06f 0304 	mvn.w	r3, #4
 8001048:	e06e      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6810      	ldr	r0, [r2, #0]
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	2101      	movs	r1, #1
 8001058:	4798      	blx	r3
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	da02      	bge.n	8001066 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001060:	f06f 0304 	mvn.w	r3, #4
 8001064:	e060      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001070:	2301      	movs	r3, #1
 8001072:	e059      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6810      	ldr	r0, [r2, #0]
 800107c:	f107 020c 	add.w	r2, r7, #12
 8001080:	2100      	movs	r1, #0
 8001082:	4798      	blx	r3
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	da02      	bge.n	8001090 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800108a:	f06f 0304 	mvn.w	r3, #4
 800108e:	e04b      	b.n	8001128 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d11b      	bne.n	80010d2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <LAN8742_GetLinkState+0x90>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010ae:	2302      	movs	r3, #2
 80010b0:	e03a      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010bc:	2303      	movs	r3, #3
 80010be:	e033      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010ca:	2304      	movs	r3, #4
 80010cc:	e02c      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010ce:	2305      	movs	r3, #5
 80010d0:	e02a      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	f107 020c 	add.w	r2, r7, #12
 80010de:	211f      	movs	r1, #31
 80010e0:	4798      	blx	r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da02      	bge.n	80010ee <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010e8:	f06f 0304 	mvn.w	r3, #4
 80010ec:	e01c      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010f8:	2306      	movs	r3, #6
 80010fa:	e015      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 031c 	and.w	r3, r3, #28
 8001102:	2b18      	cmp	r3, #24
 8001104:	d101      	bne.n	800110a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001106:	2302      	movs	r3, #2
 8001108:	e00e      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f003 031c 	and.w	r3, r3, #28
 8001110:	2b08      	cmp	r3, #8
 8001112:	d101      	bne.n	8001118 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001114:	2303      	movs	r3, #3
 8001116:	e007      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 031c 	and.w	r3, r3, #28
 800111e:	2b14      	cmp	r3, #20
 8001120:	d101      	bne.n	8001126 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001122:	2304      	movs	r3, #4
 8001124:	e000      	b.n	8001128 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001126:	2305      	movs	r3, #5
    }
  }
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f931 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fc20 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f93b 	bl	800140e <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f911 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000620 	.word	0x20000620

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000620 	.word	0x20000620

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	@ (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	@ (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	@ 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff47 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff5c 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffb0 	bl	800137c <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e06c      	b.n	8001514 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2223      	movs	r2, #35	@ 0x23
 8001448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f003 fbf5 	bl	8004c3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <HAL_ETH_Init+0xf4>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a30      	ldr	r2, [pc, #192]	@ (800151c <HAL_ETH_Init+0xf4>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <HAL_ETH_Init+0xf4>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <HAL_ETH_Init+0xf8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a2b      	ldr	r2, [pc, #172]	@ (8001520 <HAL_ETH_Init+0xf8>)
 8001474:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001478:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_ETH_Init+0xf8>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4927      	ldr	r1, [pc, #156]	@ (8001520 <HAL_ETH_Init+0xf8>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_ETH_Init+0xf8>)
 800148a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff feaa 	bl	80011fc <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014aa:	e011      	b.n	80014d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014ac:	f7ff fea6 	bl	80011fc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ba:	d909      	bls.n	80014d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	22e0      	movs	r2, #224	@ 0xe0
 80014c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e021      	b.n	8001514 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e4      	bne.n	80014ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fdfc 	bl	80020e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fea3 	bl	8002234 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fef9 	bl	80022e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	461a      	mov	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fe61 	bl	80021c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2210      	movs	r2, #16
 800150e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800

08001524 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001532:	2b10      	cmp	r3, #16
 8001534:	d150      	bne.n	80015d8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2223      	movs	r2, #35	@ 0x23
 800153a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f9fd 	bl	8001944 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0208 	orr.w	r2, r2, #8
 8001558:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff fe56 	bl	8001214 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0204 	orr.w	r2, r2, #4
 800157e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fe43 	bl	8001214 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fc42 	bl	8001e20 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015b2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ca:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2223      	movs	r2, #35	@ 0x23
 80015d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e000      	b.n	80015da <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
  }
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015f0:	2b23      	cmp	r3, #35	@ 0x23
 80015f2:	d14a      	bne.n	800168a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2223      	movs	r2, #35	@ 0x23
 80015f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800160e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001612:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	f023 0302 	bic.w	r3, r3, #2
 8001626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800162a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0204 	bic.w	r2, r2, #4
 800163a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fde5 	bl	8001214 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fbe4 	bl	8001e20 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0208 	bic.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fdcf 	bl	8001214 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2210      	movs	r2, #16
 8001682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e07c      	b.n	80017b4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016c0:	2b23      	cmp	r3, #35	@ 0x23
 80016c2:	d176      	bne.n	80017b2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80016c4:	2200      	movs	r2, #0
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 fe79 	bl	80023c0 <ETH_Prepare_Tx_Descriptors>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016da:	f043 0202 	orr.w	r2, r3, #2
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e065      	b.n	80017b4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80016e8:	f3bf 8f4f 	dsb	sy
}
 80016ec:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3206      	adds	r2, #6
 80016f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	2b03      	cmp	r3, #3
 800170c:	d904      	bls.n	8001718 <HAL_ETH_Transmit+0x84>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	1f1a      	subs	r2, r3, #4
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3106      	adds	r1, #6
 8001724:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001728:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800172c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800172e:	f7ff fd65 	bl	80011fc <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001734:	e037      	b.n	80017a6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d011      	beq.n	800176c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174e:	f043 0208 	orr.w	r2, r3, #8
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e023      	b.n	80017b4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001772:	d018      	beq.n	80017a6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001774:	f7ff fd42 	bl	80011fc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	d302      	bcc.n	800178a <HAL_ETH_Transmit+0xf6>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001790:	f043 0204 	orr.w	r2, r3, #4
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80017a0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e006      	b.n	80017b4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	dbc3      	blt.n	8001736 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0a8      	b.n	800193a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017ee:	2b23      	cmp	r3, #35	@ 0x23
 80017f0:	d001      	beq.n	80017f6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0a1      	b.n	800193a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	3212      	adds	r2, #18
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800180c:	f1c3 0304 	rsb	r3, r3, #4
 8001810:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001812:	e06a      	b.n	80018ea <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	69da      	ldr	r2, [r3, #28]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <HAL_ETH_ReadData+0x88>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d040      	beq.n	80018c6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001878:	3b04      	subs	r3, #4
 800187a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018a0:	461a      	mov	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f003 fb99 	bl	8004fdc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	441a      	add	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d902      	bls.n	80018d8 <HAL_ETH_ReadData+0x11c>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b04      	subs	r3, #4
 80018d6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	3212      	adds	r2, #18
 80018de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db06      	blt.n	8001900 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d202      	bcs.n	8001900 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d089      	beq.n	8001814 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	441a      	add	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f815 	bl	8001944 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001950:	2301      	movs	r3, #1
 8001952:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001958:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	3212      	adds	r2, #18
 8001960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001964:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800196a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800196c:	e03d      	b.n	80019ea <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d112      	bne.n	800199c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fafe 	bl	8004f7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	74fb      	strb	r3, [r7, #19]
 800198a:	e007      	b.n	800199c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	461a      	mov	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	461a      	mov	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800199c:	7cfb      	ldrb	r3, [r7, #19]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d023      	beq.n	80019ea <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <ETH_UpdateDescriptor+0xfc>)
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	e003      	b.n	80019ba <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80019b8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d902      	bls.n	80019d8 <ETH_UpdateDescriptor+0x94>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b04      	subs	r3, #4
 80019d6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	3212      	adds	r2, #18
 80019de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e2:	617b      	str	r3, [r7, #20]
      desccount--;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <ETH_UpdateDescriptor+0xb2>
 80019f0:	7cfb      	ldrb	r3, [r7, #19]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1bb      	bne.n	800196e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d01a      	beq.n	8001a36 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	3301      	adds	r3, #1
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001a0a:	f3bf 8f5f 	dmb	sy
}
 8001a0e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6919      	ldr	r1, [r3, #16]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	18ca      	adds	r2, r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a28:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	80004600 	.word	0x80004600

08001a44 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 031c 	and.w	r3, r3, #28
 8001a60:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	02db      	lsls	r3, r3, #11
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f023 0302 	bic.w	r3, r3, #2
 8001a82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a94:	f7ff fbb2 	bl	80011fc <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a9a:	e00d      	b.n	8001ab8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a9c:	f7ff fbae 	bl	80011fc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aaa:	d301      	bcc.n	8001ab0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e010      	b.n	8001ad2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ec      	bne.n	8001a9c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 031c 	and.w	r3, r3, #28
 8001af6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	02db      	lsls	r3, r3, #11
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	019b      	lsls	r3, r3, #6
 8001b08:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7ff fb62 	bl	80011fc <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b3a:	e00d      	b.n	8001b58 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b3c:	f7ff fb5e 	bl	80011fc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4a:	d301      	bcc.n	8001b50 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e009      	b.n	8001b64 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ec      	bne.n	8001b3c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0d9      	b.n	8001d34 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2301      	moveq	r3, #1
 8001c40:	2300      	movne	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bf14      	ite	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf14      	ite	ne
 8001d08:	2301      	movne	r3, #1
 8001d0a:	2300      	moveq	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e00b      	b.n	8001d6c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d105      	bne.n	8001d6a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f883 	bl	8001e6c <ETH_SetMACConfig>

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 031c 	bic.w	r3, r3, #28
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d8c:	f001 fb86 	bl	800349c <HAL_RCC_GetHCLKFreq>
 8001d90:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d908      	bls.n	8001dac <HAL_ETH_SetMDIOClockRange+0x38>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d804      	bhi.n	8001dac <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e027      	b.n	8001dfc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d908      	bls.n	8001dc6 <HAL_ETH_SetMDIOClockRange+0x52>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d204      	bcs.n	8001dc6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f043 030c 	orr.w	r3, r3, #12
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e01a      	b.n	8001dfc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d303      	bcc.n	8001dd6 <HAL_ETH_SetMDIOClockRange+0x62>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4a11      	ldr	r2, [pc, #68]	@ (8001e18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d911      	bls.n	8001dfa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d908      	bls.n	8001df0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d804      	bhi.n	8001df0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e005      	b.n	8001dfc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e000      	b.n	8001dfc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001dfa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	611a      	str	r2, [r3, #16]
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	01312cff 	.word	0x01312cff
 8001e10:	02160ebf 	.word	0x02160ebf
 8001e14:	03938700 	.word	0x03938700
 8001e18:	05f5e0ff 	.word	0x05f5e0ff
 8001e1c:	08f0d17f 	.word	0x08f0d17f

08001e20 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e42:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff f9df 	bl	8001214 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e60:	6193      	str	r3, [r2, #24]
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4b51      	ldr	r3, [pc, #324]	@ (8001fc8 <ETH_SetMACConfig+0x15c>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	7c1b      	ldrb	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <ETH_SetMACConfig+0x28>
 8001e8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e92:	e000      	b.n	8001e96 <ETH_SetMACConfig+0x2a>
 8001e94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	7c5b      	ldrb	r3, [r3, #17]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <ETH_SetMACConfig+0x38>
 8001e9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ea2:	e000      	b.n	8001ea6 <ETH_SetMACConfig+0x3a>
 8001ea4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ea6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7fdb      	ldrb	r3, [r3, #31]
 8001eb2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eb4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	7f92      	ldrb	r2, [r2, #30]
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d102      	bne.n	8001eca <ETH_SetMACConfig+0x5e>
 8001ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec8:	e000      	b.n	8001ecc <ETH_SetMACConfig+0x60>
 8001eca:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ecc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7f1b      	ldrb	r3, [r3, #28]
 8001ed2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ed4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	791b      	ldrb	r3, [r3, #4]
 8001ee0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ee2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d102      	bne.n	8001ef4 <ETH_SetMACConfig+0x88>
 8001eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef2:	e000      	b.n	8001ef6 <ETH_SetMACConfig+0x8a>
 8001ef4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ef6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7bdb      	ldrb	r3, [r3, #15]
 8001efc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001efe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f0c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff f974 	bl	8001214 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d101      	bne.n	8001f5a <ETH_SetMACConfig+0xee>
 8001f56:	2280      	movs	r2, #128	@ 0x80
 8001f58:	e000      	b.n	8001f5c <ETH_SetMACConfig+0xf0>
 8001f5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f5c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f6a:	2a01      	cmp	r2, #1
 8001f6c:	d101      	bne.n	8001f72 <ETH_SetMACConfig+0x106>
 8001f6e:	2208      	movs	r2, #8
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0x108>
 8001f72:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f7c:	2a01      	cmp	r2, #1
 8001f7e:	d101      	bne.n	8001f84 <ETH_SetMACConfig+0x118>
 8001f80:	2204      	movs	r2, #4
 8001f82:	e000      	b.n	8001f86 <ETH_SetMACConfig+0x11a>
 8001f84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f8e:	2a01      	cmp	r2, #1
 8001f90:	d101      	bne.n	8001f96 <ETH_SetMACConfig+0x12a>
 8001f92:	2202      	movs	r2, #2
 8001f94:	e000      	b.n	8001f98 <ETH_SetMACConfig+0x12c>
 8001f96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff f92f 	bl	8001214 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	ff20810f 	.word	0xff20810f

08001fcc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <ETH_SetDMAConfig+0x110>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7b1b      	ldrb	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <ETH_SetDMAConfig+0x2c>
 8001ff2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ff6:	e000      	b.n	8001ffa <ETH_SetDMAConfig+0x2e>
 8001ff8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	7b5b      	ldrb	r3, [r3, #13]
 8001ffe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002000:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	7f52      	ldrb	r2, [r2, #29]
 8002006:	2a00      	cmp	r2, #0
 8002008:	d102      	bne.n	8002010 <ETH_SetDMAConfig+0x44>
 800200a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800200e:	e000      	b.n	8002012 <ETH_SetDMAConfig+0x46>
 8002010:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002012:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	7b9b      	ldrb	r3, [r3, #14]
 8002018:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800201a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002020:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7f1b      	ldrb	r3, [r3, #28]
 8002026:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002028:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	7f9b      	ldrb	r3, [r3, #30]
 800202e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002030:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002036:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800203e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002040:	4313      	orrs	r3, r2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002050:	461a      	mov	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff f8d6 	bl	8001214 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002070:	461a      	mov	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	791b      	ldrb	r3, [r3, #4]
 800207a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002080:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002086:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800208c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002094:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002096:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800209e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7ff f8a7 	bl	8001214 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	f8de3f23 	.word	0xf8de3f23

080020e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0a6      	sub	sp, #152	@ 0x98
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800211c:	2300      	movs	r3, #0
 800211e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002126:	2300      	movs	r3, #0
 8002128:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002142:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002146:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002148:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800214c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002154:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fe86 	bl	8001e6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002160:	2301      	movs	r3, #1
 8002162:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002164:	2301      	movs	r3, #1
 8002166:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800216e:	2301      	movs	r3, #1
 8002170:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800218c:	2301      	movs	r3, #1
 800218e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002190:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002194:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002196:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800219a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800219c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ff08 	bl	8001fcc <ETH_SetDMAConfig>
}
 80021bc:	bf00      	nop
 80021be:	3798      	adds	r7, #152	@ 0x98
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3305      	adds	r3, #5
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	3204      	adds	r2, #4
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <ETH_MACAddressConfig+0x68>)
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3303      	adds	r3, #3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	061a      	lsls	r2, r3, #24
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3302      	adds	r3, #2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	4313      	orrs	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <ETH_MACAddressConfig+0x6c>)
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40028040 	.word	0x40028040
 8002230:	40028044 	.word	0x40028044

08002234 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e03e      	b.n	80022c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	3206      	adds	r2, #6
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d80c      	bhi.n	80022a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	e004      	b.n	80022ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d9bd      	bls.n	8002242 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d8:	611a      	str	r2, [r3, #16]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e046      	b.n	8002382 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002330:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002338:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	3212      	adds	r2, #18
 800234e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d80c      	bhi.n	8002372 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6919      	ldr	r1, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	e004      	b.n	800237c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3301      	adds	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d9b5      	bls.n	80022f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b2:	60da      	str	r2, [r3, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b08d      	sub	sp, #52	@ 0x34
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3318      	adds	r3, #24
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002402:	d007      	beq.n	8002414 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	3304      	adds	r3, #4
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002414:	2302      	movs	r3, #2
 8002416:	e103      	b.n	8002620 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	3301      	adds	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002430:	f023 031f 	bic.w	r3, r3, #31
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	6852      	ldr	r2, [r2, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	431a      	orrs	r2, r3
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800249e:	f3bf 8f5f 	dmb	sy
}
 80024a2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024b0:	e084      	b.n	80025bc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e005      	b.n	80024de <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	3301      	adds	r3, #1
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d902      	bls.n	80024f0 <ETH_Prepare_Tx_Descriptors+0x130>
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	3b04      	subs	r3, #4
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800250e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002512:	d007      	beq.n	8002524 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002518:	3304      	adds	r3, #4
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d029      	beq.n	8002578 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002532:	2300      	movs	r3, #0
 8002534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002536:	e019      	b.n	800256c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002538:	f3bf 8f5f 	dmb	sy
}
 800253c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800254a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800254c:	3301      	adds	r3, #1
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002552:	2b03      	cmp	r3, #3
 8002554:	d902      	bls.n	800255c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002558:	3b04      	subs	r3, #4
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002568:	3301      	adds	r3, #1
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800256c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	429a      	cmp	r2, r3
 8002572:	d3e1      	bcc.n	8002538 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002574:	2302      	movs	r3, #2
 8002576:	e053      	b.n	8002620 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	3301      	adds	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002596:	f023 031f 	bic.w	r3, r3, #31
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	6852      	ldr	r2, [r2, #4]
 800259e:	431a      	orrs	r2, r3
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80025aa:	f3bf 8f5f 	dmb	sy
}
 80025ae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f af76 	bne.w	80024b2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e005      	b.n	80025e6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fa:	3304      	adds	r3, #4
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002606:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	4413      	add	r3, r2
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800261a:	b662      	cpsie	i
}
 800261c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3734      	adds	r7, #52	@ 0x34
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e177      	b.n	8002938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8166 	bne.w	8002932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d005      	beq.n	800267e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267a:	2b02      	cmp	r3, #2
 800267c:	d130      	bne.n	80026e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 0201 	and.w	r2, r3, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d017      	beq.n	800271c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d123      	bne.n	8002770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80c0 	beq.w	8002932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b66      	ldr	r3, [pc, #408]	@ (8002950 <HAL_GPIO_Init+0x324>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	4a65      	ldr	r2, [pc, #404]	@ (8002950 <HAL_GPIO_Init+0x324>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c2:	4b63      	ldr	r3, [pc, #396]	@ (8002950 <HAL_GPIO_Init+0x324>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ce:	4a61      	ldr	r2, [pc, #388]	@ (8002954 <HAL_GPIO_Init+0x328>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_GPIO_Init+0x32c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d037      	beq.n	800286a <HAL_GPIO_Init+0x23e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a57      	ldr	r2, [pc, #348]	@ (800295c <HAL_GPIO_Init+0x330>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d031      	beq.n	8002866 <HAL_GPIO_Init+0x23a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a56      	ldr	r2, [pc, #344]	@ (8002960 <HAL_GPIO_Init+0x334>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d02b      	beq.n	8002862 <HAL_GPIO_Init+0x236>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a55      	ldr	r2, [pc, #340]	@ (8002964 <HAL_GPIO_Init+0x338>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d025      	beq.n	800285e <HAL_GPIO_Init+0x232>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a54      	ldr	r2, [pc, #336]	@ (8002968 <HAL_GPIO_Init+0x33c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01f      	beq.n	800285a <HAL_GPIO_Init+0x22e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a53      	ldr	r2, [pc, #332]	@ (800296c <HAL_GPIO_Init+0x340>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_GPIO_Init+0x22a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a52      	ldr	r2, [pc, #328]	@ (8002970 <HAL_GPIO_Init+0x344>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0x226>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a51      	ldr	r2, [pc, #324]	@ (8002974 <HAL_GPIO_Init+0x348>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00d      	beq.n	800284e <HAL_GPIO_Init+0x222>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a50      	ldr	r2, [pc, #320]	@ (8002978 <HAL_GPIO_Init+0x34c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_GPIO_Init+0x21e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4f      	ldr	r2, [pc, #316]	@ (800297c <HAL_GPIO_Init+0x350>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_GPIO_Init+0x21a>
 8002842:	2309      	movs	r3, #9
 8002844:	e012      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002846:	230a      	movs	r3, #10
 8002848:	e010      	b.n	800286c <HAL_GPIO_Init+0x240>
 800284a:	2308      	movs	r3, #8
 800284c:	e00e      	b.n	800286c <HAL_GPIO_Init+0x240>
 800284e:	2307      	movs	r3, #7
 8002850:	e00c      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002852:	2306      	movs	r3, #6
 8002854:	e00a      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002856:	2305      	movs	r3, #5
 8002858:	e008      	b.n	800286c <HAL_GPIO_Init+0x240>
 800285a:	2304      	movs	r3, #4
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x240>
 800285e:	2303      	movs	r3, #3
 8002860:	e004      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002862:	2302      	movs	r3, #2
 8002864:	e002      	b.n	800286c <HAL_GPIO_Init+0x240>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x240>
 800286a:	2300      	movs	r3, #0
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f002 0203 	and.w	r2, r2, #3
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	4093      	lsls	r3, r2
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287c:	4935      	ldr	r1, [pc, #212]	@ (8002954 <HAL_GPIO_Init+0x328>)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288a:	4b3d      	ldr	r3, [pc, #244]	@ (8002980 <HAL_GPIO_Init+0x354>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ae:	4a34      	ldr	r2, [pc, #208]	@ (8002980 <HAL_GPIO_Init+0x354>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b4:	4b32      	ldr	r3, [pc, #200]	@ (8002980 <HAL_GPIO_Init+0x354>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d8:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <HAL_GPIO_Init+0x354>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028de:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_GPIO_Init+0x354>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002902:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <HAL_GPIO_Init+0x354>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002908:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <HAL_GPIO_Init+0x354>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292c:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <HAL_GPIO_Init+0x354>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3301      	adds	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	f67f ae84 	bls.w	8002648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40013800 	.word	0x40013800
 8002958:	40020000 	.word	0x40020000
 800295c:	40020400 	.word	0x40020400
 8002960:	40020800 	.word	0x40020800
 8002964:	40020c00 	.word	0x40020c00
 8002968:	40021000 	.word	0x40021000
 800296c:	40021400 	.word	0x40021400
 8002970:	40021800 	.word	0x40021800
 8002974:	40021c00 	.word	0x40021c00
 8002978:	40022000 	.word	0x40022000
 800297c:	40022400 	.word	0x40022400
 8002980:	40013c00 	.word	0x40013c00

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	041a      	lsls	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af02      	add	r7, sp, #8
 80029bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e101      	b.n	8002bcc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f872 	bl	8000acc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2203      	movs	r2, #3
 80029ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f6:	d102      	bne.n	80029fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fb7e 	bl	8004104 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7c1a      	ldrb	r2, [r3, #16]
 8002a10:	f88d 2000 	strb.w	r2, [sp]
 8002a14:	3304      	adds	r3, #4
 8002a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a18:	f001 fb10 	bl	800403c <USB_CoreInit>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0ce      	b.n	8002bcc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 fb76 	bl	8004126 <USB_SetCurrentMode>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0bf      	b.n	8002bcc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e04a      	b.n	8002ae8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3315      	adds	r3, #21
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	3314      	adds	r3, #20
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	b298      	uxth	r0, r3
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	332e      	adds	r3, #46	@ 0x2e
 8002a8e:	4602      	mov	r2, r0
 8002a90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3318      	adds	r3, #24
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	331c      	adds	r3, #28
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3320      	adds	r3, #32
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3324      	adds	r3, #36	@ 0x24
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d3af      	bcc.n	8002a52 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e044      	b.n	8002b82 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	791b      	ldrb	r3, [r3, #4]
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d3b5      	bcc.n	8002af8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7c1a      	ldrb	r2, [r3, #16]
 8002b94:	f88d 2000 	strb.w	r2, [sp]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9c:	f001 fb10 	bl	80041c0 <USB_DevInit>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00c      	b.n	8002bcc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fcd8 	bl	800457a <USB_DevDisconnect>

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e267      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d075      	beq.n	8002cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf2:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b85      	ldr	r3, [pc, #532]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b82      	ldr	r3, [pc, #520]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b7e      	ldr	r3, [pc, #504]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e242      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x74>
 8002c3a:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a75      	ldr	r2, [pc, #468]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b70      	ldr	r3, [pc, #448]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6f      	ldr	r2, [pc, #444]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6c      	ldr	r2, [pc, #432]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	4b69      	ldr	r3, [pc, #420]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a68      	ldr	r2, [pc, #416]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b66      	ldr	r3, [pc, #408]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fab6 	bl	80011fc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fab2 	bl	80011fc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e207      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xc0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe faa2 	bl	80011fc <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fa9e 	bl	80011fc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1f3      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b51      	ldr	r3, [pc, #324]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0xe8>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cea:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b47      	ldr	r3, [pc, #284]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b44      	ldr	r3, [pc, #272]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e1c7      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b3b      	ldr	r3, [pc, #236]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4937      	ldr	r1, [pc, #220]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e03a      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d44:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <HAL_RCC_OscConfig+0x244>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fa57 	bl	80011fc <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe fa53 	bl	80011fc <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1a8      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	4b2b      	ldr	r3, [pc, #172]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4925      	ldr	r1, [pc, #148]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <HAL_RCC_OscConfig+0x244>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fa36 	bl	80011fc <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe fa32 	bl	80011fc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e187      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d036      	beq.n	8002e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <HAL_RCC_OscConfig+0x248>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fa16 	bl	80011fc <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fa12 	bl	80011fc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e167      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_OscConfig+0x240>)
 8002de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x200>
 8002df2:	e01b      	b.n	8002e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df4:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <HAL_RCC_OscConfig+0x248>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f9ff 	bl	80011fc <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	e00e      	b.n	8002e20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe f9fb 	bl	80011fc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d907      	bls.n	8002e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e150      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
 8002e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b88      	ldr	r3, [pc, #544]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ea      	bne.n	8002e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8097 	beq.w	8002f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b81      	ldr	r3, [pc, #516]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	4a7c      	ldr	r2, [pc, #496]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b77      	ldr	r3, [pc, #476]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b74      	ldr	r3, [pc, #464]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a73      	ldr	r2, [pc, #460]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe f9bb 	bl	80011fc <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe f9b7 	bl	80011fc <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e10c      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003048 <HAL_RCC_OscConfig+0x474>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x2ea>
 8002eb0:	4b64      	ldr	r3, [pc, #400]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb4:	4a63      	ldr	r2, [pc, #396]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ebc:	e01c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x324>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x30c>
 8002ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	4a5e      	ldr	r2, [pc, #376]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x324>
 8002ee0:	4b58      	ldr	r3, [pc, #352]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee4:	4a57      	ldr	r2, [pc, #348]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eec:	4b55      	ldr	r3, [pc, #340]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	4a54      	ldr	r2, [pc, #336]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe f97c 	bl	80011fc <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe f978 	bl	80011fc <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0cb      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	4b49      	ldr	r3, [pc, #292]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ee      	beq.n	8002f08 <HAL_RCC_OscConfig+0x334>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fe f966 	bl	80011fc <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe f962 	bl	80011fc <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0b5      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ee      	bne.n	8002f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b39      	ldr	r3, [pc, #228]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	4a38      	ldr	r2, [pc, #224]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a1 	beq.w	80030b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f72:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d05c      	beq.n	8003038 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d141      	bne.n	800300a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_RCC_OscConfig+0x478>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe f936 	bl	80011fc <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe f932 	bl	80011fc <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e087      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	491b      	ldr	r1, [pc, #108]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_OscConfig+0x478>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f90b 	bl	80011fc <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe f907 	bl	80011fc <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e05c      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x416>
 8003008:	e054      	b.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_RCC_OscConfig+0x478>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe f8f4 	bl	80011fc <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe f8f0 	bl	80011fc <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e045      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_RCC_OscConfig+0x470>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x444>
 8003036:	e03d      	b.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e038      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
 800304c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x4ec>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d028      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d121      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d11a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003088:	4293      	cmp	r3, r2
 800308a:	d111      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0cc      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b68      	ldr	r3, [pc, #416]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d90c      	bls.n	8003100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b65      	ldr	r3, [pc, #404]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b63      	ldr	r3, [pc, #396]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b8      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003118:	4b59      	ldr	r3, [pc, #356]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a58      	ldr	r2, [pc, #352]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003130:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a52      	ldr	r2, [pc, #328]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800313a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b50      	ldr	r3, [pc, #320]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	494d      	ldr	r1, [pc, #308]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d044      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d119      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d003      	beq.n	8003182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	2b03      	cmp	r3, #3
 8003180:	d107      	bne.n	8003192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003182:	4b3f      	ldr	r3, [pc, #252]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e067      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a2:	4b37      	ldr	r3, [pc, #220]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 0203 	bic.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4934      	ldr	r1, [pc, #208]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b4:	f7fe f822 	bl	80011fc <HAL_GetTick>
 80031b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031bc:	f7fe f81e 	bl	80011fc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e04f      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 020c 	and.w	r2, r3, #12
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d1eb      	bne.n	80031bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e4:	4b25      	ldr	r3, [pc, #148]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d20c      	bcs.n	800320c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b22      	ldr	r3, [pc, #136]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e032      	b.n	8003272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4916      	ldr	r1, [pc, #88]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003236:	4b12      	ldr	r3, [pc, #72]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	490e      	ldr	r1, [pc, #56]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800324a:	f000 f821 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	490a      	ldr	r1, [pc, #40]	@ (8003284 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd ff82 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00
 8003280:	40023800 	.word	0x40023800
 8003284:	08012c18 	.word	0x08012c18
 8003288:	20000000 	.word	0x20000000
 800328c:	20000004 	.word	0x20000004

08003290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003294:	b094      	sub	sp, #80	@ 0x50
 8003296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	647b      	str	r3, [r7, #68]	@ 0x44
 800329c:	2300      	movs	r3, #0
 800329e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032a0:	2300      	movs	r3, #0
 80032a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a8:	4b79      	ldr	r3, [pc, #484]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d00d      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x40>
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	f200 80e1 	bhi.w	800347c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x34>
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_GetSysClockFreq+0x3a>
 80032c2:	e0db      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c4:	4b73      	ldr	r3, [pc, #460]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x204>)
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80032c8:	e0db      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ca:	4b73      	ldr	r3, [pc, #460]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x208>)
 80032cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ce:	e0d8      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032da:	4b6d      	ldr	r3, [pc, #436]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	2200      	movs	r2, #0
 80032ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fa:	2300      	movs	r3, #0
 80032fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003302:	4622      	mov	r2, r4
 8003304:	462b      	mov	r3, r5
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003314:	0150      	lsls	r0, r2, #5
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4621      	mov	r1, r4
 800331c:	1a51      	subs	r1, r2, r1
 800331e:	6139      	str	r1, [r7, #16]
 8003320:	4629      	mov	r1, r5
 8003322:	eb63 0301 	sbc.w	r3, r3, r1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003334:	4659      	mov	r1, fp
 8003336:	018b      	lsls	r3, r1, #6
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800333e:	4651      	mov	r1, sl
 8003340:	018a      	lsls	r2, r1, #6
 8003342:	4651      	mov	r1, sl
 8003344:	ebb2 0801 	subs.w	r8, r2, r1
 8003348:	4659      	mov	r1, fp
 800334a:	eb63 0901 	sbc.w	r9, r3, r1
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003362:	4690      	mov	r8, r2
 8003364:	4699      	mov	r9, r3
 8003366:	4623      	mov	r3, r4
 8003368:	eb18 0303 	adds.w	r3, r8, r3
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	462b      	mov	r3, r5
 8003370:	eb49 0303 	adc.w	r3, r9, r3
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003382:	4629      	mov	r1, r5
 8003384:	024b      	lsls	r3, r1, #9
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800338c:	4621      	mov	r1, r4
 800338e:	024a      	lsls	r2, r1, #9
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003396:	2200      	movs	r2, #0
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800339c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033a0:	f7fc ff76 	bl	8000290 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ac:	e058      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b38      	ldr	r3, [pc, #224]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	4611      	mov	r1, r2
 80033ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	f04f 0000 	mov.w	r0, #0
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	0159      	lsls	r1, r3, #5
 80033d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033da:	0150      	lsls	r0, r2, #5
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4641      	mov	r1, r8
 80033e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e6:	4649      	mov	r1, r9
 80033e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003400:	ebb2 040a 	subs.w	r4, r2, sl
 8003404:	eb63 050b 	sbc.w	r5, r3, fp
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	603b      	str	r3, [r7, #0]
 8003422:	464b      	mov	r3, r9
 8003424:	eb45 0303 	adc.w	r3, r5, r3
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003436:	4629      	mov	r1, r5
 8003438:	028b      	lsls	r3, r1, #10
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003440:	4621      	mov	r1, r4
 8003442:	028a      	lsls	r2, r1, #10
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344a:	2200      	movs	r2, #0
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	61fa      	str	r2, [r7, #28]
 8003450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003454:	f7fc ff1c 	bl	8000290 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4613      	mov	r3, r2
 800345e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x200>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	3301      	adds	r3, #1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800347a:	e002      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x204>)
 800347e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003484:	4618      	mov	r0, r3
 8003486:	3750      	adds	r7, #80	@ 0x50
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	00f42400 	.word	0x00f42400
 8003498:	007a1200 	.word	0x007a1200

0800349c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000000 	.word	0x20000000

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a9b      	lsrs	r3, r3, #10
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08012c28 	.word	0x08012c28

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034e0:	f7ff ffdc 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	08012c28 	.word	0x08012c28

08003504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e041      	b.n	800359a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fa64 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f000 f8f4 	bl	8003730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_TIM_ConfigClockSource+0x1c>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0b4      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x186>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f6:	d03e      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0xd4>
 80035f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fc:	f200 8087 	bhi.w	800370e <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003604:	f000 8086 	beq.w	8003714 <HAL_TIM_ConfigClockSource+0x172>
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360c:	d87f      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
 800360e:	2b70      	cmp	r3, #112	@ 0x70
 8003610:	d01a      	beq.n	8003648 <HAL_TIM_ConfigClockSource+0xa6>
 8003612:	2b70      	cmp	r3, #112	@ 0x70
 8003614:	d87b      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
 8003616:	2b60      	cmp	r3, #96	@ 0x60
 8003618:	d050      	beq.n	80036bc <HAL_TIM_ConfigClockSource+0x11a>
 800361a:	2b60      	cmp	r3, #96	@ 0x60
 800361c:	d877      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
 800361e:	2b50      	cmp	r3, #80	@ 0x50
 8003620:	d03c      	beq.n	800369c <HAL_TIM_ConfigClockSource+0xfa>
 8003622:	2b50      	cmp	r3, #80	@ 0x50
 8003624:	d873      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
 8003626:	2b40      	cmp	r3, #64	@ 0x40
 8003628:	d058      	beq.n	80036dc <HAL_TIM_ConfigClockSource+0x13a>
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d86f      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
 800362e:	2b30      	cmp	r3, #48	@ 0x30
 8003630:	d064      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x15a>
 8003632:	2b30      	cmp	r3, #48	@ 0x30
 8003634:	d86b      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
 8003636:	2b20      	cmp	r3, #32
 8003638:	d060      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x15a>
 800363a:	2b20      	cmp	r3, #32
 800363c:	d867      	bhi.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d05c      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x15a>
 8003642:	2b10      	cmp	r3, #16
 8003644:	d05a      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0x15a>
 8003646:	e062      	b.n	800370e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003658:	f000 f990 	bl	800397c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800366a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	609a      	str	r2, [r3, #8]
      break;
 8003674:	e04f      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003686:	f000 f979 	bl	800397c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003698:	609a      	str	r2, [r3, #8]
      break;
 800369a:	e03c      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a8:	461a      	mov	r2, r3
 80036aa:	f000 f8ed 	bl	8003888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2150      	movs	r1, #80	@ 0x50
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f946 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 80036ba:	e02c      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c8:	461a      	mov	r2, r3
 80036ca:	f000 f90c 	bl	80038e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2160      	movs	r1, #96	@ 0x60
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f936 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 80036da:	e01c      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e8:	461a      	mov	r2, r3
 80036ea:	f000 f8cd 	bl	8003888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2140      	movs	r1, #64	@ 0x40
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f926 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 f91d 	bl	8003946 <TIM_ITRx_SetConfig>
      break;
 800370c:	e003      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      break;
 8003712:	e000      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003714:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a46      	ldr	r2, [pc, #280]	@ (800385c <TIM_Base_SetConfig+0x12c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d013      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374e:	d00f      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a43      	ldr	r2, [pc, #268]	@ (8003860 <TIM_Base_SetConfig+0x130>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00b      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a42      	ldr	r2, [pc, #264]	@ (8003864 <TIM_Base_SetConfig+0x134>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d007      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a41      	ldr	r2, [pc, #260]	@ (8003868 <TIM_Base_SetConfig+0x138>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a40      	ldr	r2, [pc, #256]	@ (800386c <TIM_Base_SetConfig+0x13c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a35      	ldr	r2, [pc, #212]	@ (800385c <TIM_Base_SetConfig+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003790:	d027      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a32      	ldr	r2, [pc, #200]	@ (8003860 <TIM_Base_SetConfig+0x130>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d023      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a31      	ldr	r2, [pc, #196]	@ (8003864 <TIM_Base_SetConfig+0x134>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a30      	ldr	r2, [pc, #192]	@ (8003868 <TIM_Base_SetConfig+0x138>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2f      	ldr	r2, [pc, #188]	@ (800386c <TIM_Base_SetConfig+0x13c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d017      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003870 <TIM_Base_SetConfig+0x140>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003874 <TIM_Base_SetConfig+0x144>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00f      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <TIM_Base_SetConfig+0x148>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	@ (800387c <TIM_Base_SetConfig+0x14c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003880 <TIM_Base_SetConfig+0x150>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a29      	ldr	r2, [pc, #164]	@ (8003884 <TIM_Base_SetConfig+0x154>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a10      	ldr	r2, [pc, #64]	@ (800385c <TIM_Base_SetConfig+0x12c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0xf8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a12      	ldr	r2, [pc, #72]	@ (800386c <TIM_Base_SetConfig+0x13c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d103      	bne.n	8003830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f023 0201 	bic.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]
  }
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800
 8003868:	40000c00 	.word	0x40000c00
 800386c:	40010400 	.word	0x40010400
 8003870:	40014000 	.word	0x40014000
 8003874:	40014400 	.word	0x40014400
 8003878:	40014800 	.word	0x40014800
 800387c:	40001800 	.word	0x40001800
 8003880:	40001c00 	.word	0x40001c00
 8003884:	40002000 	.word	0x40002000

08003888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0201 	bic.w	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 030a 	bic.w	r3, r3, #10
 80038c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b087      	sub	sp, #28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f023 0210 	bic.w	r2, r3, #16
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	031b      	lsls	r3, r3, #12
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	f043 0307 	orr.w	r3, r3, #7
 8003968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	021a      	lsls	r2, r3, #8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	431a      	orrs	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e05a      	b.n	8003a8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a21      	ldr	r2, [pc, #132]	@ (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a20:	d01d      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a18      	ldr	r2, [pc, #96]	@ (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a15      	ldr	r2, [pc, #84]	@ (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10c      	bne.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40001800 	.word	0x40001800

08003ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e042      	b.n	8003b4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fc ffae 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	@ 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f82b 	bl	8003b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b0c0      	sub	sp, #256	@ 0x100
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	68d9      	ldr	r1, [r3, #12]
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	ea40 0301 	orr.w	r3, r0, r1
 8003b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bac:	f021 010c 	bic.w	r1, r1, #12
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bce:	6999      	ldr	r1, [r3, #24]
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	ea40 0301 	orr.w	r3, r0, r1
 8003bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d005      	beq.n	8003bf4 <UART_SetConfig+0xa0>
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <UART_SetConfig+0x2d0>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d104      	bne.n	8003bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7ff fc72 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8003bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bfc:	e003      	b.n	8003c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bfe:	f7ff fc59 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8003c02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c10:	f040 810c 	bne.w	8003e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c36:	4621      	mov	r1, r4
 8003c38:	eb12 0801 	adds.w	r8, r2, r1
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb43 0901 	adc.w	r9, r3, r1
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c56:	4690      	mov	r8, r2
 8003c58:	4699      	mov	r9, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	eb18 0303 	adds.w	r3, r8, r3
 8003c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c64:	462b      	mov	r3, r5
 8003c66:	eb49 0303 	adc.w	r3, r9, r3
 8003c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c82:	460b      	mov	r3, r1
 8003c84:	18db      	adds	r3, r3, r3
 8003c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c88:	4613      	mov	r3, r2
 8003c8a:	eb42 0303 	adc.w	r3, r2, r3
 8003c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c98:	f7fc fafa 	bl	8000290 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	011c      	lsls	r4, r3, #4
 8003caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ccc:	4641      	mov	r1, r8
 8003cce:	eb12 0a01 	adds.w	sl, r2, r1
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cec:	4692      	mov	sl, r2
 8003cee:	469b      	mov	fp, r3
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8003d00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	18db      	adds	r3, r3, r3
 8003d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d1e:	4613      	mov	r3, r2
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d2e:	f7fc faaf 	bl	8000290 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2264      	movs	r2, #100	@ 0x64
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	1acb      	subs	r3, r1, r3
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d4e:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003d50:	fba3 2302 	umull	r2, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d5c:	441c      	add	r4, r3
 8003d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d70:	4642      	mov	r2, r8
 8003d72:	464b      	mov	r3, r9
 8003d74:	1891      	adds	r1, r2, r2
 8003d76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d78:	415b      	adcs	r3, r3
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d80:	4641      	mov	r1, r8
 8003d82:	1851      	adds	r1, r2, r1
 8003d84:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d86:	4649      	mov	r1, r9
 8003d88:	414b      	adcs	r3, r1
 8003d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d98:	4659      	mov	r1, fp
 8003d9a:	00cb      	lsls	r3, r1, #3
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da2:	4651      	mov	r1, sl
 8003da4:	00ca      	lsls	r2, r1, #3
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	4642      	mov	r2, r8
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db4:	464b      	mov	r3, r9
 8003db6:	460a      	mov	r2, r1
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	18db      	adds	r3, r3, r3
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dda:	4613      	mov	r3, r2
 8003ddc:	eb42 0303 	adc.w	r3, r2, r3
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dea:	f7fc fa51 	bl	8000290 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003df4:	fba3 1302 	umull	r1, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	2164      	movs	r1, #100	@ 0x64
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	3332      	adds	r3, #50	@ 0x32
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	f003 0207 	and.w	r2, r3, #7
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4422      	add	r2, r4
 8003e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e1c:	e106      	b.n	800402c <UART_SetConfig+0x4d8>
 8003e1e:	bf00      	nop
 8003e20:	40011000 	.word	0x40011000
 8003e24:	40011400 	.word	0x40011400
 8003e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e3e:	4642      	mov	r2, r8
 8003e40:	464b      	mov	r3, r9
 8003e42:	1891      	adds	r1, r2, r2
 8003e44:	6239      	str	r1, [r7, #32]
 8003e46:	415b      	adcs	r3, r3
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e4e:	4641      	mov	r1, r8
 8003e50:	1854      	adds	r4, r2, r1
 8003e52:	4649      	mov	r1, r9
 8003e54:	eb43 0501 	adc.w	r5, r3, r1
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	00eb      	lsls	r3, r5, #3
 8003e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e66:	00e2      	lsls	r2, r4, #3
 8003e68:	4614      	mov	r4, r2
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	18e3      	adds	r3, r4, r3
 8003e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e74:	464b      	mov	r3, r9
 8003e76:	eb45 0303 	adc.w	r3, r5, r3
 8003e7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	008b      	lsls	r3, r1, #2
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	008a      	lsls	r2, r1, #2
 8003ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003eac:	f7fc f9f0 	bl	8000290 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4b60      	ldr	r3, [pc, #384]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	011c      	lsls	r4, r3, #4
 8003ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ec8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	1891      	adds	r1, r2, r2
 8003ed6:	61b9      	str	r1, [r7, #24]
 8003ed8:	415b      	adcs	r3, r3
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	1851      	adds	r1, r2, r1
 8003ee4:	6139      	str	r1, [r7, #16]
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	414b      	adcs	r3, r1
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef8:	4659      	mov	r1, fp
 8003efa:	00cb      	lsls	r3, r1, #3
 8003efc:	4651      	mov	r1, sl
 8003efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f02:	4651      	mov	r1, sl
 8003f04:	00ca      	lsls	r2, r1, #3
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f14:	464b      	mov	r3, r9
 8003f16:	460a      	mov	r2, r1
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f38:	4649      	mov	r1, r9
 8003f3a:	008b      	lsls	r3, r1, #2
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f42:	4641      	mov	r1, r8
 8003f44:	008a      	lsls	r2, r1, #2
 8003f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f4a:	f7fc f9a1 	bl	8000290 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	4b38      	ldr	r3, [pc, #224]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003f56:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2264      	movs	r2, #100	@ 0x64
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	1acb      	subs	r3, r1, r3
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	3332      	adds	r3, #50	@ 0x32
 8003f68:	4a33      	ldr	r2, [pc, #204]	@ (8004038 <UART_SetConfig+0x4e4>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f74:	441c      	add	r4, r3
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f84:	4642      	mov	r2, r8
 8003f86:	464b      	mov	r3, r9
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f94:	4641      	mov	r1, r8
 8003f96:	1851      	adds	r1, r2, r1
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	414b      	adcs	r3, r1
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fac:	4659      	mov	r1, fp
 8003fae:	00cb      	lsls	r3, r1, #3
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	00ca      	lsls	r2, r1, #3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	460a      	mov	r2, r1
 8003fca:	eb42 0303 	adc.w	r3, r2, r3
 8003fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fe8:	4649      	mov	r1, r9
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	4641      	mov	r1, r8
 8003fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	008a      	lsls	r2, r1, #2
 8003ff6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ffa:	f7fc f949 	bl	8000290 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <UART_SetConfig+0x4e4>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	@ 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	3332      	adds	r3, #50	@ 0x32
 8004016:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <UART_SetConfig+0x4e4>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4422      	add	r2, r4
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004032:	46bd      	mov	sp, r7
 8004034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004038:	51eb851f 	.word	0x51eb851f

0800403c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800403c:	b084      	sub	sp, #16
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	f107 001c 	add.w	r0, r7, #28
 800404a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800404e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004052:	2b01      	cmp	r3, #1
 8004054:	d123      	bne.n	800409e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800406a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800407e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 faa0 	bl	80045d8 <USB_CoreReset>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e01b      	b.n	80040d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fa94 	bl	80045d8 <USB_CoreReset>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80040c8:	e005      	b.n	80040d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040d6:	7fbb      	ldrb	r3, [r7, #30]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10b      	bne.n	80040f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f043 0206 	orr.w	r2, r3, #6
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004100:	b004      	add	sp, #16
 8004102:	4770      	bx	lr

08004104 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 0201 	bic.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d115      	bne.n	8004174 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004154:	200a      	movs	r0, #10
 8004156:	f7fd f85d 	bl	8001214 <HAL_Delay>
      ms += 10U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	330a      	adds	r3, #10
 800415e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fa2b 	bl	80045bc <USB_GetMode>
 8004166:	4603      	mov	r3, r0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d01e      	beq.n	80041aa <USB_SetCurrentMode+0x84>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004170:	d9f0      	bls.n	8004154 <USB_SetCurrentMode+0x2e>
 8004172:	e01a      	b.n	80041aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d115      	bne.n	80041a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004186:	200a      	movs	r0, #10
 8004188:	f7fd f844 	bl	8001214 <HAL_Delay>
      ms += 10U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	330a      	adds	r3, #10
 8004190:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa12 	bl	80045bc <USB_GetMode>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <USB_SetCurrentMode+0x84>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80041a2:	d9f0      	bls.n	8004186 <USB_SetCurrentMode+0x60>
 80041a4:	e001      	b.n	80041aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e005      	b.n	80041b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80041ae:	d101      	bne.n	80041b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c0:	b084      	sub	sp, #16
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80041ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e009      	b.n	80041f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3340      	adds	r3, #64	@ 0x40
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	2200      	movs	r2, #0
 80041ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3301      	adds	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b0e      	cmp	r3, #14
 80041f8:	d9f2      	bls.n	80041e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11c      	bne.n	800423c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38
 800423a:	e00b      	b.n	8004254 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800425a:	461a      	mov	r2, r3
 800425c:	2300      	movs	r3, #0
 800425e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004260:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10d      	bne.n	8004284 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004270:	2100      	movs	r1, #0
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f968 	bl	8004548 <USB_SetDevSpeed>
 8004278:	e008      	b.n	800428c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800427a:	2101      	movs	r1, #1
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f963 	bl	8004548 <USB_SetDevSpeed>
 8004282:	e003      	b.n	800428c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004284:	2103      	movs	r1, #3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f95e 	bl	8004548 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800428c:	2110      	movs	r1, #16
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f8fa 	bl	8004488 <USB_FlushTxFifo>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f924 	bl	80044ec <USB_FlushRxFifo>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c0:	461a      	mov	r2, r3
 80042c2:	2300      	movs	r3, #0
 80042c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042cc:	461a      	mov	r2, r3
 80042ce:	2300      	movs	r3, #0
 80042d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	e043      	b.n	8004360 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042ee:	d118      	bne.n	8004322 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004302:	461a      	mov	r2, r3
 8004304:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e013      	b.n	8004334 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004318:	461a      	mov	r2, r3
 800431a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	e008      	b.n	8004334 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004340:	461a      	mov	r2, r3
 8004342:	2300      	movs	r3, #0
 8004344:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004352:	461a      	mov	r2, r3
 8004354:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004358:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3301      	adds	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004364:	461a      	mov	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4293      	cmp	r3, r2
 800436a:	d3b5      	bcc.n	80042d8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e043      	b.n	80043fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004388:	d118      	bne.n	80043bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e013      	b.n	80043ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e008      	b.n	80043ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043da:	461a      	mov	r2, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ec:	461a      	mov	r2, r3
 80043ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	3301      	adds	r3, #1
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043fe:	461a      	mov	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4293      	cmp	r3, r2
 8004404:	d3b5      	bcc.n	8004372 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004418:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004426:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004428:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f043 0210 	orr.w	r2, r3, #16
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <USB_DevInit+0x2c4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004448:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f043 0208 	orr.w	r2, r3, #8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800445c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004474:	7dfb      	ldrb	r3, [r7, #23]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004480:	b004      	add	sp, #16
 8004482:	4770      	bx	lr
 8004484:	803c3800 	.word	0x803c3800

08004488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044a2:	d901      	bls.n	80044a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e01b      	b.n	80044e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	daf2      	bge.n	8004496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	019b      	lsls	r3, r3, #6
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044cc:	d901      	bls.n	80044d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e006      	b.n	80044e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d0f0      	beq.n	80044c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3301      	adds	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004504:	d901      	bls.n	800450a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e018      	b.n	800453c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	daf2      	bge.n	80044f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2210      	movs	r2, #16
 800451a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3301      	adds	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004528:	d901      	bls.n	800452e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e006      	b.n	800453c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b10      	cmp	r3, #16
 8004538:	d0f0      	beq.n	800451c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004594:	f023 0303 	bic.w	r3, r3, #3
 8004598:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a8:	f043 0302 	orr.w	r3, r3, #2
 80045ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0301 	and.w	r3, r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045f0:	d901      	bls.n	80045f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e01b      	b.n	800462e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	daf2      	bge.n	80045e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800461a:	d901      	bls.n	8004620 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e006      	b.n	800462e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d0f0      	beq.n	800460e <USB_CoreReset+0x36>

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004642:	4b87      	ldr	r3, [pc, #540]	@ (8004860 <MX_LWIP_Init+0x224>)
 8004644:	22c0      	movs	r2, #192	@ 0xc0
 8004646:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004648:	4b85      	ldr	r3, [pc, #532]	@ (8004860 <MX_LWIP_Init+0x224>)
 800464a:	22a8      	movs	r2, #168	@ 0xa8
 800464c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800464e:	4b84      	ldr	r3, [pc, #528]	@ (8004860 <MX_LWIP_Init+0x224>)
 8004650:	2201      	movs	r2, #1
 8004652:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 194;
 8004654:	4b82      	ldr	r3, [pc, #520]	@ (8004860 <MX_LWIP_Init+0x224>)
 8004656:	22c2      	movs	r2, #194	@ 0xc2
 8004658:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800465a:	4b82      	ldr	r3, [pc, #520]	@ (8004864 <MX_LWIP_Init+0x228>)
 800465c:	22ff      	movs	r2, #255	@ 0xff
 800465e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004660:	4b80      	ldr	r3, [pc, #512]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004662:	22ff      	movs	r2, #255	@ 0xff
 8004664:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004666:	4b7f      	ldr	r3, [pc, #508]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004668:	22ff      	movs	r2, #255	@ 0xff
 800466a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800466c:	4b7d      	ldr	r3, [pc, #500]	@ (8004864 <MX_LWIP_Init+0x228>)
 800466e:	2200      	movs	r2, #0
 8004670:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004672:	4b7d      	ldr	r3, [pc, #500]	@ (8004868 <MX_LWIP_Init+0x22c>)
 8004674:	22c0      	movs	r2, #192	@ 0xc0
 8004676:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004678:	4b7b      	ldr	r3, [pc, #492]	@ (8004868 <MX_LWIP_Init+0x22c>)
 800467a:	22a8      	movs	r2, #168	@ 0xa8
 800467c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800467e:	4b7a      	ldr	r3, [pc, #488]	@ (8004868 <MX_LWIP_Init+0x22c>)
 8004680:	2201      	movs	r2, #1
 8004682:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004684:	4b78      	ldr	r3, [pc, #480]	@ (8004868 <MX_LWIP_Init+0x22c>)
 8004686:	2201      	movs	r2, #1
 8004688:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800468a:	f000 fd15 	bl	80050b8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800468e:	4b74      	ldr	r3, [pc, #464]	@ (8004860 <MX_LWIP_Init+0x224>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	061a      	lsls	r2, r3, #24
 8004694:	4b72      	ldr	r3, [pc, #456]	@ (8004860 <MX_LWIP_Init+0x224>)
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	4b70      	ldr	r3, [pc, #448]	@ (8004860 <MX_LWIP_Init+0x224>)
 800469e:	789b      	ldrb	r3, [r3, #2]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	4313      	orrs	r3, r2
 80046a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046a6:	78d2      	ldrb	r2, [r2, #3]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	061a      	lsls	r2, r3, #24
 80046ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	0619      	lsls	r1, r3, #24
 80046b2:	4b6b      	ldr	r3, [pc, #428]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	4319      	orrs	r1, r3
 80046ba:	4b69      	ldr	r3, [pc, #420]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046bc:	789b      	ldrb	r3, [r3, #2]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	430b      	orrs	r3, r1
 80046c2:	4967      	ldr	r1, [pc, #412]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046c4:	78c9      	ldrb	r1, [r1, #3]
 80046c6:	430b      	orrs	r3, r1
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80046ce:	431a      	orrs	r2, r3
 80046d0:	4b63      	ldr	r3, [pc, #396]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	0619      	lsls	r1, r3, #24
 80046d6:	4b62      	ldr	r3, [pc, #392]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	4319      	orrs	r1, r3
 80046de:	4b60      	ldr	r3, [pc, #384]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046e0:	789b      	ldrb	r3, [r3, #2]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	430b      	orrs	r3, r1
 80046e6:	495e      	ldr	r1, [pc, #376]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046e8:	78c9      	ldrb	r1, [r1, #3]
 80046ea:	430b      	orrs	r3, r1
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80046f2:	431a      	orrs	r2, r3
 80046f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	0619      	lsls	r1, r3, #24
 80046fa:	4b59      	ldr	r3, [pc, #356]	@ (8004860 <MX_LWIP_Init+0x224>)
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	4319      	orrs	r1, r3
 8004702:	4b57      	ldr	r3, [pc, #348]	@ (8004860 <MX_LWIP_Init+0x224>)
 8004704:	789b      	ldrb	r3, [r3, #2]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	430b      	orrs	r3, r1
 800470a:	4955      	ldr	r1, [pc, #340]	@ (8004860 <MX_LWIP_Init+0x224>)
 800470c:	78c9      	ldrb	r1, [r1, #3]
 800470e:	430b      	orrs	r3, r1
 8004710:	0e1b      	lsrs	r3, r3, #24
 8004712:	4313      	orrs	r3, r2
 8004714:	4a55      	ldr	r2, [pc, #340]	@ (800486c <MX_LWIP_Init+0x230>)
 8004716:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004718:	4b52      	ldr	r3, [pc, #328]	@ (8004864 <MX_LWIP_Init+0x228>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	061a      	lsls	r2, r3, #24
 800471e:	4b51      	ldr	r3, [pc, #324]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	431a      	orrs	r2, r3
 8004726:	4b4f      	ldr	r3, [pc, #316]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004728:	789b      	ldrb	r3, [r3, #2]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	4313      	orrs	r3, r2
 800472e:	4a4d      	ldr	r2, [pc, #308]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004730:	78d2      	ldrb	r2, [r2, #3]
 8004732:	4313      	orrs	r3, r2
 8004734:	061a      	lsls	r2, r3, #24
 8004736:	4b4b      	ldr	r3, [pc, #300]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	0619      	lsls	r1, r3, #24
 800473c:	4b49      	ldr	r3, [pc, #292]	@ (8004864 <MX_LWIP_Init+0x228>)
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	4319      	orrs	r1, r3
 8004744:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004746:	789b      	ldrb	r3, [r3, #2]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	430b      	orrs	r3, r1
 800474c:	4945      	ldr	r1, [pc, #276]	@ (8004864 <MX_LWIP_Init+0x228>)
 800474e:	78c9      	ldrb	r1, [r1, #3]
 8004750:	430b      	orrs	r3, r1
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004758:	431a      	orrs	r2, r3
 800475a:	4b42      	ldr	r3, [pc, #264]	@ (8004864 <MX_LWIP_Init+0x228>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	0619      	lsls	r1, r3, #24
 8004760:	4b40      	ldr	r3, [pc, #256]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	4319      	orrs	r1, r3
 8004768:	4b3e      	ldr	r3, [pc, #248]	@ (8004864 <MX_LWIP_Init+0x228>)
 800476a:	789b      	ldrb	r3, [r3, #2]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	430b      	orrs	r3, r1
 8004770:	493c      	ldr	r1, [pc, #240]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004772:	78c9      	ldrb	r1, [r1, #3]
 8004774:	430b      	orrs	r3, r1
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800477c:	431a      	orrs	r2, r3
 800477e:	4b39      	ldr	r3, [pc, #228]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	0619      	lsls	r1, r3, #24
 8004784:	4b37      	ldr	r3, [pc, #220]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	4319      	orrs	r1, r3
 800478c:	4b35      	ldr	r3, [pc, #212]	@ (8004864 <MX_LWIP_Init+0x228>)
 800478e:	789b      	ldrb	r3, [r3, #2]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	430b      	orrs	r3, r1
 8004794:	4933      	ldr	r1, [pc, #204]	@ (8004864 <MX_LWIP_Init+0x228>)
 8004796:	78c9      	ldrb	r1, [r1, #3]
 8004798:	430b      	orrs	r3, r1
 800479a:	0e1b      	lsrs	r3, r3, #24
 800479c:	4313      	orrs	r3, r2
 800479e:	4a34      	ldr	r2, [pc, #208]	@ (8004870 <MX_LWIP_Init+0x234>)
 80047a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	061a      	lsls	r2, r3, #24
 80047a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	431a      	orrs	r2, r3
 80047b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047b2:	789b      	ldrb	r3, [r3, #2]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	4313      	orrs	r3, r2
 80047b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047ba:	78d2      	ldrb	r2, [r2, #3]
 80047bc:	4313      	orrs	r3, r2
 80047be:	061a      	lsls	r2, r3, #24
 80047c0:	4b29      	ldr	r3, [pc, #164]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	0619      	lsls	r1, r3, #24
 80047c6:	4b28      	ldr	r3, [pc, #160]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047c8:	785b      	ldrb	r3, [r3, #1]
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	4319      	orrs	r1, r3
 80047ce:	4b26      	ldr	r3, [pc, #152]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047d0:	789b      	ldrb	r3, [r3, #2]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	430b      	orrs	r3, r1
 80047d6:	4924      	ldr	r1, [pc, #144]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047d8:	78c9      	ldrb	r1, [r1, #3]
 80047da:	430b      	orrs	r3, r1
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80047e2:	431a      	orrs	r2, r3
 80047e4:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	0619      	lsls	r1, r3, #24
 80047ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047ec:	785b      	ldrb	r3, [r3, #1]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	4319      	orrs	r1, r3
 80047f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047f4:	789b      	ldrb	r3, [r3, #2]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	430b      	orrs	r3, r1
 80047fa:	491b      	ldr	r1, [pc, #108]	@ (8004868 <MX_LWIP_Init+0x22c>)
 80047fc:	78c9      	ldrb	r1, [r1, #3]
 80047fe:	430b      	orrs	r3, r1
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004806:	431a      	orrs	r2, r3
 8004808:	4b17      	ldr	r3, [pc, #92]	@ (8004868 <MX_LWIP_Init+0x22c>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	0619      	lsls	r1, r3, #24
 800480e:	4b16      	ldr	r3, [pc, #88]	@ (8004868 <MX_LWIP_Init+0x22c>)
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	041b      	lsls	r3, r3, #16
 8004814:	4319      	orrs	r1, r3
 8004816:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <MX_LWIP_Init+0x22c>)
 8004818:	789b      	ldrb	r3, [r3, #2]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	430b      	orrs	r3, r1
 800481e:	4912      	ldr	r1, [pc, #72]	@ (8004868 <MX_LWIP_Init+0x22c>)
 8004820:	78c9      	ldrb	r1, [r1, #3]
 8004822:	430b      	orrs	r3, r1
 8004824:	0e1b      	lsrs	r3, r3, #24
 8004826:	4313      	orrs	r3, r2
 8004828:	4a12      	ldr	r2, [pc, #72]	@ (8004874 <MX_LWIP_Init+0x238>)
 800482a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800482c:	4b12      	ldr	r3, [pc, #72]	@ (8004878 <MX_LWIP_Init+0x23c>)
 800482e:	9302      	str	r3, [sp, #8]
 8004830:	4b12      	ldr	r3, [pc, #72]	@ (800487c <MX_LWIP_Init+0x240>)
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	2300      	movs	r3, #0
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	4b0e      	ldr	r3, [pc, #56]	@ (8004874 <MX_LWIP_Init+0x238>)
 800483a:	4a0d      	ldr	r2, [pc, #52]	@ (8004870 <MX_LWIP_Init+0x234>)
 800483c:	490b      	ldr	r1, [pc, #44]	@ (800486c <MX_LWIP_Init+0x230>)
 800483e:	4810      	ldr	r0, [pc, #64]	@ (8004880 <MX_LWIP_Init+0x244>)
 8004840:	f001 f926 	bl	8005a90 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004844:	480e      	ldr	r0, [pc, #56]	@ (8004880 <MX_LWIP_Init+0x244>)
 8004846:	f001 fad5 	bl	8005df4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800484a:	480d      	ldr	r0, [pc, #52]	@ (8004880 <MX_LWIP_Init+0x244>)
 800484c:	f001 fae2 	bl	8005e14 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004850:	490c      	ldr	r1, [pc, #48]	@ (8004884 <MX_LWIP_Init+0x248>)
 8004852:	480b      	ldr	r0, [pc, #44]	@ (8004880 <MX_LWIP_Init+0x244>)
 8004854:	f001 fbe0 	bl	8006018 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000668 	.word	0x20000668
 8004864:	2000066c 	.word	0x2000066c
 8004868:	20000670 	.word	0x20000670
 800486c:	2000065c 	.word	0x2000065c
 8004870:	20000660 	.word	0x20000660
 8004874:	20000664 	.word	0x20000664
 8004878:	0800f061 	.word	0x0800f061
 800487c:	08004b9d 	.word	0x08004b9d
 8004880:	20000628 	.word	0x20000628
 8004884:	080048e1 	.word	0x080048e1

08004888 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004890:	f7fc fcb4 	bl	80011fc <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <Ethernet_Link_Periodic_Handle+0x30>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b63      	cmp	r3, #99	@ 0x63
 800489e:	d907      	bls.n	80048b0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80048a0:	f7fc fcac 	bl	80011fc <HAL_GetTick>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4a04      	ldr	r2, [pc, #16]	@ (80048b8 <Ethernet_Link_Periodic_Handle+0x30>)
 80048a8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fada 	bl	8004e64 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000624 	.word	0x20000624

080048bc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80048c0:	4806      	ldr	r0, [pc, #24]	@ (80048dc <MX_LWIP_Process+0x20>)
 80048c2:	f000 f94b 	bl	8004b5c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80048c6:	f007 fc25 	bl	800c114 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80048ca:	4804      	ldr	r0, [pc, #16]	@ (80048dc <MX_LWIP_Process+0x20>)
 80048cc:	f7ff ffdc 	bl	8004888 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
  ethernet_link_status_updated(&gnetif);
 80048d0:	4802      	ldr	r0, [pc, #8]	@ (80048dc <MX_LWIP_Process+0x20>)
 80048d2:	f000 f805 	bl	80048e0 <ethernet_link_status_updated>
/* USER CODE END 4_3 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000628 	.word	0x20000628

080048e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004900:	4b40      	ldr	r3, [pc, #256]	@ (8004a04 <low_level_init+0x110>)
 8004902:	4a41      	ldr	r2, [pc, #260]	@ (8004a08 <low_level_init+0x114>)
 8004904:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004906:	2300      	movs	r3, #0
 8004908:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800490a:	2380      	movs	r3, #128	@ 0x80
 800490c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800490e:	23e1      	movs	r3, #225	@ 0xe1
 8004910:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004912:	2300      	movs	r3, #0
 8004914:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004916:	2300      	movs	r3, #0
 8004918:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800491a:	2300      	movs	r3, #0
 800491c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800491e:	4a39      	ldr	r2, [pc, #228]	@ (8004a04 <low_level_init+0x110>)
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004926:	4b37      	ldr	r3, [pc, #220]	@ (8004a04 <low_level_init+0x110>)
 8004928:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800492c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800492e:	4b35      	ldr	r3, [pc, #212]	@ (8004a04 <low_level_init+0x110>)
 8004930:	4a36      	ldr	r2, [pc, #216]	@ (8004a0c <low_level_init+0x118>)
 8004932:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004934:	4b33      	ldr	r3, [pc, #204]	@ (8004a04 <low_level_init+0x110>)
 8004936:	4a36      	ldr	r2, [pc, #216]	@ (8004a10 <low_level_init+0x11c>)
 8004938:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800493a:	4b32      	ldr	r3, [pc, #200]	@ (8004a04 <low_level_init+0x110>)
 800493c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004940:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004942:	4830      	ldr	r0, [pc, #192]	@ (8004a04 <low_level_init+0x110>)
 8004944:	f7fc fd70 	bl	8001428 <HAL_ETH_Init>
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800494c:	2238      	movs	r2, #56	@ 0x38
 800494e:	2100      	movs	r1, #0
 8004950:	4830      	ldr	r0, [pc, #192]	@ (8004a14 <low_level_init+0x120>)
 8004952:	f00a fdc0 	bl	800f4d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004956:	4b2f      	ldr	r3, [pc, #188]	@ (8004a14 <low_level_init+0x120>)
 8004958:	2221      	movs	r2, #33	@ 0x21
 800495a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800495c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a14 <low_level_init+0x120>)
 800495e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004962:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004964:	4b2b      	ldr	r3, [pc, #172]	@ (8004a14 <low_level_init+0x120>)
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800496a:	482b      	ldr	r0, [pc, #172]	@ (8004a18 <low_level_init+0x124>)
 800496c:	f000 ff58 	bl	8005820 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2206      	movs	r2, #6
 8004974:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004978:	4b22      	ldr	r3, [pc, #136]	@ (8004a04 <low_level_init+0x110>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004984:	4b1f      	ldr	r3, [pc, #124]	@ (8004a04 <low_level_init+0x110>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	785a      	ldrb	r2, [r3, #1]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004990:	4b1c      	ldr	r3, [pc, #112]	@ (8004a04 <low_level_init+0x110>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	789a      	ldrb	r2, [r3, #2]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <low_level_init+0x110>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	78da      	ldrb	r2, [r3, #3]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80049a8:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <low_level_init+0x110>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	791a      	ldrb	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80049b4:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <low_level_init+0x110>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	795a      	ldrb	r2, [r3, #5]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80049c6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80049ce:	f043 030a 	orr.w	r3, r3, #10
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80049da:	4910      	ldr	r1, [pc, #64]	@ (8004a1c <low_level_init+0x128>)
 80049dc:	4810      	ldr	r0, [pc, #64]	@ (8004a20 <low_level_init+0x12c>)
 80049de:	f7fc fa46 	bl	8000e6e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80049e2:	480f      	ldr	r0, [pc, #60]	@ (8004a20 <low_level_init+0x12c>)
 80049e4:	f7fc fa75 	bl	8000ed2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa38 	bl	8004e64 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80049f4:	e001      	b.n	80049fa <low_level_init+0x106>
    Error_Handler();
 80049f6:	f7fb ffd1 	bl	800099c <Error_Handler>
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20005140 	.word	0x20005140
 8004a08:	40028000 	.word	0x40028000
 8004a0c:	200050a0 	.word	0x200050a0
 8004a10:	20005000 	.word	0x20005000
 8004a14:	200051f0 	.word	0x200051f0
 8004a18:	08012c30 	.word	0x08012c30
 8004a1c:	2000000c 	.word	0x2000000c
 8004a20:	20005228 	.word	0x20005228

08004a24 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b092      	sub	sp, #72	@ 0x48
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004a3c:	f107 030c 	add.w	r3, r7, #12
 8004a40:	2230      	movs	r2, #48	@ 0x30
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f00a fd46 	bl	800f4d6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004a4a:	f107 030c 	add.w	r3, r7, #12
 8004a4e:	2230      	movs	r2, #48	@ 0x30
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f00a fd3f 	bl	800f4d6 <memset>

  for(q = p; q != NULL; q = q->next)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5c:	e045      	b.n	8004aea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d902      	bls.n	8004a6a <low_level_output+0x46>
      return ERR_IF;
 8004a64:	f06f 030b 	mvn.w	r3, #11
 8004a68:	e055      	b.n	8004b16 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	3348      	adds	r3, #72	@ 0x48
 8004a7a:	443b      	add	r3, r7
 8004a7c:	3b3c      	subs	r3, #60	@ 0x3c
 8004a7e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a82:	895b      	ldrh	r3, [r3, #10]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a88:	4613      	mov	r3, r2
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	3348      	adds	r3, #72	@ 0x48
 8004a92:	443b      	add	r3, r7
 8004a94:	3b38      	subs	r3, #56	@ 0x38
 8004a96:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	f107 000c 	add.w	r0, r7, #12
 8004aa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	440b      	add	r3, r1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18c1      	adds	r1, r0, r3
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	3348      	adds	r3, #72	@ 0x48
 8004abc:	443b      	add	r3, r7
 8004abe:	3b34      	subs	r3, #52	@ 0x34
 8004ac0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004acc:	4613      	mov	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	3348      	adds	r3, #72	@ 0x48
 8004ad6:	443b      	add	r3, r7
 8004ad8:	3b34      	subs	r3, #52	@ 0x34
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1b6      	bne.n	8004a5e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	891b      	ldrh	r3, [r3, #8]
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <low_level_output+0xfc>)
 8004af8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004afa:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <low_level_output+0xfc>)
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004b02:	4a07      	ldr	r2, [pc, #28]	@ (8004b20 <low_level_output+0xfc>)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004b08:	2214      	movs	r2, #20
 8004b0a:	4905      	ldr	r1, [pc, #20]	@ (8004b20 <low_level_output+0xfc>)
 8004b0c:	4805      	ldr	r0, [pc, #20]	@ (8004b24 <low_level_output+0x100>)
 8004b0e:	f7fc fdc1 	bl	8001694 <HAL_ETH_Transmit>

  return errval;
 8004b12:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3748      	adds	r7, #72	@ 0x48
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200051f0 	.word	0x200051f0
 8004b24:	20005140 	.word	0x20005140

08004b28 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004b34:	4b07      	ldr	r3, [pc, #28]	@ (8004b54 <low_level_input+0x2c>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	4619      	mov	r1, r3
 8004b42:	4805      	ldr	r0, [pc, #20]	@ (8004b58 <low_level_input+0x30>)
 8004b44:	f7fc fe3a 	bl	80017bc <HAL_ETH_ReadData>
  }

  return p;
 8004b48:	68fb      	ldr	r3, [r7, #12]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20004ffc 	.word	0x20004ffc
 8004b58:	20005140 	.word	0x20005140

08004b5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ffdd 	bl	8004b28 <low_level_input>
 8004b6e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	4798      	blx	r3
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f001 fdc6 	bl	8006718 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ea      	bne.n	8004b68 <ethernetif_input+0xc>
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <ethernetif_init+0x1c>
 8004baa:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <ethernetif_init+0x48>)
 8004bac:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8004bb0:	490d      	ldr	r1, [pc, #52]	@ (8004be8 <ethernetif_init+0x4c>)
 8004bb2:	480e      	ldr	r0, [pc, #56]	@ (8004bec <ethernetif_init+0x50>)
 8004bb4:	f00a fc2a 	bl	800f40c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2273      	movs	r2, #115	@ 0x73
 8004bbc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2274      	movs	r2, #116	@ 0x74
 8004bc4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a09      	ldr	r2, [pc, #36]	@ (8004bf0 <ethernetif_init+0x54>)
 8004bcc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <ethernetif_init+0x58>)
 8004bd2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fe8d 	bl	80048f4 <low_level_init>

  return ERR_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	08010238 	.word	0x08010238
 8004be8:	08010254 	.word	0x08010254
 8004bec:	08010264 	.word	0x08010264
 8004bf0:	0800d519 	.word	0x0800d519
 8004bf4:	08004a25 	.word	0x08004a25

08004bf8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	4807      	ldr	r0, [pc, #28]	@ (8004c24 <pbuf_free_custom+0x2c>)
 8004c08:	f000 feec 	bl	80059e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004c0c:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <pbuf_free_custom+0x30>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d102      	bne.n	8004c1a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004c14:	4b04      	ldr	r3, [pc, #16]	@ (8004c28 <pbuf_free_custom+0x30>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	08012c30 	.word	0x08012c30
 8004c28:	20004ffc 	.word	0x20004ffc

08004c2c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004c30:	f7fc fae4 	bl	80011fc <HAL_GetTick>
 8004c34:	4603      	mov	r3, r0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08e      	sub	sp, #56	@ 0x38
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a55      	ldr	r2, [pc, #340]	@ (8004db0 <HAL_ETH_MspInit+0x174>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	f040 80a4 	bne.w	8004da8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004c60:	2300      	movs	r3, #0
 8004c62:	623b      	str	r3, [r7, #32]
 8004c64:	4b53      	ldr	r3, [pc, #332]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c68:	4a52      	ldr	r2, [pc, #328]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004c6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c70:	4b50      	ldr	r3, [pc, #320]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c78:	623b      	str	r3, [r7, #32]
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	4b4c      	ldr	r3, [pc, #304]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c84:	4a4b      	ldr	r2, [pc, #300]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004c86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c8c:	4b49      	ldr	r3, [pc, #292]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	4b45      	ldr	r3, [pc, #276]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	4a44      	ldr	r2, [pc, #272]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004ca2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ca8:	4b42      	ldr	r3, [pc, #264]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cbe:	f043 0304 	orr.w	r3, r3, #4
 8004cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	4a36      	ldr	r2, [pc, #216]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ce0:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	4b30      	ldr	r3, [pc, #192]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cf6:	f043 0302 	orr.w	r3, r3, #2
 8004cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	4b29      	ldr	r3, [pc, #164]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	4a28      	ldr	r2, [pc, #160]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d18:	4b26      	ldr	r3, [pc, #152]	@ (8004db4 <HAL_ETH_MspInit+0x178>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004d24:	2332      	movs	r3, #50	@ 0x32
 8004d26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d30:	2303      	movs	r3, #3
 8004d32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d34:	230b      	movs	r3, #11
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	481e      	ldr	r0, [pc, #120]	@ (8004db8 <HAL_ETH_MspInit+0x17c>)
 8004d40:	f7fd fc74 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d44:	2386      	movs	r3, #134	@ 0x86
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2303      	movs	r3, #3
 8004d52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d54:	230b      	movs	r3, #11
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4817      	ldr	r0, [pc, #92]	@ (8004dbc <HAL_ETH_MspInit+0x180>)
 8004d60:	f7fd fc64 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d72:	2303      	movs	r3, #3
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d76:	230b      	movs	r3, #11
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d7e:	4619      	mov	r1, r3
 8004d80:	480f      	ldr	r0, [pc, #60]	@ (8004dc0 <HAL_ETH_MspInit+0x184>)
 8004d82:	f7fd fc53 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004d86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d94:	2303      	movs	r3, #3
 8004d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d98:	230b      	movs	r3, #11
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004da0:	4619      	mov	r1, r3
 8004da2:	4808      	ldr	r0, [pc, #32]	@ (8004dc4 <HAL_ETH_MspInit+0x188>)
 8004da4:	f7fd fc42 	bl	800262c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004da8:	bf00      	nop
 8004daa:	3738      	adds	r7, #56	@ 0x38
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40028000 	.word	0x40028000
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40020800 	.word	0x40020800
 8004dbc:	40020000 	.word	0x40020000
 8004dc0:	40020400 	.word	0x40020400
 8004dc4:	40021800 	.word	0x40021800

08004dc8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004dcc:	4802      	ldr	r0, [pc, #8]	@ (8004dd8 <ETH_PHY_IO_Init+0x10>)
 8004dce:	f7fc ffd1 	bl	8001d74 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20005140 	.word	0x20005140

08004ddc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return 0;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	68f9      	ldr	r1, [r7, #12]
 8004dfe:	4807      	ldr	r0, [pc, #28]	@ (8004e1c <ETH_PHY_IO_ReadReg+0x30>)
 8004e00:	f7fc fe20 	bl	8001a44 <HAL_ETH_ReadPHYRegister>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0e:	e000      	b.n	8004e12 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20005140 	.word	0x20005140

08004e20 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	4807      	ldr	r0, [pc, #28]	@ (8004e50 <ETH_PHY_IO_WriteReg+0x30>)
 8004e34:	f7fc fe51 	bl	8001ada <HAL_ETH_WritePHYRegister>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	e000      	b.n	8004e46 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20005140 	.word	0x20005140

08004e54 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e58:	f7fc f9d0 	bl	80011fc <HAL_GetTick>
 8004e5c:	4603      	mov	r3, r0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b0a0      	sub	sp, #128	@ 0x80
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004e6c:	f107 030c 	add.w	r3, r7, #12
 8004e70:	2264      	movs	r2, #100	@ 0x64
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f00a fb2e 	bl	800f4d6 <memset>
  int32_t PHYLinkState = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e82:	2300      	movs	r3, #0
 8004e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e86:	2300      	movs	r3, #0
 8004e88:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e8a:	483a      	ldr	r0, [pc, #232]	@ (8004f74 <ethernet_link_check_state+0x110>)
 8004e8c:	f7fc f8c9 	bl	8001022 <LAN8742_GetLinkState>
 8004e90:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e98:	089b      	lsrs	r3, r3, #2
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <ethernet_link_check_state+0x5a>
 8004ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	dc09      	bgt.n	8004ebe <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004eaa:	4833      	ldr	r0, [pc, #204]	@ (8004f78 <ethernet_link_check_state+0x114>)
 8004eac:	f7fc fb99 	bl	80015e2 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 f81b 	bl	8005eec <netif_set_down>
    netif_set_link_down(netif);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 f87e 	bl	8005fb8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004ebc:	e055      	b.n	8004f6a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d14e      	bne.n	8004f6a <ethernet_link_check_state+0x106>
 8004ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	dd4b      	ble.n	8004f6a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004ed2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ed4:	3b02      	subs	r3, #2
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d82a      	bhi.n	8004f30 <ethernet_link_check_state+0xcc>
 8004eda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <ethernet_link_check_state+0x7c>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f03 	.word	0x08004f03
 8004ee8:	08004f13 	.word	0x08004f13
 8004eec:	08004f23 	.word	0x08004f23
      duplex = ETH_FULLDUPLEX_MODE;
 8004ef0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ef4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004ef6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004efa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004efc:	2301      	movs	r3, #1
 8004efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f00:	e017      	b.n	8004f32 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004f06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f0a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f10:	e00f      	b.n	8004f32 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004f12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f16:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f20:	e007      	b.n	8004f32 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004f26:	2300      	movs	r3, #0
 8004f28:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f2e:	e000      	b.n	8004f32 <ethernet_link_check_state+0xce>
      break;
 8004f30:	bf00      	nop
    if(linkchanged)
 8004f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d018      	beq.n	8004f6a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f38:	f107 030c 	add.w	r3, r7, #12
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	480e      	ldr	r0, [pc, #56]	@ (8004f78 <ethernet_link_check_state+0x114>)
 8004f40:	f7fc fe14 	bl	8001b6c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8004f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f4a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	4619      	mov	r1, r3
 8004f52:	4809      	ldr	r0, [pc, #36]	@ (8004f78 <ethernet_link_check_state+0x114>)
 8004f54:	f7fc fef4 	bl	8001d40 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004f58:	4807      	ldr	r0, [pc, #28]	@ (8004f78 <ethernet_link_check_state+0x114>)
 8004f5a:	f7fc fae3 	bl	8001524 <HAL_ETH_Start>
      netif_set_up(netif);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 ff58 	bl	8005e14 <netif_set_up>
      netif_set_link_up(netif);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fff3 	bl	8005f50 <netif_set_link_up>
}
 8004f6a:	bf00      	nop
 8004f6c:	3780      	adds	r7, #128	@ 0x80
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20005228 	.word	0x20005228
 8004f78:	20005140 	.word	0x20005140

08004f7c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004f84:	4812      	ldr	r0, [pc, #72]	@ (8004fd0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004f86:	f000 fcbf 	bl	8005908 <memp_malloc_pool>
 8004f8a:	60f8      	str	r0, [r7, #12]
  if (p)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d014      	beq.n	8004fbc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f103 0220 	add.w	r2, r3, #32
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004fa0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004faa:	9201      	str	r2, [sp, #4]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2241      	movs	r2, #65	@ 0x41
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f001 f9f5 	bl	80063a4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004fba:	e005      	b.n	8004fc8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	08012c30 	.word	0x08012c30
 8004fd4:	08004bf9 	.word	0x08004bf9
 8004fd8:	20004ffc 	.word	0x20004ffc

08004fdc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	@ 0x24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3b20      	subs	r3, #32
 8004ffa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2200      	movs	r2, #0
 8005006:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	887a      	ldrh	r2, [r7, #2]
 800500c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e003      	b.n	8005026 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	e009      	b.n	8005048 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	891a      	ldrh	r2, [r3, #8]
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	4413      	add	r3, r2
 800503c:	b29a      	uxth	r2, r3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f2      	bne.n	8005034 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	3724      	adds	r7, #36	@ 0x24
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	b21a      	sxth	r2, r3
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	b29b      	uxth	r3, r3
 8005072:	b21b      	sxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b21b      	sxth	r3, r3
 8005078:	b29b      	uxth	r3, r3
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	061a      	lsls	r2, r3, #24
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	0e1b      	lsrs	r3, r3, #24
 80050aa:	4313      	orrs	r3, r2
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80050c2:	f000 f8d5 	bl	8005270 <mem_init>
  memp_init();
 80050c6:	f000 fbdb 	bl	8005880 <memp_init>
  pbuf_init();
  netif_init();
 80050ca:	f000 fcd9 	bl	8005a80 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80050ce:	f007 f863 	bl	800c198 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80050d2:	f001 fdbf 	bl	8006c54 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80050d6:	f006 ffd5 	bl	800c084 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80050ee:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <ptr_to_mem+0x20>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	4413      	add	r3, r2
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	200058b4 	.word	0x200058b4

08005108 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <mem_to_ptr+0x20>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	b29b      	uxth	r3, r3
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	200058b4 	.word	0x200058b4

0800512c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005134:	4b45      	ldr	r3, [pc, #276]	@ (800524c <plug_holes+0x120>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d206      	bcs.n	800514c <plug_holes+0x20>
 800513e:	4b44      	ldr	r3, [pc, #272]	@ (8005250 <plug_holes+0x124>)
 8005140:	f240 12df 	movw	r2, #479	@ 0x1df
 8005144:	4943      	ldr	r1, [pc, #268]	@ (8005254 <plug_holes+0x128>)
 8005146:	4844      	ldr	r0, [pc, #272]	@ (8005258 <plug_holes+0x12c>)
 8005148:	f00a f960 	bl	800f40c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800514c:	4b43      	ldr	r3, [pc, #268]	@ (800525c <plug_holes+0x130>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d306      	bcc.n	8005164 <plug_holes+0x38>
 8005156:	4b3e      	ldr	r3, [pc, #248]	@ (8005250 <plug_holes+0x124>)
 8005158:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800515c:	4940      	ldr	r1, [pc, #256]	@ (8005260 <plug_holes+0x134>)
 800515e:	483e      	ldr	r0, [pc, #248]	@ (8005258 <plug_holes+0x12c>)
 8005160:	f00a f954 	bl	800f40c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	791b      	ldrb	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <plug_holes+0x4e>
 800516c:	4b38      	ldr	r3, [pc, #224]	@ (8005250 <plug_holes+0x124>)
 800516e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005172:	493c      	ldr	r1, [pc, #240]	@ (8005264 <plug_holes+0x138>)
 8005174:	4838      	ldr	r0, [pc, #224]	@ (8005258 <plug_holes+0x12c>)
 8005176:	f00a f949 	bl	800f40c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005182:	d906      	bls.n	8005192 <plug_holes+0x66>
 8005184:	4b32      	ldr	r3, [pc, #200]	@ (8005250 <plug_holes+0x124>)
 8005186:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800518a:	4937      	ldr	r1, [pc, #220]	@ (8005268 <plug_holes+0x13c>)
 800518c:	4832      	ldr	r0, [pc, #200]	@ (8005258 <plug_holes+0x12c>)
 800518e:	f00a f93d 	bl	800f40c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ffa4 	bl	80050e4 <ptr_to_mem>
 800519c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d024      	beq.n	80051f0 <plug_holes+0xc4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	791b      	ldrb	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d120      	bne.n	80051f0 <plug_holes+0xc4>
 80051ae:	4b2b      	ldr	r3, [pc, #172]	@ (800525c <plug_holes+0x130>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d01b      	beq.n	80051f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80051b8:	4b2c      	ldr	r3, [pc, #176]	@ (800526c <plug_holes+0x140>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d102      	bne.n	80051c8 <plug_holes+0x9c>
      lfree = mem;
 80051c2:	4a2a      	ldr	r2, [pc, #168]	@ (800526c <plug_holes+0x140>)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80051d8:	d00a      	beq.n	80051f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ff80 	bl	80050e4 <ptr_to_mem>
 80051e4:	4604      	mov	r4, r0
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ff8e 	bl	8005108 <mem_to_ptr>
 80051ec:	4603      	mov	r3, r0
 80051ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	885b      	ldrh	r3, [r3, #2]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff ff75 	bl	80050e4 <ptr_to_mem>
 80051fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d01f      	beq.n	8005244 <plug_holes+0x118>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d11b      	bne.n	8005244 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800520c:	4b17      	ldr	r3, [pc, #92]	@ (800526c <plug_holes+0x140>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d102      	bne.n	800521c <plug_holes+0xf0>
      lfree = pmem;
 8005216:	4a15      	ldr	r2, [pc, #84]	@ (800526c <plug_holes+0x140>)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800522c:	d00a      	beq.n	8005244 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ff56 	bl	80050e4 <ptr_to_mem>
 8005238:	4604      	mov	r4, r0
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	f7ff ff64 	bl	8005108 <mem_to_ptr>
 8005240:	4603      	mov	r3, r0
 8005242:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}
 800524c:	200058b4 	.word	0x200058b4
 8005250:	0801028c 	.word	0x0801028c
 8005254:	080102bc 	.word	0x080102bc
 8005258:	080102d4 	.word	0x080102d4
 800525c:	200058b8 	.word	0x200058b8
 8005260:	080102fc 	.word	0x080102fc
 8005264:	08010318 	.word	0x08010318
 8005268:	08010334 	.word	0x08010334
 800526c:	200058bc 	.word	0x200058bc

08005270 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005276:	4b18      	ldr	r3, [pc, #96]	@ (80052d8 <mem_init+0x68>)
 8005278:	3303      	adds	r3, #3
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	461a      	mov	r2, r3
 8005280:	4b16      	ldr	r3, [pc, #88]	@ (80052dc <mem_init+0x6c>)
 8005282:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005284:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <mem_init+0x6c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005290:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800529e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80052a2:	f7ff ff1f 	bl	80050e4 <ptr_to_mem>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4a0d      	ldr	r2, [pc, #52]	@ (80052e0 <mem_init+0x70>)
 80052aa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80052ac:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <mem_init+0x70>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80052b4:	4b0a      	ldr	r3, [pc, #40]	@ (80052e0 <mem_init+0x70>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80052bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80052be:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <mem_init+0x70>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80052c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80052c8:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <mem_init+0x6c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a05      	ldr	r2, [pc, #20]	@ (80052e4 <mem_init+0x74>)
 80052ce:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20005260 	.word	0x20005260
 80052dc:	200058b4 	.word	0x200058b4
 80052e0:	200058b8 	.word	0x200058b8
 80052e4:	200058bc 	.word	0x200058bc

080052e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff09 	bl	8005108 <mem_to_ptr>
 80052f6:	4603      	mov	r3, r0
 80052f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fef0 	bl	80050e4 <ptr_to_mem>
 8005304:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	885b      	ldrh	r3, [r3, #2]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff feea 	bl	80050e4 <ptr_to_mem>
 8005310:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800531a:	d818      	bhi.n	800534e <mem_link_valid+0x66>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	885b      	ldrh	r3, [r3, #2]
 8005320:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005324:	d813      	bhi.n	800534e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800532a:	8afa      	ldrh	r2, [r7, #22]
 800532c:	429a      	cmp	r2, r3
 800532e:	d004      	beq.n	800533a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	8afa      	ldrh	r2, [r7, #22]
 8005336:	429a      	cmp	r2, r3
 8005338:	d109      	bne.n	800534e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800533a:	4b08      	ldr	r3, [pc, #32]	@ (800535c <mem_link_valid+0x74>)
 800533c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	429a      	cmp	r2, r3
 8005342:	d006      	beq.n	8005352 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	885b      	ldrh	r3, [r3, #2]
 8005348:	8afa      	ldrh	r2, [r7, #22]
 800534a:	429a      	cmp	r2, r3
 800534c:	d001      	beq.n	8005352 <mem_link_valid+0x6a>
    return 0;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <mem_link_valid+0x6c>
  }
  return 1;
 8005352:	2301      	movs	r3, #1
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	200058b8 	.word	0x200058b8

08005360 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d04c      	beq.n	8005408 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005378:	4b25      	ldr	r3, [pc, #148]	@ (8005410 <mem_free+0xb0>)
 800537a:	f240 2273 	movw	r2, #627	@ 0x273
 800537e:	4925      	ldr	r1, [pc, #148]	@ (8005414 <mem_free+0xb4>)
 8005380:	4825      	ldr	r0, [pc, #148]	@ (8005418 <mem_free+0xb8>)
 8005382:	f00a f843 	bl	800f40c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005386:	e040      	b.n	800540a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3b08      	subs	r3, #8
 800538c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800538e:	4b23      	ldr	r3, [pc, #140]	@ (800541c <mem_free+0xbc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d306      	bcc.n	80053a6 <mem_free+0x46>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f103 020c 	add.w	r2, r3, #12
 800539e:	4b20      	ldr	r3, [pc, #128]	@ (8005420 <mem_free+0xc0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d907      	bls.n	80053b6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80053a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <mem_free+0xb0>)
 80053a8:	f240 227f 	movw	r2, #639	@ 0x27f
 80053ac:	491d      	ldr	r1, [pc, #116]	@ (8005424 <mem_free+0xc4>)
 80053ae:	481a      	ldr	r0, [pc, #104]	@ (8005418 <mem_free+0xb8>)
 80053b0:	f00a f82c 	bl	800f40c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80053b4:	e029      	b.n	800540a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	791b      	ldrb	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80053be:	4b14      	ldr	r3, [pc, #80]	@ (8005410 <mem_free+0xb0>)
 80053c0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80053c4:	4918      	ldr	r1, [pc, #96]	@ (8005428 <mem_free+0xc8>)
 80053c6:	4814      	ldr	r0, [pc, #80]	@ (8005418 <mem_free+0xb8>)
 80053c8:	f00a f820 	bl	800f40c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80053cc:	e01d      	b.n	800540a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ff8a 	bl	80052e8 <mem_link_valid>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <mem_free+0xb0>)
 80053dc:	f240 2295 	movw	r2, #661	@ 0x295
 80053e0:	4912      	ldr	r1, [pc, #72]	@ (800542c <mem_free+0xcc>)
 80053e2:	480d      	ldr	r0, [pc, #52]	@ (8005418 <mem_free+0xb8>)
 80053e4:	f00a f812 	bl	800f40c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80053e8:	e00f      	b.n	800540a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80053f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005430 <mem_free+0xd0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d202      	bcs.n	8005400 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80053fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005430 <mem_free+0xd0>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff fe93 	bl	800512c <plug_holes>
 8005406:	e000      	b.n	800540a <mem_free+0xaa>
    return;
 8005408:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	0801028c 	.word	0x0801028c
 8005414:	08010360 	.word	0x08010360
 8005418:	080102d4 	.word	0x080102d4
 800541c:	200058b4 	.word	0x200058b4
 8005420:	200058b8 	.word	0x200058b8
 8005424:	08010384 	.word	0x08010384
 8005428:	080103a0 	.word	0x080103a0
 800542c:	080103c8 	.word	0x080103c8
 8005430:	200058bc 	.word	0x200058bc

08005434 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	3303      	adds	r3, #3
 8005444:	b29b      	uxth	r3, r3
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800544c:	8bfb      	ldrh	r3, [r7, #30]
 800544e:	2b0b      	cmp	r3, #11
 8005450:	d801      	bhi.n	8005456 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005452:	230c      	movs	r3, #12
 8005454:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005456:	8bfb      	ldrh	r3, [r7, #30]
 8005458:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800545c:	d803      	bhi.n	8005466 <mem_trim+0x32>
 800545e:	8bfa      	ldrh	r2, [r7, #30]
 8005460:	887b      	ldrh	r3, [r7, #2]
 8005462:	429a      	cmp	r2, r3
 8005464:	d201      	bcs.n	800546a <mem_trim+0x36>
    return NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	e0cc      	b.n	8005604 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800546a:	4b68      	ldr	r3, [pc, #416]	@ (800560c <mem_trim+0x1d8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d304      	bcc.n	800547e <mem_trim+0x4a>
 8005474:	4b66      	ldr	r3, [pc, #408]	@ (8005610 <mem_trim+0x1dc>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d306      	bcc.n	800548c <mem_trim+0x58>
 800547e:	4b65      	ldr	r3, [pc, #404]	@ (8005614 <mem_trim+0x1e0>)
 8005480:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005484:	4964      	ldr	r1, [pc, #400]	@ (8005618 <mem_trim+0x1e4>)
 8005486:	4865      	ldr	r0, [pc, #404]	@ (800561c <mem_trim+0x1e8>)
 8005488:	f009 ffc0 	bl	800f40c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800548c:	4b5f      	ldr	r3, [pc, #380]	@ (800560c <mem_trim+0x1d8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d304      	bcc.n	80054a0 <mem_trim+0x6c>
 8005496:	4b5e      	ldr	r3, [pc, #376]	@ (8005610 <mem_trim+0x1dc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d301      	bcc.n	80054a4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	e0af      	b.n	8005604 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3b08      	subs	r3, #8
 80054a8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80054aa:	69b8      	ldr	r0, [r7, #24]
 80054ac:	f7ff fe2c 	bl	8005108 <mem_to_ptr>
 80054b0:	4603      	mov	r3, r0
 80054b2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	8afb      	ldrh	r3, [r7, #22]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b08      	subs	r3, #8
 80054c0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80054c2:	8bfa      	ldrh	r2, [r7, #30]
 80054c4:	8abb      	ldrh	r3, [r7, #20]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d906      	bls.n	80054d8 <mem_trim+0xa4>
 80054ca:	4b52      	ldr	r3, [pc, #328]	@ (8005614 <mem_trim+0x1e0>)
 80054cc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80054d0:	4953      	ldr	r1, [pc, #332]	@ (8005620 <mem_trim+0x1ec>)
 80054d2:	4852      	ldr	r0, [pc, #328]	@ (800561c <mem_trim+0x1e8>)
 80054d4:	f009 ff9a 	bl	800f40c <iprintf>
  if (newsize > size) {
 80054d8:	8bfa      	ldrh	r2, [r7, #30]
 80054da:	8abb      	ldrh	r3, [r7, #20]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d901      	bls.n	80054e4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e08f      	b.n	8005604 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80054e4:	8bfa      	ldrh	r2, [r7, #30]
 80054e6:	8abb      	ldrh	r3, [r7, #20]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d101      	bne.n	80054f0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	e089      	b.n	8005604 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fdf5 	bl	80050e4 <ptr_to_mem>
 80054fa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d13f      	bne.n	8005584 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800550c:	d106      	bne.n	800551c <mem_trim+0xe8>
 800550e:	4b41      	ldr	r3, [pc, #260]	@ (8005614 <mem_trim+0x1e0>)
 8005510:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005514:	4943      	ldr	r1, [pc, #268]	@ (8005624 <mem_trim+0x1f0>)
 8005516:	4841      	ldr	r0, [pc, #260]	@ (800561c <mem_trim+0x1e8>)
 8005518:	f009 ff78 	bl	800f40c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005522:	8afa      	ldrh	r2, [r7, #22]
 8005524:	8bfb      	ldrh	r3, [r7, #30]
 8005526:	4413      	add	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	3308      	adds	r3, #8
 800552c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800552e:	4b3e      	ldr	r3, [pc, #248]	@ (8005628 <mem_trim+0x1f4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	429a      	cmp	r2, r3
 8005536:	d106      	bne.n	8005546 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fdd2 	bl	80050e4 <ptr_to_mem>
 8005540:	4603      	mov	r3, r0
 8005542:	4a39      	ldr	r2, [pc, #228]	@ (8005628 <mem_trim+0x1f4>)
 8005544:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fdcb 	bl	80050e4 <ptr_to_mem>
 800554e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2200      	movs	r2, #0
 8005554:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	89ba      	ldrh	r2, [r7, #12]
 800555a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	8afa      	ldrh	r2, [r7, #22]
 8005560:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	89fa      	ldrh	r2, [r7, #14]
 8005566:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005570:	d047      	beq.n	8005602 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fdb4 	bl	80050e4 <ptr_to_mem>
 800557c:	4602      	mov	r2, r0
 800557e:	89fb      	ldrh	r3, [r7, #14]
 8005580:	8053      	strh	r3, [r2, #2]
 8005582:	e03e      	b.n	8005602 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005584:	8bfb      	ldrh	r3, [r7, #30]
 8005586:	f103 0214 	add.w	r2, r3, #20
 800558a:	8abb      	ldrh	r3, [r7, #20]
 800558c:	429a      	cmp	r2, r3
 800558e:	d838      	bhi.n	8005602 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005590:	8afa      	ldrh	r2, [r7, #22]
 8005592:	8bfb      	ldrh	r3, [r7, #30]
 8005594:	4413      	add	r3, r2
 8005596:	b29b      	uxth	r3, r3
 8005598:	3308      	adds	r3, #8
 800559a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80055a4:	d106      	bne.n	80055b4 <mem_trim+0x180>
 80055a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <mem_trim+0x1e0>)
 80055a8:	f240 3216 	movw	r2, #790	@ 0x316
 80055ac:	491d      	ldr	r1, [pc, #116]	@ (8005624 <mem_trim+0x1f0>)
 80055ae:	481b      	ldr	r0, [pc, #108]	@ (800561c <mem_trim+0x1e8>)
 80055b0:	f009 ff2c 	bl	800f40c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fd94 	bl	80050e4 <ptr_to_mem>
 80055bc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80055be:	4b1a      	ldr	r3, [pc, #104]	@ (8005628 <mem_trim+0x1f4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d202      	bcs.n	80055ce <mem_trim+0x19a>
      lfree = mem2;
 80055c8:	4a17      	ldr	r2, [pc, #92]	@ (8005628 <mem_trim+0x1f4>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2200      	movs	r2, #0
 80055d2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	881a      	ldrh	r2, [r3, #0]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	8afa      	ldrh	r2, [r7, #22]
 80055e0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	89fa      	ldrh	r2, [r7, #14]
 80055e6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80055f0:	d007      	beq.n	8005602 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fd74 	bl	80050e4 <ptr_to_mem>
 80055fc:	4602      	mov	r2, r0
 80055fe:	89fb      	ldrh	r3, [r7, #14]
 8005600:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005602:	687b      	ldr	r3, [r7, #4]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200058b4 	.word	0x200058b4
 8005610:	200058b8 	.word	0x200058b8
 8005614:	0801028c 	.word	0x0801028c
 8005618:	080103fc 	.word	0x080103fc
 800561c:	080102d4 	.word	0x080102d4
 8005620:	08010414 	.word	0x08010414
 8005624:	08010434 	.word	0x08010434
 8005628:	200058bc 	.word	0x200058bc

0800562c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <mem_malloc+0x14>
    return NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	e0d9      	b.n	80057f4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	3303      	adds	r3, #3
 8005644:	b29b      	uxth	r3, r3
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800564c:	8bbb      	ldrh	r3, [r7, #28]
 800564e:	2b0b      	cmp	r3, #11
 8005650:	d801      	bhi.n	8005656 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005652:	230c      	movs	r3, #12
 8005654:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005656:	8bbb      	ldrh	r3, [r7, #28]
 8005658:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800565c:	d803      	bhi.n	8005666 <mem_malloc+0x3a>
 800565e:	8bba      	ldrh	r2, [r7, #28]
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	429a      	cmp	r2, r3
 8005664:	d201      	bcs.n	800566a <mem_malloc+0x3e>
    return NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	e0c4      	b.n	80057f4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800566a:	4b64      	ldr	r3, [pc, #400]	@ (80057fc <mem_malloc+0x1d0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fd4a 	bl	8005108 <mem_to_ptr>
 8005674:	4603      	mov	r3, r0
 8005676:	83fb      	strh	r3, [r7, #30]
 8005678:	e0b4      	b.n	80057e4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800567a:	8bfb      	ldrh	r3, [r7, #30]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fd31 	bl	80050e4 <ptr_to_mem>
 8005682:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	791b      	ldrb	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f040 80a4 	bne.w	80057d6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	8bfb      	ldrh	r3, [r7, #30]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f1a3 0208 	sub.w	r2, r3, #8
 800569c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800569e:	429a      	cmp	r2, r3
 80056a0:	f0c0 8099 	bcc.w	80057d6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	8bfb      	ldrh	r3, [r7, #30]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f1a3 0208 	sub.w	r2, r3, #8
 80056b2:	8bbb      	ldrh	r3, [r7, #28]
 80056b4:	3314      	adds	r3, #20
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d333      	bcc.n	8005722 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80056ba:	8bfa      	ldrh	r2, [r7, #30]
 80056bc:	8bbb      	ldrh	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3308      	adds	r3, #8
 80056c4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80056c6:	8a7b      	ldrh	r3, [r7, #18]
 80056c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80056cc:	d106      	bne.n	80056dc <mem_malloc+0xb0>
 80056ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005800 <mem_malloc+0x1d4>)
 80056d0:	f240 3287 	movw	r2, #903	@ 0x387
 80056d4:	494b      	ldr	r1, [pc, #300]	@ (8005804 <mem_malloc+0x1d8>)
 80056d6:	484c      	ldr	r0, [pc, #304]	@ (8005808 <mem_malloc+0x1dc>)
 80056d8:	f009 fe98 	bl	800f40c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80056dc:	8a7b      	ldrh	r3, [r7, #18]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fd00 	bl	80050e4 <ptr_to_mem>
 80056e4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	881a      	ldrh	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8bfa      	ldrh	r2, [r7, #30]
 80056f8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	8a7a      	ldrh	r2, [r7, #18]
 80056fe:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2201      	movs	r2, #1
 8005704:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800570e:	d00b      	beq.n	8005728 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fce5 	bl	80050e4 <ptr_to_mem>
 800571a:	4602      	mov	r2, r0
 800571c:	8a7b      	ldrh	r3, [r7, #18]
 800571e:	8053      	strh	r3, [r2, #2]
 8005720:	e002      	b.n	8005728 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2201      	movs	r2, #1
 8005726:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005728:	4b34      	ldr	r3, [pc, #208]	@ (80057fc <mem_malloc+0x1d0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	429a      	cmp	r2, r3
 8005730:	d127      	bne.n	8005782 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005732:	4b32      	ldr	r3, [pc, #200]	@ (80057fc <mem_malloc+0x1d0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005738:	e005      	b.n	8005746 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fcd0 	bl	80050e4 <ptr_to_mem>
 8005744:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	791b      	ldrb	r3, [r3, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <mem_malloc+0x12c>
 800574e:	4b2f      	ldr	r3, [pc, #188]	@ (800580c <mem_malloc+0x1e0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	429a      	cmp	r2, r3
 8005756:	d1f0      	bne.n	800573a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005758:	4a28      	ldr	r2, [pc, #160]	@ (80057fc <mem_malloc+0x1d0>)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800575e:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <mem_malloc+0x1d0>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b2a      	ldr	r3, [pc, #168]	@ (800580c <mem_malloc+0x1e0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d00b      	beq.n	8005782 <mem_malloc+0x156>
 800576a:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <mem_malloc+0x1d0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	791b      	ldrb	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d006      	beq.n	8005782 <mem_malloc+0x156>
 8005774:	4b22      	ldr	r3, [pc, #136]	@ (8005800 <mem_malloc+0x1d4>)
 8005776:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800577a:	4925      	ldr	r1, [pc, #148]	@ (8005810 <mem_malloc+0x1e4>)
 800577c:	4822      	ldr	r0, [pc, #136]	@ (8005808 <mem_malloc+0x1dc>)
 800577e:	f009 fe45 	bl	800f40c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005782:	8bba      	ldrh	r2, [r7, #28]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	3308      	adds	r3, #8
 800578a:	4a20      	ldr	r2, [pc, #128]	@ (800580c <mem_malloc+0x1e0>)
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	4293      	cmp	r3, r2
 8005790:	d906      	bls.n	80057a0 <mem_malloc+0x174>
 8005792:	4b1b      	ldr	r3, [pc, #108]	@ (8005800 <mem_malloc+0x1d4>)
 8005794:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005798:	491e      	ldr	r1, [pc, #120]	@ (8005814 <mem_malloc+0x1e8>)
 800579a:	481b      	ldr	r0, [pc, #108]	@ (8005808 <mem_malloc+0x1dc>)
 800579c:	f009 fe36 	bl	800f40c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <mem_malloc+0x18c>
 80057aa:	4b15      	ldr	r3, [pc, #84]	@ (8005800 <mem_malloc+0x1d4>)
 80057ac:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80057b0:	4919      	ldr	r1, [pc, #100]	@ (8005818 <mem_malloc+0x1ec>)
 80057b2:	4815      	ldr	r0, [pc, #84]	@ (8005808 <mem_malloc+0x1dc>)
 80057b4:	f009 fe2a 	bl	800f40c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <mem_malloc+0x1a4>
 80057c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <mem_malloc+0x1d4>)
 80057c4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80057c8:	4914      	ldr	r1, [pc, #80]	@ (800581c <mem_malloc+0x1f0>)
 80057ca:	480f      	ldr	r0, [pc, #60]	@ (8005808 <mem_malloc+0x1dc>)
 80057cc:	f009 fe1e 	bl	800f40c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3308      	adds	r3, #8
 80057d4:	e00e      	b.n	80057f4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80057d6:	8bfb      	ldrh	r3, [r7, #30]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fc83 	bl	80050e4 <ptr_to_mem>
 80057de:	4603      	mov	r3, r0
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80057e4:	8bfa      	ldrh	r2, [r7, #30]
 80057e6:	8bbb      	ldrh	r3, [r7, #28]
 80057e8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80057ec:	429a      	cmp	r2, r3
 80057ee:	f4ff af44 	bcc.w	800567a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	200058bc 	.word	0x200058bc
 8005800:	0801028c 	.word	0x0801028c
 8005804:	08010434 	.word	0x08010434
 8005808:	080102d4 	.word	0x080102d4
 800580c:	200058b8 	.word	0x200058b8
 8005810:	08010448 	.word	0x08010448
 8005814:	08010464 	.word	0x08010464
 8005818:	08010494 	.word	0x08010494
 800581c:	080104c4 	.word	0x080104c4

08005820 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	3303      	adds	r3, #3
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e011      	b.n	8005866 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	885b      	ldrh	r3, [r3, #2]
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4293      	cmp	r3, r2
 8005870:	dbe7      	blt.n	8005842 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005886:	2300      	movs	r3, #0
 8005888:	80fb      	strh	r3, [r7, #6]
 800588a:	e009      	b.n	80058a0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	4a08      	ldr	r2, [pc, #32]	@ (80058b0 <memp_init+0x30>)
 8005890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff ffc3 	bl	8005820 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	3301      	adds	r3, #1
 800589e:	80fb      	strh	r3, [r7, #6]
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d9f2      	bls.n	800588c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	08012ca8 	.word	0x08012ca8

080058b4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d012      	beq.n	80058f0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <do_memp_malloc_pool+0x38>
 80058de:	4b07      	ldr	r3, [pc, #28]	@ (80058fc <do_memp_malloc_pool+0x48>)
 80058e0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80058e4:	4906      	ldr	r1, [pc, #24]	@ (8005900 <do_memp_malloc_pool+0x4c>)
 80058e6:	4807      	ldr	r0, [pc, #28]	@ (8005904 <do_memp_malloc_pool+0x50>)
 80058e8:	f009 fd90 	bl	800f40c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	e000      	b.n	80058f2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	080104e8 	.word	0x080104e8
 8005900:	08010518 	.word	0x08010518
 8005904:	0801053c 	.word	0x0801053c

08005908 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <memp_malloc_pool+0x1c>
 8005916:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <memp_malloc_pool+0x38>)
 8005918:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800591c:	4909      	ldr	r1, [pc, #36]	@ (8005944 <memp_malloc_pool+0x3c>)
 800591e:	480a      	ldr	r0, [pc, #40]	@ (8005948 <memp_malloc_pool+0x40>)
 8005920:	f009 fd74 	bl	800f40c <iprintf>
  if (desc == NULL) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <memp_malloc_pool+0x26>
    return NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	e003      	b.n	8005936 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff ffc0 	bl	80058b4 <do_memp_malloc_pool>
 8005934:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	080104e8 	.word	0x080104e8
 8005944:	08010564 	.word	0x08010564
 8005948:	0801053c 	.word	0x0801053c

0800594c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d908      	bls.n	800596e <memp_malloc+0x22>
 800595c:	4b0a      	ldr	r3, [pc, #40]	@ (8005988 <memp_malloc+0x3c>)
 800595e:	f240 1257 	movw	r2, #343	@ 0x157
 8005962:	490a      	ldr	r1, [pc, #40]	@ (800598c <memp_malloc+0x40>)
 8005964:	480a      	ldr	r0, [pc, #40]	@ (8005990 <memp_malloc+0x44>)
 8005966:	f009 fd51 	bl	800f40c <iprintf>
 800596a:	2300      	movs	r3, #0
 800596c:	e008      	b.n	8005980 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	4a08      	ldr	r2, [pc, #32]	@ (8005994 <memp_malloc+0x48>)
 8005972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ff9c 	bl	80058b4 <do_memp_malloc_pool>
 800597c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800597e:	68fb      	ldr	r3, [r7, #12]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	080104e8 	.word	0x080104e8
 800598c:	08010578 	.word	0x08010578
 8005990:	0801053c 	.word	0x0801053c
 8005994:	08012ca8 	.word	0x08012ca8

08005998 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d006      	beq.n	80059ba <do_memp_free_pool+0x22>
 80059ac:	4b0a      	ldr	r3, [pc, #40]	@ (80059d8 <do_memp_free_pool+0x40>)
 80059ae:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80059b2:	490a      	ldr	r1, [pc, #40]	@ (80059dc <do_memp_free_pool+0x44>)
 80059b4:	480a      	ldr	r0, [pc, #40]	@ (80059e0 <do_memp_free_pool+0x48>)
 80059b6:	f009 fd29 	bl	800f40c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	080104e8 	.word	0x080104e8
 80059dc:	08010598 	.word	0x08010598
 80059e0:	0801053c 	.word	0x0801053c

080059e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <memp_free_pool+0x1e>
 80059f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <memp_free_pool+0x3c>)
 80059f6:	f240 1295 	movw	r2, #405	@ 0x195
 80059fa:	490a      	ldr	r1, [pc, #40]	@ (8005a24 <memp_free_pool+0x40>)
 80059fc:	480a      	ldr	r0, [pc, #40]	@ (8005a28 <memp_free_pool+0x44>)
 80059fe:	f009 fd05 	bl	800f40c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <memp_free_pool+0x34>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ffc1 	bl	8005998 <do_memp_free_pool>
 8005a16:	e000      	b.n	8005a1a <memp_free_pool+0x36>
    return;
 8005a18:	bf00      	nop
}
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	080104e8 	.word	0x080104e8
 8005a24:	08010564 	.word	0x08010564
 8005a28:	0801053c 	.word	0x0801053c

08005a2c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d907      	bls.n	8005a4e <memp_free+0x22>
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a70 <memp_free+0x44>)
 8005a40:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005a44:	490b      	ldr	r1, [pc, #44]	@ (8005a74 <memp_free+0x48>)
 8005a46:	480c      	ldr	r0, [pc, #48]	@ (8005a78 <memp_free+0x4c>)
 8005a48:	f009 fce0 	bl	800f40c <iprintf>
 8005a4c:	e00c      	b.n	8005a68 <memp_free+0x3c>

  if (mem == NULL) {
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	4a09      	ldr	r2, [pc, #36]	@ (8005a7c <memp_free+0x50>)
 8005a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff ff9a 	bl	8005998 <do_memp_free_pool>
 8005a64:	e000      	b.n	8005a68 <memp_free+0x3c>
    return;
 8005a66:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	080104e8 	.word	0x080104e8
 8005a74:	080105b8 	.word	0x080105b8
 8005a78:	0801053c 	.word	0x0801053c
 8005a7c:	08012ca8 	.word	0x08012ca8

08005a80 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d108      	bne.n	8005ab6 <netif_add+0x26>
 8005aa4:	4b57      	ldr	r3, [pc, #348]	@ (8005c04 <netif_add+0x174>)
 8005aa6:	f240 1227 	movw	r2, #295	@ 0x127
 8005aaa:	4957      	ldr	r1, [pc, #348]	@ (8005c08 <netif_add+0x178>)
 8005aac:	4857      	ldr	r0, [pc, #348]	@ (8005c0c <netif_add+0x17c>)
 8005aae:	f009 fcad 	bl	800f40c <iprintf>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e0a2      	b.n	8005bfc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <netif_add+0x3e>
 8005abc:	4b51      	ldr	r3, [pc, #324]	@ (8005c04 <netif_add+0x174>)
 8005abe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005ac2:	4953      	ldr	r1, [pc, #332]	@ (8005c10 <netif_add+0x180>)
 8005ac4:	4851      	ldr	r0, [pc, #324]	@ (8005c0c <netif_add+0x17c>)
 8005ac6:	f009 fca1 	bl	800f40c <iprintf>
 8005aca:	2300      	movs	r3, #0
 8005acc:	e096      	b.n	8005bfc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c14 <netif_add+0x184>)
 8005ad6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005ade:	4b4d      	ldr	r3, [pc, #308]	@ (8005c14 <netif_add+0x184>)
 8005ae0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8005c14 <netif_add+0x184>)
 8005aea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4a45      	ldr	r2, [pc, #276]	@ (8005c18 <netif_add+0x188>)
 8005b02:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a3a      	ldr	r2, [r7, #32]
 8005b1c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c1c <netif_add+0x18c>)
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b2c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f913 	bl	8005d60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	4798      	blx	r3
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <netif_add+0xba>
    return NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e058      	b.n	8005bfc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b50:	2bff      	cmp	r3, #255	@ 0xff
 8005b52:	d103      	bne.n	8005b5c <netif_add+0xcc>
        netif->num = 0;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005b60:	4b2f      	ldr	r3, [pc, #188]	@ (8005c20 <netif_add+0x190>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e02b      	b.n	8005bc0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d106      	bne.n	8005b7e <netif_add+0xee>
 8005b70:	4b24      	ldr	r3, [pc, #144]	@ (8005c04 <netif_add+0x174>)
 8005b72:	f240 128b 	movw	r2, #395	@ 0x18b
 8005b76:	492b      	ldr	r1, [pc, #172]	@ (8005c24 <netif_add+0x194>)
 8005b78:	4824      	ldr	r0, [pc, #144]	@ (8005c0c <netif_add+0x17c>)
 8005b7a:	f009 fc47 	bl	800f40c <iprintf>
        num_netifs++;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3301      	adds	r3, #1
 8005b82:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2bff      	cmp	r3, #255	@ 0xff
 8005b88:	dd06      	ble.n	8005b98 <netif_add+0x108>
 8005b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c04 <netif_add+0x174>)
 8005b8c:	f240 128d 	movw	r2, #397	@ 0x18d
 8005b90:	4925      	ldr	r1, [pc, #148]	@ (8005c28 <netif_add+0x198>)
 8005b92:	481e      	ldr	r0, [pc, #120]	@ (8005c0c <netif_add+0x17c>)
 8005b94:	f009 fc3a 	bl	800f40c <iprintf>
        if (netif2->num == netif->num) {
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d108      	bne.n	8005bba <netif_add+0x12a>
          netif->num++;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bae:	3301      	adds	r3, #1
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005bb8:	e005      	b.n	8005bc6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1d0      	bne.n	8005b68 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1be      	bne.n	8005b4a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8005bd4:	d103      	bne.n	8005bde <netif_add+0x14e>
    netif_num = 0;
 8005bd6:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <netif_add+0x18c>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e006      	b.n	8005bec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005be4:	3301      	adds	r3, #1
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	4b0c      	ldr	r3, [pc, #48]	@ (8005c1c <netif_add+0x18c>)
 8005bea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005bec:	4b0c      	ldr	r3, [pc, #48]	@ (8005c20 <netif_add+0x190>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8005c20 <netif_add+0x190>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	080105d4 	.word	0x080105d4
 8005c08:	08010668 	.word	0x08010668
 8005c0c:	08010624 	.word	0x08010624
 8005c10:	08010684 	.word	0x08010684
 8005c14:	08012d0c 	.word	0x08012d0c
 8005c18:	0800603b 	.word	0x0800603b
 8005c1c:	200087b4 	.word	0x200087b4
 8005c20:	200087ac 	.word	0x200087ac
 8005c24:	080106a8 	.word	0x080106a8
 8005c28:	080106bc 	.word	0x080106bc

08005c2c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f002 fb55 	bl	80082e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f006 ffed 	bl	800cc20 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <netif_do_set_ipaddr+0x20>
 8005c62:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <netif_do_set_ipaddr+0x88>)
 8005c64:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8005c68:	491c      	ldr	r1, [pc, #112]	@ (8005cdc <netif_do_set_ipaddr+0x8c>)
 8005c6a:	481d      	ldr	r0, [pc, #116]	@ (8005ce0 <netif_do_set_ipaddr+0x90>)
 8005c6c:	f009 fbce 	bl	800f40c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <netif_do_set_ipaddr+0x34>
 8005c76:	4b18      	ldr	r3, [pc, #96]	@ (8005cd8 <netif_do_set_ipaddr+0x88>)
 8005c78:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8005c7c:	4917      	ldr	r1, [pc, #92]	@ (8005cdc <netif_do_set_ipaddr+0x8c>)
 8005c7e:	4818      	ldr	r0, [pc, #96]	@ (8005ce0 <netif_do_set_ipaddr+0x90>)
 8005c80:	f009 fbc4 	bl	800f40c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d01c      	beq.n	8005ccc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005ca2:	f107 0314 	add.w	r3, r7, #20
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ffbf 	bl	8005c2c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <netif_do_set_ipaddr+0x6a>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	e000      	b.n	8005cbc <netif_do_set_ipaddr+0x6c>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8d2 	bl	8005e6c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	080105d4 	.word	0x080105d4
 8005cdc:	080106ec 	.word	0x080106ec
 8005ce0:	08010624 	.word	0x08010624

08005ce4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d00a      	beq.n	8005d14 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <netif_do_set_netmask+0x26>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	e000      	b.n	8005d0c <netif_do_set_netmask+0x28>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	330c      	adds	r3, #12
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d00a      	beq.n	8005d52 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <netif_do_set_gw+0x26>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	e000      	b.n	8005d4a <netif_do_set_gw+0x28>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005df0 <netif_set_addr+0x90>)
 8005d7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <netif_set_addr+0x90>)
 8005d88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005d90:	4b17      	ldr	r3, [pc, #92]	@ (8005df0 <netif_set_addr+0x90>)
 8005d92:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <netif_set_addr+0x42>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <netif_set_addr+0x46>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <netif_set_addr+0x48>
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005db0:	f107 0310 	add.w	r3, r7, #16
 8005db4:	461a      	mov	r2, r3
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff ff49 	bl	8005c50 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff ff8e 	bl	8005ce4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff ffa8 	bl	8005d22 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff ff35 	bl	8005c50 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005de6:	bf00      	nop
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	08012d0c 	.word	0x08012d0c

08005df4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005dfc:	4a04      	ldr	r2, [pc, #16]	@ (8005e10 <netif_set_default+0x1c>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	200087b0 	.word	0x200087b0

08005e14 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d107      	bne.n	8005e32 <netif_set_up+0x1e>
 8005e22:	4b0f      	ldr	r3, [pc, #60]	@ (8005e60 <netif_set_up+0x4c>)
 8005e24:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005e28:	490e      	ldr	r1, [pc, #56]	@ (8005e64 <netif_set_up+0x50>)
 8005e2a:	480f      	ldr	r0, [pc, #60]	@ (8005e68 <netif_set_up+0x54>)
 8005e2c:	f009 faee 	bl	800f40c <iprintf>
 8005e30:	e013      	b.n	8005e5a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10c      	bne.n	8005e5a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e46:	f043 0301 	orr.w	r3, r3, #1
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005e52:	2103      	movs	r1, #3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f809 	bl	8005e6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	080105d4 	.word	0x080105d4
 8005e64:	0801075c 	.word	0x0801075c
 8005e68:	08010624 	.word	0x08010624

08005e6c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <netif_issue_reports+0x20>
 8005e7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ee0 <netif_issue_reports+0x74>)
 8005e80:	f240 326d 	movw	r2, #877	@ 0x36d
 8005e84:	4917      	ldr	r1, [pc, #92]	@ (8005ee4 <netif_issue_reports+0x78>)
 8005e86:	4818      	ldr	r0, [pc, #96]	@ (8005ee8 <netif_issue_reports+0x7c>)
 8005e88:	f009 fac0 	bl	800f40c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01e      	beq.n	8005ed8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ea0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d017      	beq.n	8005ed8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d013      	beq.n	8005eda <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00e      	beq.n	8005eda <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f007 fe0f 	bl	800daf4 <etharp_request>
 8005ed6:	e000      	b.n	8005eda <netif_issue_reports+0x6e>
    return;
 8005ed8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	080105d4 	.word	0x080105d4
 8005ee4:	08010778 	.word	0x08010778
 8005ee8:	08010624 	.word	0x08010624

08005eec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <netif_set_down+0x1e>
 8005efa:	4b12      	ldr	r3, [pc, #72]	@ (8005f44 <netif_set_down+0x58>)
 8005efc:	f240 329b 	movw	r2, #923	@ 0x39b
 8005f00:	4911      	ldr	r1, [pc, #68]	@ (8005f48 <netif_set_down+0x5c>)
 8005f02:	4812      	ldr	r0, [pc, #72]	@ (8005f4c <netif_set_down+0x60>)
 8005f04:	f009 fa82 	bl	800f40c <iprintf>
 8005f08:	e019      	b.n	8005f3e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d012      	beq.n	8005f3e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f007 f999 	bl	800d270 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	080105d4 	.word	0x080105d4
 8005f48:	0801079c 	.word	0x0801079c
 8005f4c:	08010624 	.word	0x08010624

08005f50 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <netif_set_link_up+0x1e>
 8005f5e:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <netif_set_link_up+0x5c>)
 8005f60:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005f64:	4912      	ldr	r1, [pc, #72]	@ (8005fb0 <netif_set_link_up+0x60>)
 8005f66:	4813      	ldr	r0, [pc, #76]	@ (8005fb4 <netif_set_link_up+0x64>)
 8005f68:	f009 fa50 	bl	800f40c <iprintf>
 8005f6c:	e01b      	b.n	8005fa6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d114      	bne.n	8005fa6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f82:	f043 0304 	orr.w	r3, r3, #4
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005f8e:	2103      	movs	r1, #3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff6b 	bl	8005e6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <netif_set_link_up+0x56>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	080105d4 	.word	0x080105d4
 8005fb0:	080107bc 	.word	0x080107bc
 8005fb4:	08010624 	.word	0x08010624

08005fb8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d107      	bne.n	8005fd6 <netif_set_link_down+0x1e>
 8005fc6:	4b11      	ldr	r3, [pc, #68]	@ (800600c <netif_set_link_down+0x54>)
 8005fc8:	f240 4206 	movw	r2, #1030	@ 0x406
 8005fcc:	4910      	ldr	r1, [pc, #64]	@ (8006010 <netif_set_link_down+0x58>)
 8005fce:	4811      	ldr	r0, [pc, #68]	@ (8006014 <netif_set_link_down+0x5c>)
 8005fd0:	f009 fa1c 	bl	800f40c <iprintf>
 8005fd4:	e017      	b.n	8006006 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d010      	beq.n	8006006 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005fea:	f023 0304 	bic.w	r3, r3, #4
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <netif_set_link_down+0x4e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	080105d4 	.word	0x080105d4
 8006010:	080107e0 	.word	0x080107e0
 8006014:	08010624 	.word	0x08010624

08006018 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	61da      	str	r2, [r3, #28]
  }
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006046:	f06f 030b 	mvn.w	r3, #11
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d013      	beq.n	8006090 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006068:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <netif_get_by_index+0x48>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e00c      	b.n	800608a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006076:	3301      	adds	r3, #1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	79fa      	ldrb	r2, [r7, #7]
 800607c:	429a      	cmp	r2, r3
 800607e:	d101      	bne.n	8006084 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	e006      	b.n	8006092 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ef      	bne.n	8006070 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	200087ac 	.word	0x200087ac

080060a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80060aa:	4b0c      	ldr	r3, [pc, #48]	@ (80060dc <pbuf_free_ooseq+0x38>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <pbuf_free_ooseq+0x3c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	e00a      	b.n	80060ce <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f002 f94f 	bl	8008364 <tcp_free_ooseq>
      return;
 80060c6:	e005      	b.n	80060d4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f1      	bne.n	80060b8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	200087b5 	.word	0x200087b5
 80060e0:	200087c4 	.word	0x200087c4

080060e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80060e8:	4b03      	ldr	r3, [pc, #12]	@ (80060f8 <pbuf_pool_is_empty+0x14>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80060ee:	bf00      	nop
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	200087b5 	.word	0x200087b5

080060fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4611      	mov	r1, r2
 8006108:	461a      	mov	r2, r3
 800610a:	460b      	mov	r3, r1
 800610c:	80fb      	strh	r3, [r7, #6]
 800610e:	4613      	mov	r3, r2
 8006110:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	88ba      	ldrh	r2, [r7, #4]
 8006128:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800612a:	8b3b      	ldrh	r3, [r7, #24]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	7f3a      	ldrb	r2, [r7, #28]
 8006136:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	73da      	strb	r2, [r3, #15]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	@ 0x30
 8006154:	af02      	add	r7, sp, #8
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
 800615a:	460b      	mov	r3, r1
 800615c:	80bb      	strh	r3, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006166:	887b      	ldrh	r3, [r7, #2]
 8006168:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800616c:	d07f      	beq.n	800626e <pbuf_alloc+0x11e>
 800616e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006172:	f300 80c8 	bgt.w	8006306 <pbuf_alloc+0x1b6>
 8006176:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800617a:	d010      	beq.n	800619e <pbuf_alloc+0x4e>
 800617c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006180:	f300 80c1 	bgt.w	8006306 <pbuf_alloc+0x1b6>
 8006184:	2b01      	cmp	r3, #1
 8006186:	d002      	beq.n	800618e <pbuf_alloc+0x3e>
 8006188:	2b41      	cmp	r3, #65	@ 0x41
 800618a:	f040 80bc 	bne.w	8006306 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800618e:	887a      	ldrh	r2, [r7, #2]
 8006190:	88bb      	ldrh	r3, [r7, #4]
 8006192:	4619      	mov	r1, r3
 8006194:	2000      	movs	r0, #0
 8006196:	f000 f8d1 	bl	800633c <pbuf_alloc_reference>
 800619a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800619c:	e0bd      	b.n	800631a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80061a6:	88bb      	ldrh	r3, [r7, #4]
 80061a8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80061aa:	2008      	movs	r0, #8
 80061ac:	f7ff fbce 	bl	800594c <memp_malloc>
 80061b0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80061b8:	f7ff ff94 	bl	80060e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80061c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061c4:	f000 faa8 	bl	8006718 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e0a7      	b.n	800631c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80061cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061ce:	3303      	adds	r3, #3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f023 0303 	bic.w	r3, r3, #3
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80061dc:	b29b      	uxth	r3, r3
 80061de:	8b7a      	ldrh	r2, [r7, #26]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bf28      	it	cs
 80061e4:	4613      	movcs	r3, r2
 80061e6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80061e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061ea:	3310      	adds	r3, #16
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	3303      	adds	r3, #3
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	4618      	mov	r0, r3
 80061f8:	89f9      	ldrh	r1, [r7, #14]
 80061fa:	8b7a      	ldrh	r2, [r7, #26]
 80061fc:	2300      	movs	r3, #0
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	887b      	ldrh	r3, [r7, #2]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	460b      	mov	r3, r1
 8006206:	4601      	mov	r1, r0
 8006208:	6938      	ldr	r0, [r7, #16]
 800620a:	f7ff ff77 	bl	80060fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <pbuf_alloc+0xd8>
 800621a:	4b42      	ldr	r3, [pc, #264]	@ (8006324 <pbuf_alloc+0x1d4>)
 800621c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006220:	4941      	ldr	r1, [pc, #260]	@ (8006328 <pbuf_alloc+0x1d8>)
 8006222:	4842      	ldr	r0, [pc, #264]	@ (800632c <pbuf_alloc+0x1dc>)
 8006224:	f009 f8f2 	bl	800f40c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006228:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800622a:	3303      	adds	r3, #3
 800622c:	f023 0303 	bic.w	r3, r3, #3
 8006230:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006234:	d106      	bne.n	8006244 <pbuf_alloc+0xf4>
 8006236:	4b3b      	ldr	r3, [pc, #236]	@ (8006324 <pbuf_alloc+0x1d4>)
 8006238:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800623c:	493c      	ldr	r1, [pc, #240]	@ (8006330 <pbuf_alloc+0x1e0>)
 800623e:	483b      	ldr	r0, [pc, #236]	@ (800632c <pbuf_alloc+0x1dc>)
 8006240:	f009 f8e4 	bl	800f40c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
 800624e:	e002      	b.n	8006256 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800625a:	8b7a      	ldrh	r2, [r7, #26]
 800625c:	89fb      	ldrh	r3, [r7, #14]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006266:	8b7b      	ldrh	r3, [r7, #26]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d19e      	bne.n	80061aa <pbuf_alloc+0x5a>
      break;
 800626c:	e055      	b.n	800631a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800626e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006270:	3303      	adds	r3, #3
 8006272:	b29b      	uxth	r3, r3
 8006274:	f023 0303 	bic.w	r3, r3, #3
 8006278:	b29a      	uxth	r2, r3
 800627a:	88bb      	ldrh	r3, [r7, #4]
 800627c:	3303      	adds	r3, #3
 800627e:	b29b      	uxth	r3, r3
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	b29b      	uxth	r3, r3
 8006286:	4413      	add	r3, r2
 8006288:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800628a:	8b3b      	ldrh	r3, [r7, #24]
 800628c:	3310      	adds	r3, #16
 800628e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006290:	8b3a      	ldrh	r2, [r7, #24]
 8006292:	88bb      	ldrh	r3, [r7, #4]
 8006294:	3303      	adds	r3, #3
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	429a      	cmp	r2, r3
 800629c:	d306      	bcc.n	80062ac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800629e:	8afa      	ldrh	r2, [r7, #22]
 80062a0:	88bb      	ldrh	r3, [r7, #4]
 80062a2:	3303      	adds	r3, #3
 80062a4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d201      	bcs.n	80062b0 <pbuf_alloc+0x160>
        return NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e035      	b.n	800631c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80062b0:	8afb      	ldrh	r3, [r7, #22]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff f9ba 	bl	800562c <mem_malloc>
 80062b8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <pbuf_alloc+0x174>
        return NULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e02b      	b.n	800631c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80062c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062c6:	3310      	adds	r3, #16
 80062c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ca:	4413      	add	r3, r2
 80062cc:	3303      	adds	r3, #3
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	4618      	mov	r0, r3
 80062d4:	88b9      	ldrh	r1, [r7, #4]
 80062d6:	88ba      	ldrh	r2, [r7, #4]
 80062d8:	2300      	movs	r3, #0
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	887b      	ldrh	r3, [r7, #2]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	460b      	mov	r3, r1
 80062e2:	4601      	mov	r1, r0
 80062e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062e6:	f7ff ff09 	bl	80060fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d010      	beq.n	8006318 <pbuf_alloc+0x1c8>
 80062f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <pbuf_alloc+0x1d4>)
 80062f8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80062fc:	490d      	ldr	r1, [pc, #52]	@ (8006334 <pbuf_alloc+0x1e4>)
 80062fe:	480b      	ldr	r0, [pc, #44]	@ (800632c <pbuf_alloc+0x1dc>)
 8006300:	f009 f884 	bl	800f40c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006304:	e008      	b.n	8006318 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006306:	4b07      	ldr	r3, [pc, #28]	@ (8006324 <pbuf_alloc+0x1d4>)
 8006308:	f240 1227 	movw	r2, #295	@ 0x127
 800630c:	490a      	ldr	r1, [pc, #40]	@ (8006338 <pbuf_alloc+0x1e8>)
 800630e:	4807      	ldr	r0, [pc, #28]	@ (800632c <pbuf_alloc+0x1dc>)
 8006310:	f009 f87c 	bl	800f40c <iprintf>
      return NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	e001      	b.n	800631c <pbuf_alloc+0x1cc>
      break;
 8006318:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800631c:	4618      	mov	r0, r3
 800631e:	3728      	adds	r7, #40	@ 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	08010804 	.word	0x08010804
 8006328:	08010834 	.word	0x08010834
 800632c:	08010864 	.word	0x08010864
 8006330:	0801088c 	.word	0x0801088c
 8006334:	080108c0 	.word	0x080108c0
 8006338:	080108ec 	.word	0x080108ec

0800633c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af02      	add	r7, sp, #8
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]
 8006348:	4613      	mov	r3, r2
 800634a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800634c:	883b      	ldrh	r3, [r7, #0]
 800634e:	2b41      	cmp	r3, #65	@ 0x41
 8006350:	d009      	beq.n	8006366 <pbuf_alloc_reference+0x2a>
 8006352:	883b      	ldrh	r3, [r7, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d006      	beq.n	8006366 <pbuf_alloc_reference+0x2a>
 8006358:	4b0f      	ldr	r3, [pc, #60]	@ (8006398 <pbuf_alloc_reference+0x5c>)
 800635a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800635e:	490f      	ldr	r1, [pc, #60]	@ (800639c <pbuf_alloc_reference+0x60>)
 8006360:	480f      	ldr	r0, [pc, #60]	@ (80063a0 <pbuf_alloc_reference+0x64>)
 8006362:	f009 f853 	bl	800f40c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006366:	2007      	movs	r0, #7
 8006368:	f7ff faf0 	bl	800594c <memp_malloc>
 800636c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	e00b      	b.n	8006390 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006378:	8879      	ldrh	r1, [r7, #2]
 800637a:	887a      	ldrh	r2, [r7, #2]
 800637c:	2300      	movs	r3, #0
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	883b      	ldrh	r3, [r7, #0]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	460b      	mov	r3, r1
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff feb7 	bl	80060fc <pbuf_init_alloced_pbuf>
  return p;
 800638e:	68fb      	ldr	r3, [r7, #12]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	08010804 	.word	0x08010804
 800639c:	08010908 	.word	0x08010908
 80063a0:	08010864 	.word	0x08010864

080063a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]
 80063b0:	460b      	mov	r3, r1
 80063b2:	81bb      	strh	r3, [r7, #12]
 80063b4:	4613      	mov	r3, r2
 80063b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80063bc:	8a7b      	ldrh	r3, [r7, #18]
 80063be:	3303      	adds	r3, #3
 80063c0:	f023 0203 	bic.w	r2, r3, #3
 80063c4:	89bb      	ldrh	r3, [r7, #12]
 80063c6:	441a      	add	r2, r3
 80063c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d901      	bls.n	80063d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e018      	b.n	8006404 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80063d8:	8a7b      	ldrh	r3, [r7, #18]
 80063da:	3303      	adds	r3, #3
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	4413      	add	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e001      	b.n	80063ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	89b9      	ldrh	r1, [r7, #12]
 80063f0:	89ba      	ldrh	r2, [r7, #12]
 80063f2:	2302      	movs	r3, #2
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	897b      	ldrh	r3, [r7, #10]
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	460b      	mov	r3, r1
 80063fc:	6979      	ldr	r1, [r7, #20]
 80063fe:	f7ff fe7d 	bl	80060fc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006402:	687b      	ldr	r3, [r7, #4]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <pbuf_realloc+0x20>
 800641e:	4b3a      	ldr	r3, [pc, #232]	@ (8006508 <pbuf_realloc+0xfc>)
 8006420:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006424:	4939      	ldr	r1, [pc, #228]	@ (800650c <pbuf_realloc+0x100>)
 8006426:	483a      	ldr	r0, [pc, #232]	@ (8006510 <pbuf_realloc+0x104>)
 8006428:	f008 fff0 	bl	800f40c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	891b      	ldrh	r3, [r3, #8]
 8006430:	887a      	ldrh	r2, [r7, #2]
 8006432:	429a      	cmp	r2, r3
 8006434:	d263      	bcs.n	80064fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	891a      	ldrh	r2, [r3, #8]
 800643a:	887b      	ldrh	r3, [r7, #2]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006440:	887b      	ldrh	r3, [r7, #2]
 8006442:	817b      	strh	r3, [r7, #10]
  q = p;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006448:	e018      	b.n	800647c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	895b      	ldrh	r3, [r3, #10]
 800644e:	897a      	ldrh	r2, [r7, #10]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	891a      	ldrh	r2, [r3, #8]
 8006458:	893b      	ldrh	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <pbuf_realloc+0x70>
 800646e:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <pbuf_realloc+0xfc>)
 8006470:	f240 12af 	movw	r2, #431	@ 0x1af
 8006474:	4927      	ldr	r1, [pc, #156]	@ (8006514 <pbuf_realloc+0x108>)
 8006476:	4826      	ldr	r0, [pc, #152]	@ (8006510 <pbuf_realloc+0x104>)
 8006478:	f008 ffc8 	bl	800f40c <iprintf>
  while (rem_len > q->len) {
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	895b      	ldrh	r3, [r3, #10]
 8006480:	897a      	ldrh	r2, [r7, #10]
 8006482:	429a      	cmp	r2, r3
 8006484:	d8e1      	bhi.n	800644a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	7b1b      	ldrb	r3, [r3, #12]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	2b00      	cmp	r3, #0
 8006490:	d121      	bne.n	80064d6 <pbuf_realloc+0xca>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	895b      	ldrh	r3, [r3, #10]
 8006496:	897a      	ldrh	r2, [r7, #10]
 8006498:	429a      	cmp	r2, r3
 800649a:	d01c      	beq.n	80064d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	7b5b      	ldrb	r3, [r3, #13]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d116      	bne.n	80064d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	897b      	ldrh	r3, [r7, #10]
 80064b4:	4413      	add	r3, r2
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7fe ffba 	bl	8005434 <mem_trim>
 80064c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <pbuf_realloc+0xca>
 80064c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <pbuf_realloc+0xfc>)
 80064ca:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80064ce:	4912      	ldr	r1, [pc, #72]	@ (8006518 <pbuf_realloc+0x10c>)
 80064d0:	480f      	ldr	r0, [pc, #60]	@ (8006510 <pbuf_realloc+0x104>)
 80064d2:	f008 ff9b 	bl	800f40c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	897a      	ldrh	r2, [r7, #10]
 80064da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	895a      	ldrh	r2, [r3, #10]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 f911 	bl	8006718 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	e000      	b.n	8006500 <pbuf_realloc+0xf4>
    return;
 80064fe:	bf00      	nop

}
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	08010804 	.word	0x08010804
 800650c:	0801091c 	.word	0x0801091c
 8006510:	08010864 	.word	0x08010864
 8006514:	08010934 	.word	0x08010934
 8006518:	0801094c 	.word	0x0801094c

0800651c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <pbuf_add_header_impl+0x22>
 8006530:	4b2b      	ldr	r3, [pc, #172]	@ (80065e0 <pbuf_add_header_impl+0xc4>)
 8006532:	f240 12df 	movw	r2, #479	@ 0x1df
 8006536:	492b      	ldr	r1, [pc, #172]	@ (80065e4 <pbuf_add_header_impl+0xc8>)
 8006538:	482b      	ldr	r0, [pc, #172]	@ (80065e8 <pbuf_add_header_impl+0xcc>)
 800653a:	f008 ff67 	bl	800f40c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <pbuf_add_header_impl+0x30>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800654a:	d301      	bcc.n	8006550 <pbuf_add_header_impl+0x34>
    return 1;
 800654c:	2301      	movs	r3, #1
 800654e:	e043      	b.n	80065d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <pbuf_add_header_impl+0x3e>
    return 0;
 8006556:	2300      	movs	r3, #0
 8006558:	e03e      	b.n	80065d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	891a      	ldrh	r2, [r3, #8]
 8006562:	8a7b      	ldrh	r3, [r7, #18]
 8006564:	4413      	add	r3, r2
 8006566:	b29b      	uxth	r3, r3
 8006568:	8a7a      	ldrh	r2, [r7, #18]
 800656a:	429a      	cmp	r2, r3
 800656c:	d901      	bls.n	8006572 <pbuf_add_header_impl+0x56>
    return 1;
 800656e:	2301      	movs	r3, #1
 8006570:	e032      	b.n	80065d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	7b1b      	ldrb	r3, [r3, #12]
 8006576:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006578:	8a3b      	ldrh	r3, [r7, #16]
 800657a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	425b      	negs	r3, r3
 800658a:	4413      	add	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3310      	adds	r3, #16
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	429a      	cmp	r2, r3
 8006596:	d20d      	bcs.n	80065b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006598:	2301      	movs	r3, #1
 800659a:	e01d      	b.n	80065d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	425b      	negs	r3, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e001      	b.n	80065b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e011      	b.n	80065d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	895a      	ldrh	r2, [r3, #10]
 80065be:	8a7b      	ldrh	r3, [r7, #18]
 80065c0:	4413      	add	r3, r2
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	891a      	ldrh	r2, [r3, #8]
 80065cc:	8a7b      	ldrh	r3, [r7, #18]
 80065ce:	4413      	add	r3, r2
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	811a      	strh	r2, [r3, #8]


  return 0;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	08010804 	.word	0x08010804
 80065e4:	08010968 	.word	0x08010968
 80065e8:	08010864 	.word	0x08010864

080065ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80065f6:	2200      	movs	r2, #0
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff8e 	bl	800651c <pbuf_add_header_impl>
 8006600:	4603      	mov	r3, r0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <pbuf_remove_header+0x1e>
 800661c:	4b20      	ldr	r3, [pc, #128]	@ (80066a0 <pbuf_remove_header+0x94>)
 800661e:	f240 224b 	movw	r2, #587	@ 0x24b
 8006622:	4920      	ldr	r1, [pc, #128]	@ (80066a4 <pbuf_remove_header+0x98>)
 8006624:	4820      	ldr	r0, [pc, #128]	@ (80066a8 <pbuf_remove_header+0x9c>)
 8006626:	f008 fef1 	bl	800f40c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <pbuf_remove_header+0x2c>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006636:	d301      	bcc.n	800663c <pbuf_remove_header+0x30>
    return 1;
 8006638:	2301      	movs	r3, #1
 800663a:	e02c      	b.n	8006696 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <pbuf_remove_header+0x3a>
    return 0;
 8006642:	2300      	movs	r3, #0
 8006644:	e027      	b.n	8006696 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	895b      	ldrh	r3, [r3, #10]
 800664e:	89fa      	ldrh	r2, [r7, #14]
 8006650:	429a      	cmp	r2, r3
 8006652:	d908      	bls.n	8006666 <pbuf_remove_header+0x5a>
 8006654:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <pbuf_remove_header+0x94>)
 8006656:	f240 2255 	movw	r2, #597	@ 0x255
 800665a:	4914      	ldr	r1, [pc, #80]	@ (80066ac <pbuf_remove_header+0xa0>)
 800665c:	4812      	ldr	r0, [pc, #72]	@ (80066a8 <pbuf_remove_header+0x9c>)
 800665e:	f008 fed5 	bl	800f40c <iprintf>
 8006662:	2301      	movs	r3, #1
 8006664:	e017      	b.n	8006696 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	441a      	add	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	895a      	ldrh	r2, [r3, #10]
 800667c:	89fb      	ldrh	r3, [r7, #14]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	891a      	ldrh	r2, [r3, #8]
 800668a:	89fb      	ldrh	r3, [r7, #14]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	08010804 	.word	0x08010804
 80066a4:	08010968 	.word	0x08010968
 80066a8:	08010864 	.word	0x08010864
 80066ac:	08010974 	.word	0x08010974

080066b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	807b      	strh	r3, [r7, #2]
 80066bc:	4613      	mov	r3, r2
 80066be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80066c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	da08      	bge.n	80066da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80066c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066cc:	425b      	negs	r3, r3
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ff9b 	bl	800660c <pbuf_remove_header>
 80066d6:	4603      	mov	r3, r0
 80066d8:	e007      	b.n	80066ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80066da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066de:	787a      	ldrb	r2, [r7, #1]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff ff1a 	bl	800651c <pbuf_add_header_impl>
 80066e8:	4603      	mov	r3, r0
  }
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80066fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006702:	2201      	movs	r2, #1
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff ffd2 	bl	80066b0 <pbuf_header_impl>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <pbuf_free+0x22>
 800672c:	4b38      	ldr	r3, [pc, #224]	@ (8006810 <pbuf_free+0xf8>)
 800672e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006732:	4938      	ldr	r1, [pc, #224]	@ (8006814 <pbuf_free+0xfc>)
 8006734:	4838      	ldr	r0, [pc, #224]	@ (8006818 <pbuf_free+0x100>)
 8006736:	f008 fe69 	bl	800f40c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800673a:	2300      	movs	r3, #0
 800673c:	e063      	b.n	8006806 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006742:	e05c      	b.n	80067fe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7b9b      	ldrb	r3, [r3, #14]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <pbuf_free+0x42>
 800674c:	4b30      	ldr	r3, [pc, #192]	@ (8006810 <pbuf_free+0xf8>)
 800674e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006752:	4932      	ldr	r1, [pc, #200]	@ (800681c <pbuf_free+0x104>)
 8006754:	4830      	ldr	r0, [pc, #192]	@ (8006818 <pbuf_free+0x100>)
 8006756:	f008 fe59 	bl	800f40c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7b9b      	ldrb	r3, [r3, #14]
 800675e:	3b01      	subs	r3, #1
 8006760:	b2da      	uxtb	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	739a      	strb	r2, [r3, #14]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7b9b      	ldrb	r3, [r3, #14]
 800676a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800676c:	7dbb      	ldrb	r3, [r7, #22]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d143      	bne.n	80067fa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7b1b      	ldrb	r3, [r3, #12]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7b5b      	ldrb	r3, [r3, #13]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d011      	beq.n	80067b2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <pbuf_free+0x90>
 800679a:	4b1d      	ldr	r3, [pc, #116]	@ (8006810 <pbuf_free+0xf8>)
 800679c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80067a0:	491f      	ldr	r1, [pc, #124]	@ (8006820 <pbuf_free+0x108>)
 80067a2:	481d      	ldr	r0, [pc, #116]	@ (8006818 <pbuf_free+0x100>)
 80067a4:	f008 fe32 	bl	800f40c <iprintf>
        pc->custom_free_function(p);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
 80067b0:	e01d      	b.n	80067ee <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d104      	bne.n	80067c2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	2008      	movs	r0, #8
 80067bc:	f7ff f936 	bl	8005a2c <memp_free>
 80067c0:	e015      	b.n	80067ee <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d104      	bne.n	80067d2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	2007      	movs	r0, #7
 80067cc:	f7ff f92e 	bl	8005a2c <memp_free>
 80067d0:	e00d      	b.n	80067ee <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <pbuf_free+0xc8>
          mem_free(p);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fe fdc1 	bl	8005360 <mem_free>
 80067de:	e006      	b.n	80067ee <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80067e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006810 <pbuf_free+0xf8>)
 80067e2:	f240 320f 	movw	r2, #783	@ 0x30f
 80067e6:	490f      	ldr	r1, [pc, #60]	@ (8006824 <pbuf_free+0x10c>)
 80067e8:	480b      	ldr	r0, [pc, #44]	@ (8006818 <pbuf_free+0x100>)
 80067ea:	f008 fe0f 	bl	800f40c <iprintf>
        }
      }
      count++;
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	3301      	adds	r3, #1
 80067f2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	e001      	b.n	80067fe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d19f      	bne.n	8006744 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	08010804 	.word	0x08010804
 8006814:	08010968 	.word	0x08010968
 8006818:	08010864 	.word	0x08010864
 800681c:	08010994 	.word	0x08010994
 8006820:	080109ac 	.word	0x080109ac
 8006824:	080109d0 	.word	0x080109d0

08006828 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006834:	e005      	b.n	8006842 <pbuf_clen+0x1a>
    ++len;
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	3301      	adds	r3, #1
 800683a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f6      	bne.n	8006836 <pbuf_clen+0xe>
  }
  return len;
 8006848:	89fb      	ldrh	r3, [r7, #14]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d010      	beq.n	8006888 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7b9b      	ldrb	r3, [r3, #14]
 800686a:	3301      	adds	r3, #1
 800686c:	b2da      	uxtb	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	7b9b      	ldrb	r3, [r3, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <pbuf_ref+0x30>
 800687a:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <pbuf_ref+0x38>)
 800687c:	f240 3242 	movw	r2, #834	@ 0x342
 8006880:	4904      	ldr	r1, [pc, #16]	@ (8006894 <pbuf_ref+0x3c>)
 8006882:	4805      	ldr	r0, [pc, #20]	@ (8006898 <pbuf_ref+0x40>)
 8006884:	f008 fdc2 	bl	800f40c <iprintf>
  }
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	08010804 	.word	0x08010804
 8006894:	080109e4 	.word	0x080109e4
 8006898:	08010864 	.word	0x08010864

0800689c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <pbuf_cat+0x16>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <pbuf_cat+0x26>
 80068b2:	4b20      	ldr	r3, [pc, #128]	@ (8006934 <pbuf_cat+0x98>)
 80068b4:	f240 3259 	movw	r2, #857	@ 0x359
 80068b8:	491f      	ldr	r1, [pc, #124]	@ (8006938 <pbuf_cat+0x9c>)
 80068ba:	4820      	ldr	r0, [pc, #128]	@ (800693c <pbuf_cat+0xa0>)
 80068bc:	f008 fda6 	bl	800f40c <iprintf>
 80068c0:	e034      	b.n	800692c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e00a      	b.n	80068de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	891a      	ldrh	r2, [r3, #8]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	891b      	ldrh	r3, [r3, #8]
 80068d0:	4413      	add	r3, r2
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	891a      	ldrh	r2, [r3, #8]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	895b      	ldrh	r3, [r3, #10]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d006      	beq.n	8006900 <pbuf_cat+0x64>
 80068f2:	4b10      	ldr	r3, [pc, #64]	@ (8006934 <pbuf_cat+0x98>)
 80068f4:	f240 3262 	movw	r2, #866	@ 0x362
 80068f8:	4911      	ldr	r1, [pc, #68]	@ (8006940 <pbuf_cat+0xa4>)
 80068fa:	4810      	ldr	r0, [pc, #64]	@ (800693c <pbuf_cat+0xa0>)
 80068fc:	f008 fd86 	bl	800f40c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d006      	beq.n	8006916 <pbuf_cat+0x7a>
 8006908:	4b0a      	ldr	r3, [pc, #40]	@ (8006934 <pbuf_cat+0x98>)
 800690a:	f240 3263 	movw	r2, #867	@ 0x363
 800690e:	490d      	ldr	r1, [pc, #52]	@ (8006944 <pbuf_cat+0xa8>)
 8006910:	480a      	ldr	r0, [pc, #40]	@ (800693c <pbuf_cat+0xa0>)
 8006912:	f008 fd7b 	bl	800f40c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	891a      	ldrh	r2, [r3, #8]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	891b      	ldrh	r3, [r3, #8]
 800691e:	4413      	add	r3, r2
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	08010804 	.word	0x08010804
 8006938:	080109f8 	.word	0x080109f8
 800693c:	08010864 	.word	0x08010864
 8006940:	08010a30 	.word	0x08010a30
 8006944:	08010a60 	.word	0x08010a60

08006948 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ffa1 	bl	800689c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800695a:	6838      	ldr	r0, [r7, #0]
 800695c:	f7ff ff7c 	bl	8006858 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <pbuf_copy+0x2a>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <pbuf_copy+0x2a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	891a      	ldrh	r2, [r3, #8]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	891b      	ldrh	r3, [r3, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d209      	bcs.n	80069a6 <pbuf_copy+0x3e>
 8006992:	4b57      	ldr	r3, [pc, #348]	@ (8006af0 <pbuf_copy+0x188>)
 8006994:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006998:	4956      	ldr	r1, [pc, #344]	@ (8006af4 <pbuf_copy+0x18c>)
 800699a:	4857      	ldr	r0, [pc, #348]	@ (8006af8 <pbuf_copy+0x190>)
 800699c:	f008 fd36 	bl	800f40c <iprintf>
 80069a0:	f06f 030f 	mvn.w	r3, #15
 80069a4:	e09f      	b.n	8006ae6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	895b      	ldrh	r3, [r3, #10]
 80069aa:	461a      	mov	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	895b      	ldrh	r3, [r3, #10]
 80069b4:	4619      	mov	r1, r3
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1acb      	subs	r3, r1, r3
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d306      	bcc.n	80069cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	895b      	ldrh	r3, [r3, #10]
 80069c2:	461a      	mov	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	e005      	b.n	80069d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	895b      	ldrh	r3, [r3, #10]
 80069d0:	461a      	mov	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	18d0      	adds	r0, r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4413      	add	r3, r2
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4619      	mov	r1, r3
 80069ec:	f008 fde9 	bl	800f5c2 <memcpy>
    offset_to += len;
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	895b      	ldrh	r3, [r3, #10]
 8006a04:	461a      	mov	r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d906      	bls.n	8006a1a <pbuf_copy+0xb2>
 8006a0c:	4b38      	ldr	r3, [pc, #224]	@ (8006af0 <pbuf_copy+0x188>)
 8006a0e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006a12:	493a      	ldr	r1, [pc, #232]	@ (8006afc <pbuf_copy+0x194>)
 8006a14:	4838      	ldr	r0, [pc, #224]	@ (8006af8 <pbuf_copy+0x190>)
 8006a16:	f008 fcf9 	bl	800f40c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	895b      	ldrh	r3, [r3, #10]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d906      	bls.n	8006a34 <pbuf_copy+0xcc>
 8006a26:	4b32      	ldr	r3, [pc, #200]	@ (8006af0 <pbuf_copy+0x188>)
 8006a28:	f240 32da 	movw	r2, #986	@ 0x3da
 8006a2c:	4934      	ldr	r1, [pc, #208]	@ (8006b00 <pbuf_copy+0x198>)
 8006a2e:	4832      	ldr	r0, [pc, #200]	@ (8006af8 <pbuf_copy+0x190>)
 8006a30:	f008 fcec 	bl	800f40c <iprintf>
    if (offset_from >= p_from->len) {
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	895b      	ldrh	r3, [r3, #10]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d304      	bcc.n	8006a4a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	895b      	ldrh	r3, [r3, #10]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d114      	bne.n	8006a80 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10c      	bne.n	8006a80 <pbuf_copy+0x118>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <pbuf_copy+0x118>
 8006a6c:	4b20      	ldr	r3, [pc, #128]	@ (8006af0 <pbuf_copy+0x188>)
 8006a6e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8006a72:	4924      	ldr	r1, [pc, #144]	@ (8006b04 <pbuf_copy+0x19c>)
 8006a74:	4820      	ldr	r0, [pc, #128]	@ (8006af8 <pbuf_copy+0x190>)
 8006a76:	f008 fcc9 	bl	800f40c <iprintf>
 8006a7a:	f06f 030f 	mvn.w	r3, #15
 8006a7e:	e032      	b.n	8006ae6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d013      	beq.n	8006aae <pbuf_copy+0x146>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	895a      	ldrh	r2, [r3, #10]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	891b      	ldrh	r3, [r3, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d10d      	bne.n	8006aae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <pbuf_copy+0x146>
 8006a9a:	4b15      	ldr	r3, [pc, #84]	@ (8006af0 <pbuf_copy+0x188>)
 8006a9c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006aa0:	4919      	ldr	r1, [pc, #100]	@ (8006b08 <pbuf_copy+0x1a0>)
 8006aa2:	4815      	ldr	r0, [pc, #84]	@ (8006af8 <pbuf_copy+0x190>)
 8006aa4:	f008 fcb2 	bl	800f40c <iprintf>
 8006aa8:	f06f 0305 	mvn.w	r3, #5
 8006aac:	e01b      	b.n	8006ae6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d013      	beq.n	8006adc <pbuf_copy+0x174>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	895a      	ldrh	r2, [r3, #10]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	891b      	ldrh	r3, [r3, #8]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d10d      	bne.n	8006adc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d009      	beq.n	8006adc <pbuf_copy+0x174>
 8006ac8:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <pbuf_copy+0x188>)
 8006aca:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006ace:	490e      	ldr	r1, [pc, #56]	@ (8006b08 <pbuf_copy+0x1a0>)
 8006ad0:	4809      	ldr	r0, [pc, #36]	@ (8006af8 <pbuf_copy+0x190>)
 8006ad2:	f008 fc9b 	bl	800f40c <iprintf>
 8006ad6:	f06f 0305 	mvn.w	r3, #5
 8006ada:	e004      	b.n	8006ae6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f47f af61 	bne.w	80069a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	08010804 	.word	0x08010804
 8006af4:	08010aac 	.word	0x08010aac
 8006af8:	08010864 	.word	0x08010864
 8006afc:	08010adc 	.word	0x08010adc
 8006b00:	08010af4 	.word	0x08010af4
 8006b04:	08010b10 	.word	0x08010b10
 8006b08:	08010b20 	.word	0x08010b20

08006b0c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4611      	mov	r1, r2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	80fb      	strh	r3, [r7, #6]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <pbuf_copy_partial+0x36>
 8006b30:	4b2b      	ldr	r3, [pc, #172]	@ (8006be0 <pbuf_copy_partial+0xd4>)
 8006b32:	f240 420a 	movw	r2, #1034	@ 0x40a
 8006b36:	492b      	ldr	r1, [pc, #172]	@ (8006be4 <pbuf_copy_partial+0xd8>)
 8006b38:	482b      	ldr	r0, [pc, #172]	@ (8006be8 <pbuf_copy_partial+0xdc>)
 8006b3a:	f008 fc67 	bl	800f40c <iprintf>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e04a      	b.n	8006bd8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <pbuf_copy_partial+0x4e>
 8006b48:	4b25      	ldr	r3, [pc, #148]	@ (8006be0 <pbuf_copy_partial+0xd4>)
 8006b4a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8006b4e:	4927      	ldr	r1, [pc, #156]	@ (8006bec <pbuf_copy_partial+0xe0>)
 8006b50:	4825      	ldr	r0, [pc, #148]	@ (8006be8 <pbuf_copy_partial+0xdc>)
 8006b52:	f008 fc5b 	bl	800f40c <iprintf>
 8006b56:	2300      	movs	r3, #0
 8006b58:	e03e      	b.n	8006bd8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	e034      	b.n	8006bca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006b60:	88bb      	ldrh	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <pbuf_copy_partial+0x70>
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	895b      	ldrh	r3, [r3, #10]
 8006b6a:	88ba      	ldrh	r2, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d305      	bcc.n	8006b7c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	895b      	ldrh	r3, [r3, #10]
 8006b74:	88ba      	ldrh	r2, [r7, #4]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	80bb      	strh	r3, [r7, #4]
 8006b7a:	e023      	b.n	8006bc4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	895a      	ldrh	r2, [r3, #10]
 8006b80:	88bb      	ldrh	r3, [r7, #4]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006b86:	8b3a      	ldrh	r2, [r7, #24]
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d901      	bls.n	8006b92 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b92:	8b7b      	ldrh	r3, [r7, #26]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	18d0      	adds	r0, r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	88bb      	ldrh	r3, [r7, #4]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	8b3a      	ldrh	r2, [r7, #24]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f008 fd0d 	bl	800f5c2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006ba8:	8afa      	ldrh	r2, [r7, #22]
 8006baa:	8b3b      	ldrh	r3, [r7, #24]
 8006bac:	4413      	add	r3, r2
 8006bae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006bb0:	8b7a      	ldrh	r2, [r7, #26]
 8006bb2:	8b3b      	ldrh	r3, [r7, #24]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006bb8:	88fa      	ldrh	r2, [r7, #6]
 8006bba:	8b3b      	ldrh	r3, [r7, #24]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <pbuf_copy_partial+0xca>
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1c4      	bne.n	8006b60 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006bd6:	8afb      	ldrh	r3, [r7, #22]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	08010804 	.word	0x08010804
 8006be4:	08010b4c 	.word	0x08010b4c
 8006be8:	08010864 	.word	0x08010864
 8006bec:	08010b6c 	.word	0x08010b6c

08006bf0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	603a      	str	r2, [r7, #0]
 8006bfa:	71fb      	strb	r3, [r7, #7]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	8919      	ldrh	r1, [r3, #8]
 8006c04:	88ba      	ldrh	r2, [r7, #4]
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff faa1 	bl	8006150 <pbuf_alloc>
 8006c0e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <pbuf_clone+0x2a>
    return NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e011      	b.n	8006c3e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff fea3 	bl	8006968 <pbuf_copy>
 8006c22:	4603      	mov	r3, r0
 8006c24:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006c26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d006      	beq.n	8006c3c <pbuf_clone+0x4c>
 8006c2e:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <pbuf_clone+0x58>)
 8006c30:	f240 5224 	movw	r2, #1316	@ 0x524
 8006c34:	4905      	ldr	r1, [pc, #20]	@ (8006c4c <pbuf_clone+0x5c>)
 8006c36:	4806      	ldr	r0, [pc, #24]	@ (8006c50 <pbuf_clone+0x60>)
 8006c38:	f008 fbe8 	bl	800f40c <iprintf>
  return q;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	08010804 	.word	0x08010804
 8006c4c:	08010c78 	.word	0x08010c78
 8006c50:	08010864 	.word	0x08010864

08006c54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006c58:	f008 fad8 	bl	800f20c <rand>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	4b01      	ldr	r3, [pc, #4]	@ (8006c74 <tcp_init+0x20>)
 8006c6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006c70:	bf00      	nop
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000020 	.word	0x20000020

08006c78 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7d1b      	ldrb	r3, [r3, #20]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d105      	bne.n	8006c94 <tcp_free+0x1c>
 8006c88:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <tcp_free+0x2c>)
 8006c8a:	22d4      	movs	r2, #212	@ 0xd4
 8006c8c:	4906      	ldr	r1, [pc, #24]	@ (8006ca8 <tcp_free+0x30>)
 8006c8e:	4807      	ldr	r0, [pc, #28]	@ (8006cac <tcp_free+0x34>)
 8006c90:	f008 fbbc 	bl	800f40c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	2001      	movs	r0, #1
 8006c98:	f7fe fec8 	bl	8005a2c <memp_free>
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	08010d04 	.word	0x08010d04
 8006ca8:	08010d34 	.word	0x08010d34
 8006cac:	08010d48 	.word	0x08010d48

08006cb0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7d1b      	ldrb	r3, [r3, #20]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d105      	bne.n	8006ccc <tcp_free_listen+0x1c>
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <tcp_free_listen+0x2c>)
 8006cc2:	22df      	movs	r2, #223	@ 0xdf
 8006cc4:	4906      	ldr	r1, [pc, #24]	@ (8006ce0 <tcp_free_listen+0x30>)
 8006cc6:	4807      	ldr	r0, [pc, #28]	@ (8006ce4 <tcp_free_listen+0x34>)
 8006cc8:	f008 fba0 	bl	800f40c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	2002      	movs	r0, #2
 8006cd0:	f7fe feac 	bl	8005a2c <memp_free>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	08010d04 	.word	0x08010d04
 8006ce0:	08010d70 	.word	0x08010d70
 8006ce4:	08010d48 	.word	0x08010d48

08006ce8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006cec:	f000 fea4 	bl	8007a38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006cf0:	4b07      	ldr	r3, [pc, #28]	@ (8006d10 <tcp_tmr+0x28>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <tcp_tmr+0x28>)
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <tcp_tmr+0x28>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006d08:	f000 fb54 	bl	80073b4 <tcp_slowtmr>
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	200087cd 	.word	0x200087cd

08006d14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <tcp_remove_listener+0x1c>
 8006d24:	4b0d      	ldr	r3, [pc, #52]	@ (8006d5c <tcp_remove_listener+0x48>)
 8006d26:	22ff      	movs	r2, #255	@ 0xff
 8006d28:	490d      	ldr	r1, [pc, #52]	@ (8006d60 <tcp_remove_listener+0x4c>)
 8006d2a:	480e      	ldr	r0, [pc, #56]	@ (8006d64 <tcp_remove_listener+0x50>)
 8006d2c:	f008 fb6e 	bl	800f40c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e00a      	b.n	8006d4c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d102      	bne.n	8006d46 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f1      	bne.n	8006d36 <tcp_remove_listener+0x22>
    }
  }
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	08010d04 	.word	0x08010d04
 8006d60:	08010d8c 	.word	0x08010d8c
 8006d64:	08010d48 	.word	0x08010d48

08006d68 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <tcp_listen_closed+0x1c>
 8006d76:	4b14      	ldr	r3, [pc, #80]	@ (8006dc8 <tcp_listen_closed+0x60>)
 8006d78:	f240 1211 	movw	r2, #273	@ 0x111
 8006d7c:	4913      	ldr	r1, [pc, #76]	@ (8006dcc <tcp_listen_closed+0x64>)
 8006d7e:	4814      	ldr	r0, [pc, #80]	@ (8006dd0 <tcp_listen_closed+0x68>)
 8006d80:	f008 fb44 	bl	800f40c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d006      	beq.n	8006d9a <tcp_listen_closed+0x32>
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc8 <tcp_listen_closed+0x60>)
 8006d8e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8006d92:	4910      	ldr	r1, [pc, #64]	@ (8006dd4 <tcp_listen_closed+0x6c>)
 8006d94:	480e      	ldr	r0, [pc, #56]	@ (8006dd0 <tcp_listen_closed+0x68>)
 8006d96:	f008 fb39 	bl	800f40c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e00b      	b.n	8006db8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006da0:	4a0d      	ldr	r2, [pc, #52]	@ (8006dd8 <tcp_listen_closed+0x70>)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff ffb1 	bl	8006d14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d9f0      	bls.n	8006da0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	08010d04 	.word	0x08010d04
 8006dcc:	08010db4 	.word	0x08010db4
 8006dd0:	08010d48 	.word	0x08010d48
 8006dd4:	08010dc0 	.word	0x08010dc0
 8006dd8:	08012ce4 	.word	0x08012ce4

08006ddc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ddc:	b5b0      	push	{r4, r5, r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af04      	add	r7, sp, #16
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <tcp_close_shutdown+0x20>
 8006dee:	4b63      	ldr	r3, [pc, #396]	@ (8006f7c <tcp_close_shutdown+0x1a0>)
 8006df0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006df4:	4962      	ldr	r1, [pc, #392]	@ (8006f80 <tcp_close_shutdown+0x1a4>)
 8006df6:	4863      	ldr	r0, [pc, #396]	@ (8006f84 <tcp_close_shutdown+0x1a8>)
 8006df8:	f008 fb08 	bl	800f40c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d066      	beq.n	8006ed0 <tcp_close_shutdown+0xf4>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7d1b      	ldrb	r3, [r3, #20]
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d003      	beq.n	8006e12 <tcp_close_shutdown+0x36>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7d1b      	ldrb	r3, [r3, #20]
 8006e0e:	2b07      	cmp	r3, #7
 8006e10:	d15e      	bne.n	8006ed0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d104      	bne.n	8006e24 <tcp_close_shutdown+0x48>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006e22:	d055      	beq.n	8006ed0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	8b5b      	ldrh	r3, [r3, #26]
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <tcp_close_shutdown+0x62>
 8006e30:	4b52      	ldr	r3, [pc, #328]	@ (8006f7c <tcp_close_shutdown+0x1a0>)
 8006e32:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8006e36:	4954      	ldr	r1, [pc, #336]	@ (8006f88 <tcp_close_shutdown+0x1ac>)
 8006e38:	4852      	ldr	r0, [pc, #328]	@ (8006f84 <tcp_close_shutdown+0x1a8>)
 8006e3a:	f008 fae7 	bl	800f40c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006e46:	687d      	ldr	r5, [r7, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	8ad2      	ldrh	r2, [r2, #22]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	8b09      	ldrh	r1, [r1, #24]
 8006e54:	9102      	str	r1, [sp, #8]
 8006e56:	9201      	str	r2, [sp, #4]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	4601      	mov	r1, r0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f004 fe8d 	bl	800bb80 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 f8c8 	bl	8007ffc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006e6c:	4b47      	ldr	r3, [pc, #284]	@ (8006f8c <tcp_close_shutdown+0x1b0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d105      	bne.n	8006e82 <tcp_close_shutdown+0xa6>
 8006e76:	4b45      	ldr	r3, [pc, #276]	@ (8006f8c <tcp_close_shutdown+0x1b0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a43      	ldr	r2, [pc, #268]	@ (8006f8c <tcp_close_shutdown+0x1b0>)
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	e013      	b.n	8006eaa <tcp_close_shutdown+0xce>
 8006e82:	4b42      	ldr	r3, [pc, #264]	@ (8006f8c <tcp_close_shutdown+0x1b0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	e00c      	b.n	8006ea4 <tcp_close_shutdown+0xc8>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d104      	bne.n	8006e9e <tcp_close_shutdown+0xc2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	60da      	str	r2, [r3, #12]
 8006e9c:	e005      	b.n	8006eaa <tcp_close_shutdown+0xce>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1ef      	bne.n	8006e8a <tcp_close_shutdown+0xae>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	60da      	str	r2, [r3, #12]
 8006eb0:	4b37      	ldr	r3, [pc, #220]	@ (8006f90 <tcp_close_shutdown+0x1b4>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006eb6:	4b37      	ldr	r3, [pc, #220]	@ (8006f94 <tcp_close_shutdown+0x1b8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d102      	bne.n	8006ec6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006ec0:	f003 fd5c 	bl	800a97c <tcp_trigger_input_pcb_close>
 8006ec4:	e002      	b.n	8006ecc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fed6 	bl	8006c78 <tcp_free>
      }
      return ERR_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e050      	b.n	8006f72 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7d1b      	ldrb	r3, [r3, #20]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d03b      	beq.n	8006f50 <tcp_close_shutdown+0x174>
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	dc44      	bgt.n	8006f66 <tcp_close_shutdown+0x18a>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <tcp_close_shutdown+0x10a>
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d02a      	beq.n	8006f3a <tcp_close_shutdown+0x15e>
 8006ee4:	e03f      	b.n	8006f66 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	8adb      	ldrh	r3, [r3, #22]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d021      	beq.n	8006f32 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006eee:	4b2a      	ldr	r3, [pc, #168]	@ (8006f98 <tcp_close_shutdown+0x1bc>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d105      	bne.n	8006f04 <tcp_close_shutdown+0x128>
 8006ef8:	4b27      	ldr	r3, [pc, #156]	@ (8006f98 <tcp_close_shutdown+0x1bc>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	4a26      	ldr	r2, [pc, #152]	@ (8006f98 <tcp_close_shutdown+0x1bc>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	e013      	b.n	8006f2c <tcp_close_shutdown+0x150>
 8006f04:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <tcp_close_shutdown+0x1bc>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	e00c      	b.n	8006f26 <tcp_close_shutdown+0x14a>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d104      	bne.n	8006f20 <tcp_close_shutdown+0x144>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	e005      	b.n	8006f2c <tcp_close_shutdown+0x150>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ef      	bne.n	8006f0c <tcp_close_shutdown+0x130>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fea0 	bl	8006c78 <tcp_free>
      break;
 8006f38:	e01a      	b.n	8006f70 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff ff14 	bl	8006d68 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4816      	ldr	r0, [pc, #88]	@ (8006f9c <tcp_close_shutdown+0x1c0>)
 8006f44:	f001 f8aa 	bl	800809c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff feb1 	bl	8006cb0 <tcp_free_listen>
      break;
 8006f4e:	e00f      	b.n	8006f70 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	480e      	ldr	r0, [pc, #56]	@ (8006f8c <tcp_close_shutdown+0x1b0>)
 8006f54:	f001 f8a2 	bl	800809c <tcp_pcb_remove>
 8006f58:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <tcp_close_shutdown+0x1b4>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fe8a 	bl	8006c78 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006f64:	e004      	b.n	8006f70 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f81a 	bl	8006fa0 <tcp_close_shutdown_fin>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	e000      	b.n	8006f72 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	08010d04 	.word	0x08010d04
 8006f80:	08010dd8 	.word	0x08010dd8
 8006f84:	08010d48 	.word	0x08010d48
 8006f88:	08010df8 	.word	0x08010df8
 8006f8c:	200087c4 	.word	0x200087c4
 8006f90:	200087cc 	.word	0x200087cc
 8006f94:	20008804 	.word	0x20008804
 8006f98:	200087bc 	.word	0x200087bc
 8006f9c:	200087c0 	.word	0x200087c0

08006fa0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <tcp_close_shutdown_fin+0x1c>
 8006fae:	4b2e      	ldr	r3, [pc, #184]	@ (8007068 <tcp_close_shutdown_fin+0xc8>)
 8006fb0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8006fb4:	492d      	ldr	r1, [pc, #180]	@ (800706c <tcp_close_shutdown_fin+0xcc>)
 8006fb6:	482e      	ldr	r0, [pc, #184]	@ (8007070 <tcp_close_shutdown_fin+0xd0>)
 8006fb8:	f008 fa28 	bl	800f40c <iprintf>

  switch (pcb->state) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7d1b      	ldrb	r3, [r3, #20]
 8006fc0:	2b07      	cmp	r3, #7
 8006fc2:	d020      	beq.n	8007006 <tcp_close_shutdown_fin+0x66>
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	dc2b      	bgt.n	8007020 <tcp_close_shutdown_fin+0x80>
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d002      	beq.n	8006fd2 <tcp_close_shutdown_fin+0x32>
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d00d      	beq.n	8006fec <tcp_close_shutdown_fin+0x4c>
 8006fd0:	e026      	b.n	8007020 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f003 fee2 	bl	800ad9c <tcp_send_fin>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11f      	bne.n	8007024 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2205      	movs	r2, #5
 8006fe8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006fea:	e01b      	b.n	8007024 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f003 fed5 	bl	800ad9c <tcp_send_fin>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d114      	bne.n	8007028 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2205      	movs	r2, #5
 8007002:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007004:	e010      	b.n	8007028 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f003 fec8 	bl	800ad9c <tcp_send_fin>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2209      	movs	r2, #9
 800701c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800701e:	e005      	b.n	800702c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	e01c      	b.n	800705e <tcp_close_shutdown_fin+0xbe>
      break;
 8007024:	bf00      	nop
 8007026:	e002      	b.n	800702e <tcp_close_shutdown_fin+0x8e>
      break;
 8007028:	bf00      	nop
 800702a:	e000      	b.n	800702e <tcp_close_shutdown_fin+0x8e>
      break;
 800702c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800702e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f003 ffee 	bl	800b018 <tcp_output>
 800703c:	e00d      	b.n	800705a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800703e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d108      	bne.n	800705a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	8b5b      	ldrh	r3, [r3, #26]
 800704c:	f043 0308 	orr.w	r3, r3, #8
 8007050:	b29a      	uxth	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	e001      	b.n	800705e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800705a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	08010d04 	.word	0x08010d04
 800706c:	08010db4 	.word	0x08010db4
 8007070:	08010d48 	.word	0x08010d48

08007074 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <tcp_close+0x22>
 8007082:	4b0f      	ldr	r3, [pc, #60]	@ (80070c0 <tcp_close+0x4c>)
 8007084:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007088:	490e      	ldr	r1, [pc, #56]	@ (80070c4 <tcp_close+0x50>)
 800708a:	480f      	ldr	r0, [pc, #60]	@ (80070c8 <tcp_close+0x54>)
 800708c:	f008 f9be 	bl	800f40c <iprintf>
 8007090:	f06f 030f 	mvn.w	r3, #15
 8007094:	e00f      	b.n	80070b6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7d1b      	ldrb	r3, [r3, #20]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d006      	beq.n	80070ac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8b5b      	ldrh	r3, [r3, #26]
 80070a2:	f043 0310 	orr.w	r3, r3, #16
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80070ac:	2101      	movs	r1, #1
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fe94 	bl	8006ddc <tcp_close_shutdown>
 80070b4:	4603      	mov	r3, r0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	08010d04 	.word	0x08010d04
 80070c4:	08010e14 	.word	0x08010e14
 80070c8:	08010d48 	.word	0x08010d48

080070cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08e      	sub	sp, #56	@ 0x38
 80070d0:	af04      	add	r7, sp, #16
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <tcp_abandon+0x20>
 80070dc:	4b52      	ldr	r3, [pc, #328]	@ (8007228 <tcp_abandon+0x15c>)
 80070de:	f240 223d 	movw	r2, #573	@ 0x23d
 80070e2:	4952      	ldr	r1, [pc, #328]	@ (800722c <tcp_abandon+0x160>)
 80070e4:	4852      	ldr	r0, [pc, #328]	@ (8007230 <tcp_abandon+0x164>)
 80070e6:	f008 f991 	bl	800f40c <iprintf>
 80070ea:	e099      	b.n	8007220 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	7d1b      	ldrb	r3, [r3, #20]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d106      	bne.n	8007102 <tcp_abandon+0x36>
 80070f4:	4b4c      	ldr	r3, [pc, #304]	@ (8007228 <tcp_abandon+0x15c>)
 80070f6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80070fa:	494e      	ldr	r1, [pc, #312]	@ (8007234 <tcp_abandon+0x168>)
 80070fc:	484c      	ldr	r0, [pc, #304]	@ (8007230 <tcp_abandon+0x164>)
 80070fe:	f008 f985 	bl	800f40c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7d1b      	ldrb	r3, [r3, #20]
 8007106:	2b0a      	cmp	r3, #10
 8007108:	d107      	bne.n	800711a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	484a      	ldr	r0, [pc, #296]	@ (8007238 <tcp_abandon+0x16c>)
 800710e:	f000 ffc5 	bl	800809c <tcp_pcb_remove>
    tcp_free(pcb);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fdb0 	bl	8006c78 <tcp_free>
 8007118:	e082      	b.n	8007220 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007126:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007134:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7d1b      	ldrb	r3, [r3, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d126      	bne.n	8007192 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8adb      	ldrh	r3, [r3, #22]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02e      	beq.n	80071aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800714c:	4b3b      	ldr	r3, [pc, #236]	@ (800723c <tcp_abandon+0x170>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d105      	bne.n	8007162 <tcp_abandon+0x96>
 8007156:	4b39      	ldr	r3, [pc, #228]	@ (800723c <tcp_abandon+0x170>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	4a37      	ldr	r2, [pc, #220]	@ (800723c <tcp_abandon+0x170>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e013      	b.n	800718a <tcp_abandon+0xbe>
 8007162:	4b36      	ldr	r3, [pc, #216]	@ (800723c <tcp_abandon+0x170>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	e00c      	b.n	8007184 <tcp_abandon+0xb8>
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d104      	bne.n	800717e <tcp_abandon+0xb2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	60da      	str	r2, [r3, #12]
 800717c:	e005      	b.n	800718a <tcp_abandon+0xbe>
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1ef      	bne.n	800716a <tcp_abandon+0x9e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e00b      	b.n	80071aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	8adb      	ldrh	r3, [r3, #22]
 800719a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	4828      	ldr	r0, [pc, #160]	@ (8007240 <tcp_abandon+0x174>)
 80071a0:	f000 ff7c 	bl	800809c <tcp_pcb_remove>
 80071a4:	4b27      	ldr	r3, [pc, #156]	@ (8007244 <tcp_abandon+0x178>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fd1e 	bl	8007bf8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fd15 	bl	8007bf8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d004      	beq.n	80071e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fd0c 	bl	8007bf8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00e      	beq.n	8007204 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	8b12      	ldrh	r2, [r2, #24]
 80071f0:	9202      	str	r2, [sp, #8]
 80071f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80071f4:	9201      	str	r2, [sp, #4]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	460b      	mov	r3, r1
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	69b9      	ldr	r1, [r7, #24]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f004 fcbe 	bl	800bb80 <tcp_rst>
    }
    last_state = pcb->state;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	7d1b      	ldrb	r3, [r3, #20]
 8007208:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fd34 	bl	8006c78 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <tcp_abandon+0x154>
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f06f 010c 	mvn.w	r1, #12
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	4798      	blx	r3
  }
}
 8007220:	3728      	adds	r7, #40	@ 0x28
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	08010d04 	.word	0x08010d04
 800722c:	08010e48 	.word	0x08010e48
 8007230:	08010d48 	.word	0x08010d48
 8007234:	08010e64 	.word	0x08010e64
 8007238:	200087c8 	.word	0x200087c8
 800723c:	200087bc 	.word	0x200087bc
 8007240:	200087c4 	.word	0x200087c4
 8007244:	200087cc 	.word	0x200087cc

08007248 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007250:	2101      	movs	r1, #1
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff ff3a 	bl	80070cc <tcp_abandon>
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <tcp_update_rcv_ann_wnd+0x1c>
 800726e:	4b25      	ldr	r3, [pc, #148]	@ (8007304 <tcp_update_rcv_ann_wnd+0xa4>)
 8007270:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007274:	4924      	ldr	r1, [pc, #144]	@ (8007308 <tcp_update_rcv_ann_wnd+0xa8>)
 8007276:	4825      	ldr	r0, [pc, #148]	@ (800730c <tcp_update_rcv_ann_wnd+0xac>)
 8007278:	f008 f8c8 	bl	800f40c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007284:	4413      	add	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007290:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007294:	bf28      	it	cs
 8007296:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800729a:	b292      	uxth	r2, r2
 800729c:	4413      	add	r3, r2
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	db08      	blt.n	80072b8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	e020      	b.n	80072fa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dd03      	ble.n	80072ce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80072cc:	e014      	b.n	80072f8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e0:	d306      	bcc.n	80072f0 <tcp_update_rcv_ann_wnd+0x90>
 80072e2:	4b08      	ldr	r3, [pc, #32]	@ (8007304 <tcp_update_rcv_ann_wnd+0xa4>)
 80072e4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80072e8:	4909      	ldr	r1, [pc, #36]	@ (8007310 <tcp_update_rcv_ann_wnd+0xb0>)
 80072ea:	4808      	ldr	r0, [pc, #32]	@ (800730c <tcp_update_rcv_ann_wnd+0xac>)
 80072ec:	f008 f88e 	bl	800f40c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80072f8:	2300      	movs	r3, #0
  }
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	08010d04 	.word	0x08010d04
 8007308:	08010f60 	.word	0x08010f60
 800730c:	08010d48 	.word	0x08010d48
 8007310:	08010f84 	.word	0x08010f84

08007314 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <tcp_recved+0x22>
 8007326:	4b1f      	ldr	r3, [pc, #124]	@ (80073a4 <tcp_recved+0x90>)
 8007328:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800732c:	491e      	ldr	r1, [pc, #120]	@ (80073a8 <tcp_recved+0x94>)
 800732e:	481f      	ldr	r0, [pc, #124]	@ (80073ac <tcp_recved+0x98>)
 8007330:	f008 f86c 	bl	800f40c <iprintf>
 8007334:	e032      	b.n	800739c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7d1b      	ldrb	r3, [r3, #20]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d106      	bne.n	800734c <tcp_recved+0x38>
 800733e:	4b19      	ldr	r3, [pc, #100]	@ (80073a4 <tcp_recved+0x90>)
 8007340:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007344:	491a      	ldr	r1, [pc, #104]	@ (80073b0 <tcp_recved+0x9c>)
 8007346:	4819      	ldr	r0, [pc, #100]	@ (80073ac <tcp_recved+0x98>)
 8007348:	f008 f860 	bl	800f40c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007350:	887b      	ldrh	r3, [r7, #2]
 8007352:	4413      	add	r3, r2
 8007354:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007356:	89fb      	ldrh	r3, [r7, #14]
 8007358:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800735c:	d804      	bhi.n	8007368 <tcp_recved+0x54>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007362:	89fa      	ldrh	r2, [r7, #14]
 8007364:	429a      	cmp	r2, r3
 8007366:	d204      	bcs.n	8007372 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800736e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007370:	e002      	b.n	8007378 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	89fa      	ldrh	r2, [r7, #14]
 8007376:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ff71 	bl	8007260 <tcp_update_rcv_ann_wnd>
 800737e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8007386:	d309      	bcc.n	800739c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8b5b      	ldrh	r3, [r3, #26]
 800738c:	f043 0302 	orr.w	r3, r3, #2
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f003 fe3e 	bl	800b018 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	08010d04 	.word	0x08010d04
 80073a8:	08010fa0 	.word	0x08010fa0
 80073ac:	08010d48 	.word	0x08010d48
 80073b0:	08010fb8 	.word	0x08010fb8

080073b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80073b4:	b5b0      	push	{r4, r5, r7, lr}
 80073b6:	b090      	sub	sp, #64	@ 0x40
 80073b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80073c0:	4b95      	ldr	r3, [pc, #596]	@ (8007618 <tcp_slowtmr+0x264>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	4a94      	ldr	r2, [pc, #592]	@ (8007618 <tcp_slowtmr+0x264>)
 80073c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80073ca:	4b94      	ldr	r3, [pc, #592]	@ (800761c <tcp_slowtmr+0x268>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	3301      	adds	r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	4b92      	ldr	r3, [pc, #584]	@ (800761c <tcp_slowtmr+0x268>)
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e000      	b.n	80073da <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80073d8:	bf00      	nop
  prev = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80073de:	4b90      	ldr	r3, [pc, #576]	@ (8007620 <tcp_slowtmr+0x26c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80073e4:	e29f      	b.n	8007926 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	7d1b      	ldrb	r3, [r3, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <tcp_slowtmr+0x48>
 80073ee:	4b8d      	ldr	r3, [pc, #564]	@ (8007624 <tcp_slowtmr+0x270>)
 80073f0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80073f4:	498c      	ldr	r1, [pc, #560]	@ (8007628 <tcp_slowtmr+0x274>)
 80073f6:	488d      	ldr	r0, [pc, #564]	@ (800762c <tcp_slowtmr+0x278>)
 80073f8:	f008 f808 	bl	800f40c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80073fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fe:	7d1b      	ldrb	r3, [r3, #20]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d106      	bne.n	8007412 <tcp_slowtmr+0x5e>
 8007404:	4b87      	ldr	r3, [pc, #540]	@ (8007624 <tcp_slowtmr+0x270>)
 8007406:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800740a:	4989      	ldr	r1, [pc, #548]	@ (8007630 <tcp_slowtmr+0x27c>)
 800740c:	4887      	ldr	r0, [pc, #540]	@ (800762c <tcp_slowtmr+0x278>)
 800740e:	f007 fffd 	bl	800f40c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	7d1b      	ldrb	r3, [r3, #20]
 8007416:	2b0a      	cmp	r3, #10
 8007418:	d106      	bne.n	8007428 <tcp_slowtmr+0x74>
 800741a:	4b82      	ldr	r3, [pc, #520]	@ (8007624 <tcp_slowtmr+0x270>)
 800741c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007420:	4984      	ldr	r1, [pc, #528]	@ (8007634 <tcp_slowtmr+0x280>)
 8007422:	4882      	ldr	r0, [pc, #520]	@ (800762c <tcp_slowtmr+0x278>)
 8007424:	f007 fff2 	bl	800f40c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	7f9a      	ldrb	r2, [r3, #30]
 800742c:	4b7b      	ldr	r3, [pc, #492]	@ (800761c <tcp_slowtmr+0x268>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d105      	bne.n	8007440 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800743e:	e272      	b.n	8007926 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8007440:	4b76      	ldr	r3, [pc, #472]	@ (800761c <tcp_slowtmr+0x268>)
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007446:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007456:	7d1b      	ldrb	r3, [r3, #20]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d10a      	bne.n	8007472 <tcp_slowtmr+0xbe>
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007462:	2b05      	cmp	r3, #5
 8007464:	d905      	bls.n	8007472 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007466:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800746a:	3301      	adds	r3, #1
 800746c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007470:	e11e      	b.n	80076b0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007474:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007478:	2b0b      	cmp	r3, #11
 800747a:	d905      	bls.n	8007488 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800747c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007480:	3301      	adds	r3, #1
 8007482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007486:	e113      	b.n	80076b0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800748e:	2b00      	cmp	r3, #0
 8007490:	d075      	beq.n	800757e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007496:	2b00      	cmp	r3, #0
 8007498:	d006      	beq.n	80074a8 <tcp_slowtmr+0xf4>
 800749a:	4b62      	ldr	r3, [pc, #392]	@ (8007624 <tcp_slowtmr+0x270>)
 800749c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80074a0:	4965      	ldr	r1, [pc, #404]	@ (8007638 <tcp_slowtmr+0x284>)
 80074a2:	4862      	ldr	r0, [pc, #392]	@ (800762c <tcp_slowtmr+0x278>)
 80074a4:	f007 ffb2 	bl	800f40c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d106      	bne.n	80074be <tcp_slowtmr+0x10a>
 80074b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007624 <tcp_slowtmr+0x270>)
 80074b2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80074b6:	4961      	ldr	r1, [pc, #388]	@ (800763c <tcp_slowtmr+0x288>)
 80074b8:	485c      	ldr	r0, [pc, #368]	@ (800762c <tcp_slowtmr+0x278>)
 80074ba:	f007 ffa7 	bl	800f40c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80074c4:	2b0b      	cmp	r3, #11
 80074c6:	d905      	bls.n	80074d4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80074c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074cc:	3301      	adds	r3, #1
 80074ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80074d2:	e0ed      	b.n	80076b0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80074d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80074da:	3b01      	subs	r3, #1
 80074dc:	4a58      	ldr	r2, [pc, #352]	@ (8007640 <tcp_slowtmr+0x28c>)
 80074de:	5cd3      	ldrb	r3, [r2, r3]
 80074e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074e8:	7c7a      	ldrb	r2, [r7, #17]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d907      	bls.n	80074fe <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80074ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074f4:	3301      	adds	r3, #1
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007504:	7c7a      	ldrb	r2, [r7, #17]
 8007506:	429a      	cmp	r2, r3
 8007508:	f200 80d2 	bhi.w	80076b0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800750c:	2301      	movs	r3, #1
 800750e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800751a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800751c:	f004 fc24 	bl	800bd68 <tcp_zero_window_probe>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d014      	beq.n	8007550 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007526:	2300      	movs	r3, #0
 8007528:	623b      	str	r3, [r7, #32]
 800752a:	e011      	b.n	8007550 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007532:	4619      	mov	r1, r3
 8007534:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007536:	f003 fae9 	bl	800ab0c <tcp_split_unsent_seg>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007540:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007542:	f003 fd69 	bl	800b018 <tcp_output>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80ac 	beq.w	80076b0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007566:	2b06      	cmp	r3, #6
 8007568:	f200 80a2 	bhi.w	80076b0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007572:	3301      	adds	r3, #1
 8007574:	b2da      	uxtb	r2, r3
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800757c:	e098      	b.n	80076b0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	db0f      	blt.n	80075a8 <tcp_slowtmr+0x1f4>
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800758e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007592:	4293      	cmp	r3, r2
 8007594:	d008      	beq.n	80075a8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007598:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800759c:	b29b      	uxth	r3, r3
 800759e:	3301      	adds	r3, #1
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	b21a      	sxth	r2, r3
 80075a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80075ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80075b4:	429a      	cmp	r2, r3
 80075b6:	db7b      	blt.n	80076b0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80075b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075ba:	f004 f821 	bl	800b600 <tcp_rexmit_rto_prepare>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <tcp_slowtmr+0x220>
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d171      	bne.n	80076b0 <tcp_slowtmr+0x2fc>
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d06d      	beq.n	80076b0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80075d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d6:	7d1b      	ldrb	r3, [r3, #20]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d03a      	beq.n	8007652 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80075dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075e2:	2b0c      	cmp	r3, #12
 80075e4:	bf28      	it	cs
 80075e6:	230c      	movcs	r3, #12
 80075e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80075ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80075f0:	10db      	asrs	r3, r3, #3
 80075f2:	b21b      	sxth	r3, r3
 80075f4:	461a      	mov	r2, r3
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80075fc:	4413      	add	r3, r2
 80075fe:	7efa      	ldrb	r2, [r7, #27]
 8007600:	4910      	ldr	r1, [pc, #64]	@ (8007644 <tcp_slowtmr+0x290>)
 8007602:	5c8a      	ldrb	r2, [r1, r2]
 8007604:	4093      	lsls	r3, r2
 8007606:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800760e:	4293      	cmp	r3, r2
 8007610:	dc1a      	bgt.n	8007648 <tcp_slowtmr+0x294>
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	b21a      	sxth	r2, r3
 8007616:	e019      	b.n	800764c <tcp_slowtmr+0x298>
 8007618:	200087b8 	.word	0x200087b8
 800761c:	200087ce 	.word	0x200087ce
 8007620:	200087c4 	.word	0x200087c4
 8007624:	08010d04 	.word	0x08010d04
 8007628:	08011048 	.word	0x08011048
 800762c:	08010d48 	.word	0x08010d48
 8007630:	08011074 	.word	0x08011074
 8007634:	080110a0 	.word	0x080110a0
 8007638:	080110d0 	.word	0x080110d0
 800763c:	08011104 	.word	0x08011104
 8007640:	08012cdc 	.word	0x08012cdc
 8007644:	08012ccc 	.word	0x08012ccc
 8007648:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800764c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007654:	2200      	movs	r2, #0
 8007656:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800765e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007660:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007664:	4293      	cmp	r3, r2
 8007666:	bf28      	it	cs
 8007668:	4613      	movcs	r3, r2
 800766a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800766c:	8a7b      	ldrh	r3, [r7, #18]
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007674:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007680:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	b29b      	uxth	r3, r3
 8007686:	429a      	cmp	r2, r3
 8007688:	d206      	bcs.n	8007698 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800768a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007694:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800769c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80076aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076ac:	f004 f818 	bl	800b6e0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80076b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b2:	7d1b      	ldrb	r3, [r3, #20]
 80076b4:	2b06      	cmp	r3, #6
 80076b6:	d111      	bne.n	80076dc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	8b5b      	ldrh	r3, [r3, #26]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076c4:	4b9d      	ldr	r3, [pc, #628]	@ (800793c <tcp_slowtmr+0x588>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b28      	cmp	r3, #40	@ 0x28
 80076d0:	d904      	bls.n	80076dc <tcp_slowtmr+0x328>
          ++pcb_remove;
 80076d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076d6:	3301      	adds	r3, #1
 80076d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076de:	7a5b      	ldrb	r3, [r3, #9]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d04c      	beq.n	8007782 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80076e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d003      	beq.n	80076f8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80076f4:	2b07      	cmp	r3, #7
 80076f6:	d144      	bne.n	8007782 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076f8:	4b90      	ldr	r3, [pc, #576]	@ (800793c <tcp_slowtmr+0x588>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007708:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800770c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8007710:	498b      	ldr	r1, [pc, #556]	@ (8007940 <tcp_slowtmr+0x58c>)
 8007712:	fba1 1303 	umull	r1, r3, r1, r3
 8007716:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007718:	429a      	cmp	r2, r3
 800771a:	d90a      	bls.n	8007732 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800771c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007720:	3301      	adds	r3, #1
 8007722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007726:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800772a:	3301      	adds	r3, #1
 800772c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007730:	e027      	b.n	8007782 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007732:	4b82      	ldr	r3, [pc, #520]	@ (800793c <tcp_slowtmr+0x588>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007744:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007748:	4618      	mov	r0, r3
 800774a:	4b7e      	ldr	r3, [pc, #504]	@ (8007944 <tcp_slowtmr+0x590>)
 800774c:	fb00 f303 	mul.w	r3, r0, r3
 8007750:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007752:	497b      	ldr	r1, [pc, #492]	@ (8007940 <tcp_slowtmr+0x58c>)
 8007754:	fba1 1303 	umull	r1, r3, r1, r3
 8007758:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800775a:	429a      	cmp	r2, r3
 800775c:	d911      	bls.n	8007782 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800775e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007760:	f004 fac2 	bl	800bce8 <tcp_keepalive>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800776a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800776e:	2b00      	cmp	r3, #0
 8007770:	d107      	bne.n	8007782 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8007772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007774:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007778:	3301      	adds	r3, #1
 800777a:	b2da      	uxtb	r2, r3
 800777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800778a:	4b6c      	ldr	r3, [pc, #432]	@ (800793c <tcp_slowtmr+0x588>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	1ad2      	subs	r2, r2, r3
 8007794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007796:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800779a:	4619      	mov	r1, r3
 800779c:	460b      	mov	r3, r1
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	440b      	add	r3, r1
 80077a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d302      	bcc.n	80077ae <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80077a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077aa:	f000 fddb 	bl	8008364 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80077ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b0:	7d1b      	ldrb	r3, [r3, #20]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d10b      	bne.n	80077ce <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077b6:	4b61      	ldr	r3, [pc, #388]	@ (800793c <tcp_slowtmr+0x588>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b28      	cmp	r3, #40	@ 0x28
 80077c2:	d904      	bls.n	80077ce <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80077c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077c8:	3301      	adds	r3, #1
 80077ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	7d1b      	ldrb	r3, [r3, #20]
 80077d2:	2b09      	cmp	r3, #9
 80077d4:	d10b      	bne.n	80077ee <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077d6:	4b59      	ldr	r3, [pc, #356]	@ (800793c <tcp_slowtmr+0x588>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2bf0      	cmp	r3, #240	@ 0xf0
 80077e2:	d904      	bls.n	80077ee <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80077e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e8:	3301      	adds	r3, #1
 80077ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80077ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d060      	beq.n	80078b8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80077fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007800:	f000 fbfc 	bl	8007ffc <tcp_pcb_purge>
      if (prev != NULL) {
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	2b00      	cmp	r3, #0
 8007808:	d010      	beq.n	800782c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800780a:	4b4f      	ldr	r3, [pc, #316]	@ (8007948 <tcp_slowtmr+0x594>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007810:	429a      	cmp	r2, r3
 8007812:	d106      	bne.n	8007822 <tcp_slowtmr+0x46e>
 8007814:	4b4d      	ldr	r3, [pc, #308]	@ (800794c <tcp_slowtmr+0x598>)
 8007816:	f240 526d 	movw	r2, #1389	@ 0x56d
 800781a:	494d      	ldr	r1, [pc, #308]	@ (8007950 <tcp_slowtmr+0x59c>)
 800781c:	484d      	ldr	r0, [pc, #308]	@ (8007954 <tcp_slowtmr+0x5a0>)
 800781e:	f007 fdf5 	bl	800f40c <iprintf>
        prev->next = pcb->next;
 8007822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	60da      	str	r2, [r3, #12]
 800782a:	e00f      	b.n	800784c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800782c:	4b46      	ldr	r3, [pc, #280]	@ (8007948 <tcp_slowtmr+0x594>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007832:	429a      	cmp	r2, r3
 8007834:	d006      	beq.n	8007844 <tcp_slowtmr+0x490>
 8007836:	4b45      	ldr	r3, [pc, #276]	@ (800794c <tcp_slowtmr+0x598>)
 8007838:	f240 5271 	movw	r2, #1393	@ 0x571
 800783c:	4946      	ldr	r1, [pc, #280]	@ (8007958 <tcp_slowtmr+0x5a4>)
 800783e:	4845      	ldr	r0, [pc, #276]	@ (8007954 <tcp_slowtmr+0x5a0>)
 8007840:	f007 fde4 	bl	800f40c <iprintf>
        tcp_active_pcbs = pcb->next;
 8007844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	4a3f      	ldr	r2, [pc, #252]	@ (8007948 <tcp_slowtmr+0x594>)
 800784a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800784c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007850:	2b00      	cmp	r3, #0
 8007852:	d013      	beq.n	800787c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007856:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800785c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800785e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007860:	3304      	adds	r3, #4
 8007862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007864:	8ad2      	ldrh	r2, [r2, #22]
 8007866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007868:	8b09      	ldrh	r1, [r1, #24]
 800786a:	9102      	str	r1, [sp, #8]
 800786c:	9201      	str	r2, [sp, #4]
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	462b      	mov	r3, r5
 8007872:	4622      	mov	r2, r4
 8007874:	4601      	mov	r1, r0
 8007876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007878:	f004 f982 	bl	800bb80 <tcp_rst>
      err_arg = pcb->callback_arg;
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	7d1b      	ldrb	r3, [r3, #20]
 8007886:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800788c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007892:	6838      	ldr	r0, [r7, #0]
 8007894:	f7ff f9f0 	bl	8006c78 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007898:	4b30      	ldr	r3, [pc, #192]	@ (800795c <tcp_slowtmr+0x5a8>)
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <tcp_slowtmr+0x4fa>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f06f 010c 	mvn.w	r1, #12
 80078aa:	68b8      	ldr	r0, [r7, #8]
 80078ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80078ae:	4b2b      	ldr	r3, [pc, #172]	@ (800795c <tcp_slowtmr+0x5a8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d037      	beq.n	8007926 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80078b6:	e590      	b.n	80073da <tcp_slowtmr+0x26>
      prev = pcb;
 80078b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80078bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	7f1b      	ldrb	r3, [r3, #28]
 80078c6:	3301      	adds	r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	7f1a      	ldrb	r2, [r3, #28]
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	7f5b      	ldrb	r3, [r3, #29]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d325      	bcc.n	8007926 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80078da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80078e0:	4b1e      	ldr	r3, [pc, #120]	@ (800795c <tcp_slowtmr+0x5a8>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <tcp_slowtmr+0x554>
 80078f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078f8:	6912      	ldr	r2, [r2, #16]
 80078fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007906:	e002      	b.n	800790e <tcp_slowtmr+0x55a>
 8007908:	2300      	movs	r3, #0
 800790a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800790e:	4b13      	ldr	r3, [pc, #76]	@ (800795c <tcp_slowtmr+0x5a8>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	f47f ad60 	bne.w	80073d8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007918:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800791c:	2b00      	cmp	r3, #0
 800791e:	d102      	bne.n	8007926 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8007920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007922:	f003 fb79 	bl	800b018 <tcp_output>
  while (pcb != NULL) {
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	f47f ad5c 	bne.w	80073e6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007932:	4b0b      	ldr	r3, [pc, #44]	@ (8007960 <tcp_slowtmr+0x5ac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007938:	e067      	b.n	8007a0a <tcp_slowtmr+0x656>
 800793a:	bf00      	nop
 800793c:	200087b8 	.word	0x200087b8
 8007940:	10624dd3 	.word	0x10624dd3
 8007944:	000124f8 	.word	0x000124f8
 8007948:	200087c4 	.word	0x200087c4
 800794c:	08010d04 	.word	0x08010d04
 8007950:	0801113c 	.word	0x0801113c
 8007954:	08010d48 	.word	0x08010d48
 8007958:	08011168 	.word	0x08011168
 800795c:	200087cc 	.word	0x200087cc
 8007960:	200087c8 	.word	0x200087c8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007966:	7d1b      	ldrb	r3, [r3, #20]
 8007968:	2b0a      	cmp	r3, #10
 800796a:	d006      	beq.n	800797a <tcp_slowtmr+0x5c6>
 800796c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a1c <tcp_slowtmr+0x668>)
 800796e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007972:	492b      	ldr	r1, [pc, #172]	@ (8007a20 <tcp_slowtmr+0x66c>)
 8007974:	482b      	ldr	r0, [pc, #172]	@ (8007a24 <tcp_slowtmr+0x670>)
 8007976:	f007 fd49 	bl	800f40c <iprintf>
    pcb_remove = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007980:	4b29      	ldr	r3, [pc, #164]	@ (8007a28 <tcp_slowtmr+0x674>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2bf0      	cmp	r3, #240	@ 0xf0
 800798c:	d904      	bls.n	8007998 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800798e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007992:	3301      	adds	r3, #1
 8007994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800799c:	2b00      	cmp	r3, #0
 800799e:	d02f      	beq.n	8007a00 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80079a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079a2:	f000 fb2b 	bl	8007ffc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d010      	beq.n	80079ce <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80079ac:	4b1f      	ldr	r3, [pc, #124]	@ (8007a2c <tcp_slowtmr+0x678>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d106      	bne.n	80079c4 <tcp_slowtmr+0x610>
 80079b6:	4b19      	ldr	r3, [pc, #100]	@ (8007a1c <tcp_slowtmr+0x668>)
 80079b8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80079bc:	491c      	ldr	r1, [pc, #112]	@ (8007a30 <tcp_slowtmr+0x67c>)
 80079be:	4819      	ldr	r0, [pc, #100]	@ (8007a24 <tcp_slowtmr+0x670>)
 80079c0:	f007 fd24 	bl	800f40c <iprintf>
        prev->next = pcb->next;
 80079c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	60da      	str	r2, [r3, #12]
 80079cc:	e00f      	b.n	80079ee <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80079ce:	4b17      	ldr	r3, [pc, #92]	@ (8007a2c <tcp_slowtmr+0x678>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d006      	beq.n	80079e6 <tcp_slowtmr+0x632>
 80079d8:	4b10      	ldr	r3, [pc, #64]	@ (8007a1c <tcp_slowtmr+0x668>)
 80079da:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80079de:	4915      	ldr	r1, [pc, #84]	@ (8007a34 <tcp_slowtmr+0x680>)
 80079e0:	4810      	ldr	r0, [pc, #64]	@ (8007a24 <tcp_slowtmr+0x670>)
 80079e2:	f007 fd13 	bl	800f40c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80079e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	4a10      	ldr	r2, [pc, #64]	@ (8007a2c <tcp_slowtmr+0x678>)
 80079ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80079ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80079f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80079f8:	69f8      	ldr	r0, [r7, #28]
 80079fa:	f7ff f93d 	bl	8006c78 <tcp_free>
 80079fe:	e004      	b.n	8007a0a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1a9      	bne.n	8007964 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	3730      	adds	r7, #48	@ 0x30
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bdb0      	pop	{r4, r5, r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	08010d04 	.word	0x08010d04
 8007a20:	08011194 	.word	0x08011194
 8007a24:	08010d48 	.word	0x08010d48
 8007a28:	200087b8 	.word	0x200087b8
 8007a2c:	200087c8 	.word	0x200087c8
 8007a30:	080111c4 	.word	0x080111c4
 8007a34:	080111ec 	.word	0x080111ec

08007a38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8007af4 <tcp_fasttmr+0xbc>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4b2b      	ldr	r3, [pc, #172]	@ (8007af4 <tcp_fasttmr+0xbc>)
 8007a48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8007af8 <tcp_fasttmr+0xc0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007a50:	e048      	b.n	8007ae4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7f9a      	ldrb	r2, [r3, #30]
 8007a56:	4b27      	ldr	r3, [pc, #156]	@ (8007af4 <tcp_fasttmr+0xbc>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d03f      	beq.n	8007ade <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007a5e:	4b25      	ldr	r3, [pc, #148]	@ (8007af4 <tcp_fasttmr+0xbc>)
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8b5b      	ldrh	r3, [r3, #26]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d010      	beq.n	8007a94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8b5b      	ldrh	r3, [r3, #26]
 8007a76:	f043 0302 	orr.w	r3, r3, #2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f003 fac9 	bl	800b018 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8b5b      	ldrh	r3, [r3, #26]
 8007a8a:	f023 0303 	bic.w	r3, r3, #3
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8b5b      	ldrh	r3, [r3, #26]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8b5b      	ldrh	r3, [r3, #26]
 8007aa4:	f023 0308 	bic.w	r3, r3, #8
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff fa76 	bl	8006fa0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8007afc <tcp_fasttmr+0xc4>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f819 	bl	8007b00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007ace:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <tcp_fasttmr+0xc4>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d000      	beq.n	8007ad8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007ad6:	e7b8      	b.n	8007a4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	607b      	str	r3, [r7, #4]
 8007adc:	e002      	b.n	8007ae4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1b3      	bne.n	8007a52 <tcp_fasttmr+0x1a>
    }
  }
}
 8007aea:	bf00      	nop
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	200087ce 	.word	0x200087ce
 8007af8:	200087c4 	.word	0x200087c4
 8007afc:	200087cc 	.word	0x200087cc

08007b00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <tcp_process_refused_data+0x22>
 8007b0e:	4b37      	ldr	r3, [pc, #220]	@ (8007bec <tcp_process_refused_data+0xec>)
 8007b10:	f240 6209 	movw	r2, #1545	@ 0x609
 8007b14:	4936      	ldr	r1, [pc, #216]	@ (8007bf0 <tcp_process_refused_data+0xf0>)
 8007b16:	4837      	ldr	r0, [pc, #220]	@ (8007bf4 <tcp_process_refused_data+0xf4>)
 8007b18:	f007 fc78 	bl	800f40c <iprintf>
 8007b1c:	f06f 030f 	mvn.w	r3, #15
 8007b20:	e060      	b.n	8007be4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b26:	7b5b      	ldrb	r3, [r3, #13]
 8007b28:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b2e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <tcp_process_refused_data+0x58>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6918      	ldr	r0, [r3, #16]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	47a0      	blx	r4
 8007b52:	4603      	mov	r3, r0
 8007b54:	73fb      	strb	r3, [r7, #15]
 8007b56:	e007      	b.n	8007b68 <tcp_process_refused_data+0x68>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	2000      	movs	r0, #0
 8007b60:	f000 f8a4 	bl	8007cac <tcp_recv_null>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d12a      	bne.n	8007bc6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d033      	beq.n	8007be2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007b82:	d005      	beq.n	8007b90 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	3301      	adds	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <tcp_process_refused_data+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6918      	ldr	r0, [r3, #16]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	47a0      	blx	r4
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
 8007bb0:	e001      	b.n	8007bb6 <tcp_process_refused_data+0xb6>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bba:	f113 0f0d 	cmn.w	r3, #13
 8007bbe:	d110      	bne.n	8007be2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007bc0:	f06f 030c 	mvn.w	r3, #12
 8007bc4:	e00e      	b.n	8007be4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bca:	f113 0f0d 	cmn.w	r3, #13
 8007bce:	d102      	bne.n	8007bd6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007bd0:	f06f 030c 	mvn.w	r3, #12
 8007bd4:	e006      	b.n	8007be4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007bdc:	f06f 0304 	mvn.w	r3, #4
 8007be0:	e000      	b.n	8007be4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd90      	pop	{r4, r7, pc}
 8007bec:	08010d04 	.word	0x08010d04
 8007bf0:	08011214 	.word	0x08011214
 8007bf4:	08010d48 	.word	0x08010d48

08007bf8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007c00:	e007      	b.n	8007c12 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f80a 	bl	8007c22 <tcp_seg_free>
    seg = next;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f4      	bne.n	8007c02 <tcp_segs_free+0xa>
  }
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00c      	beq.n	8007c4a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fd6b 	bl	8006718 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	2003      	movs	r0, #3
 8007c46:	f7fd fef1 	bl	8005a2c <memp_free>
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <tcp_seg_copy+0x1c>
 8007c62:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca0 <tcp_seg_copy+0x4c>)
 8007c64:	f240 6282 	movw	r2, #1666	@ 0x682
 8007c68:	490e      	ldr	r1, [pc, #56]	@ (8007ca4 <tcp_seg_copy+0x50>)
 8007c6a:	480f      	ldr	r0, [pc, #60]	@ (8007ca8 <tcp_seg_copy+0x54>)
 8007c6c:	f007 fbce 	bl	800f40c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007c70:	2003      	movs	r0, #3
 8007c72:	f7fd fe6b 	bl	800594c <memp_malloc>
 8007c76:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <tcp_seg_copy+0x2e>
    return NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e00a      	b.n	8007c98 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007c82:	2210      	movs	r2, #16
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f007 fc9b 	bl	800f5c2 <memcpy>
  pbuf_ref(cseg->p);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fde1 	bl	8006858 <pbuf_ref>
  return cseg;
 8007c96:	68fb      	ldr	r3, [r7, #12]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	08010d04 	.word	0x08010d04
 8007ca4:	08011258 	.word	0x08011258
 8007ca8:	08010d48 	.word	0x08010d48

08007cac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <tcp_recv_null+0x28>
 8007cc0:	4b12      	ldr	r3, [pc, #72]	@ (8007d0c <tcp_recv_null+0x60>)
 8007cc2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8007cc6:	4912      	ldr	r1, [pc, #72]	@ (8007d10 <tcp_recv_null+0x64>)
 8007cc8:	4812      	ldr	r0, [pc, #72]	@ (8007d14 <tcp_recv_null+0x68>)
 8007cca:	f007 fb9f 	bl	800f40c <iprintf>
 8007cce:	f06f 030f 	mvn.w	r3, #15
 8007cd2:	e016      	b.n	8007d02 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	891b      	ldrh	r3, [r3, #8]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f7ff fb17 	bl	8007314 <tcp_recved>
    pbuf_free(p);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7fe fd16 	bl	8006718 <pbuf_free>
 8007cec:	e008      	b.n	8007d00 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007cf6:	68b8      	ldr	r0, [r7, #8]
 8007cf8:	f7ff f9bc 	bl	8007074 <tcp_close>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	e000      	b.n	8007d02 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08010d04 	.word	0x08010d04
 8007d10:	08011274 	.word	0x08011274
 8007d14:	08010d48 	.word	0x08010d48

08007d18 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	db01      	blt.n	8007d2e <tcp_kill_prio+0x16>
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	e000      	b.n	8007d30 <tcp_kill_prio+0x18>
 8007d2e:	237f      	movs	r3, #127	@ 0x7f
 8007d30:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d034      	beq.n	8007da2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d46:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <tcp_kill_prio+0x94>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	e01f      	b.n	8007d8e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	7d5b      	ldrb	r3, [r3, #21]
 8007d52:	7afa      	ldrb	r2, [r7, #11]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d80c      	bhi.n	8007d72 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007d5c:	7afa      	ldrb	r2, [r7, #11]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d112      	bne.n	8007d88 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007d62:	4b13      	ldr	r3, [pc, #76]	@ (8007db0 <tcp_kill_prio+0x98>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d80a      	bhi.n	8007d88 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007d72:	4b0f      	ldr	r3, [pc, #60]	@ (8007db0 <tcp_kill_prio+0x98>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	7d5b      	ldrb	r3, [r3, #21]
 8007d86:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1dc      	bne.n	8007d4e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007d9a:	6938      	ldr	r0, [r7, #16]
 8007d9c:	f7ff fa54 	bl	8007248 <tcp_abort>
 8007da0:	e000      	b.n	8007da4 <tcp_kill_prio+0x8c>
    return;
 8007da2:	bf00      	nop
  }
}
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200087c4 	.word	0x200087c4
 8007db0:	200087b8 	.word	0x200087b8

08007db4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d009      	beq.n	8007dd8 <tcp_kill_state+0x24>
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d006      	beq.n	8007dd8 <tcp_kill_state+0x24>
 8007dca:	4b1a      	ldr	r3, [pc, #104]	@ (8007e34 <tcp_kill_state+0x80>)
 8007dcc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007dd0:	4919      	ldr	r1, [pc, #100]	@ (8007e38 <tcp_kill_state+0x84>)
 8007dd2:	481a      	ldr	r0, [pc, #104]	@ (8007e3c <tcp_kill_state+0x88>)
 8007dd4:	f007 fb1a 	bl	800f40c <iprintf>

  inactivity = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007de0:	4b17      	ldr	r3, [pc, #92]	@ (8007e40 <tcp_kill_state+0x8c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e017      	b.n	8007e18 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	7d1b      	ldrb	r3, [r3, #20]
 8007dec:	79fa      	ldrb	r2, [r7, #7]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d10f      	bne.n	8007e12 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007df2:	4b14      	ldr	r3, [pc, #80]	@ (8007e44 <tcp_kill_state+0x90>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d807      	bhi.n	8007e12 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007e02:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <tcp_kill_state+0x90>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e4      	bne.n	8007de8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007e24:	2100      	movs	r1, #0
 8007e26:	6938      	ldr	r0, [r7, #16]
 8007e28:	f7ff f950 	bl	80070cc <tcp_abandon>
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	08010d04 	.word	0x08010d04
 8007e38:	08011290 	.word	0x08011290
 8007e3c:	08010d48 	.word	0x08010d48
 8007e40:	200087c4 	.word	0x200087c4
 8007e44:	200087b8 	.word	0x200087b8

08007e48 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e56:	4b12      	ldr	r3, [pc, #72]	@ (8007ea0 <tcp_kill_timewait+0x58>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	e012      	b.n	8007e84 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e5e:	4b11      	ldr	r3, [pc, #68]	@ (8007ea4 <tcp_kill_timewait+0x5c>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d807      	bhi.n	8007e7e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea4 <tcp_kill_timewait+0x5c>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e9      	bne.n	8007e5e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f7ff f9d9 	bl	8007248 <tcp_abort>
  }
}
 8007e96:	bf00      	nop
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200087c8 	.word	0x200087c8
 8007ea4:	200087b8 	.word	0x200087b8

08007ea8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007eae:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <tcp_handle_closepend+0x48>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007eb4:	e014      	b.n	8007ee0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8b5b      	ldrh	r3, [r3, #26]
 8007ec0:	f003 0308 	and.w	r3, r3, #8
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	8b5b      	ldrh	r3, [r3, #26]
 8007ecc:	f023 0308 	bic.w	r3, r3, #8
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff f862 	bl	8006fa0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e7      	bne.n	8007eb6 <tcp_handle_closepend+0xe>
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	200087c4 	.word	0x200087c4

08007ef4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007efe:	2001      	movs	r0, #1
 8007f00:	f7fd fd24 	bl	800594c <memp_malloc>
 8007f04:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d126      	bne.n	8007f5a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007f0c:	f7ff ffcc 	bl	8007ea8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007f10:	f7ff ff9a 	bl	8007e48 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f14:	2001      	movs	r0, #1
 8007f16:	f7fd fd19 	bl	800594c <memp_malloc>
 8007f1a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d11b      	bne.n	8007f5a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007f22:	2009      	movs	r0, #9
 8007f24:	f7ff ff46 	bl	8007db4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f28:	2001      	movs	r0, #1
 8007f2a:	f7fd fd0f 	bl	800594c <memp_malloc>
 8007f2e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d111      	bne.n	8007f5a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007f36:	2008      	movs	r0, #8
 8007f38:	f7ff ff3c 	bl	8007db4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	f7fd fd05 	bl	800594c <memp_malloc>
 8007f42:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d107      	bne.n	8007f5a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fee3 	bl	8007d18 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f52:	2001      	movs	r0, #1
 8007f54:	f7fd fcfa 	bl	800594c <memp_malloc>
 8007f58:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d03f      	beq.n	8007fe0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007f60:	229c      	movs	r2, #156	@ 0x9c
 8007f62:	2100      	movs	r1, #0
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f007 fab6 	bl	800f4d6 <memset>
    pcb->prio = prio;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	79fa      	ldrb	r2, [r7, #7]
 8007f6e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007f76:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	22ff      	movs	r2, #255	@ 0xff
 8007f8e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007f96:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2206      	movs	r2, #6
 8007fa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fac:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <tcp_alloc+0xf8>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff0 <tcp_alloc+0xfc>)
 8007fc0:	781a      	ldrb	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007fcc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a08      	ldr	r2, [pc, #32]	@ (8007ff4 <tcp_alloc+0x100>)
 8007fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4a07      	ldr	r2, [pc, #28]	@ (8007ff8 <tcp_alloc+0x104>)
 8007fdc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	200087b8 	.word	0x200087b8
 8007ff0:	200087ce 	.word	0x200087ce
 8007ff4:	08007cad 	.word	0x08007cad
 8007ff8:	006ddd00 	.word	0x006ddd00

08007ffc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d107      	bne.n	800801a <tcp_pcb_purge+0x1e>
 800800a:	4b21      	ldr	r3, [pc, #132]	@ (8008090 <tcp_pcb_purge+0x94>)
 800800c:	f640 0251 	movw	r2, #2129	@ 0x851
 8008010:	4920      	ldr	r1, [pc, #128]	@ (8008094 <tcp_pcb_purge+0x98>)
 8008012:	4821      	ldr	r0, [pc, #132]	@ (8008098 <tcp_pcb_purge+0x9c>)
 8008014:	f007 f9fa 	bl	800f40c <iprintf>
 8008018:	e037      	b.n	800808a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	7d1b      	ldrb	r3, [r3, #20]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d033      	beq.n	800808a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008026:	2b0a      	cmp	r3, #10
 8008028:	d02f      	beq.n	800808a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800802e:	2b01      	cmp	r3, #1
 8008030:	d02b      	beq.n	800808a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fb6a 	bl	8006718 <pbuf_free>
      pcb->refused_data = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f986 	bl	8008364 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800805e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff fdc7 	bl	8007bf8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fdc2 	bl	8007bf8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	66da      	str	r2, [r3, #108]	@ 0x6c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	08010d04 	.word	0x08010d04
 8008094:	08011350 	.word	0x08011350
 8008098:	08010d48 	.word	0x08010d48

0800809c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d106      	bne.n	80080ba <tcp_pcb_remove+0x1e>
 80080ac:	4b3e      	ldr	r3, [pc, #248]	@ (80081a8 <tcp_pcb_remove+0x10c>)
 80080ae:	f640 0283 	movw	r2, #2179	@ 0x883
 80080b2:	493e      	ldr	r1, [pc, #248]	@ (80081ac <tcp_pcb_remove+0x110>)
 80080b4:	483e      	ldr	r0, [pc, #248]	@ (80081b0 <tcp_pcb_remove+0x114>)
 80080b6:	f007 f9a9 	bl	800f40c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d106      	bne.n	80080ce <tcp_pcb_remove+0x32>
 80080c0:	4b39      	ldr	r3, [pc, #228]	@ (80081a8 <tcp_pcb_remove+0x10c>)
 80080c2:	f640 0284 	movw	r2, #2180	@ 0x884
 80080c6:	493b      	ldr	r1, [pc, #236]	@ (80081b4 <tcp_pcb_remove+0x118>)
 80080c8:	4839      	ldr	r0, [pc, #228]	@ (80081b0 <tcp_pcb_remove+0x114>)
 80080ca:	f007 f99f 	bl	800f40c <iprintf>

  TCP_RMV(pcblist, pcb);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d105      	bne.n	80080e4 <tcp_pcb_remove+0x48>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	e013      	b.n	800810c <tcp_pcb_remove+0x70>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e00c      	b.n	8008106 <tcp_pcb_remove+0x6a>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d104      	bne.n	8008100 <tcp_pcb_remove+0x64>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	60da      	str	r2, [r3, #12]
 80080fe:	e005      	b.n	800810c <tcp_pcb_remove+0x70>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1ef      	bne.n	80080ec <tcp_pcb_remove+0x50>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008112:	6838      	ldr	r0, [r7, #0]
 8008114:	f7ff ff72 	bl	8007ffc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	7d1b      	ldrb	r3, [r3, #20]
 800811c:	2b0a      	cmp	r3, #10
 800811e:	d013      	beq.n	8008148 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008124:	2b01      	cmp	r3, #1
 8008126:	d00f      	beq.n	8008148 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	8b5b      	ldrh	r3, [r3, #26]
 800812c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	8b5b      	ldrh	r3, [r3, #26]
 8008138:	f043 0302 	orr.w	r3, r3, #2
 800813c:	b29a      	uxth	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008142:	6838      	ldr	r0, [r7, #0]
 8008144:	f002 ff68 	bl	800b018 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	7d1b      	ldrb	r3, [r3, #20]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d020      	beq.n	8008192 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d006      	beq.n	8008166 <tcp_pcb_remove+0xca>
 8008158:	4b13      	ldr	r3, [pc, #76]	@ (80081a8 <tcp_pcb_remove+0x10c>)
 800815a:	f640 0293 	movw	r2, #2195	@ 0x893
 800815e:	4916      	ldr	r1, [pc, #88]	@ (80081b8 <tcp_pcb_remove+0x11c>)
 8008160:	4813      	ldr	r0, [pc, #76]	@ (80081b0 <tcp_pcb_remove+0x114>)
 8008162:	f007 f953 	bl	800f40c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800816a:	2b00      	cmp	r3, #0
 800816c:	d006      	beq.n	800817c <tcp_pcb_remove+0xe0>
 800816e:	4b0e      	ldr	r3, [pc, #56]	@ (80081a8 <tcp_pcb_remove+0x10c>)
 8008170:	f640 0294 	movw	r2, #2196	@ 0x894
 8008174:	4911      	ldr	r1, [pc, #68]	@ (80081bc <tcp_pcb_remove+0x120>)
 8008176:	480e      	ldr	r0, [pc, #56]	@ (80081b0 <tcp_pcb_remove+0x114>)
 8008178:	f007 f948 	bl	800f40c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008180:	2b00      	cmp	r3, #0
 8008182:	d006      	beq.n	8008192 <tcp_pcb_remove+0xf6>
 8008184:	4b08      	ldr	r3, [pc, #32]	@ (80081a8 <tcp_pcb_remove+0x10c>)
 8008186:	f640 0296 	movw	r2, #2198	@ 0x896
 800818a:	490d      	ldr	r1, [pc, #52]	@ (80081c0 <tcp_pcb_remove+0x124>)
 800818c:	4808      	ldr	r0, [pc, #32]	@ (80081b0 <tcp_pcb_remove+0x114>)
 800818e:	f007 f93d 	bl	800f40c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2200      	movs	r2, #0
 8008196:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	08010d04 	.word	0x08010d04
 80081ac:	0801136c 	.word	0x0801136c
 80081b0:	08010d48 	.word	0x08010d48
 80081b4:	08011388 	.word	0x08011388
 80081b8:	080113a8 	.word	0x080113a8
 80081bc:	080113c0 	.word	0x080113c0
 80081c0:	080113dc 	.word	0x080113dc

080081c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <tcp_next_iss+0x1c>
 80081d2:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <tcp_next_iss+0x38>)
 80081d4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80081d8:	4909      	ldr	r1, [pc, #36]	@ (8008200 <tcp_next_iss+0x3c>)
 80081da:	480a      	ldr	r0, [pc, #40]	@ (8008204 <tcp_next_iss+0x40>)
 80081dc:	f007 f916 	bl	800f40c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80081e0:	4b09      	ldr	r3, [pc, #36]	@ (8008208 <tcp_next_iss+0x44>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	4b09      	ldr	r3, [pc, #36]	@ (800820c <tcp_next_iss+0x48>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4413      	add	r3, r2
 80081ea:	4a07      	ldr	r2, [pc, #28]	@ (8008208 <tcp_next_iss+0x44>)
 80081ec:	6013      	str	r3, [r2, #0]
  return iss;
 80081ee:	4b06      	ldr	r3, [pc, #24]	@ (8008208 <tcp_next_iss+0x44>)
 80081f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	08010d04 	.word	0x08010d04
 8008200:	080113f4 	.word	0x080113f4
 8008204:	08010d48 	.word	0x08010d48
 8008208:	20000024 	.word	0x20000024
 800820c:	200087b8 	.word	0x200087b8

08008210 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <tcp_eff_send_mss_netif+0x22>
 8008224:	4b14      	ldr	r3, [pc, #80]	@ (8008278 <tcp_eff_send_mss_netif+0x68>)
 8008226:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800822a:	4914      	ldr	r1, [pc, #80]	@ (800827c <tcp_eff_send_mss_netif+0x6c>)
 800822c:	4814      	ldr	r0, [pc, #80]	@ (8008280 <tcp_eff_send_mss_netif+0x70>)
 800822e:	f007 f8ed 	bl	800f40c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008238:	89fb      	ldrh	r3, [r7, #14]
 800823a:	e019      	b.n	8008270 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008240:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008242:	8afb      	ldrh	r3, [r7, #22]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d012      	beq.n	800826e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008248:	2328      	movs	r3, #40	@ 0x28
 800824a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800824c:	8afa      	ldrh	r2, [r7, #22]
 800824e:	8abb      	ldrh	r3, [r7, #20]
 8008250:	429a      	cmp	r2, r3
 8008252:	d904      	bls.n	800825e <tcp_eff_send_mss_netif+0x4e>
 8008254:	8afa      	ldrh	r2, [r7, #22]
 8008256:	8abb      	ldrh	r3, [r7, #20]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	b29b      	uxth	r3, r3
 800825c:	e000      	b.n	8008260 <tcp_eff_send_mss_netif+0x50>
 800825e:	2300      	movs	r3, #0
 8008260:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008262:	8a7a      	ldrh	r2, [r7, #18]
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	4293      	cmp	r3, r2
 8008268:	bf28      	it	cs
 800826a:	4613      	movcs	r3, r2
 800826c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800826e:	89fb      	ldrh	r3, [r7, #14]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	08010d04 	.word	0x08010d04
 800827c:	08011410 	.word	0x08011410
 8008280:	08010d48 	.word	0x08010d48

08008284 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d119      	bne.n	80082cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008298:	4b10      	ldr	r3, [pc, #64]	@ (80082dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800829a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800829e:	4910      	ldr	r1, [pc, #64]	@ (80082e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80082a0:	4810      	ldr	r0, [pc, #64]	@ (80082e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80082a2:	f007 f8b3 	bl	800f40c <iprintf>

  while (pcb != NULL) {
 80082a6:	e011      	b.n	80082cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d108      	bne.n	80082c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7fe ffc4 	bl	8007248 <tcp_abort>
      pcb = next;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e002      	b.n	80082cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1ea      	bne.n	80082a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	08010d04 	.word	0x08010d04
 80082e0:	08011438 	.word	0x08011438
 80082e4:	08010d48 	.word	0x08010d48

080082e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d02a      	beq.n	800834e <tcp_netif_ip_addr_changed+0x66>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d026      	beq.n	800834e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008300:	4b15      	ldr	r3, [pc, #84]	@ (8008358 <tcp_netif_ip_addr_changed+0x70>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff ffbc 	bl	8008284 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800830c:	4b13      	ldr	r3, [pc, #76]	@ (800835c <tcp_netif_ip_addr_changed+0x74>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff ffb6 	bl	8008284 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d017      	beq.n	800834e <tcp_netif_ip_addr_changed+0x66>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d013      	beq.n	800834e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008326:	4b0e      	ldr	r3, [pc, #56]	@ (8008360 <tcp_netif_ip_addr_changed+0x78>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e00c      	b.n	8008348 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d103      	bne.n	8008342 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1ef      	bne.n	800832e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200087c4 	.word	0x200087c4
 800835c:	200087bc 	.word	0x200087bc
 8008360:	200087c0 	.word	0x200087c0

08008364 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fc3d 	bl	8007bf8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b08d      	sub	sp, #52	@ 0x34
 8008390:	af04      	add	r7, sp, #16
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <tcp_input+0x1c>
 800839c:	4b9b      	ldr	r3, [pc, #620]	@ (800860c <tcp_input+0x280>)
 800839e:	2283      	movs	r2, #131	@ 0x83
 80083a0:	499b      	ldr	r1, [pc, #620]	@ (8008610 <tcp_input+0x284>)
 80083a2:	489c      	ldr	r0, [pc, #624]	@ (8008614 <tcp_input+0x288>)
 80083a4:	f007 f832 	bl	800f40c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	4a9a      	ldr	r2, [pc, #616]	@ (8008618 <tcp_input+0x28c>)
 80083ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	895b      	ldrh	r3, [r3, #10]
 80083b4:	2b13      	cmp	r3, #19
 80083b6:	f240 83d1 	bls.w	8008b5c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80083ba:	4b98      	ldr	r3, [pc, #608]	@ (800861c <tcp_input+0x290>)
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	4a97      	ldr	r2, [pc, #604]	@ (800861c <tcp_input+0x290>)
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	4611      	mov	r1, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	f005 ffcb 	bl	800e360 <ip4_addr_isbroadcast_u32>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f040 83c7 	bne.w	8008b60 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80083d2:	4b92      	ldr	r3, [pc, #584]	@ (800861c <tcp_input+0x290>)
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80083da:	2be0      	cmp	r3, #224	@ 0xe0
 80083dc:	f000 83c0 	beq.w	8008b60 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80083e0:	4b8d      	ldr	r3, [pc, #564]	@ (8008618 <tcp_input+0x28c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	899b      	ldrh	r3, [r3, #12]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fc fe37 	bl	800505c <lwip_htons>
 80083ee:	4603      	mov	r3, r0
 80083f0:	0b1b      	lsrs	r3, r3, #12
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80083fa:	7cbb      	ldrb	r3, [r7, #18]
 80083fc:	2b13      	cmp	r3, #19
 80083fe:	f240 83b1 	bls.w	8008b64 <tcp_input+0x7d8>
 8008402:	7cbb      	ldrb	r3, [r7, #18]
 8008404:	b29a      	uxth	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	891b      	ldrh	r3, [r3, #8]
 800840a:	429a      	cmp	r2, r3
 800840c:	f200 83aa 	bhi.w	8008b64 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008410:	7cbb      	ldrb	r3, [r7, #18]
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b14      	subs	r3, #20
 8008416:	b29a      	uxth	r2, r3
 8008418:	4b81      	ldr	r3, [pc, #516]	@ (8008620 <tcp_input+0x294>)
 800841a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800841c:	4b81      	ldr	r3, [pc, #516]	@ (8008624 <tcp_input+0x298>)
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	895a      	ldrh	r2, [r3, #10]
 8008426:	7cbb      	ldrb	r3, [r7, #18]
 8008428:	b29b      	uxth	r3, r3
 800842a:	429a      	cmp	r2, r3
 800842c:	d309      	bcc.n	8008442 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800842e:	4b7c      	ldr	r3, [pc, #496]	@ (8008620 <tcp_input+0x294>)
 8008430:	881a      	ldrh	r2, [r3, #0]
 8008432:	4b7d      	ldr	r3, [pc, #500]	@ (8008628 <tcp_input+0x29c>)
 8008434:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008436:	7cbb      	ldrb	r3, [r7, #18]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe f8e6 	bl	800660c <pbuf_remove_header>
 8008440:	e04e      	b.n	80084e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d105      	bne.n	8008456 <tcp_input+0xca>
 800844a:	4b70      	ldr	r3, [pc, #448]	@ (800860c <tcp_input+0x280>)
 800844c:	22c2      	movs	r2, #194	@ 0xc2
 800844e:	4977      	ldr	r1, [pc, #476]	@ (800862c <tcp_input+0x2a0>)
 8008450:	4870      	ldr	r0, [pc, #448]	@ (8008614 <tcp_input+0x288>)
 8008452:	f006 ffdb 	bl	800f40c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008456:	2114      	movs	r1, #20
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7fe f8d7 	bl	800660c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	895a      	ldrh	r2, [r3, #10]
 8008462:	4b71      	ldr	r3, [pc, #452]	@ (8008628 <tcp_input+0x29c>)
 8008464:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008466:	4b6e      	ldr	r3, [pc, #440]	@ (8008620 <tcp_input+0x294>)
 8008468:	881a      	ldrh	r2, [r3, #0]
 800846a:	4b6f      	ldr	r3, [pc, #444]	@ (8008628 <tcp_input+0x29c>)
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008472:	4b6d      	ldr	r3, [pc, #436]	@ (8008628 <tcp_input+0x29c>)
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7fe f8c7 	bl	800660c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	895b      	ldrh	r3, [r3, #10]
 8008484:	8a3a      	ldrh	r2, [r7, #16]
 8008486:	429a      	cmp	r2, r3
 8008488:	f200 836e 	bhi.w	8008b68 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	4a64      	ldr	r2, [pc, #400]	@ (8008624 <tcp_input+0x298>)
 8008494:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	8a3a      	ldrh	r2, [r7, #16]
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe f8b4 	bl	800660c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	891a      	ldrh	r2, [r3, #8]
 80084a8:	8a3b      	ldrh	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	895b      	ldrh	r3, [r3, #10]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <tcp_input+0x13a>
 80084ba:	4b54      	ldr	r3, [pc, #336]	@ (800860c <tcp_input+0x280>)
 80084bc:	22df      	movs	r2, #223	@ 0xdf
 80084be:	495c      	ldr	r1, [pc, #368]	@ (8008630 <tcp_input+0x2a4>)
 80084c0:	4854      	ldr	r0, [pc, #336]	@ (8008614 <tcp_input+0x288>)
 80084c2:	f006 ffa3 	bl	800f40c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	891a      	ldrh	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	891b      	ldrh	r3, [r3, #8]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d005      	beq.n	80084e0 <tcp_input+0x154>
 80084d4:	4b4d      	ldr	r3, [pc, #308]	@ (800860c <tcp_input+0x280>)
 80084d6:	22e0      	movs	r2, #224	@ 0xe0
 80084d8:	4956      	ldr	r1, [pc, #344]	@ (8008634 <tcp_input+0x2a8>)
 80084da:	484e      	ldr	r0, [pc, #312]	@ (8008614 <tcp_input+0x288>)
 80084dc:	f006 ff96 	bl	800f40c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80084e0:	4b4d      	ldr	r3, [pc, #308]	@ (8008618 <tcp_input+0x28c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	4a4b      	ldr	r2, [pc, #300]	@ (8008618 <tcp_input+0x28c>)
 80084ea:	6814      	ldr	r4, [r2, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fc fdb5 	bl	800505c <lwip_htons>
 80084f2:	4603      	mov	r3, r0
 80084f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80084f6:	4b48      	ldr	r3, [pc, #288]	@ (8008618 <tcp_input+0x28c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	885b      	ldrh	r3, [r3, #2]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4a46      	ldr	r2, [pc, #280]	@ (8008618 <tcp_input+0x28c>)
 8008500:	6814      	ldr	r4, [r2, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f7fc fdaa 	bl	800505c <lwip_htons>
 8008508:	4603      	mov	r3, r0
 800850a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800850c:	4b42      	ldr	r3, [pc, #264]	@ (8008618 <tcp_input+0x28c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4a41      	ldr	r2, [pc, #260]	@ (8008618 <tcp_input+0x28c>)
 8008514:	6814      	ldr	r4, [r2, #0]
 8008516:	4618      	mov	r0, r3
 8008518:	f7fc fdb5 	bl	8005086 <lwip_htonl>
 800851c:	4603      	mov	r3, r0
 800851e:	6063      	str	r3, [r4, #4]
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	4a45      	ldr	r2, [pc, #276]	@ (8008638 <tcp_input+0x2ac>)
 8008524:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008526:	4b3c      	ldr	r3, [pc, #240]	@ (8008618 <tcp_input+0x28c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	4a3a      	ldr	r2, [pc, #232]	@ (8008618 <tcp_input+0x28c>)
 800852e:	6814      	ldr	r4, [r2, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f7fc fda8 	bl	8005086 <lwip_htonl>
 8008536:	4603      	mov	r3, r0
 8008538:	60a3      	str	r3, [r4, #8]
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	4a3f      	ldr	r2, [pc, #252]	@ (800863c <tcp_input+0x2b0>)
 800853e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008540:	4b35      	ldr	r3, [pc, #212]	@ (8008618 <tcp_input+0x28c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	89db      	ldrh	r3, [r3, #14]
 8008546:	b29b      	uxth	r3, r3
 8008548:	4a33      	ldr	r2, [pc, #204]	@ (8008618 <tcp_input+0x28c>)
 800854a:	6814      	ldr	r4, [r2, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f7fc fd85 	bl	800505c <lwip_htons>
 8008552:	4603      	mov	r3, r0
 8008554:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008556:	4b30      	ldr	r3, [pc, #192]	@ (8008618 <tcp_input+0x28c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	899b      	ldrh	r3, [r3, #12]
 800855c:	b29b      	uxth	r3, r3
 800855e:	4618      	mov	r0, r3
 8008560:	f7fc fd7c 	bl	800505c <lwip_htons>
 8008564:	4603      	mov	r3, r0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800856c:	b2da      	uxtb	r2, r3
 800856e:	4b34      	ldr	r3, [pc, #208]	@ (8008640 <tcp_input+0x2b4>)
 8008570:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	891a      	ldrh	r2, [r3, #8]
 8008576:	4b33      	ldr	r3, [pc, #204]	@ (8008644 <tcp_input+0x2b8>)
 8008578:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800857a:	4b31      	ldr	r3, [pc, #196]	@ (8008640 <tcp_input+0x2b4>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <tcp_input+0x214>
    tcplen++;
 8008586:	4b2f      	ldr	r3, [pc, #188]	@ (8008644 <tcp_input+0x2b8>)
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	b29a      	uxth	r2, r3
 800858e:	4b2d      	ldr	r3, [pc, #180]	@ (8008644 <tcp_input+0x2b8>)
 8008590:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	891a      	ldrh	r2, [r3, #8]
 8008596:	4b2b      	ldr	r3, [pc, #172]	@ (8008644 <tcp_input+0x2b8>)
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	f200 82e6 	bhi.w	8008b6c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085a4:	4b28      	ldr	r3, [pc, #160]	@ (8008648 <tcp_input+0x2bc>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	61fb      	str	r3, [r7, #28]
 80085aa:	e09d      	b.n	80086e8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	7d1b      	ldrb	r3, [r3, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d105      	bne.n	80085c0 <tcp_input+0x234>
 80085b4:	4b15      	ldr	r3, [pc, #84]	@ (800860c <tcp_input+0x280>)
 80085b6:	22fb      	movs	r2, #251	@ 0xfb
 80085b8:	4924      	ldr	r1, [pc, #144]	@ (800864c <tcp_input+0x2c0>)
 80085ba:	4816      	ldr	r0, [pc, #88]	@ (8008614 <tcp_input+0x288>)
 80085bc:	f006 ff26 	bl	800f40c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	7d1b      	ldrb	r3, [r3, #20]
 80085c4:	2b0a      	cmp	r3, #10
 80085c6:	d105      	bne.n	80085d4 <tcp_input+0x248>
 80085c8:	4b10      	ldr	r3, [pc, #64]	@ (800860c <tcp_input+0x280>)
 80085ca:	22fc      	movs	r2, #252	@ 0xfc
 80085cc:	4920      	ldr	r1, [pc, #128]	@ (8008650 <tcp_input+0x2c4>)
 80085ce:	4811      	ldr	r0, [pc, #68]	@ (8008614 <tcp_input+0x288>)
 80085d0:	f006 ff1c 	bl	800f40c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	7d1b      	ldrb	r3, [r3, #20]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d105      	bne.n	80085e8 <tcp_input+0x25c>
 80085dc:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <tcp_input+0x280>)
 80085de:	22fd      	movs	r2, #253	@ 0xfd
 80085e0:	491c      	ldr	r1, [pc, #112]	@ (8008654 <tcp_input+0x2c8>)
 80085e2:	480c      	ldr	r0, [pc, #48]	@ (8008614 <tcp_input+0x288>)
 80085e4:	f006 ff12 	bl	800f40c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	7a1b      	ldrb	r3, [r3, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d033      	beq.n	8008658 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	7a1a      	ldrb	r2, [r3, #8]
 80085f4:	4b09      	ldr	r3, [pc, #36]	@ (800861c <tcp_input+0x290>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80085fc:	3301      	adds	r3, #1
 80085fe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008600:	429a      	cmp	r2, r3
 8008602:	d029      	beq.n	8008658 <tcp_input+0x2cc>
      prev = pcb;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	61bb      	str	r3, [r7, #24]
      continue;
 8008608:	e06b      	b.n	80086e2 <tcp_input+0x356>
 800860a:	bf00      	nop
 800860c:	0801146c 	.word	0x0801146c
 8008610:	080114a0 	.word	0x080114a0
 8008614:	080114b8 	.word	0x080114b8
 8008618:	200087e0 	.word	0x200087e0
 800861c:	20005248 	.word	0x20005248
 8008620:	200087e4 	.word	0x200087e4
 8008624:	200087e8 	.word	0x200087e8
 8008628:	200087e6 	.word	0x200087e6
 800862c:	080114e0 	.word	0x080114e0
 8008630:	080114f0 	.word	0x080114f0
 8008634:	080114fc 	.word	0x080114fc
 8008638:	200087f0 	.word	0x200087f0
 800863c:	200087f4 	.word	0x200087f4
 8008640:	200087fc 	.word	0x200087fc
 8008644:	200087fa 	.word	0x200087fa
 8008648:	200087c4 	.word	0x200087c4
 800864c:	0801151c 	.word	0x0801151c
 8008650:	08011544 	.word	0x08011544
 8008654:	08011570 	.word	0x08011570
    }

    if (pcb->remote_port == tcphdr->src &&
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	8b1a      	ldrh	r2, [r3, #24]
 800865c:	4b72      	ldr	r3, [pc, #456]	@ (8008828 <tcp_input+0x49c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	429a      	cmp	r2, r3
 8008666:	d13a      	bne.n	80086de <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	8ada      	ldrh	r2, [r3, #22]
 800866c:	4b6e      	ldr	r3, [pc, #440]	@ (8008828 <tcp_input+0x49c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	885b      	ldrh	r3, [r3, #2]
 8008672:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008674:	429a      	cmp	r2, r3
 8008676:	d132      	bne.n	80086de <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b6b      	ldr	r3, [pc, #428]	@ (800882c <tcp_input+0x4a0>)
 800867e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008680:	429a      	cmp	r2, r3
 8008682:	d12c      	bne.n	80086de <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	4b68      	ldr	r3, [pc, #416]	@ (800882c <tcp_input+0x4a0>)
 800868a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800868c:	429a      	cmp	r2, r3
 800868e:	d126      	bne.n	80086de <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	429a      	cmp	r2, r3
 8008698:	d106      	bne.n	80086a8 <tcp_input+0x31c>
 800869a:	4b65      	ldr	r3, [pc, #404]	@ (8008830 <tcp_input+0x4a4>)
 800869c:	f240 120d 	movw	r2, #269	@ 0x10d
 80086a0:	4964      	ldr	r1, [pc, #400]	@ (8008834 <tcp_input+0x4a8>)
 80086a2:	4865      	ldr	r0, [pc, #404]	@ (8008838 <tcp_input+0x4ac>)
 80086a4:	f006 feb2 	bl	800f40c <iprintf>
      if (prev != NULL) {
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <tcp_input+0x338>
        prev->next = pcb->next;
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80086b6:	4b61      	ldr	r3, [pc, #388]	@ (800883c <tcp_input+0x4b0>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80086be:	4a5f      	ldr	r2, [pc, #380]	@ (800883c <tcp_input+0x4b0>)
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	69fa      	ldr	r2, [r7, #28]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d111      	bne.n	80086f2 <tcp_input+0x366>
 80086ce:	4b58      	ldr	r3, [pc, #352]	@ (8008830 <tcp_input+0x4a4>)
 80086d0:	f240 1215 	movw	r2, #277	@ 0x115
 80086d4:	495a      	ldr	r1, [pc, #360]	@ (8008840 <tcp_input+0x4b4>)
 80086d6:	4858      	ldr	r0, [pc, #352]	@ (8008838 <tcp_input+0x4ac>)
 80086d8:	f006 fe98 	bl	800f40c <iprintf>
      break;
 80086dc:	e009      	b.n	80086f2 <tcp_input+0x366>
    }
    prev = pcb;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f47f af5e 	bne.w	80085ac <tcp_input+0x220>
 80086f0:	e000      	b.n	80086f4 <tcp_input+0x368>
      break;
 80086f2:	bf00      	nop
  }

  if (pcb == NULL) {
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f040 80aa 	bne.w	8008850 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086fc:	4b51      	ldr	r3, [pc, #324]	@ (8008844 <tcp_input+0x4b8>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	61fb      	str	r3, [r7, #28]
 8008702:	e03f      	b.n	8008784 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	2b0a      	cmp	r3, #10
 800870a:	d006      	beq.n	800871a <tcp_input+0x38e>
 800870c:	4b48      	ldr	r3, [pc, #288]	@ (8008830 <tcp_input+0x4a4>)
 800870e:	f240 121f 	movw	r2, #287	@ 0x11f
 8008712:	494d      	ldr	r1, [pc, #308]	@ (8008848 <tcp_input+0x4bc>)
 8008714:	4848      	ldr	r0, [pc, #288]	@ (8008838 <tcp_input+0x4ac>)
 8008716:	f006 fe79 	bl	800f40c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	7a1b      	ldrb	r3, [r3, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	7a1a      	ldrb	r2, [r3, #8]
 8008726:	4b41      	ldr	r3, [pc, #260]	@ (800882c <tcp_input+0x4a0>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800872e:	3301      	adds	r3, #1
 8008730:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008732:	429a      	cmp	r2, r3
 8008734:	d122      	bne.n	800877c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	8b1a      	ldrh	r2, [r3, #24]
 800873a:	4b3b      	ldr	r3, [pc, #236]	@ (8008828 <tcp_input+0x49c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	429a      	cmp	r2, r3
 8008744:	d11b      	bne.n	800877e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	8ada      	ldrh	r2, [r3, #22]
 800874a:	4b37      	ldr	r3, [pc, #220]	@ (8008828 <tcp_input+0x49c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	885b      	ldrh	r3, [r3, #2]
 8008750:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008752:	429a      	cmp	r2, r3
 8008754:	d113      	bne.n	800877e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	4b34      	ldr	r3, [pc, #208]	@ (800882c <tcp_input+0x4a0>)
 800875c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800875e:	429a      	cmp	r2, r3
 8008760:	d10d      	bne.n	800877e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	4b31      	ldr	r3, [pc, #196]	@ (800882c <tcp_input+0x4a0>)
 8008768:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800876a:	429a      	cmp	r2, r3
 800876c:	d107      	bne.n	800877e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800876e:	69f8      	ldr	r0, [r7, #28]
 8008770:	f000 fb56 	bl	8008e20 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7fd ffcf 	bl	8006718 <pbuf_free>
        return;
 800877a:	e1fd      	b.n	8008b78 <tcp_input+0x7ec>
        continue;
 800877c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1bc      	bne.n	8008704 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800878e:	4b2f      	ldr	r3, [pc, #188]	@ (800884c <tcp_input+0x4c0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	e02a      	b.n	80087ec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	7a1b      	ldrb	r3, [r3, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00c      	beq.n	80087b8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	7a1a      	ldrb	r2, [r3, #8]
 80087a2:	4b22      	ldr	r3, [pc, #136]	@ (800882c <tcp_input+0x4a0>)
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80087aa:	3301      	adds	r3, #1
 80087ac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d002      	beq.n	80087b8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	61bb      	str	r3, [r7, #24]
        continue;
 80087b6:	e016      	b.n	80087e6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	8ada      	ldrh	r2, [r3, #22]
 80087bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008828 <tcp_input+0x49c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d10c      	bne.n	80087e2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4b17      	ldr	r3, [pc, #92]	@ (800882c <tcp_input+0x4a0>)
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d00f      	beq.n	80087f4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00d      	beq.n	80087f6 <tcp_input+0x46a>
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1d1      	bne.n	8008796 <tcp_input+0x40a>
 80087f2:	e000      	b.n	80087f6 <tcp_input+0x46a>
            break;
 80087f4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d029      	beq.n	8008850 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800880a:	4b10      	ldr	r3, [pc, #64]	@ (800884c <tcp_input+0x4c0>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008812:	4a0e      	ldr	r2, [pc, #56]	@ (800884c <tcp_input+0x4c0>)
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008818:	6978      	ldr	r0, [r7, #20]
 800881a:	f000 fa03 	bl	8008c24 <tcp_listen_input>
      }
      pbuf_free(p);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fd ff7a 	bl	8006718 <pbuf_free>
      return;
 8008824:	e1a8      	b.n	8008b78 <tcp_input+0x7ec>
 8008826:	bf00      	nop
 8008828:	200087e0 	.word	0x200087e0
 800882c:	20005248 	.word	0x20005248
 8008830:	0801146c 	.word	0x0801146c
 8008834:	08011598 	.word	0x08011598
 8008838:	080114b8 	.word	0x080114b8
 800883c:	200087c4 	.word	0x200087c4
 8008840:	080115c4 	.word	0x080115c4
 8008844:	200087c8 	.word	0x200087c8
 8008848:	080115f0 	.word	0x080115f0
 800884c:	200087c0 	.word	0x200087c0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8158 	beq.w	8008b08 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008858:	4b95      	ldr	r3, [pc, #596]	@ (8008ab0 <tcp_input+0x724>)
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	891a      	ldrh	r2, [r3, #8]
 8008862:	4b93      	ldr	r3, [pc, #588]	@ (8008ab0 <tcp_input+0x724>)
 8008864:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008866:	4a92      	ldr	r2, [pc, #584]	@ (8008ab0 <tcp_input+0x724>)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800886c:	4b91      	ldr	r3, [pc, #580]	@ (8008ab4 <tcp_input+0x728>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a8f      	ldr	r2, [pc, #572]	@ (8008ab0 <tcp_input+0x724>)
 8008872:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008874:	4b90      	ldr	r3, [pc, #576]	@ (8008ab8 <tcp_input+0x72c>)
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800887a:	4b90      	ldr	r3, [pc, #576]	@ (8008abc <tcp_input+0x730>)
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008880:	4b8f      	ldr	r3, [pc, #572]	@ (8008ac0 <tcp_input+0x734>)
 8008882:	2200      	movs	r2, #0
 8008884:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008886:	4b8f      	ldr	r3, [pc, #572]	@ (8008ac4 <tcp_input+0x738>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d006      	beq.n	80088a0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	7b5b      	ldrb	r3, [r3, #13]
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	b2da      	uxtb	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d017      	beq.n	80088d8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80088a8:	69f8      	ldr	r0, [r7, #28]
 80088aa:	f7ff f929 	bl	8007b00 <tcp_process_refused_data>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f113 0f0d 	cmn.w	r3, #13
 80088b4:	d007      	beq.n	80088c6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00c      	beq.n	80088d8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80088be:	4b82      	ldr	r3, [pc, #520]	@ (8008ac8 <tcp_input+0x73c>)
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d008      	beq.n	80088d8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f040 80e3 	bne.w	8008a96 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80088d0:	69f8      	ldr	r0, [r7, #28]
 80088d2:	f003 f9a7 	bl	800bc24 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80088d6:	e0de      	b.n	8008a96 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80088d8:	4a7c      	ldr	r2, [pc, #496]	@ (8008acc <tcp_input+0x740>)
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80088de:	69f8      	ldr	r0, [r7, #28]
 80088e0:	f000 fb18 	bl	8008f14 <tcp_process>
 80088e4:	4603      	mov	r3, r0
 80088e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80088e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088ec:	f113 0f0d 	cmn.w	r3, #13
 80088f0:	f000 80d3 	beq.w	8008a9a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80088f4:	4b71      	ldr	r3, [pc, #452]	@ (8008abc <tcp_input+0x730>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d015      	beq.n	800892c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008906:	2b00      	cmp	r3, #0
 8008908:	d008      	beq.n	800891c <tcp_input+0x590>
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	6912      	ldr	r2, [r2, #16]
 8008914:	f06f 010d 	mvn.w	r1, #13
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800891c:	69f9      	ldr	r1, [r7, #28]
 800891e:	486c      	ldr	r0, [pc, #432]	@ (8008ad0 <tcp_input+0x744>)
 8008920:	f7ff fbbc 	bl	800809c <tcp_pcb_remove>
        tcp_free(pcb);
 8008924:	69f8      	ldr	r0, [r7, #28]
 8008926:	f7fe f9a7 	bl	8006c78 <tcp_free>
 800892a:	e0da      	b.n	8008ae2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008930:	4b63      	ldr	r3, [pc, #396]	@ (8008ac0 <tcp_input+0x734>)
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01d      	beq.n	8008974 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008938:	4b61      	ldr	r3, [pc, #388]	@ (8008ac0 <tcp_input+0x734>)
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00a      	beq.n	800895e <tcp_input+0x5d2>
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894e:	69fa      	ldr	r2, [r7, #28]
 8008950:	6910      	ldr	r0, [r2, #16]
 8008952:	89fa      	ldrh	r2, [r7, #14]
 8008954:	69f9      	ldr	r1, [r7, #28]
 8008956:	4798      	blx	r3
 8008958:	4603      	mov	r3, r0
 800895a:	74fb      	strb	r3, [r7, #19]
 800895c:	e001      	b.n	8008962 <tcp_input+0x5d6>
 800895e:	2300      	movs	r3, #0
 8008960:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008962:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008966:	f113 0f0d 	cmn.w	r3, #13
 800896a:	f000 8098 	beq.w	8008a9e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800896e:	4b54      	ldr	r3, [pc, #336]	@ (8008ac0 <tcp_input+0x734>)
 8008970:	2200      	movs	r2, #0
 8008972:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008974:	69f8      	ldr	r0, [r7, #28]
 8008976:	f000 f915 	bl	8008ba4 <tcp_input_delayed_close>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	f040 8090 	bne.w	8008aa2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008982:	4b4d      	ldr	r3, [pc, #308]	@ (8008ab8 <tcp_input+0x72c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d041      	beq.n	8008a0e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <tcp_input+0x614>
 8008992:	4b50      	ldr	r3, [pc, #320]	@ (8008ad4 <tcp_input+0x748>)
 8008994:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008998:	494f      	ldr	r1, [pc, #316]	@ (8008ad8 <tcp_input+0x74c>)
 800899a:	4850      	ldr	r0, [pc, #320]	@ (8008adc <tcp_input+0x750>)
 800899c:	f006 fd36 	bl	800f40c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	8b5b      	ldrh	r3, [r3, #26]
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80089ac:	4b42      	ldr	r3, [pc, #264]	@ (8008ab8 <tcp_input+0x72c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fd feb1 	bl	8006718 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80089b6:	69f8      	ldr	r0, [r7, #28]
 80089b8:	f7fe fc46 	bl	8007248 <tcp_abort>
            goto aborted;
 80089bc:	e091      	b.n	8008ae2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00c      	beq.n	80089e2 <tcp_input+0x656>
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	6918      	ldr	r0, [r3, #16]
 80089d2:	4b39      	ldr	r3, [pc, #228]	@ (8008ab8 <tcp_input+0x72c>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	2300      	movs	r3, #0
 80089d8:	69f9      	ldr	r1, [r7, #28]
 80089da:	47a0      	blx	r4
 80089dc:	4603      	mov	r3, r0
 80089de:	74fb      	strb	r3, [r7, #19]
 80089e0:	e008      	b.n	80089f4 <tcp_input+0x668>
 80089e2:	4b35      	ldr	r3, [pc, #212]	@ (8008ab8 <tcp_input+0x72c>)
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	2300      	movs	r3, #0
 80089e8:	69f9      	ldr	r1, [r7, #28]
 80089ea:	2000      	movs	r0, #0
 80089ec:	f7ff f95e 	bl	8007cac <tcp_recv_null>
 80089f0:	4603      	mov	r3, r0
 80089f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80089f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089f8:	f113 0f0d 	cmn.w	r3, #13
 80089fc:	d053      	beq.n	8008aa6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80089fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008a06:	4b2c      	ldr	r3, [pc, #176]	@ (8008ab8 <tcp_input+0x72c>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8008abc <tcp_input+0x730>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d030      	beq.n	8008a7c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a26:	7b5a      	ldrb	r2, [r3, #13]
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a2c:	f042 0220 	orr.w	r2, r2, #32
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	735a      	strb	r2, [r3, #13]
 8008a34:	e022      	b.n	8008a7c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008a3e:	d005      	beq.n	8008a4c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a44:	3301      	adds	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00b      	beq.n	8008a6e <tcp_input+0x6e2>
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	6918      	ldr	r0, [r3, #16]
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	47a0      	blx	r4
 8008a68:	4603      	mov	r3, r0
 8008a6a:	74fb      	strb	r3, [r7, #19]
 8008a6c:	e001      	b.n	8008a72 <tcp_input+0x6e6>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a76:	f113 0f0d 	cmn.w	r3, #13
 8008a7a:	d016      	beq.n	8008aaa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008a7c:	4b13      	ldr	r3, [pc, #76]	@ (8008acc <tcp_input+0x740>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008a82:	69f8      	ldr	r0, [r7, #28]
 8008a84:	f000 f88e 	bl	8008ba4 <tcp_input_delayed_close>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d128      	bne.n	8008ae0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008a8e:	69f8      	ldr	r0, [r7, #28]
 8008a90:	f002 fac2 	bl	800b018 <tcp_output>
 8008a94:	e025      	b.n	8008ae2 <tcp_input+0x756>
        goto aborted;
 8008a96:	bf00      	nop
 8008a98:	e023      	b.n	8008ae2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008a9a:	bf00      	nop
 8008a9c:	e021      	b.n	8008ae2 <tcp_input+0x756>
              goto aborted;
 8008a9e:	bf00      	nop
 8008aa0:	e01f      	b.n	8008ae2 <tcp_input+0x756>
          goto aborted;
 8008aa2:	bf00      	nop
 8008aa4:	e01d      	b.n	8008ae2 <tcp_input+0x756>
            goto aborted;
 8008aa6:	bf00      	nop
 8008aa8:	e01b      	b.n	8008ae2 <tcp_input+0x756>
              goto aborted;
 8008aaa:	bf00      	nop
 8008aac:	e019      	b.n	8008ae2 <tcp_input+0x756>
 8008aae:	bf00      	nop
 8008ab0:	200087d0 	.word	0x200087d0
 8008ab4:	200087e0 	.word	0x200087e0
 8008ab8:	20008800 	.word	0x20008800
 8008abc:	200087fd 	.word	0x200087fd
 8008ac0:	200087f8 	.word	0x200087f8
 8008ac4:	200087fc 	.word	0x200087fc
 8008ac8:	200087fa 	.word	0x200087fa
 8008acc:	20008804 	.word	0x20008804
 8008ad0:	200087c4 	.word	0x200087c4
 8008ad4:	0801146c 	.word	0x0801146c
 8008ad8:	08011620 	.word	0x08011620
 8008adc:	080114b8 	.word	0x080114b8
          goto aborted;
 8008ae0:	bf00      	nop
    tcp_input_pcb = NULL;
 8008ae2:	4b27      	ldr	r3, [pc, #156]	@ (8008b80 <tcp_input+0x7f4>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008ae8:	4b26      	ldr	r3, [pc, #152]	@ (8008b84 <tcp_input+0x7f8>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008aee:	4b26      	ldr	r3, [pc, #152]	@ (8008b88 <tcp_input+0x7fc>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d03f      	beq.n	8008b76 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008af6:	4b24      	ldr	r3, [pc, #144]	@ (8008b88 <tcp_input+0x7fc>)
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fd fe0c 	bl	8006718 <pbuf_free>
      inseg.p = NULL;
 8008b00:	4b21      	ldr	r3, [pc, #132]	@ (8008b88 <tcp_input+0x7fc>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008b06:	e036      	b.n	8008b76 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008b08:	4b20      	ldr	r3, [pc, #128]	@ (8008b8c <tcp_input+0x800>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	899b      	ldrh	r3, [r3, #12]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fc faa3 	bl	800505c <lwip_htons>
 8008b16:	4603      	mov	r3, r0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d118      	bne.n	8008b54 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b22:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <tcp_input+0x804>)
 8008b24:	6819      	ldr	r1, [r3, #0]
 8008b26:	4b1b      	ldr	r3, [pc, #108]	@ (8008b94 <tcp_input+0x808>)
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b98 <tcp_input+0x80c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b32:	4b16      	ldr	r3, [pc, #88]	@ (8008b8c <tcp_input+0x800>)
 8008b34:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b36:	885b      	ldrh	r3, [r3, #2]
 8008b38:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b3a:	4a14      	ldr	r2, [pc, #80]	@ (8008b8c <tcp_input+0x800>)
 8008b3c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b3e:	8812      	ldrh	r2, [r2, #0]
 8008b40:	b292      	uxth	r2, r2
 8008b42:	9202      	str	r2, [sp, #8]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	4b15      	ldr	r3, [pc, #84]	@ (8008b9c <tcp_input+0x810>)
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <tcp_input+0x814>)
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f003 f816 	bl	800bb80 <tcp_rst>
    pbuf_free(p);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7fd fddf 	bl	8006718 <pbuf_free>
  return;
 8008b5a:	e00c      	b.n	8008b76 <tcp_input+0x7ea>
    goto dropped;
 8008b5c:	bf00      	nop
 8008b5e:	e006      	b.n	8008b6e <tcp_input+0x7e2>
    goto dropped;
 8008b60:	bf00      	nop
 8008b62:	e004      	b.n	8008b6e <tcp_input+0x7e2>
    goto dropped;
 8008b64:	bf00      	nop
 8008b66:	e002      	b.n	8008b6e <tcp_input+0x7e2>
      goto dropped;
 8008b68:	bf00      	nop
 8008b6a:	e000      	b.n	8008b6e <tcp_input+0x7e2>
      goto dropped;
 8008b6c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fd fdd2 	bl	8006718 <pbuf_free>
 8008b74:	e000      	b.n	8008b78 <tcp_input+0x7ec>
  return;
 8008b76:	bf00      	nop
}
 8008b78:	3724      	adds	r7, #36	@ 0x24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd90      	pop	{r4, r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20008804 	.word	0x20008804
 8008b84:	20008800 	.word	0x20008800
 8008b88:	200087d0 	.word	0x200087d0
 8008b8c:	200087e0 	.word	0x200087e0
 8008b90:	200087f4 	.word	0x200087f4
 8008b94:	200087fa 	.word	0x200087fa
 8008b98:	200087f0 	.word	0x200087f0
 8008b9c:	20005258 	.word	0x20005258
 8008ba0:	2000525c 	.word	0x2000525c

08008ba4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <tcp_input_delayed_close+0x1c>
 8008bb2:	4b17      	ldr	r3, [pc, #92]	@ (8008c10 <tcp_input_delayed_close+0x6c>)
 8008bb4:	f240 225a 	movw	r2, #602	@ 0x25a
 8008bb8:	4916      	ldr	r1, [pc, #88]	@ (8008c14 <tcp_input_delayed_close+0x70>)
 8008bba:	4817      	ldr	r0, [pc, #92]	@ (8008c18 <tcp_input_delayed_close+0x74>)
 8008bbc:	f006 fc26 	bl	800f40c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008bc0:	4b16      	ldr	r3, [pc, #88]	@ (8008c1c <tcp_input_delayed_close+0x78>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01c      	beq.n	8008c06 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	8b5b      	ldrh	r3, [r3, #26]
 8008bd0:	f003 0310 	and.w	r3, r3, #16
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10d      	bne.n	8008bf4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d008      	beq.n	8008bf4 <tcp_input_delayed_close+0x50>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6912      	ldr	r2, [r2, #16]
 8008bec:	f06f 010e 	mvn.w	r1, #14
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	480a      	ldr	r0, [pc, #40]	@ (8008c20 <tcp_input_delayed_close+0x7c>)
 8008bf8:	f7ff fa50 	bl	800809c <tcp_pcb_remove>
    tcp_free(pcb);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7fe f83b 	bl	8006c78 <tcp_free>
    return 1;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	0801146c 	.word	0x0801146c
 8008c14:	0801163c 	.word	0x0801163c
 8008c18:	080114b8 	.word	0x080114b8
 8008c1c:	200087fd 	.word	0x200087fd
 8008c20:	200087c4 	.word	0x200087c4

08008c24 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008c24:	b590      	push	{r4, r7, lr}
 8008c26:	b08b      	sub	sp, #44	@ 0x2c
 8008c28:	af04      	add	r7, sp, #16
 8008c2a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8008dec <tcp_listen_input+0x1c8>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f040 80d2 	bne.w	8008dde <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d106      	bne.n	8008c4e <tcp_listen_input+0x2a>
 8008c40:	4b6b      	ldr	r3, [pc, #428]	@ (8008df0 <tcp_listen_input+0x1cc>)
 8008c42:	f240 2281 	movw	r2, #641	@ 0x281
 8008c46:	496b      	ldr	r1, [pc, #428]	@ (8008df4 <tcp_listen_input+0x1d0>)
 8008c48:	486b      	ldr	r0, [pc, #428]	@ (8008df8 <tcp_listen_input+0x1d4>)
 8008c4a:	f006 fbdf 	bl	800f40c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008c4e:	4b67      	ldr	r3, [pc, #412]	@ (8008dec <tcp_listen_input+0x1c8>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d019      	beq.n	8008c8e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c5a:	4b68      	ldr	r3, [pc, #416]	@ (8008dfc <tcp_listen_input+0x1d8>)
 8008c5c:	6819      	ldr	r1, [r3, #0]
 8008c5e:	4b68      	ldr	r3, [pc, #416]	@ (8008e00 <tcp_listen_input+0x1dc>)
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	4b67      	ldr	r3, [pc, #412]	@ (8008e04 <tcp_listen_input+0x1e0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c6a:	4b67      	ldr	r3, [pc, #412]	@ (8008e08 <tcp_listen_input+0x1e4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c6e:	885b      	ldrh	r3, [r3, #2]
 8008c70:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c72:	4a65      	ldr	r2, [pc, #404]	@ (8008e08 <tcp_listen_input+0x1e4>)
 8008c74:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c76:	8812      	ldrh	r2, [r2, #0]
 8008c78:	b292      	uxth	r2, r2
 8008c7a:	9202      	str	r2, [sp, #8]
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	4b63      	ldr	r3, [pc, #396]	@ (8008e0c <tcp_listen_input+0x1e8>)
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	4b63      	ldr	r3, [pc, #396]	@ (8008e10 <tcp_listen_input+0x1ec>)
 8008c84:	4602      	mov	r2, r0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 ff7a 	bl	800bb80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008c8c:	e0a9      	b.n	8008de2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008c8e:	4b57      	ldr	r3, [pc, #348]	@ (8008dec <tcp_listen_input+0x1c8>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 80a3 	beq.w	8008de2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7d5b      	ldrb	r3, [r3, #21]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff f927 	bl	8007ef4 <tcp_alloc>
 8008ca6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d111      	bne.n	8008cd2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <tcp_listen_input+0xa8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6910      	ldr	r0, [r2, #16]
 8008cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4798      	blx	r3
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73bb      	strb	r3, [r7, #14]
      return;
 8008cca:	e08b      	b.n	8008de4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008ccc:	23f0      	movs	r3, #240	@ 0xf0
 8008cce:	73bb      	strb	r3, [r7, #14]
      return;
 8008cd0:	e088      	b.n	8008de4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008cd2:	4b50      	ldr	r3, [pc, #320]	@ (8008e14 <tcp_listen_input+0x1f0>)
 8008cd4:	695a      	ldr	r2, [r3, #20]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008cda:	4b4e      	ldr	r3, [pc, #312]	@ (8008e14 <tcp_listen_input+0x1f0>)
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	8ada      	ldrh	r2, [r3, #22]
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008cea:	4b47      	ldr	r3, [pc, #284]	@ (8008e08 <tcp_listen_input+0x1e4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008cfc:	4b41      	ldr	r3, [pc, #260]	@ (8008e04 <tcp_listen_input+0x1e0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008d0e:	6978      	ldr	r0, [r7, #20]
 8008d10:	f7ff fa58 	bl	80081c4 <tcp_next_iss>
 8008d14:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008d2e:	4b35      	ldr	r3, [pc, #212]	@ (8008e04 <tcp_listen_input+0x1e0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	1e5a      	subs	r2, r3, #1
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	691a      	ldr	r2, [r3, #16]
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	7a5b      	ldrb	r3, [r3, #9]
 8008d4a:	f003 030c 	and.w	r3, r3, #12
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	7a1a      	ldrb	r2, [r3, #8]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e18 <tcp_listen_input+0x1f4>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	60da      	str	r2, [r3, #12]
 8008d64:	4a2c      	ldr	r2, [pc, #176]	@ (8008e18 <tcp_listen_input+0x1f4>)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	f003 f8cb 	bl	800bf04 <tcp_timer_needed>
 8008d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8008e1c <tcp_listen_input+0x1f8>)
 8008d70:	2201      	movs	r2, #1
 8008d72:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008d74:	6978      	ldr	r0, [r7, #20]
 8008d76:	f001 fd8b 	bl	800a890 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008d7a:	4b23      	ldr	r3, [pc, #140]	@ (8008e08 <tcp_listen_input+0x1e4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	89db      	ldrh	r3, [r3, #14]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f005 f849 	bl	800de34 <ip4_route>
 8008da2:	4601      	mov	r1, r0
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	3304      	adds	r3, #4
 8008da8:	461a      	mov	r2, r3
 8008daa:	4620      	mov	r0, r4
 8008dac:	f7ff fa30 	bl	8008210 <tcp_eff_send_mss_netif>
 8008db0:	4603      	mov	r3, r0
 8008db2:	461a      	mov	r2, r3
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008db8:	2112      	movs	r1, #18
 8008dba:	6978      	ldr	r0, [r7, #20]
 8008dbc:	f002 f83e 	bl	800ae3c <tcp_enqueue_flags>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008dcc:	2100      	movs	r1, #0
 8008dce:	6978      	ldr	r0, [r7, #20]
 8008dd0:	f7fe f97c 	bl	80070cc <tcp_abandon>
      return;
 8008dd4:	e006      	b.n	8008de4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008dd6:	6978      	ldr	r0, [r7, #20]
 8008dd8:	f002 f91e 	bl	800b018 <tcp_output>
  return;
 8008ddc:	e001      	b.n	8008de2 <tcp_listen_input+0x1be>
    return;
 8008dde:	bf00      	nop
 8008de0:	e000      	b.n	8008de4 <tcp_listen_input+0x1c0>
  return;
 8008de2:	bf00      	nop
}
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd90      	pop	{r4, r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200087fc 	.word	0x200087fc
 8008df0:	0801146c 	.word	0x0801146c
 8008df4:	08011664 	.word	0x08011664
 8008df8:	080114b8 	.word	0x080114b8
 8008dfc:	200087f4 	.word	0x200087f4
 8008e00:	200087fa 	.word	0x200087fa
 8008e04:	200087f0 	.word	0x200087f0
 8008e08:	200087e0 	.word	0x200087e0
 8008e0c:	20005258 	.word	0x20005258
 8008e10:	2000525c 	.word	0x2000525c
 8008e14:	20005248 	.word	0x20005248
 8008e18:	200087c4 	.word	0x200087c4
 8008e1c:	200087cc 	.word	0x200087cc

08008e20 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af04      	add	r7, sp, #16
 8008e26:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008e28:	4b2f      	ldr	r3, [pc, #188]	@ (8008ee8 <tcp_timewait_input+0xc8>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d153      	bne.n	8008edc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <tcp_timewait_input+0x28>
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008eec <tcp_timewait_input+0xcc>)
 8008e3c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008e40:	492b      	ldr	r1, [pc, #172]	@ (8008ef0 <tcp_timewait_input+0xd0>)
 8008e42:	482c      	ldr	r0, [pc, #176]	@ (8008ef4 <tcp_timewait_input+0xd4>)
 8008e44:	f006 fae2 	bl	800f40c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008e48:	4b27      	ldr	r3, [pc, #156]	@ (8008ee8 <tcp_timewait_input+0xc8>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d02a      	beq.n	8008eaa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008e54:	4b28      	ldr	r3, [pc, #160]	@ (8008ef8 <tcp_timewait_input+0xd8>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	db2d      	blt.n	8008ebe <tcp_timewait_input+0x9e>
 8008e62:	4b25      	ldr	r3, [pc, #148]	@ (8008ef8 <tcp_timewait_input+0xd8>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008e6e:	440b      	add	r3, r1
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dc23      	bgt.n	8008ebe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e76:	4b21      	ldr	r3, [pc, #132]	@ (8008efc <tcp_timewait_input+0xdc>)
 8008e78:	6819      	ldr	r1, [r3, #0]
 8008e7a:	4b21      	ldr	r3, [pc, #132]	@ (8008f00 <tcp_timewait_input+0xe0>)
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef8 <tcp_timewait_input+0xd8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e86:	4b1f      	ldr	r3, [pc, #124]	@ (8008f04 <tcp_timewait_input+0xe4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e8a:	885b      	ldrh	r3, [r3, #2]
 8008e8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8008f04 <tcp_timewait_input+0xe4>)
 8008e90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e92:	8812      	ldrh	r2, [r2, #0]
 8008e94:	b292      	uxth	r2, r2
 8008e96:	9202      	str	r2, [sp, #8]
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f08 <tcp_timewait_input+0xe8>)
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f0c <tcp_timewait_input+0xec>)
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f002 fe6c 	bl	800bb80 <tcp_rst>
      return;
 8008ea8:	e01b      	b.n	8008ee2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee8 <tcp_timewait_input+0xc8>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008eb6:	4b16      	ldr	r3, [pc, #88]	@ (8008f10 <tcp_timewait_input+0xf0>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008ebe:	4b10      	ldr	r3, [pc, #64]	@ (8008f00 <tcp_timewait_input+0xe0>)
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00c      	beq.n	8008ee0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8b5b      	ldrh	r3, [r3, #26]
 8008eca:	f043 0302 	orr.w	r3, r3, #2
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f002 f89f 	bl	800b018 <tcp_output>
  }
  return;
 8008eda:	e001      	b.n	8008ee0 <tcp_timewait_input+0xc0>
    return;
 8008edc:	bf00      	nop
 8008ede:	e000      	b.n	8008ee2 <tcp_timewait_input+0xc2>
  return;
 8008ee0:	bf00      	nop
}
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	200087fc 	.word	0x200087fc
 8008eec:	0801146c 	.word	0x0801146c
 8008ef0:	08011684 	.word	0x08011684
 8008ef4:	080114b8 	.word	0x080114b8
 8008ef8:	200087f0 	.word	0x200087f0
 8008efc:	200087f4 	.word	0x200087f4
 8008f00:	200087fa 	.word	0x200087fa
 8008f04:	200087e0 	.word	0x200087e0
 8008f08:	20005258 	.word	0x20005258
 8008f0c:	2000525c 	.word	0x2000525c
 8008f10:	200087b8 	.word	0x200087b8

08008f14 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008f14:	b590      	push	{r4, r7, lr}
 8008f16:	b08d      	sub	sp, #52	@ 0x34
 8008f18:	af04      	add	r7, sp, #16
 8008f1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <tcp_process+0x24>
 8008f2a:	4b9d      	ldr	r3, [pc, #628]	@ (80091a0 <tcp_process+0x28c>)
 8008f2c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008f30:	499c      	ldr	r1, [pc, #624]	@ (80091a4 <tcp_process+0x290>)
 8008f32:	489d      	ldr	r0, [pc, #628]	@ (80091a8 <tcp_process+0x294>)
 8008f34:	f006 fa6a 	bl	800f40c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008f38:	4b9c      	ldr	r3, [pc, #624]	@ (80091ac <tcp_process+0x298>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d04e      	beq.n	8008fe2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	7d1b      	ldrb	r3, [r3, #20]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d108      	bne.n	8008f5e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f50:	4b97      	ldr	r3, [pc, #604]	@ (80091b0 <tcp_process+0x29c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d123      	bne.n	8008fa0 <tcp_process+0x8c>
        acceptable = 1;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	76fb      	strb	r3, [r7, #27]
 8008f5c:	e020      	b.n	8008fa0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f62:	4b94      	ldr	r3, [pc, #592]	@ (80091b4 <tcp_process+0x2a0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d102      	bne.n	8008f70 <tcp_process+0x5c>
        acceptable = 1;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	76fb      	strb	r3, [r7, #27]
 8008f6e:	e017      	b.n	8008fa0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f70:	4b90      	ldr	r3, [pc, #576]	@ (80091b4 <tcp_process+0x2a0>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db10      	blt.n	8008fa0 <tcp_process+0x8c>
 8008f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80091b4 <tcp_process+0x2a0>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f8a:	440b      	add	r3, r1
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	dc06      	bgt.n	8008fa0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	8b5b      	ldrh	r3, [r3, #26]
 8008f96:	f043 0302 	orr.w	r3, r3, #2
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008fa0:	7efb      	ldrb	r3, [r7, #27]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01b      	beq.n	8008fde <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7d1b      	ldrb	r3, [r3, #20]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <tcp_process+0xa8>
 8008fae:	4b7c      	ldr	r3, [pc, #496]	@ (80091a0 <tcp_process+0x28c>)
 8008fb0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008fb4:	4980      	ldr	r1, [pc, #512]	@ (80091b8 <tcp_process+0x2a4>)
 8008fb6:	487c      	ldr	r0, [pc, #496]	@ (80091a8 <tcp_process+0x294>)
 8008fb8:	f006 fa28 	bl	800f40c <iprintf>
      recv_flags |= TF_RESET;
 8008fbc:	4b7f      	ldr	r3, [pc, #508]	@ (80091bc <tcp_process+0x2a8>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f043 0308 	orr.w	r3, r3, #8
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	4b7d      	ldr	r3, [pc, #500]	@ (80091bc <tcp_process+0x2a8>)
 8008fc8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8b5b      	ldrh	r3, [r3, #26]
 8008fce:	f023 0301 	bic.w	r3, r3, #1
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008fd8:	f06f 030d 	mvn.w	r3, #13
 8008fdc:	e37a      	b.n	80096d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e378      	b.n	80096d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008fe2:	4b72      	ldr	r3, [pc, #456]	@ (80091ac <tcp_process+0x298>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d010      	beq.n	8009010 <tcp_process+0xfc>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	7d1b      	ldrb	r3, [r3, #20]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d00c      	beq.n	8009010 <tcp_process+0xfc>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	7d1b      	ldrb	r3, [r3, #20]
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d008      	beq.n	8009010 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8b5b      	ldrh	r3, [r3, #26]
 8009002:	f043 0302 	orr.w	r3, r3, #2
 8009006:	b29a      	uxth	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e361      	b.n	80096d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	8b5b      	ldrh	r3, [r3, #26]
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800901c:	4b68      	ldr	r3, [pc, #416]	@ (80091c0 <tcp_process+0x2ac>)
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 fc2b 	bl	800a890 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7d1b      	ldrb	r3, [r3, #20]
 800903e:	3b02      	subs	r3, #2
 8009040:	2b07      	cmp	r3, #7
 8009042:	f200 8337 	bhi.w	80096b4 <tcp_process+0x7a0>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <tcp_process+0x138>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	0800906d 	.word	0x0800906d
 8009050:	0800929d 	.word	0x0800929d
 8009054:	08009415 	.word	0x08009415
 8009058:	0800943f 	.word	0x0800943f
 800905c:	08009563 	.word	0x08009563
 8009060:	08009415 	.word	0x08009415
 8009064:	080095ef 	.word	0x080095ef
 8009068:	0800967f 	.word	0x0800967f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800906c:	4b4f      	ldr	r3, [pc, #316]	@ (80091ac <tcp_process+0x298>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	f003 0310 	and.w	r3, r3, #16
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 80e4 	beq.w	8009242 <tcp_process+0x32e>
 800907a:	4b4c      	ldr	r3, [pc, #304]	@ (80091ac <tcp_process+0x298>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80dd 	beq.w	8009242 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	4b48      	ldr	r3, [pc, #288]	@ (80091b0 <tcp_process+0x29c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	429a      	cmp	r2, r3
 8009094:	f040 80d5 	bne.w	8009242 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009098:	4b46      	ldr	r3, [pc, #280]	@ (80091b4 <tcp_process+0x2a0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80090aa:	4b41      	ldr	r3, [pc, #260]	@ (80091b0 <tcp_process+0x29c>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80090b2:	4b44      	ldr	r3, [pc, #272]	@ (80091c4 <tcp_process+0x2b0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	89db      	ldrh	r3, [r3, #14]
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80090cc:	4b39      	ldr	r3, [pc, #228]	@ (80091b4 <tcp_process+0x2a0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2204      	movs	r2, #4
 80090da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4618      	mov	r0, r3
 80090e6:	f004 fea5 	bl	800de34 <ip4_route>
 80090ea:	4601      	mov	r1, r0
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3304      	adds	r3, #4
 80090f0:	461a      	mov	r2, r3
 80090f2:	4620      	mov	r0, r4
 80090f4:	f7ff f88c 	bl	8008210 <tcp_eff_send_mss_netif>
 80090f8:	4603      	mov	r3, r0
 80090fa:	461a      	mov	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009104:	009a      	lsls	r2, r3, #2
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009110:	428b      	cmp	r3, r1
 8009112:	bf38      	it	cc
 8009114:	460b      	movcc	r3, r1
 8009116:	429a      	cmp	r2, r3
 8009118:	d204      	bcs.n	8009124 <tcp_process+0x210>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	b29b      	uxth	r3, r3
 8009122:	e00d      	b.n	8009140 <tcp_process+0x22c>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800912e:	4293      	cmp	r3, r2
 8009130:	d904      	bls.n	800913c <tcp_process+0x228>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	b29b      	uxth	r3, r3
 800913a:	e001      	b.n	8009140 <tcp_process+0x22c>
 800913c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <tcp_process+0x24a>
 8009150:	4b13      	ldr	r3, [pc, #76]	@ (80091a0 <tcp_process+0x28c>)
 8009152:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8009156:	491c      	ldr	r1, [pc, #112]	@ (80091c8 <tcp_process+0x2b4>)
 8009158:	4813      	ldr	r0, [pc, #76]	@ (80091a8 <tcp_process+0x294>)
 800915a:	f006 f957 	bl	800f40c <iprintf>
        --pcb->snd_queuelen;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009164:	3b01      	subs	r3, #1
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009172:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d12a      	bne.n	80091d0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800917e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <tcp_process+0x280>
 8009186:	4b06      	ldr	r3, [pc, #24]	@ (80091a0 <tcp_process+0x28c>)
 8009188:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800918c:	490f      	ldr	r1, [pc, #60]	@ (80091cc <tcp_process+0x2b8>)
 800918e:	4806      	ldr	r0, [pc, #24]	@ (80091a8 <tcp_process+0x294>)
 8009190:	f006 f93c 	bl	800f40c <iprintf>
          pcb->unsent = rseg->next;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800919c:	e01c      	b.n	80091d8 <tcp_process+0x2c4>
 800919e:	bf00      	nop
 80091a0:	0801146c 	.word	0x0801146c
 80091a4:	080116a4 	.word	0x080116a4
 80091a8:	080114b8 	.word	0x080114b8
 80091ac:	200087fc 	.word	0x200087fc
 80091b0:	200087f4 	.word	0x200087f4
 80091b4:	200087f0 	.word	0x200087f0
 80091b8:	080116c0 	.word	0x080116c0
 80091bc:	200087fd 	.word	0x200087fd
 80091c0:	200087b8 	.word	0x200087b8
 80091c4:	200087e0 	.word	0x200087e0
 80091c8:	080116e0 	.word	0x080116e0
 80091cc:	080116f8 	.word	0x080116f8
        } else {
          pcb->unacked = rseg->next;
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80091d8:	69f8      	ldr	r0, [r7, #28]
 80091da:	f7fe fd22 	bl	8007c22 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d104      	bne.n	80091f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091ec:	861a      	strh	r2, [r3, #48]	@ 0x30
 80091ee:	e006      	b.n	80091fe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <tcp_process+0x30a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6910      	ldr	r0, [r2, #16]
 8009212:	2200      	movs	r2, #0
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4798      	blx	r3
 8009218:	4603      	mov	r3, r0
 800921a:	76bb      	strb	r3, [r7, #26]
 800921c:	e001      	b.n	8009222 <tcp_process+0x30e>
 800921e:	2300      	movs	r3, #0
 8009220:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009222:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009226:	f113 0f0d 	cmn.w	r3, #13
 800922a:	d102      	bne.n	8009232 <tcp_process+0x31e>
          return ERR_ABRT;
 800922c:	f06f 030c 	mvn.w	r3, #12
 8009230:	e250      	b.n	80096d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	8b5b      	ldrh	r3, [r3, #26]
 8009236:	f043 0302 	orr.w	r3, r3, #2
 800923a:	b29a      	uxth	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009240:	e23a      	b.n	80096b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009242:	4b98      	ldr	r3, [pc, #608]	@ (80094a4 <tcp_process+0x590>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 8234 	beq.w	80096b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009250:	4b95      	ldr	r3, [pc, #596]	@ (80094a8 <tcp_process+0x594>)
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	4b95      	ldr	r3, [pc, #596]	@ (80094ac <tcp_process+0x598>)
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	4b95      	ldr	r3, [pc, #596]	@ (80094b0 <tcp_process+0x59c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009260:	4b94      	ldr	r3, [pc, #592]	@ (80094b4 <tcp_process+0x5a0>)
 8009262:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009264:	885b      	ldrh	r3, [r3, #2]
 8009266:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009268:	4a92      	ldr	r2, [pc, #584]	@ (80094b4 <tcp_process+0x5a0>)
 800926a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800926c:	8812      	ldrh	r2, [r2, #0]
 800926e:	b292      	uxth	r2, r2
 8009270:	9202      	str	r2, [sp, #8]
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	4b90      	ldr	r3, [pc, #576]	@ (80094b8 <tcp_process+0x5a4>)
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4b90      	ldr	r3, [pc, #576]	@ (80094bc <tcp_process+0x5a8>)
 800927a:	4602      	mov	r2, r0
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f002 fc7f 	bl	800bb80 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009288:	2b05      	cmp	r3, #5
 800928a:	f200 8215 	bhi.w	80096b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f002 fa4b 	bl	800b730 <tcp_rexmit_rto>
      break;
 800929a:	e20d      	b.n	80096b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800929c:	4b81      	ldr	r3, [pc, #516]	@ (80094a4 <tcp_process+0x590>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80a1 	beq.w	80093ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80092aa:	4b7f      	ldr	r3, [pc, #508]	@ (80094a8 <tcp_process+0x594>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	db7e      	blt.n	80093b8 <tcp_process+0x4a4>
 80092ba:	4b7b      	ldr	r3, [pc, #492]	@ (80094a8 <tcp_process+0x594>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dc77      	bgt.n	80093b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2204      	movs	r2, #4
 80092cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80092d6:	23fa      	movs	r3, #250	@ 0xfa
 80092d8:	76bb      	strb	r3, [r7, #26]
 80092da:	e01d      	b.n	8009318 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <tcp_process+0x3e0>
 80092e6:	4b76      	ldr	r3, [pc, #472]	@ (80094c0 <tcp_process+0x5ac>)
 80092e8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80092ec:	4975      	ldr	r1, [pc, #468]	@ (80094c4 <tcp_process+0x5b0>)
 80092ee:	4876      	ldr	r0, [pc, #472]	@ (80094c8 <tcp_process+0x5b4>)
 80092f0:	f006 f88c 	bl	800f40c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <tcp_process+0x400>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6910      	ldr	r0, [r2, #16]
 8009308:	2200      	movs	r2, #0
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4798      	blx	r3
 800930e:	4603      	mov	r3, r0
 8009310:	76bb      	strb	r3, [r7, #26]
 8009312:	e001      	b.n	8009318 <tcp_process+0x404>
 8009314:	23f0      	movs	r3, #240	@ 0xf0
 8009316:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009318:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009320:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009324:	f113 0f0d 	cmn.w	r3, #13
 8009328:	d002      	beq.n	8009330 <tcp_process+0x41c>
              tcp_abort(pcb);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7fd ff8c 	bl	8007248 <tcp_abort>
            }
            return ERR_ABRT;
 8009330:	f06f 030c 	mvn.w	r3, #12
 8009334:	e1ce      	b.n	80096d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fae0 	bl	80098fc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800933c:	4b63      	ldr	r3, [pc, #396]	@ (80094cc <tcp_process+0x5b8>)
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <tcp_process+0x43c>
            recv_acked--;
 8009344:	4b61      	ldr	r3, [pc, #388]	@ (80094cc <tcp_process+0x5b8>)
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	4b5f      	ldr	r3, [pc, #380]	@ (80094cc <tcp_process+0x5b8>)
 800934e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009354:	009a      	lsls	r2, r3, #2
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009360:	428b      	cmp	r3, r1
 8009362:	bf38      	it	cc
 8009364:	460b      	movcc	r3, r1
 8009366:	429a      	cmp	r2, r3
 8009368:	d204      	bcs.n	8009374 <tcp_process+0x460>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	b29b      	uxth	r3, r3
 8009372:	e00d      	b.n	8009390 <tcp_process+0x47c>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800937e:	4293      	cmp	r3, r2
 8009380:	d904      	bls.n	800938c <tcp_process+0x478>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	b29b      	uxth	r3, r3
 800938a:	e001      	b.n	8009390 <tcp_process+0x47c>
 800938c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009396:	4b4e      	ldr	r3, [pc, #312]	@ (80094d0 <tcp_process+0x5bc>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d037      	beq.n	8009412 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	8b5b      	ldrh	r3, [r3, #26]
 80093a6:	f043 0302 	orr.w	r3, r3, #2
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2207      	movs	r2, #7
 80093b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80093b6:	e02c      	b.n	8009412 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093b8:	4b3b      	ldr	r3, [pc, #236]	@ (80094a8 <tcp_process+0x594>)
 80093ba:	6819      	ldr	r1, [r3, #0]
 80093bc:	4b3b      	ldr	r3, [pc, #236]	@ (80094ac <tcp_process+0x598>)
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	4b3b      	ldr	r3, [pc, #236]	@ (80094b0 <tcp_process+0x59c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093c8:	4b3a      	ldr	r3, [pc, #232]	@ (80094b4 <tcp_process+0x5a0>)
 80093ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093d0:	4a38      	ldr	r2, [pc, #224]	@ (80094b4 <tcp_process+0x5a0>)
 80093d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093d4:	8812      	ldrh	r2, [r2, #0]
 80093d6:	b292      	uxth	r2, r2
 80093d8:	9202      	str	r2, [sp, #8]
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	4b36      	ldr	r3, [pc, #216]	@ (80094b8 <tcp_process+0x5a4>)
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4b36      	ldr	r3, [pc, #216]	@ (80094bc <tcp_process+0x5a8>)
 80093e2:	4602      	mov	r2, r0
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f002 fbcb 	bl	800bb80 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80093ea:	e167      	b.n	80096bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80093ec:	4b2d      	ldr	r3, [pc, #180]	@ (80094a4 <tcp_process+0x590>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8161 	beq.w	80096bc <tcp_process+0x7a8>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fe:	1e5a      	subs	r2, r3, #1
 8009400:	4b2b      	ldr	r3, [pc, #172]	@ (80094b0 <tcp_process+0x59c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	f040 8159 	bne.w	80096bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f002 f9b2 	bl	800b774 <tcp_rexmit>
      break;
 8009410:	e154      	b.n	80096bc <tcp_process+0x7a8>
 8009412:	e153      	b.n	80096bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fa71 	bl	80098fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800941a:	4b2d      	ldr	r3, [pc, #180]	@ (80094d0 <tcp_process+0x5bc>)
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 814c 	beq.w	80096c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	8b5b      	ldrh	r3, [r3, #26]
 800942c:	f043 0302 	orr.w	r3, r3, #2
 8009430:	b29a      	uxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2207      	movs	r2, #7
 800943a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800943c:	e140      	b.n	80096c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa5c 	bl	80098fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009444:	4b22      	ldr	r3, [pc, #136]	@ (80094d0 <tcp_process+0x5bc>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d071      	beq.n	8009534 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009450:	4b14      	ldr	r3, [pc, #80]	@ (80094a4 <tcp_process+0x590>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	f003 0310 	and.w	r3, r3, #16
 8009458:	2b00      	cmp	r3, #0
 800945a:	d060      	beq.n	800951e <tcp_process+0x60a>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009460:	4b11      	ldr	r3, [pc, #68]	@ (80094a8 <tcp_process+0x594>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d15a      	bne.n	800951e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800946c:	2b00      	cmp	r3, #0
 800946e:	d156      	bne.n	800951e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8b5b      	ldrh	r3, [r3, #26]
 8009474:	f043 0302 	orr.w	r3, r3, #2
 8009478:	b29a      	uxth	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7fe fdbc 	bl	8007ffc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009484:	4b13      	ldr	r3, [pc, #76]	@ (80094d4 <tcp_process+0x5c0>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	429a      	cmp	r2, r3
 800948c:	d105      	bne.n	800949a <tcp_process+0x586>
 800948e:	4b11      	ldr	r3, [pc, #68]	@ (80094d4 <tcp_process+0x5c0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	4a0f      	ldr	r2, [pc, #60]	@ (80094d4 <tcp_process+0x5c0>)
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	e02e      	b.n	80094f8 <tcp_process+0x5e4>
 800949a:	4b0e      	ldr	r3, [pc, #56]	@ (80094d4 <tcp_process+0x5c0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	e027      	b.n	80094f2 <tcp_process+0x5de>
 80094a2:	bf00      	nop
 80094a4:	200087fc 	.word	0x200087fc
 80094a8:	200087f4 	.word	0x200087f4
 80094ac:	200087fa 	.word	0x200087fa
 80094b0:	200087f0 	.word	0x200087f0
 80094b4:	200087e0 	.word	0x200087e0
 80094b8:	20005258 	.word	0x20005258
 80094bc:	2000525c 	.word	0x2000525c
 80094c0:	0801146c 	.word	0x0801146c
 80094c4:	0801170c 	.word	0x0801170c
 80094c8:	080114b8 	.word	0x080114b8
 80094cc:	200087f8 	.word	0x200087f8
 80094d0:	200087fd 	.word	0x200087fd
 80094d4:	200087c4 	.word	0x200087c4
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d104      	bne.n	80094ec <tcp_process+0x5d8>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	60da      	str	r2, [r3, #12]
 80094ea:	e005      	b.n	80094f8 <tcp_process+0x5e4>
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1ef      	bne.n	80094d8 <tcp_process+0x5c4>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	60da      	str	r2, [r3, #12]
 80094fe:	4b77      	ldr	r3, [pc, #476]	@ (80096dc <tcp_process+0x7c8>)
 8009500:	2201      	movs	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	220a      	movs	r2, #10
 8009508:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800950a:	4b75      	ldr	r3, [pc, #468]	@ (80096e0 <tcp_process+0x7cc>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60da      	str	r2, [r3, #12]
 8009512:	4a73      	ldr	r2, [pc, #460]	@ (80096e0 <tcp_process+0x7cc>)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	f002 fcf4 	bl	800bf04 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800951c:	e0d2      	b.n	80096c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	8b5b      	ldrh	r3, [r3, #26]
 8009522:	f043 0302 	orr.w	r3, r3, #2
 8009526:	b29a      	uxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2208      	movs	r2, #8
 8009530:	751a      	strb	r2, [r3, #20]
      break;
 8009532:	e0c7      	b.n	80096c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009534:	4b6b      	ldr	r3, [pc, #428]	@ (80096e4 <tcp_process+0x7d0>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80c1 	beq.w	80096c4 <tcp_process+0x7b0>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009546:	4b68      	ldr	r3, [pc, #416]	@ (80096e8 <tcp_process+0x7d4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	429a      	cmp	r2, r3
 800954c:	f040 80ba 	bne.w	80096c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009554:	2b00      	cmp	r3, #0
 8009556:	f040 80b5 	bne.w	80096c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2206      	movs	r2, #6
 800955e:	751a      	strb	r2, [r3, #20]
      break;
 8009560:	e0b0      	b.n	80096c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f9ca 	bl	80098fc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009568:	4b60      	ldr	r3, [pc, #384]	@ (80096ec <tcp_process+0x7d8>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 0320 	and.w	r3, r3, #32
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80a9 	beq.w	80096c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8b5b      	ldrh	r3, [r3, #26]
 800957a:	f043 0302 	orr.w	r3, r3, #2
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7fe fd39 	bl	8007ffc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800958a:	4b59      	ldr	r3, [pc, #356]	@ (80096f0 <tcp_process+0x7dc>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d105      	bne.n	80095a0 <tcp_process+0x68c>
 8009594:	4b56      	ldr	r3, [pc, #344]	@ (80096f0 <tcp_process+0x7dc>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	4a55      	ldr	r2, [pc, #340]	@ (80096f0 <tcp_process+0x7dc>)
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	e013      	b.n	80095c8 <tcp_process+0x6b4>
 80095a0:	4b53      	ldr	r3, [pc, #332]	@ (80096f0 <tcp_process+0x7dc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	613b      	str	r3, [r7, #16]
 80095a6:	e00c      	b.n	80095c2 <tcp_process+0x6ae>
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d104      	bne.n	80095bc <tcp_process+0x6a8>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	60da      	str	r2, [r3, #12]
 80095ba:	e005      	b.n	80095c8 <tcp_process+0x6b4>
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	613b      	str	r3, [r7, #16]
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1ef      	bne.n	80095a8 <tcp_process+0x694>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	60da      	str	r2, [r3, #12]
 80095ce:	4b43      	ldr	r3, [pc, #268]	@ (80096dc <tcp_process+0x7c8>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	220a      	movs	r2, #10
 80095d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80095da:	4b41      	ldr	r3, [pc, #260]	@ (80096e0 <tcp_process+0x7cc>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	4a3f      	ldr	r2, [pc, #252]	@ (80096e0 <tcp_process+0x7cc>)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	f002 fc8c 	bl	800bf04 <tcp_timer_needed>
      }
      break;
 80095ec:	e06c      	b.n	80096c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f984 	bl	80098fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80095f4:	4b3b      	ldr	r3, [pc, #236]	@ (80096e4 <tcp_process+0x7d0>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f003 0310 	and.w	r3, r3, #16
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d065      	beq.n	80096cc <tcp_process+0x7b8>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009604:	4b38      	ldr	r3, [pc, #224]	@ (80096e8 <tcp_process+0x7d4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d15f      	bne.n	80096cc <tcp_process+0x7b8>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009610:	2b00      	cmp	r3, #0
 8009612:	d15b      	bne.n	80096cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7fe fcf1 	bl	8007ffc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800961a:	4b35      	ldr	r3, [pc, #212]	@ (80096f0 <tcp_process+0x7dc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d105      	bne.n	8009630 <tcp_process+0x71c>
 8009624:	4b32      	ldr	r3, [pc, #200]	@ (80096f0 <tcp_process+0x7dc>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	4a31      	ldr	r2, [pc, #196]	@ (80096f0 <tcp_process+0x7dc>)
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	e013      	b.n	8009658 <tcp_process+0x744>
 8009630:	4b2f      	ldr	r3, [pc, #188]	@ (80096f0 <tcp_process+0x7dc>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	e00c      	b.n	8009652 <tcp_process+0x73e>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	429a      	cmp	r2, r3
 8009640:	d104      	bne.n	800964c <tcp_process+0x738>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	60da      	str	r2, [r3, #12]
 800964a:	e005      	b.n	8009658 <tcp_process+0x744>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1ef      	bne.n	8009638 <tcp_process+0x724>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	60da      	str	r2, [r3, #12]
 800965e:	4b1f      	ldr	r3, [pc, #124]	@ (80096dc <tcp_process+0x7c8>)
 8009660:	2201      	movs	r2, #1
 8009662:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	220a      	movs	r2, #10
 8009668:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800966a:	4b1d      	ldr	r3, [pc, #116]	@ (80096e0 <tcp_process+0x7cc>)
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	60da      	str	r2, [r3, #12]
 8009672:	4a1b      	ldr	r2, [pc, #108]	@ (80096e0 <tcp_process+0x7cc>)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	f002 fc44 	bl	800bf04 <tcp_timer_needed>
      }
      break;
 800967c:	e026      	b.n	80096cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f93c 	bl	80098fc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009684:	4b17      	ldr	r3, [pc, #92]	@ (80096e4 <tcp_process+0x7d0>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01f      	beq.n	80096d0 <tcp_process+0x7bc>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009694:	4b14      	ldr	r3, [pc, #80]	@ (80096e8 <tcp_process+0x7d4>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d119      	bne.n	80096d0 <tcp_process+0x7bc>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d115      	bne.n	80096d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80096a4:	4b11      	ldr	r3, [pc, #68]	@ (80096ec <tcp_process+0x7d8>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	f043 0310 	orr.w	r3, r3, #16
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	4b0f      	ldr	r3, [pc, #60]	@ (80096ec <tcp_process+0x7d8>)
 80096b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80096b2:	e00d      	b.n	80096d0 <tcp_process+0x7bc>
    default:
      break;
 80096b4:	bf00      	nop
 80096b6:	e00c      	b.n	80096d2 <tcp_process+0x7be>
      break;
 80096b8:	bf00      	nop
 80096ba:	e00a      	b.n	80096d2 <tcp_process+0x7be>
      break;
 80096bc:	bf00      	nop
 80096be:	e008      	b.n	80096d2 <tcp_process+0x7be>
      break;
 80096c0:	bf00      	nop
 80096c2:	e006      	b.n	80096d2 <tcp_process+0x7be>
      break;
 80096c4:	bf00      	nop
 80096c6:	e004      	b.n	80096d2 <tcp_process+0x7be>
      break;
 80096c8:	bf00      	nop
 80096ca:	e002      	b.n	80096d2 <tcp_process+0x7be>
      break;
 80096cc:	bf00      	nop
 80096ce:	e000      	b.n	80096d2 <tcp_process+0x7be>
      break;
 80096d0:	bf00      	nop
  }
  return ERR_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3724      	adds	r7, #36	@ 0x24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd90      	pop	{r4, r7, pc}
 80096dc:	200087cc 	.word	0x200087cc
 80096e0:	200087c8 	.word	0x200087c8
 80096e4:	200087fc 	.word	0x200087fc
 80096e8:	200087f4 	.word	0x200087f4
 80096ec:	200087fd 	.word	0x200087fd
 80096f0:	200087c4 	.word	0x200087c4

080096f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d106      	bne.n	8009712 <tcp_oos_insert_segment+0x1e>
 8009704:	4b3b      	ldr	r3, [pc, #236]	@ (80097f4 <tcp_oos_insert_segment+0x100>)
 8009706:	f240 421f 	movw	r2, #1055	@ 0x41f
 800970a:	493b      	ldr	r1, [pc, #236]	@ (80097f8 <tcp_oos_insert_segment+0x104>)
 800970c:	483b      	ldr	r0, [pc, #236]	@ (80097fc <tcp_oos_insert_segment+0x108>)
 800970e:	f005 fe7d 	bl	800f40c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	899b      	ldrh	r3, [r3, #12]
 8009718:	b29b      	uxth	r3, r3
 800971a:	4618      	mov	r0, r3
 800971c:	f7fb fc9e 	bl	800505c <lwip_htons>
 8009720:	4603      	mov	r3, r0
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d028      	beq.n	800977e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800972c:	6838      	ldr	r0, [r7, #0]
 800972e:	f7fe fa63 	bl	8007bf8 <tcp_segs_free>
    next = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	e056      	b.n	80097e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	899b      	ldrh	r3, [r3, #12]
 800973e:	b29b      	uxth	r3, r3
 8009740:	4618      	mov	r0, r3
 8009742:	f7fb fc8b 	bl	800505c <lwip_htons>
 8009746:	4603      	mov	r3, r0
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00d      	beq.n	800976e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	899b      	ldrh	r3, [r3, #12]
 8009758:	b29c      	uxth	r4, r3
 800975a:	2001      	movs	r0, #1
 800975c:	f7fb fc7e 	bl	800505c <lwip_htons>
 8009760:	4603      	mov	r3, r0
 8009762:	461a      	mov	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	4322      	orrs	r2, r4
 800976a:	b292      	uxth	r2, r2
 800976c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7fe fa52 	bl	8007c22 <tcp_seg_free>
    while (next &&
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00e      	beq.n	80097a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	891b      	ldrh	r3, [r3, #8]
 8009788:	461a      	mov	r2, r3
 800978a:	4b1d      	ldr	r3, [pc, #116]	@ (8009800 <tcp_oos_insert_segment+0x10c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	441a      	add	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	8909      	ldrh	r1, [r1, #8]
 800979a:	440b      	add	r3, r1
 800979c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800979e:	2b00      	cmp	r3, #0
 80097a0:	daca      	bge.n	8009738 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d01e      	beq.n	80097e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	891b      	ldrh	r3, [r3, #8]
 80097ac:	461a      	mov	r2, r3
 80097ae:	4b14      	ldr	r3, [pc, #80]	@ (8009800 <tcp_oos_insert_segment+0x10c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	441a      	add	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dd12      	ble.n	80097e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <tcp_oos_insert_segment+0x10c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	891b      	ldrh	r3, [r3, #8]
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7fc fe13 	bl	800640c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	601a      	str	r2, [r3, #0]
}
 80097ec:	bf00      	nop
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd90      	pop	{r4, r7, pc}
 80097f4:	0801146c 	.word	0x0801146c
 80097f8:	0801172c 	.word	0x0801172c
 80097fc:	080114b8 	.word	0x080114b8
 8009800:	200087f0 	.word	0x200087f0

08009804 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009804:	b5b0      	push	{r4, r5, r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009812:	e03e      	b.n	8009892 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	4618      	mov	r0, r3
 8009824:	f7fd f800 	bl	8006828 <pbuf_clen>
 8009828:	4603      	mov	r3, r0
 800982a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009832:	8a7a      	ldrh	r2, [r7, #18]
 8009834:	429a      	cmp	r2, r3
 8009836:	d906      	bls.n	8009846 <tcp_free_acked_segments+0x42>
 8009838:	4b2a      	ldr	r3, [pc, #168]	@ (80098e4 <tcp_free_acked_segments+0xe0>)
 800983a:	f240 4257 	movw	r2, #1111	@ 0x457
 800983e:	492a      	ldr	r1, [pc, #168]	@ (80098e8 <tcp_free_acked_segments+0xe4>)
 8009840:	482a      	ldr	r0, [pc, #168]	@ (80098ec <tcp_free_acked_segments+0xe8>)
 8009842:	f005 fde3 	bl	800f40c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800984c:	8a7b      	ldrh	r3, [r7, #18]
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	891a      	ldrh	r2, [r3, #8]
 800985c:	4b24      	ldr	r3, [pc, #144]	@ (80098f0 <tcp_free_acked_segments+0xec>)
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	4413      	add	r3, r2
 8009862:	b29a      	uxth	r2, r3
 8009864:	4b22      	ldr	r3, [pc, #136]	@ (80098f0 <tcp_free_acked_segments+0xec>)
 8009866:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009868:	6978      	ldr	r0, [r7, #20]
 800986a:	f7fe f9da 	bl	8007c22 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00c      	beq.n	8009892 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d109      	bne.n	8009892 <tcp_free_acked_segments+0x8e>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <tcp_free_acked_segments+0x8e>
 8009884:	4b17      	ldr	r3, [pc, #92]	@ (80098e4 <tcp_free_acked_segments+0xe0>)
 8009886:	f240 4261 	movw	r2, #1121	@ 0x461
 800988a:	491a      	ldr	r1, [pc, #104]	@ (80098f4 <tcp_free_acked_segments+0xf0>)
 800988c:	4817      	ldr	r0, [pc, #92]	@ (80098ec <tcp_free_acked_segments+0xe8>)
 800988e:	f005 fdbd 	bl	800f40c <iprintf>
  while (seg_list != NULL &&
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d020      	beq.n	80098da <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fb fbf1 	bl	8005086 <lwip_htonl>
 80098a4:	4604      	mov	r4, r0
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	891b      	ldrh	r3, [r3, #8]
 80098aa:	461d      	mov	r5, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	899b      	ldrh	r3, [r3, #12]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fb fbd1 	bl	800505c <lwip_htons>
 80098ba:	4603      	mov	r3, r0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <tcp_free_acked_segments+0xc6>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <tcp_free_acked_segments+0xc8>
 80098ca:	2300      	movs	r3, #0
 80098cc:	442b      	add	r3, r5
 80098ce:	18e2      	adds	r2, r4, r3
 80098d0:	4b09      	ldr	r3, [pc, #36]	@ (80098f8 <tcp_free_acked_segments+0xf4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dd9c      	ble.n	8009814 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80098da:	68bb      	ldr	r3, [r7, #8]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bdb0      	pop	{r4, r5, r7, pc}
 80098e4:	0801146c 	.word	0x0801146c
 80098e8:	08011754 	.word	0x08011754
 80098ec:	080114b8 	.word	0x080114b8
 80098f0:	200087f8 	.word	0x200087f8
 80098f4:	0801177c 	.word	0x0801177c
 80098f8:	200087f4 	.word	0x200087f4

080098fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80098fc:	b5b0      	push	{r4, r5, r7, lr}
 80098fe:	b094      	sub	sp, #80	@ 0x50
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d106      	bne.n	800991c <tcp_receive+0x20>
 800990e:	4b91      	ldr	r3, [pc, #580]	@ (8009b54 <tcp_receive+0x258>)
 8009910:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009914:	4990      	ldr	r1, [pc, #576]	@ (8009b58 <tcp_receive+0x25c>)
 8009916:	4891      	ldr	r0, [pc, #580]	@ (8009b5c <tcp_receive+0x260>)
 8009918:	f005 fd78 	bl	800f40c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7d1b      	ldrb	r3, [r3, #20]
 8009920:	2b03      	cmp	r3, #3
 8009922:	d806      	bhi.n	8009932 <tcp_receive+0x36>
 8009924:	4b8b      	ldr	r3, [pc, #556]	@ (8009b54 <tcp_receive+0x258>)
 8009926:	f240 427c 	movw	r2, #1148	@ 0x47c
 800992a:	498d      	ldr	r1, [pc, #564]	@ (8009b60 <tcp_receive+0x264>)
 800992c:	488b      	ldr	r0, [pc, #556]	@ (8009b5c <tcp_receive+0x260>)
 800992e:	f005 fd6d 	bl	800f40c <iprintf>

  if (flags & TCP_ACK) {
 8009932:	4b8c      	ldr	r3, [pc, #560]	@ (8009b64 <tcp_receive+0x268>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	f003 0310 	and.w	r3, r3, #16
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 8264 	beq.w	8009e08 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994c:	4413      	add	r3, r2
 800994e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009954:	4b84      	ldr	r3, [pc, #528]	@ (8009b68 <tcp_receive+0x26c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	db1b      	blt.n	8009996 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009962:	4b81      	ldr	r3, [pc, #516]	@ (8009b68 <tcp_receive+0x26c>)
 8009964:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009966:	429a      	cmp	r2, r3
 8009968:	d106      	bne.n	8009978 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800996e:	4b7f      	ldr	r3, [pc, #508]	@ (8009b6c <tcp_receive+0x270>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	db0e      	blt.n	8009996 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800997c:	4b7b      	ldr	r3, [pc, #492]	@ (8009b6c <tcp_receive+0x270>)
 800997e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009980:	429a      	cmp	r2, r3
 8009982:	d125      	bne.n	80099d0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009984:	4b7a      	ldr	r3, [pc, #488]	@ (8009b70 <tcp_receive+0x274>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	89db      	ldrh	r3, [r3, #14]
 800998a:	b29a      	uxth	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009992:	429a      	cmp	r2, r3
 8009994:	d91c      	bls.n	80099d0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009996:	4b76      	ldr	r3, [pc, #472]	@ (8009b70 <tcp_receive+0x274>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	89db      	ldrh	r3, [r3, #14]
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d205      	bcs.n	80099c0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80099c0:	4b69      	ldr	r3, [pc, #420]	@ (8009b68 <tcp_receive+0x26c>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80099c8:	4b68      	ldr	r3, [pc, #416]	@ (8009b6c <tcp_receive+0x270>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80099d0:	4b66      	ldr	r3, [pc, #408]	@ (8009b6c <tcp_receive+0x270>)
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dc58      	bgt.n	8009a90 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80099de:	4b65      	ldr	r3, [pc, #404]	@ (8009b74 <tcp_receive+0x278>)
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d14b      	bne.n	8009a7e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80099f0:	4413      	add	r3, r2
 80099f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d142      	bne.n	8009a7e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	db3d      	blt.n	8009a7e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a06:	4b59      	ldr	r3, [pc, #356]	@ (8009b6c <tcp_receive+0x270>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d137      	bne.n	8009a7e <tcp_receive+0x182>
              found_dupack = 1;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a18:	2bff      	cmp	r3, #255	@ 0xff
 8009a1a:	d007      	beq.n	8009a2c <tcp_receive+0x130>
                ++pcb->dupacks;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a22:	3301      	adds	r3, #1
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d91b      	bls.n	8009a6e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009a40:	4413      	add	r3, r2
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d30a      	bcc.n	8009a64 <tcp_receive+0x168>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009a58:	4413      	add	r3, r2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009a62:	e004      	b.n	8009a6e <tcp_receive+0x172>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d902      	bls.n	8009a7e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 fee7 	bl	800b84c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 8161 	bne.w	8009d48 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a8e:	e15b      	b.n	8009d48 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a90:	4b36      	ldr	r3, [pc, #216]	@ (8009b6c <tcp_receive+0x270>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f2c0 814e 	blt.w	8009d3e <tcp_receive+0x442>
 8009aa2:	4b32      	ldr	r3, [pc, #200]	@ (8009b6c <tcp_receive+0x270>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f300 8146 	bgt.w	8009d3e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	8b5b      	ldrh	r3, [r3, #26]
 8009ab6:	f003 0304 	and.w	r3, r3, #4
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d010      	beq.n	8009ae0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	8b5b      	ldrh	r3, [r3, #26]
 8009ac2:	f023 0304 	bic.w	r3, r3, #4
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009aee:	10db      	asrs	r3, r3, #3
 8009af0:	b21b      	sxth	r3, r3
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4413      	add	r3, r2
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	b21a      	sxth	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009b08:	4b18      	ldr	r3, [pc, #96]	@ (8009b6c <tcp_receive+0x270>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009b20:	4b12      	ldr	r3, [pc, #72]	@ (8009b6c <tcp_receive+0x270>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7d1b      	ldrb	r3, [r3, #20]
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	f240 8097 	bls.w	8009c60 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d245      	bcs.n	8009bce <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	8b5b      	ldrh	r3, [r3, #26]
 8009b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d014      	beq.n	8009b78 <tcp_receive+0x27c>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e013      	b.n	8009b7a <tcp_receive+0x27e>
 8009b52:	bf00      	nop
 8009b54:	0801146c 	.word	0x0801146c
 8009b58:	0801179c 	.word	0x0801179c
 8009b5c:	080114b8 	.word	0x080114b8
 8009b60:	080117b8 	.word	0x080117b8
 8009b64:	200087fc 	.word	0x200087fc
 8009b68:	200087f0 	.word	0x200087f0
 8009b6c:	200087f4 	.word	0x200087f4
 8009b70:	200087e0 	.word	0x200087e0
 8009b74:	200087fa 	.word	0x200087fa
 8009b78:	2302      	movs	r3, #2
 8009b7a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009b7e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b88:	fb12 f303 	smulbb	r3, r2, r3
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009b90:	4293      	cmp	r3, r2
 8009b92:	bf28      	it	cs
 8009b94:	4613      	movcs	r3, r2
 8009b96:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009ba0:	4413      	add	r3, r2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d309      	bcc.n	8009bc2 <tcp_receive+0x2c6>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009bb4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009bb6:	4413      	add	r3, r2
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009bc0:	e04e      	b.n	8009c60 <tcp_receive+0x364>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bc8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009bcc:	e048      	b.n	8009c60 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009bd4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009bd6:	4413      	add	r3, r2
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d309      	bcc.n	8009bf8 <tcp_receive+0x2fc>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009bea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009bec:	4413      	add	r3, r2
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009bf6:	e004      	b.n	8009c02 <tcp_receive+0x306>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d326      	bcc.n	8009c60 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c32:	4413      	add	r3, r2
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d30a      	bcc.n	8009c56 <tcp_receive+0x35a>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c4a:	4413      	add	r3, r2
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009c54:	e004      	b.n	8009c60 <tcp_receive+0x364>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c68:	4a98      	ldr	r2, [pc, #608]	@ (8009ecc <tcp_receive+0x5d0>)
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fdca 	bl	8009804 <tcp_free_acked_segments>
 8009c70:	4602      	mov	r2, r0
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c7e:	4a94      	ldr	r2, [pc, #592]	@ (8009ed0 <tcp_receive+0x5d4>)
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff fdbf 	bl	8009804 <tcp_free_acked_segments>
 8009c86:	4602      	mov	r2, r0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c9a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009c9c:	e002      	b.n	8009ca4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d103      	bne.n	8009cba <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009cc0:	4b84      	ldr	r3, [pc, #528]	@ (8009ed4 <tcp_receive+0x5d8>)
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	8b5b      	ldrh	r3, [r3, #26]
 8009cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d035      	beq.n	8009d46 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d118      	bne.n	8009d14 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00c      	beq.n	8009d04 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fb f9c5 	bl	8005086 <lwip_htonl>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dc20      	bgt.n	8009d46 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8b5b      	ldrh	r3, [r3, #26]
 8009d08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d12:	e018      	b.n	8009d46 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fb f9b0 	bl	8005086 <lwip_htonl>
 8009d26:	4603      	mov	r3, r0
 8009d28:	1ae3      	subs	r3, r4, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dc0b      	bgt.n	8009d46 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	8b5b      	ldrh	r3, [r3, #26]
 8009d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d3c:	e003      	b.n	8009d46 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 ff70 	bl	800bc24 <tcp_send_empty_ack>
 8009d44:	e000      	b.n	8009d48 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d46:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d05b      	beq.n	8009e08 <tcp_receive+0x50c>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d54:	4b60      	ldr	r3, [pc, #384]	@ (8009ed8 <tcp_receive+0x5dc>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da54      	bge.n	8009e08 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8009edc <tcp_receive+0x5e0>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009d72:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009d7c:	10db      	asrs	r3, r3, #3
 8009d7e:	b21b      	sxth	r3, r3
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009d96:	4413      	add	r3, r2
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	b21a      	sxth	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009da0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	da05      	bge.n	8009db4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009da8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009dac:	425b      	negs	r3, r3
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009db4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009dbe:	109b      	asrs	r3, r3, #2
 8009dc0:	b21b      	sxth	r3, r3
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009dd8:	4413      	add	r3, r2
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	b21a      	sxth	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009de8:	10db      	asrs	r3, r3, #3
 8009dea:	b21b      	sxth	r3, r3
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	4413      	add	r3, r2
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	b21a      	sxth	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009e08:	4b35      	ldr	r3, [pc, #212]	@ (8009ee0 <tcp_receive+0x5e4>)
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 84df 	beq.w	800a7d0 <tcp_receive+0xed4>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	7d1b      	ldrb	r3, [r3, #20]
 8009e16:	2b06      	cmp	r3, #6
 8009e18:	f200 84da 	bhi.w	800a7d0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e20:	4b30      	ldr	r3, [pc, #192]	@ (8009ee4 <tcp_receive+0x5e8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f2c0 808f 	blt.w	8009f4c <tcp_receive+0x650>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e32:	4b2b      	ldr	r3, [pc, #172]	@ (8009ee0 <tcp_receive+0x5e4>)
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	4619      	mov	r1, r3
 8009e38:	4b2a      	ldr	r3, [pc, #168]	@ (8009ee4 <tcp_receive+0x5e8>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	440b      	add	r3, r1
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	3301      	adds	r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f300 8082 	bgt.w	8009f4c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009e48:	4b27      	ldr	r3, [pc, #156]	@ (8009ee8 <tcp_receive+0x5ec>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e52:	4b24      	ldr	r3, [pc, #144]	@ (8009ee4 <tcp_receive+0x5e8>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009e5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ee8 <tcp_receive+0x5ec>)
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d106      	bne.n	8009e70 <tcp_receive+0x574>
 8009e62:	4b22      	ldr	r3, [pc, #136]	@ (8009eec <tcp_receive+0x5f0>)
 8009e64:	f240 5294 	movw	r2, #1428	@ 0x594
 8009e68:	4921      	ldr	r1, [pc, #132]	@ (8009ef0 <tcp_receive+0x5f4>)
 8009e6a:	4822      	ldr	r0, [pc, #136]	@ (8009ef4 <tcp_receive+0x5f8>)
 8009e6c:	f005 face 	bl	800f40c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d906      	bls.n	8009e88 <tcp_receive+0x58c>
 8009e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8009eec <tcp_receive+0x5f0>)
 8009e7c:	f240 5295 	movw	r2, #1429	@ 0x595
 8009e80:	491d      	ldr	r1, [pc, #116]	@ (8009ef8 <tcp_receive+0x5fc>)
 8009e82:	481c      	ldr	r0, [pc, #112]	@ (8009ef4 <tcp_receive+0x5f8>)
 8009e84:	f005 fac2 	bl	800f40c <iprintf>
      off = (u16_t)off32;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009e8e:	4b16      	ldr	r3, [pc, #88]	@ (8009ee8 <tcp_receive+0x5ec>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	891b      	ldrh	r3, [r3, #8]
 8009e94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d906      	bls.n	8009eaa <tcp_receive+0x5ae>
 8009e9c:	4b13      	ldr	r3, [pc, #76]	@ (8009eec <tcp_receive+0x5f0>)
 8009e9e:	f240 5297 	movw	r2, #1431	@ 0x597
 8009ea2:	4916      	ldr	r1, [pc, #88]	@ (8009efc <tcp_receive+0x600>)
 8009ea4:	4813      	ldr	r0, [pc, #76]	@ (8009ef4 <tcp_receive+0x5f8>)
 8009ea6:	f005 fab1 	bl	800f40c <iprintf>
      inseg.len -= off;
 8009eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee8 <tcp_receive+0x5ec>)
 8009eac:	891a      	ldrh	r2, [r3, #8]
 8009eae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee8 <tcp_receive+0x5ec>)
 8009eb8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009eba:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee8 <tcp_receive+0x5ec>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	891a      	ldrh	r2, [r3, #8]
 8009ec0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009ec8:	e02a      	b.n	8009f20 <tcp_receive+0x624>
 8009eca:	bf00      	nop
 8009ecc:	080117d4 	.word	0x080117d4
 8009ed0:	080117dc 	.word	0x080117dc
 8009ed4:	200087f8 	.word	0x200087f8
 8009ed8:	200087f4 	.word	0x200087f4
 8009edc:	200087b8 	.word	0x200087b8
 8009ee0:	200087fa 	.word	0x200087fa
 8009ee4:	200087f0 	.word	0x200087f0
 8009ee8:	200087d0 	.word	0x200087d0
 8009eec:	0801146c 	.word	0x0801146c
 8009ef0:	080117e4 	.word	0x080117e4
 8009ef4:	080114b8 	.word	0x080114b8
 8009ef8:	080117f4 	.word	0x080117f4
 8009efc:	08011804 	.word	0x08011804
        off -= p->len;
 8009f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f02:	895b      	ldrh	r3, [r3, #10]
 8009f04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f10:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009f12:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f16:	2200      	movs	r2, #0
 8009f18:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f22:	895b      	ldrh	r3, [r3, #10]
 8009f24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d8e9      	bhi.n	8009f00 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009f30:	4619      	mov	r1, r3
 8009f32:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009f34:	f7fc fb6a 	bl	800660c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3c:	4a90      	ldr	r2, [pc, #576]	@ (800a180 <tcp_receive+0x884>)
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	4b90      	ldr	r3, [pc, #576]	@ (800a184 <tcp_receive+0x888>)
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	4a8e      	ldr	r2, [pc, #568]	@ (800a180 <tcp_receive+0x884>)
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009f4a:	e00d      	b.n	8009f68 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009f4c:	4b8c      	ldr	r3, [pc, #560]	@ (800a180 <tcp_receive+0x884>)
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da06      	bge.n	8009f68 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	8b5b      	ldrh	r3, [r3, #26]
 8009f5e:	f043 0302 	orr.w	r3, r3, #2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009f68:	4b85      	ldr	r3, [pc, #532]	@ (800a180 <tcp_receive+0x884>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f2c0 8427 	blt.w	800a7c6 <tcp_receive+0xeca>
 8009f78:	4b81      	ldr	r3, [pc, #516]	@ (800a180 <tcp_receive+0x884>)
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009f84:	440b      	add	r3, r1
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	3301      	adds	r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f300 841b 	bgt.w	800a7c6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f94:	4b7a      	ldr	r3, [pc, #488]	@ (800a180 <tcp_receive+0x884>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	f040 8298 	bne.w	800a4ce <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009f9e:	4b79      	ldr	r3, [pc, #484]	@ (800a184 <tcp_receive+0x888>)
 8009fa0:	891c      	ldrh	r4, [r3, #8]
 8009fa2:	4b78      	ldr	r3, [pc, #480]	@ (800a184 <tcp_receive+0x888>)
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	899b      	ldrh	r3, [r3, #12]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fb f856 	bl	800505c <lwip_htons>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <tcp_receive+0x6c4>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <tcp_receive+0x6c6>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4423      	add	r3, r4
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	4b70      	ldr	r3, [pc, #448]	@ (800a188 <tcp_receive+0x88c>)
 8009fc8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009fce:	4b6e      	ldr	r3, [pc, #440]	@ (800a188 <tcp_receive+0x88c>)
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d274      	bcs.n	800a0c0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009fd6:	4b6b      	ldr	r3, [pc, #428]	@ (800a184 <tcp_receive+0x888>)
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	899b      	ldrh	r3, [r3, #12]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fb f83c 	bl	800505c <lwip_htons>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01e      	beq.n	800a02e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009ff0:	4b64      	ldr	r3, [pc, #400]	@ (800a184 <tcp_receive+0x888>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	899b      	ldrh	r3, [r3, #12]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	b21b      	sxth	r3, r3
 8009ffa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009ffe:	b21c      	sxth	r4, r3
 800a000:	4b60      	ldr	r3, [pc, #384]	@ (800a184 <tcp_receive+0x888>)
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	899b      	ldrh	r3, [r3, #12]
 800a006:	b29b      	uxth	r3, r3
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fb f827 	bl	800505c <lwip_htons>
 800a00e:	4603      	mov	r3, r0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a016:	b29b      	uxth	r3, r3
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fb f81f 	bl	800505c <lwip_htons>
 800a01e:	4603      	mov	r3, r0
 800a020:	b21b      	sxth	r3, r3
 800a022:	4323      	orrs	r3, r4
 800a024:	b21a      	sxth	r2, r3
 800a026:	4b57      	ldr	r3, [pc, #348]	@ (800a184 <tcp_receive+0x888>)
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	b292      	uxth	r2, r2
 800a02c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a032:	4b54      	ldr	r3, [pc, #336]	@ (800a184 <tcp_receive+0x888>)
 800a034:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a036:	4b53      	ldr	r3, [pc, #332]	@ (800a184 <tcp_receive+0x888>)
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	899b      	ldrh	r3, [r3, #12]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fb f80c 	bl	800505c <lwip_htons>
 800a044:	4603      	mov	r3, r0
 800a046:	b2db      	uxtb	r3, r3
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <tcp_receive+0x760>
            inseg.len -= 1;
 800a050:	4b4c      	ldr	r3, [pc, #304]	@ (800a184 <tcp_receive+0x888>)
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	3b01      	subs	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	4b4a      	ldr	r3, [pc, #296]	@ (800a184 <tcp_receive+0x888>)
 800a05a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a05c:	4b49      	ldr	r3, [pc, #292]	@ (800a184 <tcp_receive+0x888>)
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4a48      	ldr	r2, [pc, #288]	@ (800a184 <tcp_receive+0x888>)
 800a062:	8912      	ldrh	r2, [r2, #8]
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7fc f9d0 	bl	800640c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a06c:	4b45      	ldr	r3, [pc, #276]	@ (800a184 <tcp_receive+0x888>)
 800a06e:	891c      	ldrh	r4, [r3, #8]
 800a070:	4b44      	ldr	r3, [pc, #272]	@ (800a184 <tcp_receive+0x888>)
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	899b      	ldrh	r3, [r3, #12]
 800a076:	b29b      	uxth	r3, r3
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fa ffef 	bl	800505c <lwip_htons>
 800a07e:	4603      	mov	r3, r0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <tcp_receive+0x792>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <tcp_receive+0x794>
 800a08e:	2300      	movs	r3, #0
 800a090:	4423      	add	r3, r4
 800a092:	b29a      	uxth	r2, r3
 800a094:	4b3c      	ldr	r3, [pc, #240]	@ (800a188 <tcp_receive+0x88c>)
 800a096:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a098:	4b3b      	ldr	r3, [pc, #236]	@ (800a188 <tcp_receive+0x88c>)
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	4b38      	ldr	r3, [pc, #224]	@ (800a180 <tcp_receive+0x884>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	441a      	add	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a0ac:	440b      	add	r3, r1
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d006      	beq.n	800a0c0 <tcp_receive+0x7c4>
 800a0b2:	4b36      	ldr	r3, [pc, #216]	@ (800a18c <tcp_receive+0x890>)
 800a0b4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a0b8:	4935      	ldr	r1, [pc, #212]	@ (800a190 <tcp_receive+0x894>)
 800a0ba:	4836      	ldr	r0, [pc, #216]	@ (800a194 <tcp_receive+0x898>)
 800a0bc:	f005 f9a6 	bl	800f40c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 80e6 	beq.w	800a296 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0ca:	4b2e      	ldr	r3, [pc, #184]	@ (800a184 <tcp_receive+0x888>)
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	899b      	ldrh	r3, [r3, #12]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fa ffc2 	bl	800505c <lwip_htons>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d010      	beq.n	800a106 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a0e4:	e00a      	b.n	800a0fc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0ea:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f7fd fd93 	bl	8007c22 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1f0      	bne.n	800a0e6 <tcp_receive+0x7ea>
 800a104:	e0c7      	b.n	800a296 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a10c:	e051      	b.n	800a1b2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	899b      	ldrh	r3, [r3, #12]
 800a114:	b29b      	uxth	r3, r3
 800a116:	4618      	mov	r0, r3
 800a118:	f7fa ffa0 	bl	800505c <lwip_htons>
 800a11c:	4603      	mov	r3, r0
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	2b00      	cmp	r3, #0
 800a126:	d03c      	beq.n	800a1a2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a128:	4b16      	ldr	r3, [pc, #88]	@ (800a184 <tcp_receive+0x888>)
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	899b      	ldrh	r3, [r3, #12]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4618      	mov	r0, r3
 800a132:	f7fa ff93 	bl	800505c <lwip_htons>
 800a136:	4603      	mov	r3, r0
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d12f      	bne.n	800a1a2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a142:	4b10      	ldr	r3, [pc, #64]	@ (800a184 <tcp_receive+0x888>)
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	899b      	ldrh	r3, [r3, #12]
 800a148:	b29c      	uxth	r4, r3
 800a14a:	2001      	movs	r0, #1
 800a14c:	f7fa ff86 	bl	800505c <lwip_htons>
 800a150:	4603      	mov	r3, r0
 800a152:	461a      	mov	r2, r3
 800a154:	4b0b      	ldr	r3, [pc, #44]	@ (800a184 <tcp_receive+0x888>)
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	4322      	orrs	r2, r4
 800a15a:	b292      	uxth	r2, r2
 800a15c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a15e:	4b09      	ldr	r3, [pc, #36]	@ (800a184 <tcp_receive+0x888>)
 800a160:	891c      	ldrh	r4, [r3, #8]
 800a162:	4b08      	ldr	r3, [pc, #32]	@ (800a184 <tcp_receive+0x888>)
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	899b      	ldrh	r3, [r3, #12]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fa ff76 	bl	800505c <lwip_htons>
 800a170:	4603      	mov	r3, r0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f003 0303 	and.w	r3, r3, #3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00d      	beq.n	800a198 <tcp_receive+0x89c>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e00c      	b.n	800a19a <tcp_receive+0x89e>
 800a180:	200087f0 	.word	0x200087f0
 800a184:	200087d0 	.word	0x200087d0
 800a188:	200087fa 	.word	0x200087fa
 800a18c:	0801146c 	.word	0x0801146c
 800a190:	08011814 	.word	0x08011814
 800a194:	080114b8 	.word	0x080114b8
 800a198:	2300      	movs	r3, #0
 800a19a:	4423      	add	r3, r4
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	4b98      	ldr	r3, [pc, #608]	@ (800a400 <tcp_receive+0xb04>)
 800a1a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a1ac:	6938      	ldr	r0, [r7, #16]
 800a1ae:	f7fd fd38 	bl	8007c22 <tcp_seg_free>
            while (next &&
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00e      	beq.n	800a1d6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a1b8:	4b91      	ldr	r3, [pc, #580]	@ (800a400 <tcp_receive+0xb04>)
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4b91      	ldr	r3, [pc, #580]	@ (800a404 <tcp_receive+0xb08>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1cc:	8909      	ldrh	r1, [r1, #8]
 800a1ce:	440b      	add	r3, r1
 800a1d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da9b      	bge.n	800a10e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d059      	beq.n	800a290 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a1dc:	4b88      	ldr	r3, [pc, #544]	@ (800a400 <tcp_receive+0xb04>)
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	4b88      	ldr	r3, [pc, #544]	@ (800a404 <tcp_receive+0xb08>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	441a      	add	r2, r3
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	dd4d      	ble.n	800a290 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	4b81      	ldr	r3, [pc, #516]	@ (800a404 <tcp_receive+0xb08>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	b29a      	uxth	r2, r3
 800a206:	4b80      	ldr	r3, [pc, #512]	@ (800a408 <tcp_receive+0xb0c>)
 800a208:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a20a:	4b7f      	ldr	r3, [pc, #508]	@ (800a408 <tcp_receive+0xb0c>)
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	899b      	ldrh	r3, [r3, #12]
 800a210:	b29b      	uxth	r3, r3
 800a212:	4618      	mov	r0, r3
 800a214:	f7fa ff22 	bl	800505c <lwip_htons>
 800a218:	4603      	mov	r3, r0
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <tcp_receive+0x934>
                inseg.len -= 1;
 800a224:	4b78      	ldr	r3, [pc, #480]	@ (800a408 <tcp_receive+0xb0c>)
 800a226:	891b      	ldrh	r3, [r3, #8]
 800a228:	3b01      	subs	r3, #1
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	4b76      	ldr	r3, [pc, #472]	@ (800a408 <tcp_receive+0xb0c>)
 800a22e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a230:	4b75      	ldr	r3, [pc, #468]	@ (800a408 <tcp_receive+0xb0c>)
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	4a74      	ldr	r2, [pc, #464]	@ (800a408 <tcp_receive+0xb0c>)
 800a236:	8912      	ldrh	r2, [r2, #8]
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fc f8e6 	bl	800640c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a240:	4b71      	ldr	r3, [pc, #452]	@ (800a408 <tcp_receive+0xb0c>)
 800a242:	891c      	ldrh	r4, [r3, #8]
 800a244:	4b70      	ldr	r3, [pc, #448]	@ (800a408 <tcp_receive+0xb0c>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	899b      	ldrh	r3, [r3, #12]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fa ff05 	bl	800505c <lwip_htons>
 800a252:	4603      	mov	r3, r0
 800a254:	b2db      	uxtb	r3, r3
 800a256:	f003 0303 	and.w	r3, r3, #3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <tcp_receive+0x966>
 800a25e:	2301      	movs	r3, #1
 800a260:	e000      	b.n	800a264 <tcp_receive+0x968>
 800a262:	2300      	movs	r3, #0
 800a264:	4423      	add	r3, r4
 800a266:	b29a      	uxth	r2, r3
 800a268:	4b65      	ldr	r3, [pc, #404]	@ (800a400 <tcp_receive+0xb04>)
 800a26a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a26c:	4b64      	ldr	r3, [pc, #400]	@ (800a400 <tcp_receive+0xb04>)
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	4b64      	ldr	r3, [pc, #400]	@ (800a404 <tcp_receive+0xb08>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	441a      	add	r2, r3
 800a278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d006      	beq.n	800a290 <tcp_receive+0x994>
 800a282:	4b62      	ldr	r3, [pc, #392]	@ (800a40c <tcp_receive+0xb10>)
 800a284:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a288:	4961      	ldr	r1, [pc, #388]	@ (800a410 <tcp_receive+0xb14>)
 800a28a:	4862      	ldr	r0, [pc, #392]	@ (800a414 <tcp_receive+0xb18>)
 800a28c:	f005 f8be 	bl	800f40c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a294:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a296:	4b5a      	ldr	r3, [pc, #360]	@ (800a400 <tcp_receive+0xb04>)
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	4b59      	ldr	r3, [pc, #356]	@ (800a404 <tcp_receive+0xb08>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	441a      	add	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a2aa:	4b55      	ldr	r3, [pc, #340]	@ (800a400 <tcp_receive+0xb04>)
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d206      	bcs.n	800a2c0 <tcp_receive+0x9c4>
 800a2b2:	4b56      	ldr	r3, [pc, #344]	@ (800a40c <tcp_receive+0xb10>)
 800a2b4:	f240 6207 	movw	r2, #1543	@ 0x607
 800a2b8:	4957      	ldr	r1, [pc, #348]	@ (800a418 <tcp_receive+0xb1c>)
 800a2ba:	4856      	ldr	r0, [pc, #344]	@ (800a414 <tcp_receive+0xb18>)
 800a2bc:	f005 f8a6 	bl	800f40c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a2c4:	4b4e      	ldr	r3, [pc, #312]	@ (800a400 <tcp_receive+0xb04>)
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7fc ffc5 	bl	8007260 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a2d6:	4b4c      	ldr	r3, [pc, #304]	@ (800a408 <tcp_receive+0xb0c>)
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d006      	beq.n	800a2ee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a2e0:	4b49      	ldr	r3, [pc, #292]	@ (800a408 <tcp_receive+0xb0c>)
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	4a4d      	ldr	r2, [pc, #308]	@ (800a41c <tcp_receive+0xb20>)
 800a2e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a2e8:	4b47      	ldr	r3, [pc, #284]	@ (800a408 <tcp_receive+0xb0c>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a2ee:	4b46      	ldr	r3, [pc, #280]	@ (800a408 <tcp_receive+0xb0c>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	899b      	ldrh	r3, [r3, #12]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fa feb0 	bl	800505c <lwip_htons>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 80b8 	beq.w	800a47a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a30a:	4b45      	ldr	r3, [pc, #276]	@ (800a420 <tcp_receive+0xb24>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	f043 0320 	orr.w	r3, r3, #32
 800a312:	b2da      	uxtb	r2, r3
 800a314:	4b42      	ldr	r3, [pc, #264]	@ (800a420 <tcp_receive+0xb24>)
 800a316:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a318:	e0af      	b.n	800a47a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a31e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4a36      	ldr	r2, [pc, #216]	@ (800a404 <tcp_receive+0xb08>)
 800a32a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	891b      	ldrh	r3, [r3, #8]
 800a330:	461c      	mov	r4, r3
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	899b      	ldrh	r3, [r3, #12]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fa fe8e 	bl	800505c <lwip_htons>
 800a340:	4603      	mov	r3, r0
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f003 0303 	and.w	r3, r3, #3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <tcp_receive+0xa54>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <tcp_receive+0xa56>
 800a350:	2300      	movs	r3, #0
 800a352:	191a      	adds	r2, r3, r4
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a358:	441a      	add	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a362:	461c      	mov	r4, r3
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	891b      	ldrh	r3, [r3, #8]
 800a368:	461d      	mov	r5, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	899b      	ldrh	r3, [r3, #12]
 800a370:	b29b      	uxth	r3, r3
 800a372:	4618      	mov	r0, r3
 800a374:	f7fa fe72 	bl	800505c <lwip_htons>
 800a378:	4603      	mov	r3, r0
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	f003 0303 	and.w	r3, r3, #3
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <tcp_receive+0xa8c>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <tcp_receive+0xa8e>
 800a388:	2300      	movs	r3, #0
 800a38a:	442b      	add	r3, r5
 800a38c:	429c      	cmp	r4, r3
 800a38e:	d206      	bcs.n	800a39e <tcp_receive+0xaa2>
 800a390:	4b1e      	ldr	r3, [pc, #120]	@ (800a40c <tcp_receive+0xb10>)
 800a392:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a396:	4923      	ldr	r1, [pc, #140]	@ (800a424 <tcp_receive+0xb28>)
 800a398:	481e      	ldr	r0, [pc, #120]	@ (800a414 <tcp_receive+0xb18>)
 800a39a:	f005 f837 	bl	800f40c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	891b      	ldrh	r3, [r3, #8]
 800a3a2:	461c      	mov	r4, r3
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	899b      	ldrh	r3, [r3, #12]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fa fe55 	bl	800505c <lwip_htons>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <tcp_receive+0xac6>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <tcp_receive+0xac8>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	1919      	adds	r1, r3, r4
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3ca:	b28b      	uxth	r3, r1
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7fc ff43 	bl	8007260 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	891b      	ldrh	r3, [r3, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d028      	beq.n	800a436 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a41c <tcp_receive+0xb20>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01d      	beq.n	800a428 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a41c <tcp_receive+0xb20>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	f7fc fa50 	bl	800689c <pbuf_cat>
 800a3fc:	e018      	b.n	800a430 <tcp_receive+0xb34>
 800a3fe:	bf00      	nop
 800a400:	200087fa 	.word	0x200087fa
 800a404:	200087f0 	.word	0x200087f0
 800a408:	200087d0 	.word	0x200087d0
 800a40c:	0801146c 	.word	0x0801146c
 800a410:	0801184c 	.word	0x0801184c
 800a414:	080114b8 	.word	0x080114b8
 800a418:	08011888 	.word	0x08011888
 800a41c:	20008800 	.word	0x20008800
 800a420:	200087fd 	.word	0x200087fd
 800a424:	080118a8 	.word	0x080118a8
            } else {
              recv_data = cseg->p;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a70      	ldr	r2, [pc, #448]	@ (800a5f0 <tcp_receive+0xcf4>)
 800a42e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2200      	movs	r2, #0
 800a434:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	899b      	ldrh	r3, [r3, #12]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fa fe0c 	bl	800505c <lwip_htons>
 800a444:	4603      	mov	r3, r0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00d      	beq.n	800a46c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a450:	4b68      	ldr	r3, [pc, #416]	@ (800a5f4 <tcp_receive+0xcf8>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	f043 0320 	orr.w	r3, r3, #32
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	4b66      	ldr	r3, [pc, #408]	@ (800a5f4 <tcp_receive+0xcf8>)
 800a45c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	7d1b      	ldrb	r3, [r3, #20]
 800a462:	2b04      	cmp	r3, #4
 800a464:	d102      	bne.n	800a46c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2207      	movs	r2, #7
 800a46a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a474:	68b8      	ldr	r0, [r7, #8]
 800a476:	f7fd fbd4 	bl	8007c22 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a48e:	429a      	cmp	r2, r3
 800a490:	f43f af43 	beq.w	800a31a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	8b5b      	ldrh	r3, [r3, #26]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00e      	beq.n	800a4be <tcp_receive+0xbc2>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	8b5b      	ldrh	r3, [r3, #26]
 800a4a4:	f023 0301 	bic.w	r3, r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	835a      	strh	r2, [r3, #26]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8b5b      	ldrh	r3, [r3, #26]
 800a4b2:	f043 0302 	orr.w	r3, r3, #2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a4bc:	e187      	b.n	800a7ce <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	8b5b      	ldrh	r3, [r3, #26]
 800a4c2:	f043 0301 	orr.w	r3, r3, #1
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a4cc:	e17f      	b.n	800a7ce <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a4d6:	4848      	ldr	r0, [pc, #288]	@ (800a5f8 <tcp_receive+0xcfc>)
 800a4d8:	f7fd fbbc 	bl	8007c54 <tcp_seg_copy>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	675a      	str	r2, [r3, #116]	@ 0x74
 800a4e2:	e16c      	b.n	800a7be <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4ee:	e156      	b.n	800a79e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	4b41      	ldr	r3, [pc, #260]	@ (800a5fc <tcp_receive+0xd00>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d11d      	bne.n	800a53a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a4fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a5f8 <tcp_receive+0xcfc>)
 800a500:	891a      	ldrh	r2, [r3, #8]
 800a502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a504:	891b      	ldrh	r3, [r3, #8]
 800a506:	429a      	cmp	r2, r3
 800a508:	f240 814e 	bls.w	800a7a8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a50c:	483a      	ldr	r0, [pc, #232]	@ (800a5f8 <tcp_receive+0xcfc>)
 800a50e:	f7fd fba1 	bl	8007c54 <tcp_seg_copy>
 800a512:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 8148 	beq.w	800a7ac <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	e002      	b.n	800a530 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a530:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a532:	6978      	ldr	r0, [r7, #20]
 800a534:	f7ff f8de 	bl	80096f4 <tcp_oos_insert_segment>
                }
                break;
 800a538:	e138      	b.n	800a7ac <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a53a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d117      	bne.n	800a570 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a540:	4b2e      	ldr	r3, [pc, #184]	@ (800a5fc <tcp_receive+0xd00>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	da57      	bge.n	800a600 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a550:	4829      	ldr	r0, [pc, #164]	@ (800a5f8 <tcp_receive+0xcfc>)
 800a552:	f7fd fb7f 	bl	8007c54 <tcp_seg_copy>
 800a556:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f000 8128 	beq.w	800a7b0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	69ba      	ldr	r2, [r7, #24]
 800a564:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a566:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a568:	69b8      	ldr	r0, [r7, #24]
 800a56a:	f7ff f8c3 	bl	80096f4 <tcp_oos_insert_segment>
                  }
                  break;
 800a56e:	e11f      	b.n	800a7b0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a570:	4b22      	ldr	r3, [pc, #136]	@ (800a5fc <tcp_receive+0xd00>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	3b01      	subs	r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	db3e      	blt.n	800a600 <tcp_receive+0xd04>
 800a582:	4b1e      	ldr	r3, [pc, #120]	@ (800a5fc <tcp_receive+0xd00>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	3301      	adds	r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	dc35      	bgt.n	800a600 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a594:	4818      	ldr	r0, [pc, #96]	@ (800a5f8 <tcp_receive+0xcfc>)
 800a596:	f7fd fb5d 	bl	8007c54 <tcp_seg_copy>
 800a59a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8108 	beq.w	800a7b4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5ac:	8912      	ldrh	r2, [r2, #8]
 800a5ae:	441a      	add	r2, r3
 800a5b0:	4b12      	ldr	r3, [pc, #72]	@ (800a5fc <tcp_receive+0xd00>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dd12      	ble.n	800a5e0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a5ba:	4b10      	ldr	r3, [pc, #64]	@ (800a5fc <tcp_receive+0xd00>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d6:	891b      	ldrh	r3, [r3, #8]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f7fb ff16 	bl	800640c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a5e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a5e8:	69f8      	ldr	r0, [r7, #28]
 800a5ea:	f7ff f883 	bl	80096f4 <tcp_oos_insert_segment>
                  }
                  break;
 800a5ee:	e0e1      	b.n	800a7b4 <tcp_receive+0xeb8>
 800a5f0:	20008800 	.word	0x20008800
 800a5f4:	200087fd 	.word	0x200087fd
 800a5f8:	200087d0 	.word	0x200087d0
 800a5fc:	200087f0 	.word	0x200087f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a602:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f040 80c5 	bne.w	800a798 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a60e:	4b7f      	ldr	r3, [pc, #508]	@ (800a80c <tcp_receive+0xf10>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f340 80bc 	ble.w	800a798 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	899b      	ldrh	r3, [r3, #12]
 800a626:	b29b      	uxth	r3, r3
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fa fd17 	bl	800505c <lwip_htons>
 800a62e:	4603      	mov	r3, r0
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	f040 80be 	bne.w	800a7b8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a63c:	4874      	ldr	r0, [pc, #464]	@ (800a810 <tcp_receive+0xf14>)
 800a63e:	f7fd fb09 	bl	8007c54 <tcp_seg_copy>
 800a642:	4602      	mov	r2, r0
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 80b5 	beq.w	800a7bc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a65a:	8912      	ldrh	r2, [r2, #8]
 800a65c:	441a      	add	r2, r3
 800a65e:	4b6b      	ldr	r3, [pc, #428]	@ (800a80c <tcp_receive+0xf10>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd12      	ble.n	800a68e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a668:	4b68      	ldr	r3, [pc, #416]	@ (800a80c <tcp_receive+0xf10>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	b29b      	uxth	r3, r3
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	b29a      	uxth	r2, r3
 800a67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a684:	891b      	ldrh	r3, [r3, #8]
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7fb febf 	bl	800640c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a68e:	4b61      	ldr	r3, [pc, #388]	@ (800a814 <tcp_receive+0xf18>)
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	4b5d      	ldr	r3, [pc, #372]	@ (800a80c <tcp_receive+0xf10>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	441a      	add	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a6a2:	440b      	add	r3, r1
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f340 8088 	ble.w	800a7bc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	899b      	ldrh	r3, [r3, #12]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fa fcd0 	bl	800505c <lwip_htons>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d021      	beq.n	800a70c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	899b      	ldrh	r3, [r3, #12]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	b21b      	sxth	r3, r3
 800a6d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a6d8:	b21c      	sxth	r4, r3
 800a6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	899b      	ldrh	r3, [r3, #12]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fa fcb9 	bl	800505c <lwip_htons>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7fa fcb1 	bl	800505c <lwip_htons>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	b21b      	sxth	r3, r3
 800a6fe:	4323      	orrs	r3, r4
 800a700:	b21a      	sxth	r2, r3
 800a702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	b292      	uxth	r2, r2
 800a70a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a710:	b29a      	uxth	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a716:	4413      	add	r3, r2
 800a718:	b299      	uxth	r1, r3
 800a71a:	4b3c      	ldr	r3, [pc, #240]	@ (800a80c <tcp_receive+0xf10>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	b29a      	uxth	r2, r3
 800a720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	1a8a      	subs	r2, r1, r2
 800a726:	b292      	uxth	r2, r2
 800a728:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	891b      	ldrh	r3, [r3, #8]
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7fb fe67 	bl	800640c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	891c      	ldrh	r4, [r3, #8]
 800a744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	899b      	ldrh	r3, [r3, #12]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fa fc84 	bl	800505c <lwip_htons>
 800a754:	4603      	mov	r3, r0
 800a756:	b2db      	uxtb	r3, r3
 800a758:	f003 0303 	and.w	r3, r3, #3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <tcp_receive+0xe68>
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <tcp_receive+0xe6a>
 800a764:	2300      	movs	r3, #0
 800a766:	4423      	add	r3, r4
 800a768:	b29a      	uxth	r2, r3
 800a76a:	4b2a      	ldr	r3, [pc, #168]	@ (800a814 <tcp_receive+0xf18>)
 800a76c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a76e:	4b29      	ldr	r3, [pc, #164]	@ (800a814 <tcp_receive+0xf18>)
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	4b25      	ldr	r3, [pc, #148]	@ (800a80c <tcp_receive+0xf10>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	441a      	add	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77e:	6879      	ldr	r1, [r7, #4]
 800a780:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a782:	440b      	add	r3, r1
 800a784:	429a      	cmp	r2, r3
 800a786:	d019      	beq.n	800a7bc <tcp_receive+0xec0>
 800a788:	4b23      	ldr	r3, [pc, #140]	@ (800a818 <tcp_receive+0xf1c>)
 800a78a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a78e:	4923      	ldr	r1, [pc, #140]	@ (800a81c <tcp_receive+0xf20>)
 800a790:	4823      	ldr	r0, [pc, #140]	@ (800a820 <tcp_receive+0xf24>)
 800a792:	f004 fe3b 	bl	800f40c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a796:	e011      	b.n	800a7bc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f47f aea5 	bne.w	800a4f0 <tcp_receive+0xbf4>
 800a7a6:	e00a      	b.n	800a7be <tcp_receive+0xec2>
                break;
 800a7a8:	bf00      	nop
 800a7aa:	e008      	b.n	800a7be <tcp_receive+0xec2>
                break;
 800a7ac:	bf00      	nop
 800a7ae:	e006      	b.n	800a7be <tcp_receive+0xec2>
                  break;
 800a7b0:	bf00      	nop
 800a7b2:	e004      	b.n	800a7be <tcp_receive+0xec2>
                  break;
 800a7b4:	bf00      	nop
 800a7b6:	e002      	b.n	800a7be <tcp_receive+0xec2>
                  break;
 800a7b8:	bf00      	nop
 800a7ba:	e000      	b.n	800a7be <tcp_receive+0xec2>
                break;
 800a7bc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 fa30 	bl	800bc24 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a7c4:	e003      	b.n	800a7ce <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 fa2c 	bl	800bc24 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a7cc:	e01a      	b.n	800a804 <tcp_receive+0xf08>
 800a7ce:	e019      	b.n	800a804 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a7d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a80c <tcp_receive+0xf10>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	db0a      	blt.n	800a7f4 <tcp_receive+0xef8>
 800a7de:	4b0b      	ldr	r3, [pc, #44]	@ (800a80c <tcp_receive+0xf10>)
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e6:	6879      	ldr	r1, [r7, #4]
 800a7e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a7ea:	440b      	add	r3, r1
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dd07      	ble.n	800a804 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	8b5b      	ldrh	r3, [r3, #26]
 800a7f8:	f043 0302 	orr.w	r3, r3, #2
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a802:	e7ff      	b.n	800a804 <tcp_receive+0xf08>
 800a804:	bf00      	nop
 800a806:	3750      	adds	r7, #80	@ 0x50
 800a808:	46bd      	mov	sp, r7
 800a80a:	bdb0      	pop	{r4, r5, r7, pc}
 800a80c:	200087f0 	.word	0x200087f0
 800a810:	200087d0 	.word	0x200087d0
 800a814:	200087fa 	.word	0x200087fa
 800a818:	0801146c 	.word	0x0801146c
 800a81c:	08011814 	.word	0x08011814
 800a820:	080114b8 	.word	0x080114b8

0800a824 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a82a:	4b15      	ldr	r3, [pc, #84]	@ (800a880 <tcp_get_next_optbyte+0x5c>)
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	b291      	uxth	r1, r2
 800a832:	4a13      	ldr	r2, [pc, #76]	@ (800a880 <tcp_get_next_optbyte+0x5c>)
 800a834:	8011      	strh	r1, [r2, #0]
 800a836:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a838:	4b12      	ldr	r3, [pc, #72]	@ (800a884 <tcp_get_next_optbyte+0x60>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d004      	beq.n	800a84a <tcp_get_next_optbyte+0x26>
 800a840:	4b11      	ldr	r3, [pc, #68]	@ (800a888 <tcp_get_next_optbyte+0x64>)
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	429a      	cmp	r2, r3
 800a848:	d208      	bcs.n	800a85c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a84a:	4b10      	ldr	r3, [pc, #64]	@ (800a88c <tcp_get_next_optbyte+0x68>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3314      	adds	r3, #20
 800a850:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a852:	88fb      	ldrh	r3, [r7, #6]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	4413      	add	r3, r2
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	e00b      	b.n	800a874 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a85c:	88fb      	ldrh	r3, [r7, #6]
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	4b09      	ldr	r3, [pc, #36]	@ (800a888 <tcp_get_next_optbyte+0x64>)
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a86a:	4b06      	ldr	r3, [pc, #24]	@ (800a884 <tcp_get_next_optbyte+0x60>)
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	797b      	ldrb	r3, [r7, #5]
 800a870:	4413      	add	r3, r2
 800a872:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	200087ec 	.word	0x200087ec
 800a884:	200087e8 	.word	0x200087e8
 800a888:	200087e6 	.word	0x200087e6
 800a88c:	200087e0 	.word	0x200087e0

0800a890 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d106      	bne.n	800a8ac <tcp_parseopt+0x1c>
 800a89e:	4b32      	ldr	r3, [pc, #200]	@ (800a968 <tcp_parseopt+0xd8>)
 800a8a0:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a8a4:	4931      	ldr	r1, [pc, #196]	@ (800a96c <tcp_parseopt+0xdc>)
 800a8a6:	4832      	ldr	r0, [pc, #200]	@ (800a970 <tcp_parseopt+0xe0>)
 800a8a8:	f004 fdb0 	bl	800f40c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a8ac:	4b31      	ldr	r3, [pc, #196]	@ (800a974 <tcp_parseopt+0xe4>)
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d056      	beq.n	800a962 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a8b4:	4b30      	ldr	r3, [pc, #192]	@ (800a978 <tcp_parseopt+0xe8>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	801a      	strh	r2, [r3, #0]
 800a8ba:	e046      	b.n	800a94a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a8bc:	f7ff ffb2 	bl	800a824 <tcp_get_next_optbyte>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d006      	beq.n	800a8d8 <tcp_parseopt+0x48>
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	dc2a      	bgt.n	800a924 <tcp_parseopt+0x94>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d042      	beq.n	800a958 <tcp_parseopt+0xc8>
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d038      	beq.n	800a948 <tcp_parseopt+0xb8>
 800a8d6:	e025      	b.n	800a924 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a8d8:	f7ff ffa4 	bl	800a824 <tcp_get_next_optbyte>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d13c      	bne.n	800a95c <tcp_parseopt+0xcc>
 800a8e2:	4b25      	ldr	r3, [pc, #148]	@ (800a978 <tcp_parseopt+0xe8>)
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	4a22      	ldr	r2, [pc, #136]	@ (800a974 <tcp_parseopt+0xe4>)
 800a8ea:	8812      	ldrh	r2, [r2, #0]
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	da35      	bge.n	800a95c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a8f0:	f7ff ff98 	bl	800a824 <tcp_get_next_optbyte>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a8fa:	f7ff ff93 	bl	800a824 <tcp_get_next_optbyte>
 800a8fe:	4603      	mov	r3, r0
 800a900:	461a      	mov	r2, r3
 800a902:	89bb      	ldrh	r3, [r7, #12]
 800a904:	4313      	orrs	r3, r2
 800a906:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a908:	89bb      	ldrh	r3, [r7, #12]
 800a90a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a90e:	d804      	bhi.n	800a91a <tcp_parseopt+0x8a>
 800a910:	89bb      	ldrh	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <tcp_parseopt+0x8a>
 800a916:	89ba      	ldrh	r2, [r7, #12]
 800a918:	e001      	b.n	800a91e <tcp_parseopt+0x8e>
 800a91a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800a922:	e012      	b.n	800a94a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a924:	f7ff ff7e 	bl	800a824 <tcp_get_next_optbyte>
 800a928:	4603      	mov	r3, r0
 800a92a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a92c:	7afb      	ldrb	r3, [r7, #11]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d916      	bls.n	800a960 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a932:	7afb      	ldrb	r3, [r7, #11]
 800a934:	b29a      	uxth	r2, r3
 800a936:	4b10      	ldr	r3, [pc, #64]	@ (800a978 <tcp_parseopt+0xe8>)
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	4413      	add	r3, r2
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	3b02      	subs	r3, #2
 800a940:	b29a      	uxth	r2, r3
 800a942:	4b0d      	ldr	r3, [pc, #52]	@ (800a978 <tcp_parseopt+0xe8>)
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	e000      	b.n	800a94a <tcp_parseopt+0xba>
          break;
 800a948:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a94a:	4b0b      	ldr	r3, [pc, #44]	@ (800a978 <tcp_parseopt+0xe8>)
 800a94c:	881a      	ldrh	r2, [r3, #0]
 800a94e:	4b09      	ldr	r3, [pc, #36]	@ (800a974 <tcp_parseopt+0xe4>)
 800a950:	881b      	ldrh	r3, [r3, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d3b2      	bcc.n	800a8bc <tcp_parseopt+0x2c>
 800a956:	e004      	b.n	800a962 <tcp_parseopt+0xd2>
          return;
 800a958:	bf00      	nop
 800a95a:	e002      	b.n	800a962 <tcp_parseopt+0xd2>
            return;
 800a95c:	bf00      	nop
 800a95e:	e000      	b.n	800a962 <tcp_parseopt+0xd2>
            return;
 800a960:	bf00      	nop
      }
    }
  }
}
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	0801146c 	.word	0x0801146c
 800a96c:	080118d0 	.word	0x080118d0
 800a970:	080114b8 	.word	0x080114b8
 800a974:	200087e4 	.word	0x200087e4
 800a978:	200087ec 	.word	0x200087ec

0800a97c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a97c:	b480      	push	{r7}
 800a97e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a980:	4b05      	ldr	r3, [pc, #20]	@ (800a998 <tcp_trigger_input_pcb_close+0x1c>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	f043 0310 	orr.w	r3, r3, #16
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	4b03      	ldr	r3, [pc, #12]	@ (800a998 <tcp_trigger_input_pcb_close+0x1c>)
 800a98c:	701a      	strb	r2, [r3, #0]
}
 800a98e:	bf00      	nop
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	200087fd 	.word	0x200087fd

0800a99c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <tcp_route+0x28>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	7a1b      	ldrb	r3, [r3, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d006      	beq.n	800a9c4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	7a1b      	ldrb	r3, [r3, #8]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fb fb4c 	bl	8006058 <netif_get_by_index>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	e003      	b.n	800a9cc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f003 fa35 	bl	800de34 <ip4_route>
 800a9ca:	4603      	mov	r3, r0
  }
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <tcp_create_segment+0x22>
 800a9ea:	4b43      	ldr	r3, [pc, #268]	@ (800aaf8 <tcp_create_segment+0x124>)
 800a9ec:	22a3      	movs	r2, #163	@ 0xa3
 800a9ee:	4943      	ldr	r1, [pc, #268]	@ (800aafc <tcp_create_segment+0x128>)
 800a9f0:	4843      	ldr	r0, [pc, #268]	@ (800ab00 <tcp_create_segment+0x12c>)
 800a9f2:	f004 fd0b 	bl	800f40c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <tcp_create_segment+0x34>
 800a9fc:	4b3e      	ldr	r3, [pc, #248]	@ (800aaf8 <tcp_create_segment+0x124>)
 800a9fe:	22a4      	movs	r2, #164	@ 0xa4
 800aa00:	4940      	ldr	r1, [pc, #256]	@ (800ab04 <tcp_create_segment+0x130>)
 800aa02:	483f      	ldr	r0, [pc, #252]	@ (800ab00 <tcp_create_segment+0x12c>)
 800aa04:	f004 fd02 	bl	800f40c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa08:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800aa16:	2003      	movs	r0, #3
 800aa18:	f7fa ff98 	bl	800594c <memp_malloc>
 800aa1c:	6138      	str	r0, [r7, #16]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d104      	bne.n	800aa2e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800aa24:	68b8      	ldr	r0, [r7, #8]
 800aa26:	f7fb fe77 	bl	8006718 <pbuf_free>
    return NULL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e060      	b.n	800aaf0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800aa34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	891a      	ldrh	r2, [r3, #8]
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d205      	bcs.n	800aa5a <tcp_create_segment+0x86>
 800aa4e:	4b2a      	ldr	r3, [pc, #168]	@ (800aaf8 <tcp_create_segment+0x124>)
 800aa50:	22b0      	movs	r2, #176	@ 0xb0
 800aa52:	492d      	ldr	r1, [pc, #180]	@ (800ab08 <tcp_create_segment+0x134>)
 800aa54:	482a      	ldr	r0, [pc, #168]	@ (800ab00 <tcp_create_segment+0x12c>)
 800aa56:	f004 fcd9 	bl	800f40c <iprintf>
  seg->len = p->tot_len - optlen;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	891a      	ldrh	r2, [r3, #8]
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aa6a:	2114      	movs	r1, #20
 800aa6c:	68b8      	ldr	r0, [r7, #8]
 800aa6e:	f7fb fdbd 	bl	80065ec <pbuf_add_header>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d004      	beq.n	800aa82 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800aa78:	6938      	ldr	r0, [r7, #16]
 800aa7a:	f7fd f8d2 	bl	8007c22 <tcp_seg_free>
    return NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e036      	b.n	800aaf0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8ada      	ldrh	r2, [r3, #22]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	68dc      	ldr	r4, [r3, #12]
 800aa94:	4610      	mov	r0, r2
 800aa96:	f7fa fae1 	bl	800505c <lwip_htons>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8b1a      	ldrh	r2, [r3, #24]
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	68dc      	ldr	r4, [r3, #12]
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7fa fad8 	bl	800505c <lwip_htons>
 800aaac:	4603      	mov	r3, r0
 800aaae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	68dc      	ldr	r4, [r3, #12]
 800aab4:	6838      	ldr	r0, [r7, #0]
 800aab6:	f7fa fae6 	bl	8005086 <lwip_htonl>
 800aaba:	4603      	mov	r3, r0
 800aabc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	089b      	lsrs	r3, r3, #2
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	3305      	adds	r3, #5
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	031b      	lsls	r3, r3, #12
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	4313      	orrs	r3, r2
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	68dc      	ldr	r4, [r3, #12]
 800aad8:	4610      	mov	r0, r2
 800aada:	f7fa fabf 	bl	800505c <lwip_htons>
 800aade:	4603      	mov	r3, r0
 800aae0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	749a      	strb	r2, [r3, #18]
 800aaea:	2200      	movs	r2, #0
 800aaec:	74da      	strb	r2, [r3, #19]
  return seg;
 800aaee:	693b      	ldr	r3, [r7, #16]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd90      	pop	{r4, r7, pc}
 800aaf8:	080118ec 	.word	0x080118ec
 800aafc:	08011920 	.word	0x08011920
 800ab00:	08011940 	.word	0x08011940
 800ab04:	08011968 	.word	0x08011968
 800ab08:	0801198c 	.word	0x0801198c

0800ab0c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ab0c:	b590      	push	{r4, r7, lr}
 800ab0e:	b08b      	sub	sp, #44	@ 0x2c
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	61fb      	str	r3, [r7, #28]
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ab20:	2300      	movs	r3, #0
 800ab22:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d106      	bne.n	800ab38 <tcp_split_unsent_seg+0x2c>
 800ab2a:	4b95      	ldr	r3, [pc, #596]	@ (800ad80 <tcp_split_unsent_seg+0x274>)
 800ab2c:	f240 324b 	movw	r2, #843	@ 0x34b
 800ab30:	4994      	ldr	r1, [pc, #592]	@ (800ad84 <tcp_split_unsent_seg+0x278>)
 800ab32:	4895      	ldr	r0, [pc, #596]	@ (800ad88 <tcp_split_unsent_seg+0x27c>)
 800ab34:	f004 fc6a 	bl	800f40c <iprintf>

  useg = pcb->unsent;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab3c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ab44:	f04f 33ff 	mov.w	r3, #4294967295
 800ab48:	e116      	b.n	800ad78 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ab4a:	887b      	ldrh	r3, [r7, #2]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d109      	bne.n	800ab64 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ab50:	4b8b      	ldr	r3, [pc, #556]	@ (800ad80 <tcp_split_unsent_seg+0x274>)
 800ab52:	f240 3253 	movw	r2, #851	@ 0x353
 800ab56:	498d      	ldr	r1, [pc, #564]	@ (800ad8c <tcp_split_unsent_seg+0x280>)
 800ab58:	488b      	ldr	r0, [pc, #556]	@ (800ad88 <tcp_split_unsent_seg+0x27c>)
 800ab5a:	f004 fc57 	bl	800f40c <iprintf>
    return ERR_VAL;
 800ab5e:	f06f 0305 	mvn.w	r3, #5
 800ab62:	e109      	b.n	800ad78 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	891b      	ldrh	r3, [r3, #8]
 800ab68:	887a      	ldrh	r2, [r7, #2]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d301      	bcc.n	800ab72 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e102      	b.n	800ad78 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab76:	887a      	ldrh	r2, [r7, #2]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d906      	bls.n	800ab8a <tcp_split_unsent_seg+0x7e>
 800ab7c:	4b80      	ldr	r3, [pc, #512]	@ (800ad80 <tcp_split_unsent_seg+0x274>)
 800ab7e:	f240 325b 	movw	r2, #859	@ 0x35b
 800ab82:	4983      	ldr	r1, [pc, #524]	@ (800ad90 <tcp_split_unsent_seg+0x284>)
 800ab84:	4880      	ldr	r0, [pc, #512]	@ (800ad88 <tcp_split_unsent_seg+0x27c>)
 800ab86:	f004 fc41 	bl	800f40c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	891b      	ldrh	r3, [r3, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d106      	bne.n	800aba0 <tcp_split_unsent_seg+0x94>
 800ab92:	4b7b      	ldr	r3, [pc, #492]	@ (800ad80 <tcp_split_unsent_seg+0x274>)
 800ab94:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ab98:	497e      	ldr	r1, [pc, #504]	@ (800ad94 <tcp_split_unsent_seg+0x288>)
 800ab9a:	487b      	ldr	r0, [pc, #492]	@ (800ad88 <tcp_split_unsent_seg+0x27c>)
 800ab9c:	f004 fc36 	bl	800f40c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	7a9b      	ldrb	r3, [r3, #10]
 800aba4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	f003 0304 	and.w	r3, r3, #4
 800abb0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	891a      	ldrh	r2, [r3, #8]
 800abb6:	887b      	ldrh	r3, [r7, #2]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	89bb      	ldrh	r3, [r7, #12]
 800abc2:	4413      	add	r3, r2
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800abca:	4619      	mov	r1, r3
 800abcc:	2036      	movs	r0, #54	@ 0x36
 800abce:	f7fb fabf 	bl	8006150 <pbuf_alloc>
 800abd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 80b7 	beq.w	800ad4a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	891a      	ldrh	r2, [r3, #8]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	891b      	ldrh	r3, [r3, #8]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	b29a      	uxth	r2, r3
 800abea:	887b      	ldrh	r3, [r7, #2]
 800abec:	4413      	add	r3, r2
 800abee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	6858      	ldr	r0, [r3, #4]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	18d1      	adds	r1, r2, r3
 800abfc:	897b      	ldrh	r3, [r7, #10]
 800abfe:	89ba      	ldrh	r2, [r7, #12]
 800ac00:	f7fb ff84 	bl	8006b0c <pbuf_copy_partial>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	89bb      	ldrh	r3, [r7, #12]
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	f040 809f 	bne.w	800ad4e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	899b      	ldrh	r3, [r3, #12]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fa fa1f 	bl	800505c <lwip_htons>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac26:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ac28:	2300      	movs	r3, #0
 800ac2a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ac2c:	7efb      	ldrb	r3, [r7, #27]
 800ac2e:	f003 0308 	and.w	r3, r3, #8
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d007      	beq.n	800ac46 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ac36:	7efb      	ldrb	r3, [r7, #27]
 800ac38:	f023 0308 	bic.w	r3, r3, #8
 800ac3c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ac3e:	7ebb      	ldrb	r3, [r7, #26]
 800ac40:	f043 0308 	orr.w	r3, r3, #8
 800ac44:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ac46:	7efb      	ldrb	r3, [r7, #27]
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ac50:	7efb      	ldrb	r3, [r7, #27]
 800ac52:	f023 0301 	bic.w	r3, r3, #1
 800ac56:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ac58:	7ebb      	ldrb	r3, [r7, #26]
 800ac5a:	f043 0301 	orr.w	r3, r3, #1
 800ac5e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fa fa0d 	bl	8005086 <lwip_htonl>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	887b      	ldrh	r3, [r7, #2]
 800ac70:	18d1      	adds	r1, r2, r3
 800ac72:	7eba      	ldrb	r2, [r7, #26]
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	6939      	ldr	r1, [r7, #16]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7ff fea9 	bl	800a9d4 <tcp_create_segment>
 800ac82:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d063      	beq.n	800ad52 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fb fdca 	bl	8006828 <pbuf_clen>
 800ac94:	4603      	mov	r3, r0
 800ac96:	461a      	mov	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ac9e:	1a9b      	subs	r3, r3, r2
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	6858      	ldr	r0, [r3, #4]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	891a      	ldrh	r2, [r3, #8]
 800acb2:	89bb      	ldrh	r3, [r7, #12]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	f7fb fba7 	bl	800640c <pbuf_realloc>
  useg->len -= remainder;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	891a      	ldrh	r2, [r3, #8]
 800acc2:	89bb      	ldrh	r3, [r7, #12]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	899b      	ldrh	r3, [r3, #12]
 800acd2:	b29c      	uxth	r4, r3
 800acd4:	7efb      	ldrb	r3, [r7, #27]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fa f9bf 	bl	800505c <lwip_htons>
 800acde:	4603      	mov	r3, r0
 800ace0:	461a      	mov	r2, r3
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	4322      	orrs	r2, r4
 800ace8:	b292      	uxth	r2, r2
 800acea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fb fd99 	bl	8006828 <pbuf_clen>
 800acf6:	4603      	mov	r3, r0
 800acf8:	461a      	mov	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad00:	4413      	add	r3, r2
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fb fd8a 	bl	8006828 <pbuf_clen>
 800ad14:	4603      	mov	r3, r0
 800ad16:	461a      	mov	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad1e:	4413      	add	r3, r2
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d103      	bne.n	800ad46 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e016      	b.n	800ad78 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ad4a:	bf00      	nop
 800ad4c:	e002      	b.n	800ad54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ad4e:	bf00      	nop
 800ad50:	e000      	b.n	800ad54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ad52:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d006      	beq.n	800ad68 <tcp_split_unsent_seg+0x25c>
 800ad5a:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <tcp_split_unsent_seg+0x274>)
 800ad5c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ad60:	490d      	ldr	r1, [pc, #52]	@ (800ad98 <tcp_split_unsent_seg+0x28c>)
 800ad62:	4809      	ldr	r0, [pc, #36]	@ (800ad88 <tcp_split_unsent_seg+0x27c>)
 800ad64:	f004 fb52 	bl	800f40c <iprintf>
  if (p != NULL) {
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ad6e:	6938      	ldr	r0, [r7, #16]
 800ad70:	f7fb fcd2 	bl	8006718 <pbuf_free>
  }

  return ERR_MEM;
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3724      	adds	r7, #36	@ 0x24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd90      	pop	{r4, r7, pc}
 800ad80:	080118ec 	.word	0x080118ec
 800ad84:	08011c80 	.word	0x08011c80
 800ad88:	08011940 	.word	0x08011940
 800ad8c:	08011ca4 	.word	0x08011ca4
 800ad90:	08011cc8 	.word	0x08011cc8
 800ad94:	08011cd8 	.word	0x08011cd8
 800ad98:	08011ce8 	.word	0x08011ce8

0800ad9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ad9c:	b590      	push	{r4, r7, lr}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d106      	bne.n	800adb8 <tcp_send_fin+0x1c>
 800adaa:	4b21      	ldr	r3, [pc, #132]	@ (800ae30 <tcp_send_fin+0x94>)
 800adac:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800adb0:	4920      	ldr	r1, [pc, #128]	@ (800ae34 <tcp_send_fin+0x98>)
 800adb2:	4821      	ldr	r0, [pc, #132]	@ (800ae38 <tcp_send_fin+0x9c>)
 800adb4:	f004 fb2a 	bl	800f40c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d02e      	beq.n	800ae1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	e002      	b.n	800adce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1f8      	bne.n	800adc8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	899b      	ldrh	r3, [r3, #12]
 800addc:	b29b      	uxth	r3, r3
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fa f93c 	bl	800505c <lwip_htons>
 800ade4:	4603      	mov	r3, r0
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	2b00      	cmp	r3, #0
 800adee:	d116      	bne.n	800ae1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	899b      	ldrh	r3, [r3, #12]
 800adf6:	b29c      	uxth	r4, r3
 800adf8:	2001      	movs	r0, #1
 800adfa:	f7fa f92f 	bl	800505c <lwip_htons>
 800adfe:	4603      	mov	r3, r0
 800ae00:	461a      	mov	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	4322      	orrs	r2, r4
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	8b5b      	ldrh	r3, [r3, #26]
 800ae10:	f043 0320 	orr.w	r3, r3, #32
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	e004      	b.n	800ae28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ae1e:	2101      	movs	r1, #1
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f80b 	bl	800ae3c <tcp_enqueue_flags>
 800ae26:	4603      	mov	r3, r0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd90      	pop	{r4, r7, pc}
 800ae30:	080118ec 	.word	0x080118ec
 800ae34:	08011cf4 	.word	0x08011cf4
 800ae38:	08011940 	.word	0x08011940

0800ae3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08a      	sub	sp, #40	@ 0x28
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ae50:	78fb      	ldrb	r3, [r7, #3]
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <tcp_enqueue_flags+0x2c>
 800ae5a:	4b67      	ldr	r3, [pc, #412]	@ (800aff8 <tcp_enqueue_flags+0x1bc>)
 800ae5c:	f240 4211 	movw	r2, #1041	@ 0x411
 800ae60:	4966      	ldr	r1, [pc, #408]	@ (800affc <tcp_enqueue_flags+0x1c0>)
 800ae62:	4867      	ldr	r0, [pc, #412]	@ (800b000 <tcp_enqueue_flags+0x1c4>)
 800ae64:	f004 fad2 	bl	800f40c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d106      	bne.n	800ae7c <tcp_enqueue_flags+0x40>
 800ae6e:	4b62      	ldr	r3, [pc, #392]	@ (800aff8 <tcp_enqueue_flags+0x1bc>)
 800ae70:	f240 4213 	movw	r2, #1043	@ 0x413
 800ae74:	4963      	ldr	r1, [pc, #396]	@ (800b004 <tcp_enqueue_flags+0x1c8>)
 800ae76:	4862      	ldr	r0, [pc, #392]	@ (800b000 <tcp_enqueue_flags+0x1c4>)
 800ae78:	f004 fac8 	bl	800f40c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ae7c:	78fb      	ldrb	r3, [r7, #3]
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ae86:	2301      	movs	r3, #1
 800ae88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ae8a:	7ffb      	ldrb	r3, [r7, #31]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ae96:	7dfb      	ldrb	r3, [r7, #23]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ae9e:	4619      	mov	r1, r3
 800aea0:	2036      	movs	r0, #54	@ 0x36
 800aea2:	f7fb f955 	bl	8006150 <pbuf_alloc>
 800aea6:	6138      	str	r0, [r7, #16]
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d109      	bne.n	800aec2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	8b5b      	ldrh	r3, [r3, #26]
 800aeb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aebc:	f04f 33ff 	mov.w	r3, #4294967295
 800aec0:	e095      	b.n	800afee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	895a      	ldrh	r2, [r3, #10]
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d206      	bcs.n	800aedc <tcp_enqueue_flags+0xa0>
 800aece:	4b4a      	ldr	r3, [pc, #296]	@ (800aff8 <tcp_enqueue_flags+0x1bc>)
 800aed0:	f240 4239 	movw	r2, #1081	@ 0x439
 800aed4:	494c      	ldr	r1, [pc, #304]	@ (800b008 <tcp_enqueue_flags+0x1cc>)
 800aed6:	484a      	ldr	r0, [pc, #296]	@ (800b000 <tcp_enqueue_flags+0x1c4>)
 800aed8:	f004 fa98 	bl	800f40c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800aee0:	78fa      	ldrb	r2, [r7, #3]
 800aee2:	7ffb      	ldrb	r3, [r7, #31]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	460b      	mov	r3, r1
 800aee8:	6939      	ldr	r1, [r7, #16]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff fd72 	bl	800a9d4 <tcp_create_segment>
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	8b5b      	ldrh	r3, [r3, #26]
 800aefc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af00:	b29a      	uxth	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800af06:	f04f 33ff 	mov.w	r3, #4294967295
 800af0a:	e070      	b.n	800afee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d006      	beq.n	800af26 <tcp_enqueue_flags+0xea>
 800af18:	4b37      	ldr	r3, [pc, #220]	@ (800aff8 <tcp_enqueue_flags+0x1bc>)
 800af1a:	f240 4242 	movw	r2, #1090	@ 0x442
 800af1e:	493b      	ldr	r1, [pc, #236]	@ (800b00c <tcp_enqueue_flags+0x1d0>)
 800af20:	4837      	ldr	r0, [pc, #220]	@ (800b000 <tcp_enqueue_flags+0x1c4>)
 800af22:	f004 fa73 	bl	800f40c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	891b      	ldrh	r3, [r3, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d006      	beq.n	800af3c <tcp_enqueue_flags+0x100>
 800af2e:	4b32      	ldr	r3, [pc, #200]	@ (800aff8 <tcp_enqueue_flags+0x1bc>)
 800af30:	f240 4243 	movw	r2, #1091	@ 0x443
 800af34:	4936      	ldr	r1, [pc, #216]	@ (800b010 <tcp_enqueue_flags+0x1d4>)
 800af36:	4832      	ldr	r0, [pc, #200]	@ (800b000 <tcp_enqueue_flags+0x1c4>)
 800af38:	f004 fa68 	bl	800f40c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d103      	bne.n	800af4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	66da      	str	r2, [r3, #108]	@ 0x6c
 800af4a:	e00d      	b.n	800af68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af50:	61bb      	str	r3, [r7, #24]
 800af52:	e002      	b.n	800af5a <tcp_enqueue_flags+0x11e>
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	61bb      	str	r3, [r7, #24]
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1f8      	bne.n	800af54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800af70:	78fb      	ldrb	r3, [r7, #3]
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d104      	bne.n	800af84 <tcp_enqueue_flags+0x148>
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800af8e:	78fb      	ldrb	r3, [r7, #3]
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	8b5b      	ldrh	r3, [r3, #26]
 800af9c:	f043 0320 	orr.w	r3, r3, #32
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fb fc3c 	bl	8006828 <pbuf_clen>
 800afb0:	4603      	mov	r3, r0
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800afba:	4413      	add	r3, r2
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00e      	beq.n	800afec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10a      	bne.n	800afec <tcp_enqueue_flags+0x1b0>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d106      	bne.n	800afec <tcp_enqueue_flags+0x1b0>
 800afde:	4b06      	ldr	r3, [pc, #24]	@ (800aff8 <tcp_enqueue_flags+0x1bc>)
 800afe0:	f240 4265 	movw	r2, #1125	@ 0x465
 800afe4:	490b      	ldr	r1, [pc, #44]	@ (800b014 <tcp_enqueue_flags+0x1d8>)
 800afe6:	4806      	ldr	r0, [pc, #24]	@ (800b000 <tcp_enqueue_flags+0x1c4>)
 800afe8:	f004 fa10 	bl	800f40c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3720      	adds	r7, #32
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	080118ec 	.word	0x080118ec
 800affc:	08011d10 	.word	0x08011d10
 800b000:	08011940 	.word	0x08011940
 800b004:	08011d68 	.word	0x08011d68
 800b008:	08011d88 	.word	0x08011d88
 800b00c:	08011dc4 	.word	0x08011dc4
 800b010:	08011ddc 	.word	0x08011ddc
 800b014:	08011e08 	.word	0x08011e08

0800b018 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b018:	b5b0      	push	{r4, r5, r7, lr}
 800b01a:	b08a      	sub	sp, #40	@ 0x28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d106      	bne.n	800b034 <tcp_output+0x1c>
 800b026:	4b8a      	ldr	r3, [pc, #552]	@ (800b250 <tcp_output+0x238>)
 800b028:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b02c:	4989      	ldr	r1, [pc, #548]	@ (800b254 <tcp_output+0x23c>)
 800b02e:	488a      	ldr	r0, [pc, #552]	@ (800b258 <tcp_output+0x240>)
 800b030:	f004 f9ec 	bl	800f40c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	7d1b      	ldrb	r3, [r3, #20]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d106      	bne.n	800b04a <tcp_output+0x32>
 800b03c:	4b84      	ldr	r3, [pc, #528]	@ (800b250 <tcp_output+0x238>)
 800b03e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b042:	4986      	ldr	r1, [pc, #536]	@ (800b25c <tcp_output+0x244>)
 800b044:	4884      	ldr	r0, [pc, #528]	@ (800b258 <tcp_output+0x240>)
 800b046:	f004 f9e1 	bl	800f40c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b04a:	4b85      	ldr	r3, [pc, #532]	@ (800b260 <tcp_output+0x248>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d101      	bne.n	800b058 <tcp_output+0x40>
    return ERR_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	e1ce      	b.n	800b3f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b064:	4293      	cmp	r3, r2
 800b066:	bf28      	it	cs
 800b068:	4613      	movcs	r3, r2
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b072:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10b      	bne.n	800b092 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	8b5b      	ldrh	r3, [r3, #26]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 81aa 	beq.w	800b3dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fdcb 	bl	800bc24 <tcp_send_empty_ack>
 800b08e:	4603      	mov	r3, r0
 800b090:	e1b1      	b.n	800b3f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3304      	adds	r3, #4
 800b098:	461a      	mov	r2, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff fc7e 	bl	800a99c <tcp_route>
 800b0a0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <tcp_output+0x96>
    return ERR_RTE;
 800b0a8:	f06f 0303 	mvn.w	r3, #3
 800b0ac:	e1a3      	b.n	800b3f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <tcp_output+0xa4>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d111      	bne.n	800b0e0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <tcp_output+0xb0>
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	e000      	b.n	800b0ca <tcp_output+0xb2>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d102      	bne.n	800b0d8 <tcp_output+0xc0>
      return ERR_RTE;
 800b0d2:	f06f 0303 	mvn.w	r3, #3
 800b0d6:	e18e      	b.n	800b3f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f9 ffcd 	bl	8005086 <lwip_htonl>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0f6:	8912      	ldrh	r2, [r2, #8]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d227      	bcs.n	800b150 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b106:	461a      	mov	r2, r3
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d114      	bne.n	800b138 <tcp_output+0x120>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b112:	2b00      	cmp	r3, #0
 800b114:	d110      	bne.n	800b138 <tcp_output+0x120>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10b      	bne.n	800b138 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	8b5b      	ldrh	r3, [r3, #26]
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 814d 	beq.w	800b3e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fd6c 	bl	800bc24 <tcp_send_empty_ack>
 800b14c:	4603      	mov	r3, r0
 800b14e:	e152      	b.n	800b3f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b15c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 811c 	beq.w	800b39e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b166:	e002      	b.n	800b16e <tcp_output+0x156>
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	623b      	str	r3, [r7, #32]
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1f8      	bne.n	800b168 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b176:	e112      	b.n	800b39e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	899b      	ldrh	r3, [r3, #12]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4618      	mov	r0, r3
 800b182:	f7f9 ff6b 	bl	800505c <lwip_htons>
 800b186:	4603      	mov	r3, r0
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d006      	beq.n	800b1a0 <tcp_output+0x188>
 800b192:	4b2f      	ldr	r3, [pc, #188]	@ (800b250 <tcp_output+0x238>)
 800b194:	f240 5236 	movw	r2, #1334	@ 0x536
 800b198:	4932      	ldr	r1, [pc, #200]	@ (800b264 <tcp_output+0x24c>)
 800b19a:	482f      	ldr	r0, [pc, #188]	@ (800b258 <tcp_output+0x240>)
 800b19c:	f004 f936 	bl	800f40c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01f      	beq.n	800b1e8 <tcp_output+0x1d0>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	8b5b      	ldrh	r3, [r3, #26]
 800b1ac:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d119      	bne.n	800b1e8 <tcp_output+0x1d0>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <tcp_output+0x1bc>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d110      	bne.n	800b1e8 <tcp_output+0x1d0>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1ca:	891a      	ldrh	r2, [r3, #8]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d209      	bcs.n	800b1e8 <tcp_output+0x1d0>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d004      	beq.n	800b1e8 <tcp_output+0x1d0>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b1e4:	2b08      	cmp	r3, #8
 800b1e6:	d901      	bls.n	800b1ec <tcp_output+0x1d4>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e000      	b.n	800b1ee <tcp_output+0x1d6>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	8b5b      	ldrh	r3, [r3, #26]
 800b1f6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 80e4 	beq.w	800b3c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7d1b      	ldrb	r3, [r3, #20]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d00d      	beq.n	800b224 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	899b      	ldrh	r3, [r3, #12]
 800b20e:	b29c      	uxth	r4, r3
 800b210:	2010      	movs	r0, #16
 800b212:	f7f9 ff23 	bl	800505c <lwip_htons>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	4322      	orrs	r2, r4
 800b220:	b292      	uxth	r2, r2
 800b222:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b22a:	f000 f909 	bl	800b440 <tcp_output_segment>
 800b22e:	4603      	mov	r3, r0
 800b230:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d016      	beq.n	800b268 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	8b5b      	ldrh	r3, [r3, #26]
 800b23e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b242:	b29a      	uxth	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	835a      	strh	r2, [r3, #26]
      return err;
 800b248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b24c:	e0d3      	b.n	800b3f6 <tcp_output+0x3de>
 800b24e:	bf00      	nop
 800b250:	080118ec 	.word	0x080118ec
 800b254:	08011e30 	.word	0x08011e30
 800b258:	08011940 	.word	0x08011940
 800b25c:	08011e48 	.word	0x08011e48
 800b260:	20008804 	.word	0x20008804
 800b264:	08011e70 	.word	0x08011e70
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	7d1b      	ldrb	r3, [r3, #20]
 800b274:	2b02      	cmp	r3, #2
 800b276:	d006      	beq.n	800b286 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	8b5b      	ldrh	r3, [r3, #26]
 800b27c:	f023 0303 	bic.w	r3, r3, #3
 800b280:	b29a      	uxth	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f9 fefa 	bl	8005086 <lwip_htonl>
 800b292:	4604      	mov	r4, r0
 800b294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b296:	891b      	ldrh	r3, [r3, #8]
 800b298:	461d      	mov	r5, r3
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	899b      	ldrh	r3, [r3, #12]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f9 feda 	bl	800505c <lwip_htons>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <tcp_output+0x2a0>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e000      	b.n	800b2ba <tcp_output+0x2a2>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	442b      	add	r3, r5
 800b2bc:	4423      	add	r3, r4
 800b2be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	da02      	bge.n	800b2d2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	891b      	ldrh	r3, [r3, #8]
 800b2d6:	461c      	mov	r4, r3
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	899b      	ldrh	r3, [r3, #12]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7f9 febb 	bl	800505c <lwip_htons>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <tcp_output+0x2de>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <tcp_output+0x2e0>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4423      	add	r3, r4
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d049      	beq.n	800b392 <tcp_output+0x37a>
      seg->next = NULL;
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d105      	bne.n	800b318 <tcp_output+0x300>
        pcb->unacked = seg;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b310:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b314:	623b      	str	r3, [r7, #32]
 800b316:	e03f      	b.n	800b398 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7f9 feb1 	bl	8005086 <lwip_htonl>
 800b324:	4604      	mov	r4, r0
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7f9 feaa 	bl	8005086 <lwip_htonl>
 800b332:	4603      	mov	r3, r0
 800b334:	1ae3      	subs	r3, r4, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	da24      	bge.n	800b384 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3370      	adds	r3, #112	@ 0x70
 800b33e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b340:	e002      	b.n	800b348 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d011      	beq.n	800b374 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7f9 fe94 	bl	8005086 <lwip_htonl>
 800b35e:	4604      	mov	r4, r0
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	4618      	mov	r0, r3
 800b368:	f7f9 fe8d 	bl	8005086 <lwip_htonl>
 800b36c:	4603      	mov	r3, r0
 800b36e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b370:	2b00      	cmp	r3, #0
 800b372:	dbe6      	blt.n	800b342 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	e009      	b.n	800b398 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b388:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	623b      	str	r3, [r7, #32]
 800b390:	e002      	b.n	800b398 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b392:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b394:	f7fc fc45 	bl	8007c22 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b39c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d012      	beq.n	800b3ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f9 fe6b 	bl	8005086 <lwip_htonl>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ba:	8912      	ldrh	r2, [r2, #8]
 800b3bc:	4413      	add	r3, r2
  while (seg != NULL &&
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	f4bf aed9 	bcs.w	800b178 <tcp_output+0x160>
 800b3c6:	e000      	b.n	800b3ca <tcp_output+0x3b2>
      break;
 800b3c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d108      	bne.n	800b3e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b3da:	e004      	b.n	800b3e6 <tcp_output+0x3ce>
    goto output_done;
 800b3dc:	bf00      	nop
 800b3de:	e002      	b.n	800b3e6 <tcp_output+0x3ce>
    goto output_done;
 800b3e0:	bf00      	nop
 800b3e2:	e000      	b.n	800b3e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b3e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3728      	adds	r7, #40	@ 0x28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b3fe:	bf00      	nop

0800b400 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d106      	bne.n	800b41c <tcp_output_segment_busy+0x1c>
 800b40e:	4b09      	ldr	r3, [pc, #36]	@ (800b434 <tcp_output_segment_busy+0x34>)
 800b410:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b414:	4908      	ldr	r1, [pc, #32]	@ (800b438 <tcp_output_segment_busy+0x38>)
 800b416:	4809      	ldr	r0, [pc, #36]	@ (800b43c <tcp_output_segment_busy+0x3c>)
 800b418:	f003 fff8 	bl	800f40c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	7b9b      	ldrb	r3, [r3, #14]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d001      	beq.n	800b42a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b426:	2301      	movs	r3, #1
 800b428:	e000      	b.n	800b42c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	080118ec 	.word	0x080118ec
 800b438:	08011e88 	.word	0x08011e88
 800b43c:	08011940 	.word	0x08011940

0800b440 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b440:	b5b0      	push	{r4, r5, r7, lr}
 800b442:	b08c      	sub	sp, #48	@ 0x30
 800b444:	af04      	add	r7, sp, #16
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d106      	bne.n	800b460 <tcp_output_segment+0x20>
 800b452:	4b64      	ldr	r3, [pc, #400]	@ (800b5e4 <tcp_output_segment+0x1a4>)
 800b454:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b458:	4963      	ldr	r1, [pc, #396]	@ (800b5e8 <tcp_output_segment+0x1a8>)
 800b45a:	4864      	ldr	r0, [pc, #400]	@ (800b5ec <tcp_output_segment+0x1ac>)
 800b45c:	f003 ffd6 	bl	800f40c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d106      	bne.n	800b474 <tcp_output_segment+0x34>
 800b466:	4b5f      	ldr	r3, [pc, #380]	@ (800b5e4 <tcp_output_segment+0x1a4>)
 800b468:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b46c:	4960      	ldr	r1, [pc, #384]	@ (800b5f0 <tcp_output_segment+0x1b0>)
 800b46e:	485f      	ldr	r0, [pc, #380]	@ (800b5ec <tcp_output_segment+0x1ac>)
 800b470:	f003 ffcc 	bl	800f40c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <tcp_output_segment+0x48>
 800b47a:	4b5a      	ldr	r3, [pc, #360]	@ (800b5e4 <tcp_output_segment+0x1a4>)
 800b47c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b480:	495c      	ldr	r1, [pc, #368]	@ (800b5f4 <tcp_output_segment+0x1b4>)
 800b482:	485a      	ldr	r0, [pc, #360]	@ (800b5ec <tcp_output_segment+0x1ac>)
 800b484:	f003 ffc2 	bl	800f40c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff ffb9 	bl	800b400 <tcp_output_segment_busy>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	e0a1      	b.n	800b5dc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	68dc      	ldr	r4, [r3, #12]
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	f7f9 fdf0 	bl	8005086 <lwip_htonl>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	68dc      	ldr	r4, [r3, #12]
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	f7f9 fdd2 	bl	800505c <lwip_htons>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b4c4:	441a      	add	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	3314      	adds	r3, #20
 800b4d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	7a9b      	ldrb	r3, [r3, #10]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d015      	beq.n	800b50a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	6879      	ldr	r1, [r7, #4]
 800b4e6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b4ea:	f7fc fe91 	bl	8008210 <tcp_eff_send_mss_netif>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b4f2:	8b7b      	ldrh	r3, [r7, #26]
 800b4f4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f9 fdc4 	bl	8005086 <lwip_htonl>
 800b4fe:	4602      	mov	r2, r0
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	3304      	adds	r3, #4
 800b508:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b510:	2b00      	cmp	r3, #0
 800b512:	da02      	bge.n	800b51a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2200      	movs	r2, #0
 800b518:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10c      	bne.n	800b53c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b522:	4b35      	ldr	r3, [pc, #212]	@ (800b5f8 <tcp_output_segment+0x1b8>)
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	4618      	mov	r0, r3
 800b532:	f7f9 fda8 	bl	8005086 <lwip_htonl>
 800b536:	4602      	mov	r2, r0
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	8959      	ldrh	r1, [r3, #10]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	8b3a      	ldrh	r2, [r7, #24]
 800b556:	1a8a      	subs	r2, r1, r2
 800b558:	b292      	uxth	r2, r2
 800b55a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	8919      	ldrh	r1, [r3, #8]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	8b3a      	ldrh	r2, [r7, #24]
 800b568:	1a8a      	subs	r2, r1, r2
 800b56a:	b292      	uxth	r2, r2
 800b56c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	68d2      	ldr	r2, [r2, #12]
 800b576:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	741a      	strb	r2, [r3, #16]
 800b580:	2200      	movs	r2, #0
 800b582:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	7a9b      	ldrb	r3, [r3, #10]
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <tcp_output_segment+0x158>
 800b594:	2318      	movs	r3, #24
 800b596:	e000      	b.n	800b59a <tcp_output_segment+0x15a>
 800b598:	2314      	movs	r3, #20
 800b59a:	4413      	add	r3, r2
 800b59c:	69fa      	ldr	r2, [r7, #28]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d006      	beq.n	800b5b0 <tcp_output_segment+0x170>
 800b5a2:	4b10      	ldr	r3, [pc, #64]	@ (800b5e4 <tcp_output_segment+0x1a4>)
 800b5a4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b5a8:	4914      	ldr	r1, [pc, #80]	@ (800b5fc <tcp_output_segment+0x1bc>)
 800b5aa:	4810      	ldr	r0, [pc, #64]	@ (800b5ec <tcp_output_segment+0x1ac>)
 800b5ac:	f003 ff2e 	bl	800f40c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6858      	ldr	r0, [r3, #4]
 800b5b4:	68b9      	ldr	r1, [r7, #8]
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	1d1c      	adds	r4, r3, #4
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	7add      	ldrb	r5, [r3, #11]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	7a9b      	ldrb	r3, [r3, #10]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	9202      	str	r2, [sp, #8]
 800b5c6:	2206      	movs	r2, #6
 800b5c8:	9201      	str	r2, [sp, #4]
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	f002 fdee 	bl	800e1b0 <ip4_output_if>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b5d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3720      	adds	r7, #32
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bdb0      	pop	{r4, r5, r7, pc}
 800b5e4:	080118ec 	.word	0x080118ec
 800b5e8:	08011eb0 	.word	0x08011eb0
 800b5ec:	08011940 	.word	0x08011940
 800b5f0:	08011ed0 	.word	0x08011ed0
 800b5f4:	08011ef0 	.word	0x08011ef0
 800b5f8:	200087b8 	.word	0x200087b8
 800b5fc:	08011f14 	.word	0x08011f14

0800b600 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b600:	b5b0      	push	{r4, r5, r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d106      	bne.n	800b61c <tcp_rexmit_rto_prepare+0x1c>
 800b60e:	4b31      	ldr	r3, [pc, #196]	@ (800b6d4 <tcp_rexmit_rto_prepare+0xd4>)
 800b610:	f240 6263 	movw	r2, #1635	@ 0x663
 800b614:	4930      	ldr	r1, [pc, #192]	@ (800b6d8 <tcp_rexmit_rto_prepare+0xd8>)
 800b616:	4831      	ldr	r0, [pc, #196]	@ (800b6dc <tcp_rexmit_rto_prepare+0xdc>)
 800b618:	f003 fef8 	bl	800f40c <iprintf>

  if (pcb->unacked == NULL) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b624:	f06f 0305 	mvn.w	r3, #5
 800b628:	e050      	b.n	800b6cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	e00b      	b.n	800b64a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff fee4 	bl	800b400 <tcp_output_segment_busy>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b63e:	f06f 0305 	mvn.w	r3, #5
 800b642:	e043      	b.n	800b6cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1ef      	bne.n	800b632 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f7ff fed4 	bl	800b400 <tcp_output_segment_busy>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b65e:	f06f 0305 	mvn.w	r3, #5
 800b662:	e033      	b.n	800b6cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	8b5b      	ldrh	r3, [r3, #26]
 800b67e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b682:	b29a      	uxth	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7f9 fcf9 	bl	8005086 <lwip_htonl>
 800b694:	4604      	mov	r4, r0
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	891b      	ldrh	r3, [r3, #8]
 800b69a:	461d      	mov	r5, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	899b      	ldrh	r3, [r3, #12]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7f9 fcd9 	bl	800505c <lwip_htons>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	f003 0303 	and.w	r3, r3, #3
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <tcp_rexmit_rto_prepare+0xba>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e000      	b.n	800b6bc <tcp_rexmit_rto_prepare+0xbc>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	442b      	add	r3, r5
 800b6be:	18e2      	adds	r2, r4, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b6d4:	080118ec 	.word	0x080118ec
 800b6d8:	08011f28 	.word	0x08011f28
 800b6dc:	08011940 	.word	0x08011940

0800b6e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d106      	bne.n	800b6fc <tcp_rexmit_rto_commit+0x1c>
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b724 <tcp_rexmit_rto_commit+0x44>)
 800b6f0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b6f4:	490c      	ldr	r1, [pc, #48]	@ (800b728 <tcp_rexmit_rto_commit+0x48>)
 800b6f6:	480d      	ldr	r0, [pc, #52]	@ (800b72c <tcp_rexmit_rto_commit+0x4c>)
 800b6f8:	f003 fe88 	bl	800f40c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b702:	2bff      	cmp	r3, #255	@ 0xff
 800b704:	d007      	beq.n	800b716 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b70c:	3301      	adds	r3, #1
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff fc7e 	bl	800b018 <tcp_output>
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	080118ec 	.word	0x080118ec
 800b728:	08011f4c 	.word	0x08011f4c
 800b72c:	08011940 	.word	0x08011940

0800b730 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <tcp_rexmit_rto+0x1c>
 800b73e:	4b0a      	ldr	r3, [pc, #40]	@ (800b768 <tcp_rexmit_rto+0x38>)
 800b740:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800b744:	4909      	ldr	r1, [pc, #36]	@ (800b76c <tcp_rexmit_rto+0x3c>)
 800b746:	480a      	ldr	r0, [pc, #40]	@ (800b770 <tcp_rexmit_rto+0x40>)
 800b748:	f003 fe60 	bl	800f40c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ff57 	bl	800b600 <tcp_rexmit_rto_prepare>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7ff ffc1 	bl	800b6e0 <tcp_rexmit_rto_commit>
  }
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	080118ec 	.word	0x080118ec
 800b76c:	08011f70 	.word	0x08011f70
 800b770:	08011940 	.word	0x08011940

0800b774 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d106      	bne.n	800b790 <tcp_rexmit+0x1c>
 800b782:	4b2f      	ldr	r3, [pc, #188]	@ (800b840 <tcp_rexmit+0xcc>)
 800b784:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800b788:	492e      	ldr	r1, [pc, #184]	@ (800b844 <tcp_rexmit+0xd0>)
 800b78a:	482f      	ldr	r0, [pc, #188]	@ (800b848 <tcp_rexmit+0xd4>)
 800b78c:	f003 fe3e 	bl	800f40c <iprintf>

  if (pcb->unacked == NULL) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b798:	f06f 0305 	mvn.w	r3, #5
 800b79c:	e04c      	b.n	800b838 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b7a4:	68b8      	ldr	r0, [r7, #8]
 800b7a6:	f7ff fe2b 	bl	800b400 <tcp_output_segment_busy>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b7b0:	f06f 0305 	mvn.w	r3, #5
 800b7b4:	e040      	b.n	800b838 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	336c      	adds	r3, #108	@ 0x6c
 800b7c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b7c4:	e002      	b.n	800b7cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d011      	beq.n	800b7f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7f9 fc52 	bl	8005086 <lwip_htonl>
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7f9 fc4b 	bl	8005086 <lwip_htonl>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dbe6      	blt.n	800b7c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b81c:	2bff      	cmp	r3, #255	@ 0xff
 800b81e:	d007      	beq.n	800b830 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b826:	3301      	adds	r3, #1
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd90      	pop	{r4, r7, pc}
 800b840:	080118ec 	.word	0x080118ec
 800b844:	08011f8c 	.word	0x08011f8c
 800b848:	08011940 	.word	0x08011940

0800b84c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <tcp_rexmit_fast+0x1c>
 800b85a:	4b2a      	ldr	r3, [pc, #168]	@ (800b904 <tcp_rexmit_fast+0xb8>)
 800b85c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800b860:	4929      	ldr	r1, [pc, #164]	@ (800b908 <tcp_rexmit_fast+0xbc>)
 800b862:	482a      	ldr	r0, [pc, #168]	@ (800b90c <tcp_rexmit_fast+0xc0>)
 800b864:	f003 fdd2 	bl	800f40c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d044      	beq.n	800b8fa <tcp_rexmit_fast+0xae>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	8b5b      	ldrh	r3, [r3, #26]
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d13e      	bne.n	800b8fa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff ff79 	bl	800b774 <tcp_rexmit>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d138      	bne.n	800b8fa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b894:	4293      	cmp	r3, r2
 800b896:	bf28      	it	cs
 800b898:	4613      	movcs	r3, r2
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	0fda      	lsrs	r2, r3, #31
 800b89e:	4413      	add	r3, r2
 800b8a0:	105b      	asrs	r3, r3, #1
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8b6:	005b      	lsls	r3, r3, #1
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d206      	bcs.n	800b8ca <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	0049      	lsls	r1, r1, #1
 800b8d8:	440b      	add	r3, r1
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4413      	add	r3, r2
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	8b5b      	ldrh	r3, [r3, #26]
 800b8ea:	f043 0304 	orr.w	r3, r3, #4
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800b8fa:	bf00      	nop
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	080118ec 	.word	0x080118ec
 800b908:	08011fa4 	.word	0x08011fa4
 800b90c:	08011940 	.word	0x08011940

0800b910 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	607b      	str	r3, [r7, #4]
 800b91a:	460b      	mov	r3, r1
 800b91c:	817b      	strh	r3, [r7, #10]
 800b91e:	4613      	mov	r3, r2
 800b920:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b922:	897a      	ldrh	r2, [r7, #10]
 800b924:	893b      	ldrh	r3, [r7, #8]
 800b926:	4413      	add	r3, r2
 800b928:	b29b      	uxth	r3, r3
 800b92a:	3314      	adds	r3, #20
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b932:	4619      	mov	r1, r3
 800b934:	2022      	movs	r0, #34	@ 0x22
 800b936:	f7fa fc0b 	bl	8006150 <pbuf_alloc>
 800b93a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d04d      	beq.n	800b9de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b942:	897b      	ldrh	r3, [r7, #10]
 800b944:	3313      	adds	r3, #19
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	8952      	ldrh	r2, [r2, #10]
 800b94a:	4293      	cmp	r3, r2
 800b94c:	db06      	blt.n	800b95c <tcp_output_alloc_header_common+0x4c>
 800b94e:	4b26      	ldr	r3, [pc, #152]	@ (800b9e8 <tcp_output_alloc_header_common+0xd8>)
 800b950:	f240 7223 	movw	r2, #1827	@ 0x723
 800b954:	4925      	ldr	r1, [pc, #148]	@ (800b9ec <tcp_output_alloc_header_common+0xdc>)
 800b956:	4826      	ldr	r0, [pc, #152]	@ (800b9f0 <tcp_output_alloc_header_common+0xe0>)
 800b958:	f003 fd58 	bl	800f40c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b962:	8c3b      	ldrh	r3, [r7, #32]
 800b964:	4618      	mov	r0, r3
 800b966:	f7f9 fb79 	bl	800505c <lwip_htons>
 800b96a:	4603      	mov	r3, r0
 800b96c:	461a      	mov	r2, r3
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b974:	4618      	mov	r0, r3
 800b976:	f7f9 fb71 	bl	800505c <lwip_htons>
 800b97a:	4603      	mov	r3, r0
 800b97c:	461a      	mov	r2, r3
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f7f9 fb7c 	bl	8005086 <lwip_htonl>
 800b98e:	4602      	mov	r2, r0
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b994:	897b      	ldrh	r3, [r7, #10]
 800b996:	089b      	lsrs	r3, r3, #2
 800b998:	b29b      	uxth	r3, r3
 800b99a:	3305      	adds	r3, #5
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	031b      	lsls	r3, r3, #12
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7f9 fb55 	bl	800505c <lwip_htons>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b9ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7f9 fb4d 	bl	800505c <lwip_htons>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	741a      	strb	r2, [r3, #16]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	749a      	strb	r2, [r3, #18]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b9de:	697b      	ldr	r3, [r7, #20]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	080118ec 	.word	0x080118ec
 800b9ec:	08011fc4 	.word	0x08011fc4
 800b9f0:	08011940 	.word	0x08011940

0800b9f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b9f4:	b5b0      	push	{r4, r5, r7, lr}
 800b9f6:	b08a      	sub	sp, #40	@ 0x28
 800b9f8:	af04      	add	r7, sp, #16
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	607b      	str	r3, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	817b      	strh	r3, [r7, #10]
 800ba02:	4613      	mov	r3, r2
 800ba04:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d106      	bne.n	800ba1a <tcp_output_alloc_header+0x26>
 800ba0c:	4b15      	ldr	r3, [pc, #84]	@ (800ba64 <tcp_output_alloc_header+0x70>)
 800ba0e:	f240 7242 	movw	r2, #1858	@ 0x742
 800ba12:	4915      	ldr	r1, [pc, #84]	@ (800ba68 <tcp_output_alloc_header+0x74>)
 800ba14:	4815      	ldr	r0, [pc, #84]	@ (800ba6c <tcp_output_alloc_header+0x78>)
 800ba16:	f003 fcf9 	bl	800f40c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	8adb      	ldrh	r3, [r3, #22]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	8b12      	ldrh	r2, [r2, #24]
 800ba26:	68f9      	ldr	r1, [r7, #12]
 800ba28:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ba2a:	893d      	ldrh	r5, [r7, #8]
 800ba2c:	897c      	ldrh	r4, [r7, #10]
 800ba2e:	9103      	str	r1, [sp, #12]
 800ba30:	2110      	movs	r1, #16
 800ba32:	9102      	str	r1, [sp, #8]
 800ba34:	9201      	str	r2, [sp, #4]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	462a      	mov	r2, r5
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	f7ff ff67 	bl	800b910 <tcp_output_alloc_header_common>
 800ba42:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d006      	beq.n	800ba58 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ba52:	441a      	add	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800ba58:	697b      	ldr	r3, [r7, #20]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3718      	adds	r7, #24
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bdb0      	pop	{r4, r5, r7, pc}
 800ba62:	bf00      	nop
 800ba64:	080118ec 	.word	0x080118ec
 800ba68:	08011ff4 	.word	0x08011ff4
 800ba6c:	08011940 	.word	0x08011940

0800ba70 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	460b      	mov	r3, r1
 800ba80:	71fb      	strb	r3, [r7, #7]
 800ba82:	4613      	mov	r3, r2
 800ba84:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <tcp_output_fill_options+0x2e>
 800ba90:	4b12      	ldr	r3, [pc, #72]	@ (800badc <tcp_output_fill_options+0x6c>)
 800ba92:	f240 7256 	movw	r2, #1878	@ 0x756
 800ba96:	4912      	ldr	r1, [pc, #72]	@ (800bae0 <tcp_output_fill_options+0x70>)
 800ba98:	4812      	ldr	r0, [pc, #72]	@ (800bae4 <tcp_output_fill_options+0x74>)
 800ba9a:	f003 fcb7 	bl	800f40c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	3314      	adds	r3, #20
 800baa8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800baaa:	8bfb      	ldrh	r3, [r7, #30]
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	461a      	mov	r2, r3
 800bab0:	79fb      	ldrb	r3, [r7, #7]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	4413      	add	r3, r2
 800baba:	3314      	adds	r3, #20
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	4413      	add	r3, r2
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d006      	beq.n	800bad4 <tcp_output_fill_options+0x64>
 800bac6:	4b05      	ldr	r3, [pc, #20]	@ (800badc <tcp_output_fill_options+0x6c>)
 800bac8:	f240 7275 	movw	r2, #1909	@ 0x775
 800bacc:	4906      	ldr	r1, [pc, #24]	@ (800bae8 <tcp_output_fill_options+0x78>)
 800bace:	4805      	ldr	r0, [pc, #20]	@ (800bae4 <tcp_output_fill_options+0x74>)
 800bad0:	f003 fc9c 	bl	800f40c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bad4:	bf00      	nop
 800bad6:	3720      	adds	r7, #32
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	080118ec 	.word	0x080118ec
 800bae0:	0801201c 	.word	0x0801201c
 800bae4:	08011940 	.word	0x08011940
 800bae8:	08011f14 	.word	0x08011f14

0800baec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08a      	sub	sp, #40	@ 0x28
 800baf0:	af04      	add	r7, sp, #16
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d106      	bne.n	800bb0e <tcp_output_control_segment+0x22>
 800bb00:	4b1c      	ldr	r3, [pc, #112]	@ (800bb74 <tcp_output_control_segment+0x88>)
 800bb02:	f240 7287 	movw	r2, #1927	@ 0x787
 800bb06:	491c      	ldr	r1, [pc, #112]	@ (800bb78 <tcp_output_control_segment+0x8c>)
 800bb08:	481c      	ldr	r0, [pc, #112]	@ (800bb7c <tcp_output_control_segment+0x90>)
 800bb0a:	f003 fc7f 	bl	800f40c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f7fe ff42 	bl	800a99c <tcp_route>
 800bb18:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bb20:	23fc      	movs	r3, #252	@ 0xfc
 800bb22:	75fb      	strb	r3, [r7, #23]
 800bb24:	e01c      	b.n	800bb60 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d006      	beq.n	800bb3a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	7adb      	ldrb	r3, [r3, #11]
 800bb30:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	7a9b      	ldrb	r3, [r3, #10]
 800bb36:	757b      	strb	r3, [r7, #21]
 800bb38:	e003      	b.n	800bb42 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bb3a:	23ff      	movs	r3, #255	@ 0xff
 800bb3c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bb42:	7dba      	ldrb	r2, [r7, #22]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	9302      	str	r3, [sp, #8]
 800bb48:	2306      	movs	r3, #6
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	7d7b      	ldrb	r3, [r7, #21]
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	4613      	mov	r3, r2
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	6879      	ldr	r1, [r7, #4]
 800bb56:	68b8      	ldr	r0, [r7, #8]
 800bb58:	f002 fb2a 	bl	800e1b0 <ip4_output_if>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bb60:	68b8      	ldr	r0, [r7, #8]
 800bb62:	f7fa fdd9 	bl	8006718 <pbuf_free>
  return err;
 800bb66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	080118ec 	.word	0x080118ec
 800bb78:	08012044 	.word	0x08012044
 800bb7c:	08011940 	.word	0x08011940

0800bb80 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bb80:	b590      	push	{r4, r7, lr}
 800bb82:	b08b      	sub	sp, #44	@ 0x2c
 800bb84:	af04      	add	r7, sp, #16
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d106      	bne.n	800bba2 <tcp_rst+0x22>
 800bb94:	4b1f      	ldr	r3, [pc, #124]	@ (800bc14 <tcp_rst+0x94>)
 800bb96:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800bb9a:	491f      	ldr	r1, [pc, #124]	@ (800bc18 <tcp_rst+0x98>)
 800bb9c:	481f      	ldr	r0, [pc, #124]	@ (800bc1c <tcp_rst+0x9c>)
 800bb9e:	f003 fc35 	bl	800f40c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d106      	bne.n	800bbb6 <tcp_rst+0x36>
 800bba8:	4b1a      	ldr	r3, [pc, #104]	@ (800bc14 <tcp_rst+0x94>)
 800bbaa:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800bbae:	491c      	ldr	r1, [pc, #112]	@ (800bc20 <tcp_rst+0xa0>)
 800bbb0:	481a      	ldr	r0, [pc, #104]	@ (800bc1c <tcp_rst+0x9c>)
 800bbb2:	f003 fc2b 	bl	800f40c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bbba:	f246 0308 	movw	r3, #24584	@ 0x6008
 800bbbe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
 800bbc2:	b29c      	uxth	r4, r3
 800bbc4:	68b8      	ldr	r0, [r7, #8]
 800bbc6:	f7f9 fa5e 	bl	8005086 <lwip_htonl>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	8abb      	ldrh	r3, [r7, #20]
 800bbce:	9303      	str	r3, [sp, #12]
 800bbd0:	2314      	movs	r3, #20
 800bbd2:	9302      	str	r3, [sp, #8]
 800bbd4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff fe94 	bl	800b910 <tcp_output_alloc_header_common>
 800bbe8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00c      	beq.n	800bc0a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	6939      	ldr	r1, [r7, #16]
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7ff ff3a 	bl	800ba70 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	6939      	ldr	r1, [r7, #16]
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff ff72 	bl	800baec <tcp_output_control_segment>
 800bc08:	e000      	b.n	800bc0c <tcp_rst+0x8c>
    return;
 800bc0a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bc0c:	371c      	adds	r7, #28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd90      	pop	{r4, r7, pc}
 800bc12:	bf00      	nop
 800bc14:	080118ec 	.word	0x080118ec
 800bc18:	08012070 	.word	0x08012070
 800bc1c:	08011940 	.word	0x08011940
 800bc20:	0801208c 	.word	0x0801208c

0800bc24 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bc24:	b590      	push	{r4, r7, lr}
 800bc26:	b087      	sub	sp, #28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <tcp_send_empty_ack+0x24>
 800bc3a:	4b28      	ldr	r3, [pc, #160]	@ (800bcdc <tcp_send_empty_ack+0xb8>)
 800bc3c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800bc40:	4927      	ldr	r1, [pc, #156]	@ (800bce0 <tcp_send_empty_ack+0xbc>)
 800bc42:	4828      	ldr	r0, [pc, #160]	@ (800bce4 <tcp_send_empty_ack+0xc0>)
 800bc44:	f003 fbe2 	bl	800f40c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f003 0304 	and.w	r3, r3, #4
 800bc52:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bc54:	7d7b      	ldrb	r3, [r7, #21]
 800bc56:	b29c      	uxth	r4, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7f9 fa12 	bl	8005086 <lwip_htonl>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2200      	movs	r2, #0
 800bc66:	4621      	mov	r1, r4
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff fec3 	bl	800b9f4 <tcp_output_alloc_header>
 800bc6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d109      	bne.n	800bc8a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8b5b      	ldrh	r3, [r3, #26]
 800bc7a:	f043 0303 	orr.w	r3, r3, #3
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bc84:	f06f 0301 	mvn.w	r3, #1
 800bc88:	e023      	b.n	800bcd2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bc8a:	7dbb      	ldrb	r3, [r7, #22]
 800bc8c:	7dfa      	ldrb	r2, [r7, #23]
 800bc8e:	6939      	ldr	r1, [r7, #16]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff feed 	bl	800ba70 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	6939      	ldr	r1, [r7, #16]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7ff ff24 	bl	800baec <tcp_output_control_segment>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d007      	beq.n	800bcc0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8b5b      	ldrh	r3, [r3, #26]
 800bcb4:	f043 0303 	orr.w	r3, r3, #3
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	835a      	strh	r2, [r3, #26]
 800bcbe:	e006      	b.n	800bcce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	8b5b      	ldrh	r3, [r3, #26]
 800bcc4:	f023 0303 	bic.w	r3, r3, #3
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bcce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	371c      	adds	r7, #28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd90      	pop	{r4, r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	080118ec 	.word	0x080118ec
 800bce0:	080120a8 	.word	0x080120a8
 800bce4:	08011940 	.word	0x08011940

0800bce8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bce8:	b590      	push	{r4, r7, lr}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d106      	bne.n	800bd08 <tcp_keepalive+0x20>
 800bcfa:	4b18      	ldr	r3, [pc, #96]	@ (800bd5c <tcp_keepalive+0x74>)
 800bcfc:	f640 0224 	movw	r2, #2084	@ 0x824
 800bd00:	4917      	ldr	r1, [pc, #92]	@ (800bd60 <tcp_keepalive+0x78>)
 800bd02:	4818      	ldr	r0, [pc, #96]	@ (800bd64 <tcp_keepalive+0x7c>)
 800bd04:	f003 fb82 	bl	800f40c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	b29c      	uxth	r4, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd10:	3b01      	subs	r3, #1
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7f9 f9b7 	bl	8005086 <lwip_htonl>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff fe68 	bl	800b9f4 <tcp_output_alloc_header>
 800bd24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bd2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd30:	e010      	b.n	800bd54 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	2200      	movs	r2, #0
 800bd36:	6939      	ldr	r1, [r7, #16]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff fe99 	bl	800ba70 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3304      	adds	r3, #4
 800bd44:	6939      	ldr	r1, [r7, #16]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7ff fed0 	bl	800baec <tcp_output_control_segment>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bd50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	371c      	adds	r7, #28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd90      	pop	{r4, r7, pc}
 800bd5c:	080118ec 	.word	0x080118ec
 800bd60:	080120c8 	.word	0x080120c8
 800bd64:	08011940 	.word	0x08011940

0800bd68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b08b      	sub	sp, #44	@ 0x2c
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bd70:	2300      	movs	r3, #0
 800bd72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d106      	bne.n	800bd8a <tcp_zero_window_probe+0x22>
 800bd7c:	4b4c      	ldr	r3, [pc, #304]	@ (800beb0 <tcp_zero_window_probe+0x148>)
 800bd7e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800bd82:	494c      	ldr	r1, [pc, #304]	@ (800beb4 <tcp_zero_window_probe+0x14c>)
 800bd84:	484c      	ldr	r0, [pc, #304]	@ (800beb8 <tcp_zero_window_probe+0x150>)
 800bd86:	f003 fb41 	bl	800f40c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd8e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bd96:	2300      	movs	r3, #0
 800bd98:	e086      	b.n	800bea8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bda0:	2bff      	cmp	r3, #255	@ 0xff
 800bda2:	d007      	beq.n	800bdb4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bdaa:	3301      	adds	r3, #1
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	899b      	ldrh	r3, [r3, #12]
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7f9 f94d 	bl	800505c <lwip_htons>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d005      	beq.n	800bdda <tcp_zero_window_probe+0x72>
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	891b      	ldrh	r3, [r3, #8]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <tcp_zero_window_probe+0x72>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e000      	b.n	800bddc <tcp_zero_window_probe+0x74>
 800bdda:	2300      	movs	r3, #0
 800bddc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bf0c      	ite	eq
 800bde4:	2301      	moveq	r3, #1
 800bde6:	2300      	movne	r3, #0
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bdec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdf0:	b299      	uxth	r1, r3
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	8bba      	ldrh	r2, [r7, #28]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fdfa 	bl	800b9f4 <tcp_output_alloc_header>
 800be00:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800be08:	f04f 33ff 	mov.w	r3, #4294967295
 800be0c:	e04c      	b.n	800bea8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800be14:	7ffb      	ldrb	r3, [r7, #31]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d011      	beq.n	800be3e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	899b      	ldrh	r3, [r3, #12]
 800be1e:	b29b      	uxth	r3, r3
 800be20:	b21b      	sxth	r3, r3
 800be22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be26:	b21c      	sxth	r4, r3
 800be28:	2011      	movs	r0, #17
 800be2a:	f7f9 f917 	bl	800505c <lwip_htons>
 800be2e:	4603      	mov	r3, r0
 800be30:	b21b      	sxth	r3, r3
 800be32:	4323      	orrs	r3, r4
 800be34:	b21b      	sxth	r3, r3
 800be36:	b29a      	uxth	r2, r3
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	819a      	strh	r2, [r3, #12]
 800be3c:	e010      	b.n	800be60 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	3314      	adds	r3, #20
 800be44:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	6858      	ldr	r0, [r3, #4]
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	891a      	ldrh	r2, [r3, #8]
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	891b      	ldrh	r3, [r3, #8]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	b29b      	uxth	r3, r3
 800be58:	2201      	movs	r2, #1
 800be5a:	6939      	ldr	r1, [r7, #16]
 800be5c:	f7fa fe56 	bl	8006b0c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	4618      	mov	r0, r3
 800be68:	f7f9 f90d 	bl	8005086 <lwip_htonl>
 800be6c:	4603      	mov	r3, r0
 800be6e:	3301      	adds	r3, #1
 800be70:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	da02      	bge.n	800be84 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be88:	2200      	movs	r2, #0
 800be8a:	69b9      	ldr	r1, [r7, #24]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff fdef 	bl	800ba70 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	3304      	adds	r3, #4
 800be98:	69b9      	ldr	r1, [r7, #24]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff fe26 	bl	800baec <tcp_output_control_segment>
 800bea0:	4603      	mov	r3, r0
 800bea2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bea4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	372c      	adds	r7, #44	@ 0x2c
 800beac:	46bd      	mov	sp, r7
 800beae:	bd90      	pop	{r4, r7, pc}
 800beb0:	080118ec 	.word	0x080118ec
 800beb4:	080120e4 	.word	0x080120e4
 800beb8:	08011940 	.word	0x08011940

0800bebc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bec4:	f7fa ff10 	bl	8006ce8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bec8:	4b0a      	ldr	r3, [pc, #40]	@ (800bef4 <tcpip_tcp_timer+0x38>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d103      	bne.n	800bed8 <tcpip_tcp_timer+0x1c>
 800bed0:	4b09      	ldr	r3, [pc, #36]	@ (800bef8 <tcpip_tcp_timer+0x3c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bed8:	2200      	movs	r2, #0
 800beda:	4908      	ldr	r1, [pc, #32]	@ (800befc <tcpip_tcp_timer+0x40>)
 800bedc:	20fa      	movs	r0, #250	@ 0xfa
 800bede:	f000 f8f3 	bl	800c0c8 <sys_timeout>
 800bee2:	e003      	b.n	800beec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bee4:	4b06      	ldr	r3, [pc, #24]	@ (800bf00 <tcpip_tcp_timer+0x44>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]
  }
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	200087c4 	.word	0x200087c4
 800bef8:	200087c8 	.word	0x200087c8
 800befc:	0800bebd 	.word	0x0800bebd
 800bf00:	20008810 	.word	0x20008810

0800bf04 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bf08:	4b0a      	ldr	r3, [pc, #40]	@ (800bf34 <tcp_timer_needed+0x30>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10f      	bne.n	800bf30 <tcp_timer_needed+0x2c>
 800bf10:	4b09      	ldr	r3, [pc, #36]	@ (800bf38 <tcp_timer_needed+0x34>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d103      	bne.n	800bf20 <tcp_timer_needed+0x1c>
 800bf18:	4b08      	ldr	r3, [pc, #32]	@ (800bf3c <tcp_timer_needed+0x38>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bf20:	4b04      	ldr	r3, [pc, #16]	@ (800bf34 <tcp_timer_needed+0x30>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bf26:	2200      	movs	r2, #0
 800bf28:	4905      	ldr	r1, [pc, #20]	@ (800bf40 <tcp_timer_needed+0x3c>)
 800bf2a:	20fa      	movs	r0, #250	@ 0xfa
 800bf2c:	f000 f8cc 	bl	800c0c8 <sys_timeout>
  }
}
 800bf30:	bf00      	nop
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20008810 	.word	0x20008810
 800bf38:	200087c4 	.word	0x200087c4
 800bf3c:	200087c8 	.word	0x200087c8
 800bf40:	0800bebd 	.word	0x0800bebd

0800bf44 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bf50:	2006      	movs	r0, #6
 800bf52:	f7f9 fcfb 	bl	800594c <memp_malloc>
 800bf56:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d109      	bne.n	800bf72 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d151      	bne.n	800c008 <sys_timeout_abs+0xc4>
 800bf64:	4b2a      	ldr	r3, [pc, #168]	@ (800c010 <sys_timeout_abs+0xcc>)
 800bf66:	22be      	movs	r2, #190	@ 0xbe
 800bf68:	492a      	ldr	r1, [pc, #168]	@ (800c014 <sys_timeout_abs+0xd0>)
 800bf6a:	482b      	ldr	r0, [pc, #172]	@ (800c018 <sys_timeout_abs+0xd4>)
 800bf6c:	f003 fa4e 	bl	800f40c <iprintf>
    return;
 800bf70:	e04a      	b.n	800c008 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bf8a:	4b24      	ldr	r3, [pc, #144]	@ (800c01c <sys_timeout_abs+0xd8>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d103      	bne.n	800bf9a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bf92:	4a22      	ldr	r2, [pc, #136]	@ (800c01c <sys_timeout_abs+0xd8>)
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	6013      	str	r3, [r2, #0]
    return;
 800bf98:	e037      	b.n	800c00a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	4b1f      	ldr	r3, [pc, #124]	@ (800c01c <sys_timeout_abs+0xd8>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	0fdb      	lsrs	r3, r3, #31
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d007      	beq.n	800bfc2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bfb2:	4b1a      	ldr	r3, [pc, #104]	@ (800c01c <sys_timeout_abs+0xd8>)
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bfba:	4a18      	ldr	r2, [pc, #96]	@ (800c01c <sys_timeout_abs+0xd8>)
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	6013      	str	r3, [r2, #0]
 800bfc0:	e023      	b.n	800c00a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bfc2:	4b16      	ldr	r3, [pc, #88]	@ (800c01c <sys_timeout_abs+0xd8>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	e01a      	b.n	800c000 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00b      	beq.n	800bfea <sys_timeout_abs+0xa6>
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	0fdb      	lsrs	r3, r3, #31
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d007      	beq.n	800bffa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	601a      	str	r2, [r3, #0]
        break;
 800bff8:	e007      	b.n	800c00a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1e1      	bne.n	800bfca <sys_timeout_abs+0x86>
 800c006:	e000      	b.n	800c00a <sys_timeout_abs+0xc6>
    return;
 800c008:	bf00      	nop
      }
    }
  }
}
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	08012108 	.word	0x08012108
 800c014:	0801213c 	.word	0x0801213c
 800c018:	0801217c 	.word	0x0801217c
 800c01c:	20008808 	.word	0x20008808

0800c020 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	4798      	blx	r3

  now = sys_now();
 800c032:	f7f8 fdfb 	bl	8004c2c <sys_now>
 800c036:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	4b0f      	ldr	r3, [pc, #60]	@ (800c07c <lwip_cyclic_timer+0x5c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4413      	add	r3, r2
 800c042:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	0fdb      	lsrs	r3, r3, #31
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	4413      	add	r3, r2
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	4907      	ldr	r1, [pc, #28]	@ (800c080 <lwip_cyclic_timer+0x60>)
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff ff6e 	bl	800bf44 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c068:	e004      	b.n	800c074 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	4904      	ldr	r1, [pc, #16]	@ (800c080 <lwip_cyclic_timer+0x60>)
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff ff68 	bl	800bf44 <sys_timeout_abs>
}
 800c074:	bf00      	nop
 800c076:	3718      	adds	r7, #24
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	2000880c 	.word	0x2000880c
 800c080:	0800c021 	.word	0x0800c021

0800c084 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c08a:	2301      	movs	r3, #1
 800c08c:	607b      	str	r3, [r7, #4]
 800c08e:	e00e      	b.n	800c0ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c090:	4a0b      	ldr	r2, [pc, #44]	@ (800c0c0 <sys_timeouts_init+0x3c>)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	4a08      	ldr	r2, [pc, #32]	@ (800c0c0 <sys_timeouts_init+0x3c>)
 800c09e:	4413      	add	r3, r2
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	4908      	ldr	r1, [pc, #32]	@ (800c0c4 <sys_timeouts_init+0x40>)
 800c0a4:	f000 f810 	bl	800c0c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d9ed      	bls.n	800c090 <sys_timeouts_init+0xc>
  }
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	08012cf4 	.word	0x08012cf4
 800c0c4:	0800c021 	.word	0x0800c021

0800c0c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0da:	d306      	bcc.n	800c0ea <sys_timeout+0x22>
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c108 <sys_timeout+0x40>)
 800c0de:	f240 1229 	movw	r2, #297	@ 0x129
 800c0e2:	490a      	ldr	r1, [pc, #40]	@ (800c10c <sys_timeout+0x44>)
 800c0e4:	480a      	ldr	r0, [pc, #40]	@ (800c110 <sys_timeout+0x48>)
 800c0e6:	f003 f991 	bl	800f40c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c0ea:	f7f8 fd9f 	bl	8004c2c <sys_now>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	6978      	ldr	r0, [r7, #20]
 800c0fc:	f7ff ff22 	bl	800bf44 <sys_timeout_abs>
#endif
}
 800c100:	bf00      	nop
 800c102:	3718      	adds	r7, #24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	08012108 	.word	0x08012108
 800c10c:	080121a4 	.word	0x080121a4
 800c110:	0801217c 	.word	0x0801217c

0800c114 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c11a:	f7f8 fd87 	bl	8004c2c <sys_now>
 800c11e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c120:	4b1a      	ldr	r3, [pc, #104]	@ (800c18c <sys_check_timeouts+0x78>)
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <sys_check_timeouts+0x1a>
 800c12a:	f7f9 ffbb 	bl	80060a4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c12e:	4b18      	ldr	r3, [pc, #96]	@ (800c190 <sys_check_timeouts+0x7c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d022      	beq.n	800c180 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	0fdb      	lsrs	r3, r3, #31
 800c144:	f003 0301 	and.w	r3, r3, #1
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d11a      	bne.n	800c184 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a0f      	ldr	r2, [pc, #60]	@ (800c190 <sys_check_timeouts+0x7c>)
 800c154:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	4a0b      	ldr	r2, [pc, #44]	@ (800c194 <sys_check_timeouts+0x80>)
 800c168:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c16a:	68b9      	ldr	r1, [r7, #8]
 800c16c:	2006      	movs	r0, #6
 800c16e:	f7f9 fc5d 	bl	8005a2c <memp_free>
    if (handler != NULL) {
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d0d3      	beq.n	800c120 <sys_check_timeouts+0xc>
      handler(arg);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6838      	ldr	r0, [r7, #0]
 800c17c:	4798      	blx	r3
  do {
 800c17e:	e7cf      	b.n	800c120 <sys_check_timeouts+0xc>
      return;
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <sys_check_timeouts+0x72>
      return;
 800c184:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	200087b5 	.word	0x200087b5
 800c190:	20008808 	.word	0x20008808
 800c194:	2000880c 	.word	0x2000880c

0800c198 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c19c:	f003 f836 	bl	800f20c <rand>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	4b01      	ldr	r3, [pc, #4]	@ (800c1b8 <udp_init+0x20>)
 800c1b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c1b4:	bf00      	nop
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	20000028 	.word	0x20000028

0800c1bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c1c6:	4b17      	ldr	r3, [pc, #92]	@ (800c224 <udp_new_port+0x68>)
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	b291      	uxth	r1, r2
 800c1ce:	4a15      	ldr	r2, [pc, #84]	@ (800c224 <udp_new_port+0x68>)
 800c1d0:	8011      	strh	r1, [r2, #0]
 800c1d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d103      	bne.n	800c1e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c1da:	4b12      	ldr	r3, [pc, #72]	@ (800c224 <udp_new_port+0x68>)
 800c1dc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c1e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1e2:	4b11      	ldr	r3, [pc, #68]	@ (800c228 <udp_new_port+0x6c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	603b      	str	r3, [r7, #0]
 800c1e8:	e011      	b.n	800c20e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	8a5a      	ldrh	r2, [r3, #18]
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c224 <udp_new_port+0x68>)
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d108      	bne.n	800c208 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c1f6:	88fb      	ldrh	r3, [r7, #6]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	80fb      	strh	r3, [r7, #6]
 800c1fc:	88fb      	ldrh	r3, [r7, #6]
 800c1fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c202:	d3e0      	bcc.n	800c1c6 <udp_new_port+0xa>
        return 0;
 800c204:	2300      	movs	r3, #0
 800c206:	e007      	b.n	800c218 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	603b      	str	r3, [r7, #0]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1ea      	bne.n	800c1ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c214:	4b03      	ldr	r3, [pc, #12]	@ (800c224 <udp_new_port+0x68>)
 800c216:	881b      	ldrh	r3, [r3, #0]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	20000028 	.word	0x20000028
 800c228:	20008814 	.word	0x20008814

0800c22c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	4613      	mov	r3, r2
 800c238:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d105      	bne.n	800c24c <udp_input_local_match+0x20>
 800c240:	4b27      	ldr	r3, [pc, #156]	@ (800c2e0 <udp_input_local_match+0xb4>)
 800c242:	2287      	movs	r2, #135	@ 0x87
 800c244:	4927      	ldr	r1, [pc, #156]	@ (800c2e4 <udp_input_local_match+0xb8>)
 800c246:	4828      	ldr	r0, [pc, #160]	@ (800c2e8 <udp_input_local_match+0xbc>)
 800c248:	f003 f8e0 	bl	800f40c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d105      	bne.n	800c25e <udp_input_local_match+0x32>
 800c252:	4b23      	ldr	r3, [pc, #140]	@ (800c2e0 <udp_input_local_match+0xb4>)
 800c254:	2288      	movs	r2, #136	@ 0x88
 800c256:	4925      	ldr	r1, [pc, #148]	@ (800c2ec <udp_input_local_match+0xc0>)
 800c258:	4823      	ldr	r0, [pc, #140]	@ (800c2e8 <udp_input_local_match+0xbc>)
 800c25a:	f003 f8d7 	bl	800f40c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	7a1b      	ldrb	r3, [r3, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00b      	beq.n	800c27e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	7a1a      	ldrb	r2, [r3, #8]
 800c26a:	4b21      	ldr	r3, [pc, #132]	@ (800c2f0 <udp_input_local_match+0xc4>)
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c272:	3301      	adds	r3, #1
 800c274:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c276:	429a      	cmp	r2, r3
 800c278:	d001      	beq.n	800c27e <udp_input_local_match+0x52>
    return 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	e02b      	b.n	800c2d6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c27e:	79fb      	ldrb	r3, [r7, #7]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d018      	beq.n	800c2b6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d013      	beq.n	800c2b2 <udp_input_local_match+0x86>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00f      	beq.n	800c2b2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c292:	4b17      	ldr	r3, [pc, #92]	@ (800c2f0 <udp_input_local_match+0xc4>)
 800c294:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29a:	d00a      	beq.n	800c2b2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	4b13      	ldr	r3, [pc, #76]	@ (800c2f0 <udp_input_local_match+0xc4>)
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	405a      	eors	r2, r3
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d110      	bne.n	800c2d4 <udp_input_local_match+0xa8>
          return 1;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e00f      	b.n	800c2d6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d009      	beq.n	800c2d0 <udp_input_local_match+0xa4>
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <udp_input_local_match+0xa4>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	4b09      	ldr	r3, [pc, #36]	@ (800c2f0 <udp_input_local_match+0xc4>)
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d101      	bne.n	800c2d4 <udp_input_local_match+0xa8>
        return 1;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e000      	b.n	800c2d6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	080121f0 	.word	0x080121f0
 800c2e4:	08012220 	.word	0x08012220
 800c2e8:	08012244 	.word	0x08012244
 800c2ec:	0801226c 	.word	0x0801226c
 800c2f0:	20005248 	.word	0x20005248

0800c2f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c2f4:	b590      	push	{r4, r7, lr}
 800c2f6:	b08d      	sub	sp, #52	@ 0x34
 800c2f8:	af02      	add	r7, sp, #8
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d105      	bne.n	800c314 <udp_input+0x20>
 800c308:	4b7c      	ldr	r3, [pc, #496]	@ (800c4fc <udp_input+0x208>)
 800c30a:	22cf      	movs	r2, #207	@ 0xcf
 800c30c:	497c      	ldr	r1, [pc, #496]	@ (800c500 <udp_input+0x20c>)
 800c30e:	487d      	ldr	r0, [pc, #500]	@ (800c504 <udp_input+0x210>)
 800c310:	f003 f87c 	bl	800f40c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d105      	bne.n	800c326 <udp_input+0x32>
 800c31a:	4b78      	ldr	r3, [pc, #480]	@ (800c4fc <udp_input+0x208>)
 800c31c:	22d0      	movs	r2, #208	@ 0xd0
 800c31e:	497a      	ldr	r1, [pc, #488]	@ (800c508 <udp_input+0x214>)
 800c320:	4878      	ldr	r0, [pc, #480]	@ (800c504 <udp_input+0x210>)
 800c322:	f003 f873 	bl	800f40c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	895b      	ldrh	r3, [r3, #10]
 800c32a:	2b07      	cmp	r3, #7
 800c32c:	d803      	bhi.n	800c336 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7fa f9f2 	bl	8006718 <pbuf_free>
    goto end;
 800c334:	e0de      	b.n	800c4f4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c33c:	4b73      	ldr	r3, [pc, #460]	@ (800c50c <udp_input+0x218>)
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	4a72      	ldr	r2, [pc, #456]	@ (800c50c <udp_input+0x218>)
 800c342:	6812      	ldr	r2, [r2, #0]
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f002 f80a 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800c34c:	4603      	mov	r3, r0
 800c34e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	b29b      	uxth	r3, r3
 800c356:	4618      	mov	r0, r3
 800c358:	f7f8 fe80 	bl	800505c <lwip_htons>
 800c35c:	4603      	mov	r3, r0
 800c35e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	885b      	ldrh	r3, [r3, #2]
 800c364:	b29b      	uxth	r3, r3
 800c366:	4618      	mov	r0, r3
 800c368:	f7f8 fe78 	bl	800505c <lwip_htons>
 800c36c:	4603      	mov	r3, r0
 800c36e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c370:	2300      	movs	r3, #0
 800c372:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c374:	2300      	movs	r3, #0
 800c376:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c378:	2300      	movs	r3, #0
 800c37a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c37c:	4b64      	ldr	r3, [pc, #400]	@ (800c510 <udp_input+0x21c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	627b      	str	r3, [r7, #36]	@ 0x24
 800c382:	e054      	b.n	800c42e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	8a5b      	ldrh	r3, [r3, #18]
 800c388:	89fa      	ldrh	r2, [r7, #14]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d14a      	bne.n	800c424 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c38e:	7cfb      	ldrb	r3, [r7, #19]
 800c390:	461a      	mov	r2, r3
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c396:	f7ff ff49 	bl	800c22c <udp_input_local_match>
 800c39a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d041      	beq.n	800c424 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	7c1b      	ldrb	r3, [r3, #16]
 800c3a4:	f003 0304 	and.w	r3, r3, #4
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d11d      	bne.n	800c3e8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d102      	bne.n	800c3b8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	61fb      	str	r3, [r7, #28]
 800c3b6:	e017      	b.n	800c3e8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c3b8:	7cfb      	ldrb	r3, [r7, #19]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d014      	beq.n	800c3e8 <udp_input+0xf4>
 800c3be:	4b53      	ldr	r3, [pc, #332]	@ (800c50c <udp_input+0x218>)
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d10f      	bne.n	800c3e8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	3304      	adds	r3, #4
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d008      	beq.n	800c3e8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	3304      	adds	r3, #4
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d101      	bne.n	800c3e8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ea:	8a9b      	ldrh	r3, [r3, #20]
 800c3ec:	8a3a      	ldrh	r2, [r7, #16]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d118      	bne.n	800c424 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d005      	beq.n	800c406 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	4b43      	ldr	r3, [pc, #268]	@ (800c50c <udp_input+0x218>)
 800c400:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c402:	429a      	cmp	r2, r3
 800c404:	d10e      	bne.n	800c424 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d014      	beq.n	800c436 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	68da      	ldr	r2, [r3, #12]
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c414:	4b3e      	ldr	r3, [pc, #248]	@ (800c510 <udp_input+0x21c>)
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c41c:	4a3c      	ldr	r2, [pc, #240]	@ (800c510 <udp_input+0x21c>)
 800c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c420:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c422:	e008      	b.n	800c436 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c426:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1a7      	bne.n	800c384 <udp_input+0x90>
 800c434:	e000      	b.n	800c438 <udp_input+0x144>
        break;
 800c436:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <udp_input+0x15a>
    for_us = 1;
 800c448:	2301      	movs	r3, #1
 800c44a:	76fb      	strb	r3, [r7, #27]
 800c44c:	e00a      	b.n	800c464 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	3304      	adds	r3, #4
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	4b2d      	ldr	r3, [pc, #180]	@ (800c50c <udp_input+0x218>)
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	429a      	cmp	r2, r3
 800c45a:	bf0c      	ite	eq
 800c45c:	2301      	moveq	r3, #1
 800c45e:	2300      	movne	r3, #0
 800c460:	b2db      	uxtb	r3, r3
 800c462:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c464:	7efb      	ldrb	r3, [r7, #27]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d041      	beq.n	800c4ee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c46a:	2108      	movs	r1, #8
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7fa f8cd 	bl	800660c <pbuf_remove_header>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00a      	beq.n	800c48e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c478:	4b20      	ldr	r3, [pc, #128]	@ (800c4fc <udp_input+0x208>)
 800c47a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c47e:	4925      	ldr	r1, [pc, #148]	@ (800c514 <udp_input+0x220>)
 800c480:	4820      	ldr	r0, [pc, #128]	@ (800c504 <udp_input+0x210>)
 800c482:	f002 ffc3 	bl	800f40c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7fa f946 	bl	8006718 <pbuf_free>
      goto end;
 800c48c:	e032      	b.n	800c4f4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c490:	2b00      	cmp	r3, #0
 800c492:	d012      	beq.n	800c4ba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00a      	beq.n	800c4b2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49e:	699c      	ldr	r4, [r3, #24]
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a2:	69d8      	ldr	r0, [r3, #28]
 800c4a4:	8a3b      	ldrh	r3, [r7, #16]
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c518 <udp_input+0x224>)
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c4b0:	e021      	b.n	800c4f6 <udp_input+0x202>
        pbuf_free(p);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7fa f930 	bl	8006718 <pbuf_free>
        goto end;
 800c4b8:	e01c      	b.n	800c4f4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c4ba:	7cfb      	ldrb	r3, [r7, #19]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d112      	bne.n	800c4e6 <udp_input+0x1f2>
 800c4c0:	4b12      	ldr	r3, [pc, #72]	@ (800c50c <udp_input+0x218>)
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4c8:	2be0      	cmp	r3, #224	@ 0xe0
 800c4ca:	d00c      	beq.n	800c4e6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c4cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c50c <udp_input+0x218>)
 800c4ce:	899b      	ldrh	r3, [r3, #12]
 800c4d0:	3308      	adds	r3, #8
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	b21b      	sxth	r3, r3
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7fa f90a 	bl	80066f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c4de:	2103      	movs	r1, #3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 fc1d 	bl	800dd20 <icmp_dest_unreach>
      pbuf_free(p);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7fa f916 	bl	8006718 <pbuf_free>
  return;
 800c4ec:	e003      	b.n	800c4f6 <udp_input+0x202>
    pbuf_free(p);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7fa f912 	bl	8006718 <pbuf_free>
  return;
 800c4f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c4f6:	372c      	adds	r7, #44	@ 0x2c
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd90      	pop	{r4, r7, pc}
 800c4fc:	080121f0 	.word	0x080121f0
 800c500:	08012294 	.word	0x08012294
 800c504:	08012244 	.word	0x08012244
 800c508:	080122ac 	.word	0x080122ac
 800c50c:	20005248 	.word	0x20005248
 800c510:	20008814 	.word	0x20008814
 800c514:	080122c8 	.word	0x080122c8
 800c518:	20005258 	.word	0x20005258

0800c51c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d109      	bne.n	800c540 <udp_send+0x24>
 800c52c:	4b11      	ldr	r3, [pc, #68]	@ (800c574 <udp_send+0x58>)
 800c52e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800c532:	4911      	ldr	r1, [pc, #68]	@ (800c578 <udp_send+0x5c>)
 800c534:	4811      	ldr	r0, [pc, #68]	@ (800c57c <udp_send+0x60>)
 800c536:	f002 ff69 	bl	800f40c <iprintf>
 800c53a:	f06f 030f 	mvn.w	r3, #15
 800c53e:	e015      	b.n	800c56c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <udp_send+0x3e>
 800c546:	4b0b      	ldr	r3, [pc, #44]	@ (800c574 <udp_send+0x58>)
 800c548:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800c54c:	490c      	ldr	r1, [pc, #48]	@ (800c580 <udp_send+0x64>)
 800c54e:	480b      	ldr	r0, [pc, #44]	@ (800c57c <udp_send+0x60>)
 800c550:	f002 ff5c 	bl	800f40c <iprintf>
 800c554:	f06f 030f 	mvn.w	r3, #15
 800c558:	e008      	b.n	800c56c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	1d1a      	adds	r2, r3, #4
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	8a9b      	ldrh	r3, [r3, #20]
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f80d 	bl	800c584 <udp_sendto>
 800c56a:	4603      	mov	r3, r0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	080121f0 	.word	0x080121f0
 800c578:	080122e4 	.word	0x080122e4
 800c57c:	08012244 	.word	0x08012244
 800c580:	080122fc 	.word	0x080122fc

0800c584 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b088      	sub	sp, #32
 800c588:	af02      	add	r7, sp, #8
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
 800c590:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d109      	bne.n	800c5ac <udp_sendto+0x28>
 800c598:	4b23      	ldr	r3, [pc, #140]	@ (800c628 <udp_sendto+0xa4>)
 800c59a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c59e:	4923      	ldr	r1, [pc, #140]	@ (800c62c <udp_sendto+0xa8>)
 800c5a0:	4823      	ldr	r0, [pc, #140]	@ (800c630 <udp_sendto+0xac>)
 800c5a2:	f002 ff33 	bl	800f40c <iprintf>
 800c5a6:	f06f 030f 	mvn.w	r3, #15
 800c5aa:	e038      	b.n	800c61e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d109      	bne.n	800c5c6 <udp_sendto+0x42>
 800c5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c628 <udp_sendto+0xa4>)
 800c5b4:	f240 2219 	movw	r2, #537	@ 0x219
 800c5b8:	491e      	ldr	r1, [pc, #120]	@ (800c634 <udp_sendto+0xb0>)
 800c5ba:	481d      	ldr	r0, [pc, #116]	@ (800c630 <udp_sendto+0xac>)
 800c5bc:	f002 ff26 	bl	800f40c <iprintf>
 800c5c0:	f06f 030f 	mvn.w	r3, #15
 800c5c4:	e02b      	b.n	800c61e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d109      	bne.n	800c5e0 <udp_sendto+0x5c>
 800c5cc:	4b16      	ldr	r3, [pc, #88]	@ (800c628 <udp_sendto+0xa4>)
 800c5ce:	f240 221a 	movw	r2, #538	@ 0x21a
 800c5d2:	4919      	ldr	r1, [pc, #100]	@ (800c638 <udp_sendto+0xb4>)
 800c5d4:	4816      	ldr	r0, [pc, #88]	@ (800c630 <udp_sendto+0xac>)
 800c5d6:	f002 ff19 	bl	800f40c <iprintf>
 800c5da:	f06f 030f 	mvn.w	r3, #15
 800c5de:	e01e      	b.n	800c61e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	7a1b      	ldrb	r3, [r3, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d006      	beq.n	800c5f6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	7a1b      	ldrb	r3, [r3, #8]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7f9 fd33 	bl	8006058 <netif_get_by_index>
 800c5f2:	6178      	str	r0, [r7, #20]
 800c5f4:	e003      	b.n	800c5fe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 fc1c 	bl	800de34 <ip4_route>
 800c5fc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c604:	f06f 0303 	mvn.w	r3, #3
 800c608:	e009      	b.n	800c61e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c60a:	887a      	ldrh	r2, [r7, #2]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	4613      	mov	r3, r2
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	68b9      	ldr	r1, [r7, #8]
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f000 f810 	bl	800c63c <udp_sendto_if>
 800c61c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3718      	adds	r7, #24
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	080121f0 	.word	0x080121f0
 800c62c:	08012314 	.word	0x08012314
 800c630:	08012244 	.word	0x08012244
 800c634:	0801232c 	.word	0x0801232c
 800c638:	08012348 	.word	0x08012348

0800c63c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b088      	sub	sp, #32
 800c640:	af02      	add	r7, sp, #8
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
 800c648:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d109      	bne.n	800c664 <udp_sendto_if+0x28>
 800c650:	4b2e      	ldr	r3, [pc, #184]	@ (800c70c <udp_sendto_if+0xd0>)
 800c652:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c656:	492e      	ldr	r1, [pc, #184]	@ (800c710 <udp_sendto_if+0xd4>)
 800c658:	482e      	ldr	r0, [pc, #184]	@ (800c714 <udp_sendto_if+0xd8>)
 800c65a:	f002 fed7 	bl	800f40c <iprintf>
 800c65e:	f06f 030f 	mvn.w	r3, #15
 800c662:	e04f      	b.n	800c704 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d109      	bne.n	800c67e <udp_sendto_if+0x42>
 800c66a:	4b28      	ldr	r3, [pc, #160]	@ (800c70c <udp_sendto_if+0xd0>)
 800c66c:	f240 2281 	movw	r2, #641	@ 0x281
 800c670:	4929      	ldr	r1, [pc, #164]	@ (800c718 <udp_sendto_if+0xdc>)
 800c672:	4828      	ldr	r0, [pc, #160]	@ (800c714 <udp_sendto_if+0xd8>)
 800c674:	f002 feca 	bl	800f40c <iprintf>
 800c678:	f06f 030f 	mvn.w	r3, #15
 800c67c:	e042      	b.n	800c704 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d109      	bne.n	800c698 <udp_sendto_if+0x5c>
 800c684:	4b21      	ldr	r3, [pc, #132]	@ (800c70c <udp_sendto_if+0xd0>)
 800c686:	f240 2282 	movw	r2, #642	@ 0x282
 800c68a:	4924      	ldr	r1, [pc, #144]	@ (800c71c <udp_sendto_if+0xe0>)
 800c68c:	4821      	ldr	r0, [pc, #132]	@ (800c714 <udp_sendto_if+0xd8>)
 800c68e:	f002 febd 	bl	800f40c <iprintf>
 800c692:	f06f 030f 	mvn.w	r3, #15
 800c696:	e035      	b.n	800c704 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d109      	bne.n	800c6b2 <udp_sendto_if+0x76>
 800c69e:	4b1b      	ldr	r3, [pc, #108]	@ (800c70c <udp_sendto_if+0xd0>)
 800c6a0:	f240 2283 	movw	r2, #643	@ 0x283
 800c6a4:	491e      	ldr	r1, [pc, #120]	@ (800c720 <udp_sendto_if+0xe4>)
 800c6a6:	481b      	ldr	r0, [pc, #108]	@ (800c714 <udp_sendto_if+0xd8>)
 800c6a8:	f002 feb0 	bl	800f40c <iprintf>
 800c6ac:	f06f 030f 	mvn.w	r3, #15
 800c6b0:	e028      	b.n	800c704 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <udp_sendto_if+0x90>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d005      	beq.n	800c6cc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c6c8:	2be0      	cmp	r3, #224	@ 0xe0
 800c6ca:	d103      	bne.n	800c6d4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	e00b      	b.n	800c6ec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d002      	beq.n	800c6e8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c6e2:	f06f 0303 	mvn.w	r3, #3
 800c6e6:	e00d      	b.n	800c704 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c6ec:	887a      	ldrh	r2, [r7, #2]
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f000 f811 	bl	800c724 <udp_sendto_if_src>
 800c702:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c704:	4618      	mov	r0, r3
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	080121f0 	.word	0x080121f0
 800c710:	08012364 	.word	0x08012364
 800c714:	08012244 	.word	0x08012244
 800c718:	08012380 	.word	0x08012380
 800c71c:	0801239c 	.word	0x0801239c
 800c720:	080123bc 	.word	0x080123bc

0800c724 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08c      	sub	sp, #48	@ 0x30
 800c728:	af04      	add	r7, sp, #16
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
 800c730:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d109      	bne.n	800c74c <udp_sendto_if_src+0x28>
 800c738:	4b65      	ldr	r3, [pc, #404]	@ (800c8d0 <udp_sendto_if_src+0x1ac>)
 800c73a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c73e:	4965      	ldr	r1, [pc, #404]	@ (800c8d4 <udp_sendto_if_src+0x1b0>)
 800c740:	4865      	ldr	r0, [pc, #404]	@ (800c8d8 <udp_sendto_if_src+0x1b4>)
 800c742:	f002 fe63 	bl	800f40c <iprintf>
 800c746:	f06f 030f 	mvn.w	r3, #15
 800c74a:	e0bc      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d109      	bne.n	800c766 <udp_sendto_if_src+0x42>
 800c752:	4b5f      	ldr	r3, [pc, #380]	@ (800c8d0 <udp_sendto_if_src+0x1ac>)
 800c754:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c758:	4960      	ldr	r1, [pc, #384]	@ (800c8dc <udp_sendto_if_src+0x1b8>)
 800c75a:	485f      	ldr	r0, [pc, #380]	@ (800c8d8 <udp_sendto_if_src+0x1b4>)
 800c75c:	f002 fe56 	bl	800f40c <iprintf>
 800c760:	f06f 030f 	mvn.w	r3, #15
 800c764:	e0af      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d109      	bne.n	800c780 <udp_sendto_if_src+0x5c>
 800c76c:	4b58      	ldr	r3, [pc, #352]	@ (800c8d0 <udp_sendto_if_src+0x1ac>)
 800c76e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800c772:	495b      	ldr	r1, [pc, #364]	@ (800c8e0 <udp_sendto_if_src+0x1bc>)
 800c774:	4858      	ldr	r0, [pc, #352]	@ (800c8d8 <udp_sendto_if_src+0x1b4>)
 800c776:	f002 fe49 	bl	800f40c <iprintf>
 800c77a:	f06f 030f 	mvn.w	r3, #15
 800c77e:	e0a2      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c782:	2b00      	cmp	r3, #0
 800c784:	d109      	bne.n	800c79a <udp_sendto_if_src+0x76>
 800c786:	4b52      	ldr	r3, [pc, #328]	@ (800c8d0 <udp_sendto_if_src+0x1ac>)
 800c788:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800c78c:	4955      	ldr	r1, [pc, #340]	@ (800c8e4 <udp_sendto_if_src+0x1c0>)
 800c78e:	4852      	ldr	r0, [pc, #328]	@ (800c8d8 <udp_sendto_if_src+0x1b4>)
 800c790:	f002 fe3c 	bl	800f40c <iprintf>
 800c794:	f06f 030f 	mvn.w	r3, #15
 800c798:	e095      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d109      	bne.n	800c7b4 <udp_sendto_if_src+0x90>
 800c7a0:	4b4b      	ldr	r3, [pc, #300]	@ (800c8d0 <udp_sendto_if_src+0x1ac>)
 800c7a2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800c7a6:	4950      	ldr	r1, [pc, #320]	@ (800c8e8 <udp_sendto_if_src+0x1c4>)
 800c7a8:	484b      	ldr	r0, [pc, #300]	@ (800c8d8 <udp_sendto_if_src+0x1b4>)
 800c7aa:	f002 fe2f 	bl	800f40c <iprintf>
 800c7ae:	f06f 030f 	mvn.w	r3, #15
 800c7b2:	e088      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	8a5b      	ldrh	r3, [r3, #18]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10f      	bne.n	800c7dc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c7bc:	68f9      	ldr	r1, [r7, #12]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	8a5b      	ldrh	r3, [r3, #18]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f000 f893 	bl	800c8f0 <udp_bind>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c7ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c7d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c7da:	e074      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	891b      	ldrh	r3, [r3, #8]
 800c7e0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d902      	bls.n	800c7ee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ec:	e06b      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c7ee:	2108      	movs	r1, #8
 800c7f0:	68b8      	ldr	r0, [r7, #8]
 800c7f2:	f7f9 fefb 	bl	80065ec <pbuf_add_header>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d015      	beq.n	800c828 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c7fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c800:	2108      	movs	r1, #8
 800c802:	2022      	movs	r0, #34	@ 0x22
 800c804:	f7f9 fca4 	bl	8006150 <pbuf_alloc>
 800c808:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c810:	f04f 33ff 	mov.w	r3, #4294967295
 800c814:	e057      	b.n	800c8c6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	891b      	ldrh	r3, [r3, #8]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d006      	beq.n	800c82c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c81e:	68b9      	ldr	r1, [r7, #8]
 800c820:	69f8      	ldr	r0, [r7, #28]
 800c822:	f7fa f891 	bl	8006948 <pbuf_chain>
 800c826:	e001      	b.n	800c82c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	895b      	ldrh	r3, [r3, #10]
 800c830:	2b07      	cmp	r3, #7
 800c832:	d806      	bhi.n	800c842 <udp_sendto_if_src+0x11e>
 800c834:	4b26      	ldr	r3, [pc, #152]	@ (800c8d0 <udp_sendto_if_src+0x1ac>)
 800c836:	f240 320d 	movw	r2, #781	@ 0x30d
 800c83a:	492c      	ldr	r1, [pc, #176]	@ (800c8ec <udp_sendto_if_src+0x1c8>)
 800c83c:	4826      	ldr	r0, [pc, #152]	@ (800c8d8 <udp_sendto_if_src+0x1b4>)
 800c83e:	f002 fde5 	bl	800f40c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	8a5b      	ldrh	r3, [r3, #18]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f8 fc05 	bl	800505c <lwip_htons>
 800c852:	4603      	mov	r3, r0
 800c854:	461a      	mov	r2, r3
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c85a:	887b      	ldrh	r3, [r7, #2]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f8 fbfd 	bl	800505c <lwip_htons>
 800c862:	4603      	mov	r3, r0
 800c864:	461a      	mov	r2, r3
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2200      	movs	r2, #0
 800c86e:	719a      	strb	r2, [r3, #6]
 800c870:	2200      	movs	r2, #0
 800c872:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	891b      	ldrh	r3, [r3, #8]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f8 fbef 	bl	800505c <lwip_htons>
 800c87e:	4603      	mov	r3, r0
 800c880:	461a      	mov	r2, r3
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c886:	2311      	movs	r3, #17
 800c888:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	7adb      	ldrb	r3, [r3, #11]
 800c88e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	7a9b      	ldrb	r3, [r3, #10]
 800c894:	7cb9      	ldrb	r1, [r7, #18]
 800c896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c898:	9202      	str	r2, [sp, #8]
 800c89a:	7cfa      	ldrb	r2, [r7, #19]
 800c89c:	9201      	str	r2, [sp, #4]
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8a6:	69f8      	ldr	r0, [r7, #28]
 800c8a8:	f001 fcac 	bl	800e204 <ip4_output_if_src>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c8b0:	69fa      	ldr	r2, [r7, #28]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d004      	beq.n	800c8c2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c8b8:	69f8      	ldr	r0, [r7, #28]
 800c8ba:	f7f9 ff2d 	bl	8006718 <pbuf_free>
    q = NULL;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c8c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3720      	adds	r7, #32
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	080121f0 	.word	0x080121f0
 800c8d4:	080123dc 	.word	0x080123dc
 800c8d8:	08012244 	.word	0x08012244
 800c8dc:	080123fc 	.word	0x080123fc
 800c8e0:	0801241c 	.word	0x0801241c
 800c8e4:	08012440 	.word	0x08012440
 800c8e8:	08012464 	.word	0x08012464
 800c8ec:	08012488 	.word	0x08012488

0800c8f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c904:	4b39      	ldr	r3, [pc, #228]	@ (800c9ec <udp_bind+0xfc>)
 800c906:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d109      	bne.n	800c922 <udp_bind+0x32>
 800c90e:	4b38      	ldr	r3, [pc, #224]	@ (800c9f0 <udp_bind+0x100>)
 800c910:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800c914:	4937      	ldr	r1, [pc, #220]	@ (800c9f4 <udp_bind+0x104>)
 800c916:	4838      	ldr	r0, [pc, #224]	@ (800c9f8 <udp_bind+0x108>)
 800c918:	f002 fd78 	bl	800f40c <iprintf>
 800c91c:	f06f 030f 	mvn.w	r3, #15
 800c920:	e060      	b.n	800c9e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c926:	4b35      	ldr	r3, [pc, #212]	@ (800c9fc <udp_bind+0x10c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	617b      	str	r3, [r7, #20]
 800c92c:	e009      	b.n	800c942 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	429a      	cmp	r2, r3
 800c934:	d102      	bne.n	800c93c <udp_bind+0x4c>
      rebind = 1;
 800c936:	2301      	movs	r3, #1
 800c938:	74fb      	strb	r3, [r7, #19]
      break;
 800c93a:	e005      	b.n	800c948 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	617b      	str	r3, [r7, #20]
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1f2      	bne.n	800c92e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d109      	bne.n	800c962 <udp_bind+0x72>
    port = udp_new_port();
 800c94e:	f7ff fc35 	bl	800c1bc <udp_new_port>
 800c952:	4603      	mov	r3, r0
 800c954:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c956:	88fb      	ldrh	r3, [r7, #6]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d12c      	bne.n	800c9b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c95c:	f06f 0307 	mvn.w	r3, #7
 800c960:	e040      	b.n	800c9e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c962:	4b26      	ldr	r3, [pc, #152]	@ (800c9fc <udp_bind+0x10c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	617b      	str	r3, [r7, #20]
 800c968:	e022      	b.n	800c9b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d01b      	beq.n	800c9aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	8a5b      	ldrh	r3, [r3, #18]
 800c976:	88fa      	ldrh	r2, [r7, #6]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d116      	bne.n	800c9aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c984:	429a      	cmp	r2, r3
 800c986:	d00d      	beq.n	800c9a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00a      	beq.n	800c9a4 <udp_bind+0xb4>
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d006      	beq.n	800c9a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c996:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d102      	bne.n	800c9aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c9a4:	f06f 0307 	mvn.w	r3, #7
 800c9a8:	e01c      	b.n	800c9e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	617b      	str	r3, [r7, #20]
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1d9      	bne.n	800c96a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <udp_bind+0xd2>
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	e000      	b.n	800c9c4 <udp_bind+0xd4>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	88fa      	ldrh	r2, [r7, #6]
 800c9cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c9ce:	7cfb      	ldrb	r3, [r7, #19]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d106      	bne.n	800c9e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c9d4:	4b09      	ldr	r3, [pc, #36]	@ (800c9fc <udp_bind+0x10c>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c9dc:	4a07      	ldr	r2, [pc, #28]	@ (800c9fc <udp_bind+0x10c>)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	08012d0c 	.word	0x08012d0c
 800c9f0:	080121f0 	.word	0x080121f0
 800c9f4:	080124b8 	.word	0x080124b8
 800c9f8:	08012244 	.word	0x08012244
 800c9fc:	20008814 	.word	0x20008814

0800ca00 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <udp_connect+0x28>
 800ca14:	4b2c      	ldr	r3, [pc, #176]	@ (800cac8 <udp_connect+0xc8>)
 800ca16:	f240 4235 	movw	r2, #1077	@ 0x435
 800ca1a:	492c      	ldr	r1, [pc, #176]	@ (800cacc <udp_connect+0xcc>)
 800ca1c:	482c      	ldr	r0, [pc, #176]	@ (800cad0 <udp_connect+0xd0>)
 800ca1e:	f002 fcf5 	bl	800f40c <iprintf>
 800ca22:	f06f 030f 	mvn.w	r3, #15
 800ca26:	e04b      	b.n	800cac0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d109      	bne.n	800ca42 <udp_connect+0x42>
 800ca2e:	4b26      	ldr	r3, [pc, #152]	@ (800cac8 <udp_connect+0xc8>)
 800ca30:	f240 4236 	movw	r2, #1078	@ 0x436
 800ca34:	4927      	ldr	r1, [pc, #156]	@ (800cad4 <udp_connect+0xd4>)
 800ca36:	4826      	ldr	r0, [pc, #152]	@ (800cad0 <udp_connect+0xd0>)
 800ca38:	f002 fce8 	bl	800f40c <iprintf>
 800ca3c:	f06f 030f 	mvn.w	r3, #15
 800ca40:	e03e      	b.n	800cac0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	8a5b      	ldrh	r3, [r3, #18]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10f      	bne.n	800ca6a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ca4a:	68f9      	ldr	r1, [r7, #12]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	8a5b      	ldrh	r3, [r3, #18]
 800ca50:	461a      	mov	r2, r3
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f7ff ff4c 	bl	800c8f0 <udp_bind>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ca5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <udp_connect+0x6a>
      return err;
 800ca64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca68:	e02a      	b.n	800cac0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <udp_connect+0x76>
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	e000      	b.n	800ca78 <udp_connect+0x78>
 800ca76:	2300      	movs	r3, #0
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	88fa      	ldrh	r2, [r7, #6]
 800ca80:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	7c1b      	ldrb	r3, [r3, #16]
 800ca86:	f043 0304 	orr.w	r3, r3, #4
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ca90:	4b11      	ldr	r3, [pc, #68]	@ (800cad8 <udp_connect+0xd8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e008      	b.n	800caaa <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d101      	bne.n	800caa4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	e00d      	b.n	800cac0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	617b      	str	r3, [r7, #20]
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1f3      	bne.n	800ca98 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800cab0:	4b09      	ldr	r3, [pc, #36]	@ (800cad8 <udp_connect+0xd8>)
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800cab8:	4a07      	ldr	r2, [pc, #28]	@ (800cad8 <udp_connect+0xd8>)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	080121f0 	.word	0x080121f0
 800cacc:	080124d0 	.word	0x080124d0
 800cad0:	08012244 	.word	0x08012244
 800cad4:	080124ec 	.word	0x080124ec
 800cad8:	20008814 	.word	0x20008814

0800cadc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d107      	bne.n	800cafa <udp_disconnect+0x1e>
 800caea:	4b0d      	ldr	r3, [pc, #52]	@ (800cb20 <udp_disconnect+0x44>)
 800caec:	f240 426a 	movw	r2, #1130	@ 0x46a
 800caf0:	490c      	ldr	r1, [pc, #48]	@ (800cb24 <udp_disconnect+0x48>)
 800caf2:	480d      	ldr	r0, [pc, #52]	@ (800cb28 <udp_disconnect+0x4c>)
 800caf4:	f002 fc8a 	bl	800f40c <iprintf>
 800caf8:	e00f      	b.n	800cb1a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	7c1b      	ldrb	r3, [r3, #16]
 800cb10:	f023 0304 	bic.w	r3, r3, #4
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	741a      	strb	r2, [r3, #16]
}
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	080121f0 	.word	0x080121f0
 800cb24:	08012508 	.word	0x08012508
 800cb28:	08012244 	.word	0x08012244

0800cb2c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d107      	bne.n	800cb4e <udp_recv+0x22>
 800cb3e:	4b08      	ldr	r3, [pc, #32]	@ (800cb60 <udp_recv+0x34>)
 800cb40:	f240 428a 	movw	r2, #1162	@ 0x48a
 800cb44:	4907      	ldr	r1, [pc, #28]	@ (800cb64 <udp_recv+0x38>)
 800cb46:	4808      	ldr	r0, [pc, #32]	@ (800cb68 <udp_recv+0x3c>)
 800cb48:	f002 fc60 	bl	800f40c <iprintf>
 800cb4c:	e005      	b.n	800cb5a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	61da      	str	r2, [r3, #28]
}
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	080121f0 	.word	0x080121f0
 800cb64:	08012524 	.word	0x08012524
 800cb68:	08012244 	.word	0x08012244

0800cb6c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d107      	bne.n	800cb8a <udp_remove+0x1e>
 800cb7a:	4b19      	ldr	r3, [pc, #100]	@ (800cbe0 <udp_remove+0x74>)
 800cb7c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800cb80:	4918      	ldr	r1, [pc, #96]	@ (800cbe4 <udp_remove+0x78>)
 800cb82:	4819      	ldr	r0, [pc, #100]	@ (800cbe8 <udp_remove+0x7c>)
 800cb84:	f002 fc42 	bl	800f40c <iprintf>
 800cb88:	e026      	b.n	800cbd8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800cb8a:	4b18      	ldr	r3, [pc, #96]	@ (800cbec <udp_remove+0x80>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d105      	bne.n	800cba0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800cb94:	4b15      	ldr	r3, [pc, #84]	@ (800cbec <udp_remove+0x80>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	4a14      	ldr	r2, [pc, #80]	@ (800cbec <udp_remove+0x80>)
 800cb9c:	6013      	str	r3, [r2, #0]
 800cb9e:	e017      	b.n	800cbd0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cba0:	4b12      	ldr	r3, [pc, #72]	@ (800cbec <udp_remove+0x80>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	e010      	b.n	800cbca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d009      	beq.n	800cbc4 <udp_remove+0x58>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d104      	bne.n	800cbc4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68da      	ldr	r2, [r3, #12]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	60da      	str	r2, [r3, #12]
        break;
 800cbc2:	e005      	b.n	800cbd0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	60fb      	str	r3, [r7, #12]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1eb      	bne.n	800cba8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f7f8 ff2a 	bl	8005a2c <memp_free>
}
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	080121f0 	.word	0x080121f0
 800cbe4:	0801253c 	.word	0x0801253c
 800cbe8:	08012244 	.word	0x08012244
 800cbec:	20008814 	.word	0x20008814

0800cbf0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	f7f8 fea8 	bl	800594c <memp_malloc>
 800cbfc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d007      	beq.n	800cc14 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cc04:	2220      	movs	r2, #32
 800cc06:	2100      	movs	r1, #0
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f002 fc64 	bl	800f4d6 <memset>
    pcb->ttl = UDP_TTL;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	22ff      	movs	r2, #255	@ 0xff
 800cc12:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800cc14:	687b      	ldr	r3, [r7, #4]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
	...

0800cc20 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01e      	beq.n	800cc6e <udp_netif_ip_addr_changed+0x4e>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01a      	beq.n	800cc6e <udp_netif_ip_addr_changed+0x4e>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d017      	beq.n	800cc6e <udp_netif_ip_addr_changed+0x4e>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d013      	beq.n	800cc6e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc46:	4b0d      	ldr	r3, [pc, #52]	@ (800cc7c <udp_netif_ip_addr_changed+0x5c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	e00c      	b.n	800cc68 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d103      	bne.n	800cc62 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1ef      	bne.n	800cc4e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cc6e:	bf00      	nop
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	20008814 	.word	0x20008814

0800cc80 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cc88:	4915      	ldr	r1, [pc, #84]	@ (800cce0 <etharp_free_entry+0x60>)
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	4413      	add	r3, r2
 800cc92:	00db      	lsls	r3, r3, #3
 800cc94:	440b      	add	r3, r1
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d013      	beq.n	800ccc4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cc9c:	4910      	ldr	r1, [pc, #64]	@ (800cce0 <etharp_free_entry+0x60>)
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	4613      	mov	r3, r2
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	4413      	add	r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	440b      	add	r3, r1
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7f9 fd33 	bl	8006718 <pbuf_free>
    arp_table[i].q = NULL;
 800ccb2:	490b      	ldr	r1, [pc, #44]	@ (800cce0 <etharp_free_entry+0x60>)
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	4413      	add	r3, r2
 800ccbc:	00db      	lsls	r3, r3, #3
 800ccbe:	440b      	add	r3, r1
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ccc4:	4906      	ldr	r1, [pc, #24]	@ (800cce0 <etharp_free_entry+0x60>)
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	4413      	add	r3, r2
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	440b      	add	r3, r1
 800ccd2:	3314      	adds	r3, #20
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ccd8:	bf00      	nop
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	20008818 	.word	0x20008818

0800cce4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccea:	2300      	movs	r3, #0
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	e096      	b.n	800ce1e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ccf0:	494f      	ldr	r1, [pc, #316]	@ (800ce30 <etharp_tmr+0x14c>)
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	4413      	add	r3, r2
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	440b      	add	r3, r1
 800ccfe:	3314      	adds	r3, #20
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cd04:	78fb      	ldrb	r3, [r7, #3]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f000 8086 	beq.w	800ce18 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cd0c:	4948      	ldr	r1, [pc, #288]	@ (800ce30 <etharp_tmr+0x14c>)
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	005b      	lsls	r3, r3, #1
 800cd14:	4413      	add	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	440b      	add	r3, r1
 800cd1a:	3312      	adds	r3, #18
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	b298      	uxth	r0, r3
 800cd22:	4943      	ldr	r1, [pc, #268]	@ (800ce30 <etharp_tmr+0x14c>)
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	4613      	mov	r3, r2
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	4413      	add	r3, r2
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	440b      	add	r3, r1
 800cd30:	3312      	adds	r3, #18
 800cd32:	4602      	mov	r2, r0
 800cd34:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd36:	493e      	ldr	r1, [pc, #248]	@ (800ce30 <etharp_tmr+0x14c>)
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	4413      	add	r3, r2
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	440b      	add	r3, r1
 800cd44:	3312      	adds	r3, #18
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cd4c:	d215      	bcs.n	800cd7a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd4e:	4938      	ldr	r1, [pc, #224]	@ (800ce30 <etharp_tmr+0x14c>)
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	005b      	lsls	r3, r3, #1
 800cd56:	4413      	add	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3314      	adds	r3, #20
 800cd5e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d10e      	bne.n	800cd82 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cd64:	4932      	ldr	r1, [pc, #200]	@ (800ce30 <etharp_tmr+0x14c>)
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	4413      	add	r3, r2
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	440b      	add	r3, r1
 800cd72:	3312      	adds	r3, #18
 800cd74:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd76:	2b04      	cmp	r3, #4
 800cd78:	d903      	bls.n	800cd82 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7ff ff80 	bl	800cc80 <etharp_free_entry>
 800cd80:	e04a      	b.n	800ce18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cd82:	492b      	ldr	r1, [pc, #172]	@ (800ce30 <etharp_tmr+0x14c>)
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	4613      	mov	r3, r2
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4413      	add	r3, r2
 800cd8c:	00db      	lsls	r3, r3, #3
 800cd8e:	440b      	add	r3, r1
 800cd90:	3314      	adds	r3, #20
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b03      	cmp	r3, #3
 800cd96:	d10a      	bne.n	800cdae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cd98:	4925      	ldr	r1, [pc, #148]	@ (800ce30 <etharp_tmr+0x14c>)
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	4413      	add	r3, r2
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	440b      	add	r3, r1
 800cda6:	3314      	adds	r3, #20
 800cda8:	2204      	movs	r2, #4
 800cdaa:	701a      	strb	r2, [r3, #0]
 800cdac:	e034      	b.n	800ce18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cdae:	4920      	ldr	r1, [pc, #128]	@ (800ce30 <etharp_tmr+0x14c>)
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	4413      	add	r3, r2
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	440b      	add	r3, r1
 800cdbc:	3314      	adds	r3, #20
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	d10a      	bne.n	800cdda <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cdc4:	491a      	ldr	r1, [pc, #104]	@ (800ce30 <etharp_tmr+0x14c>)
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4413      	add	r3, r2
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	440b      	add	r3, r1
 800cdd2:	3314      	adds	r3, #20
 800cdd4:	2202      	movs	r2, #2
 800cdd6:	701a      	strb	r2, [r3, #0]
 800cdd8:	e01e      	b.n	800ce18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdda:	4915      	ldr	r1, [pc, #84]	@ (800ce30 <etharp_tmr+0x14c>)
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4613      	mov	r3, r2
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	4413      	add	r3, r2
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	440b      	add	r3, r1
 800cde8:	3314      	adds	r3, #20
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d113      	bne.n	800ce18 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cdf0:	490f      	ldr	r1, [pc, #60]	@ (800ce30 <etharp_tmr+0x14c>)
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3308      	adds	r3, #8
 800ce00:	6818      	ldr	r0, [r3, #0]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	4613      	mov	r3, r2
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	4a08      	ldr	r2, [pc, #32]	@ (800ce30 <etharp_tmr+0x14c>)
 800ce0e:	4413      	add	r3, r2
 800ce10:	3304      	adds	r3, #4
 800ce12:	4619      	mov	r1, r3
 800ce14:	f000 fe6e 	bl	800daf4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	607b      	str	r3, [r7, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b09      	cmp	r3, #9
 800ce22:	f77f af65 	ble.w	800ccf0 <etharp_tmr+0xc>
      }
    }
  }
}
 800ce26:	bf00      	nop
 800ce28:	bf00      	nop
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	20008818 	.word	0x20008818

0800ce34 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	@ 0x28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ce42:	230a      	movs	r3, #10
 800ce44:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ce46:	230a      	movs	r3, #10
 800ce48:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ce4a:	230a      	movs	r3, #10
 800ce4c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ce52:	230a      	movs	r3, #10
 800ce54:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	83bb      	strh	r3, [r7, #28]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	837b      	strh	r3, [r7, #26]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce62:	2300      	movs	r3, #0
 800ce64:	843b      	strh	r3, [r7, #32]
 800ce66:	e0ae      	b.n	800cfc6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ce68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce6c:	49a6      	ldr	r1, [pc, #664]	@ (800d108 <etharp_find_entry+0x2d4>)
 800ce6e:	4613      	mov	r3, r2
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4413      	add	r3, r2
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	440b      	add	r3, r1
 800ce78:	3314      	adds	r3, #20
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ce7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ce82:	2b0a      	cmp	r3, #10
 800ce84:	d105      	bne.n	800ce92 <etharp_find_entry+0x5e>
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ce8c:	8c3b      	ldrh	r3, [r7, #32]
 800ce8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ce90:	e095      	b.n	800cfbe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f000 8092 	beq.w	800cfbe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d009      	beq.n	800ceb4 <etharp_find_entry+0x80>
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d806      	bhi.n	800ceb4 <etharp_find_entry+0x80>
 800cea6:	4b99      	ldr	r3, [pc, #612]	@ (800d10c <etharp_find_entry+0x2d8>)
 800cea8:	f240 1223 	movw	r2, #291	@ 0x123
 800ceac:	4998      	ldr	r1, [pc, #608]	@ (800d110 <etharp_find_entry+0x2dc>)
 800ceae:	4899      	ldr	r0, [pc, #612]	@ (800d114 <etharp_find_entry+0x2e0>)
 800ceb0:	f002 faac 	bl	800f40c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d020      	beq.n	800cefc <etharp_find_entry+0xc8>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6819      	ldr	r1, [r3, #0]
 800cebe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cec2:	4891      	ldr	r0, [pc, #580]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cec4:	4613      	mov	r3, r2
 800cec6:	005b      	lsls	r3, r3, #1
 800cec8:	4413      	add	r3, r2
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	4403      	add	r3, r0
 800cece:	3304      	adds	r3, #4
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4299      	cmp	r1, r3
 800ced4:	d112      	bne.n	800cefc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00c      	beq.n	800cef6 <etharp_find_entry+0xc2>
 800cedc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cee0:	4989      	ldr	r1, [pc, #548]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cee2:	4613      	mov	r3, r2
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	4413      	add	r3, r2
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	440b      	add	r3, r1
 800ceec:	3308      	adds	r3, #8
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d102      	bne.n	800cefc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cef6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cefa:	e100      	b.n	800d0fe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d140      	bne.n	800cf84 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cf02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf06:	4980      	ldr	r1, [pc, #512]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cf08:	4613      	mov	r3, r2
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	440b      	add	r3, r1
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d01a      	beq.n	800cf4e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cf18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf1c:	497a      	ldr	r1, [pc, #488]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	440b      	add	r3, r1
 800cf28:	3312      	adds	r3, #18
 800cf2a:	881b      	ldrh	r3, [r3, #0]
 800cf2c:	8bba      	ldrh	r2, [r7, #28]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d845      	bhi.n	800cfbe <etharp_find_entry+0x18a>
            old_queue = i;
 800cf32:	8c3b      	ldrh	r3, [r7, #32]
 800cf34:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cf36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf3a:	4973      	ldr	r1, [pc, #460]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	005b      	lsls	r3, r3, #1
 800cf40:	4413      	add	r3, r2
 800cf42:	00db      	lsls	r3, r3, #3
 800cf44:	440b      	add	r3, r1
 800cf46:	3312      	adds	r3, #18
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	83bb      	strh	r3, [r7, #28]
 800cf4c:	e037      	b.n	800cfbe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cf4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf52:	496d      	ldr	r1, [pc, #436]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cf54:	4613      	mov	r3, r2
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	4413      	add	r3, r2
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	440b      	add	r3, r1
 800cf5e:	3312      	adds	r3, #18
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	8b7a      	ldrh	r2, [r7, #26]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d82a      	bhi.n	800cfbe <etharp_find_entry+0x18a>
            old_pending = i;
 800cf68:	8c3b      	ldrh	r3, [r7, #32]
 800cf6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800cf6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf70:	4965      	ldr	r1, [pc, #404]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cf72:	4613      	mov	r3, r2
 800cf74:	005b      	lsls	r3, r3, #1
 800cf76:	4413      	add	r3, r2
 800cf78:	00db      	lsls	r3, r3, #3
 800cf7a:	440b      	add	r3, r1
 800cf7c:	3312      	adds	r3, #18
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	837b      	strh	r3, [r7, #26]
 800cf82:	e01c      	b.n	800cfbe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d919      	bls.n	800cfbe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cf8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf8e:	495e      	ldr	r1, [pc, #376]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cf90:	4613      	mov	r3, r2
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	4413      	add	r3, r2
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	440b      	add	r3, r1
 800cf9a:	3312      	adds	r3, #18
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	8b3a      	ldrh	r2, [r7, #24]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d80c      	bhi.n	800cfbe <etharp_find_entry+0x18a>
            old_stable = i;
 800cfa4:	8c3b      	ldrh	r3, [r7, #32]
 800cfa6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cfa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfac:	4956      	ldr	r1, [pc, #344]	@ (800d108 <etharp_find_entry+0x2d4>)
 800cfae:	4613      	mov	r3, r2
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	4413      	add	r3, r2
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3312      	adds	r3, #18
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfbe:	8c3b      	ldrh	r3, [r7, #32]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	843b      	strh	r3, [r7, #32]
 800cfc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfca:	2b09      	cmp	r3, #9
 800cfcc:	f77f af4c 	ble.w	800ce68 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cfd0:	7afb      	ldrb	r3, [r7, #11]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d108      	bne.n	800cfec <etharp_find_entry+0x1b8>
 800cfda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cfde:	2b0a      	cmp	r3, #10
 800cfe0:	d107      	bne.n	800cff2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cfe2:	7afb      	ldrb	r3, [r7, #11]
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d102      	bne.n	800cff2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cfec:	f04f 33ff 	mov.w	r3, #4294967295
 800cff0:	e085      	b.n	800d0fe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cff2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cff6:	2b09      	cmp	r3, #9
 800cff8:	dc02      	bgt.n	800d000 <etharp_find_entry+0x1cc>
    i = empty;
 800cffa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cffc:	843b      	strh	r3, [r7, #32]
 800cffe:	e039      	b.n	800d074 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d000:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d004:	2b09      	cmp	r3, #9
 800d006:	dc14      	bgt.n	800d032 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d008:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d00a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d00c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d010:	493d      	ldr	r1, [pc, #244]	@ (800d108 <etharp_find_entry+0x2d4>)
 800d012:	4613      	mov	r3, r2
 800d014:	005b      	lsls	r3, r3, #1
 800d016:	4413      	add	r3, r2
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	440b      	add	r3, r1
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d018      	beq.n	800d054 <etharp_find_entry+0x220>
 800d022:	4b3a      	ldr	r3, [pc, #232]	@ (800d10c <etharp_find_entry+0x2d8>)
 800d024:	f240 126d 	movw	r2, #365	@ 0x16d
 800d028:	493b      	ldr	r1, [pc, #236]	@ (800d118 <etharp_find_entry+0x2e4>)
 800d02a:	483a      	ldr	r0, [pc, #232]	@ (800d114 <etharp_find_entry+0x2e0>)
 800d02c:	f002 f9ee 	bl	800f40c <iprintf>
 800d030:	e010      	b.n	800d054 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d032:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d036:	2b09      	cmp	r3, #9
 800d038:	dc02      	bgt.n	800d040 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d03a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d03c:	843b      	strh	r3, [r7, #32]
 800d03e:	e009      	b.n	800d054 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d040:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d044:	2b09      	cmp	r3, #9
 800d046:	dc02      	bgt.n	800d04e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d048:	8bfb      	ldrh	r3, [r7, #30]
 800d04a:	843b      	strh	r3, [r7, #32]
 800d04c:	e002      	b.n	800d054 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d04e:	f04f 33ff 	mov.w	r3, #4294967295
 800d052:	e054      	b.n	800d0fe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d054:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d058:	2b09      	cmp	r3, #9
 800d05a:	dd06      	ble.n	800d06a <etharp_find_entry+0x236>
 800d05c:	4b2b      	ldr	r3, [pc, #172]	@ (800d10c <etharp_find_entry+0x2d8>)
 800d05e:	f240 127f 	movw	r2, #383	@ 0x17f
 800d062:	492e      	ldr	r1, [pc, #184]	@ (800d11c <etharp_find_entry+0x2e8>)
 800d064:	482b      	ldr	r0, [pc, #172]	@ (800d114 <etharp_find_entry+0x2e0>)
 800d066:	f002 f9d1 	bl	800f40c <iprintf>
    etharp_free_entry(i);
 800d06a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fe06 	bl	800cc80 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d074:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d078:	2b09      	cmp	r3, #9
 800d07a:	dd06      	ble.n	800d08a <etharp_find_entry+0x256>
 800d07c:	4b23      	ldr	r3, [pc, #140]	@ (800d10c <etharp_find_entry+0x2d8>)
 800d07e:	f240 1283 	movw	r2, #387	@ 0x183
 800d082:	4926      	ldr	r1, [pc, #152]	@ (800d11c <etharp_find_entry+0x2e8>)
 800d084:	4823      	ldr	r0, [pc, #140]	@ (800d114 <etharp_find_entry+0x2e0>)
 800d086:	f002 f9c1 	bl	800f40c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d08a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d08e:	491e      	ldr	r1, [pc, #120]	@ (800d108 <etharp_find_entry+0x2d4>)
 800d090:	4613      	mov	r3, r2
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	4413      	add	r3, r2
 800d096:	00db      	lsls	r3, r3, #3
 800d098:	440b      	add	r3, r1
 800d09a:	3314      	adds	r3, #20
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d006      	beq.n	800d0b0 <etharp_find_entry+0x27c>
 800d0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800d10c <etharp_find_entry+0x2d8>)
 800d0a4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d0a8:	491d      	ldr	r1, [pc, #116]	@ (800d120 <etharp_find_entry+0x2ec>)
 800d0aa:	481a      	ldr	r0, [pc, #104]	@ (800d114 <etharp_find_entry+0x2e0>)
 800d0ac:	f002 f9ae 	bl	800f40c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00b      	beq.n	800d0ce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d0b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6819      	ldr	r1, [r3, #0]
 800d0be:	4812      	ldr	r0, [pc, #72]	@ (800d108 <etharp_find_entry+0x2d4>)
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	4413      	add	r3, r2
 800d0c6:	00db      	lsls	r3, r3, #3
 800d0c8:	4403      	add	r3, r0
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d0ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0d2:	490d      	ldr	r1, [pc, #52]	@ (800d108 <etharp_find_entry+0x2d4>)
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	4413      	add	r3, r2
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	440b      	add	r3, r1
 800d0de:	3312      	adds	r3, #18
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d0e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0e8:	4907      	ldr	r1, [pc, #28]	@ (800d108 <etharp_find_entry+0x2d4>)
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	005b      	lsls	r3, r3, #1
 800d0ee:	4413      	add	r3, r2
 800d0f0:	00db      	lsls	r3, r3, #3
 800d0f2:	440b      	add	r3, r1
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d0fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3728      	adds	r7, #40	@ 0x28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20008818 	.word	0x20008818
 800d10c:	08012554 	.word	0x08012554
 800d110:	0801258c 	.word	0x0801258c
 800d114:	080125cc 	.word	0x080125cc
 800d118:	080125f4 	.word	0x080125f4
 800d11c:	0801260c 	.word	0x0801260c
 800d120:	08012620 	.word	0x08012620

0800d124 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af02      	add	r7, sp, #8
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d138:	2b06      	cmp	r3, #6
 800d13a:	d006      	beq.n	800d14a <etharp_update_arp_entry+0x26>
 800d13c:	4b48      	ldr	r3, [pc, #288]	@ (800d260 <etharp_update_arp_entry+0x13c>)
 800d13e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d142:	4948      	ldr	r1, [pc, #288]	@ (800d264 <etharp_update_arp_entry+0x140>)
 800d144:	4848      	ldr	r0, [pc, #288]	@ (800d268 <etharp_update_arp_entry+0x144>)
 800d146:	f002 f961 	bl	800f40c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d012      	beq.n	800d176 <etharp_update_arp_entry+0x52>
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00e      	beq.n	800d176 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68f9      	ldr	r1, [r7, #12]
 800d15e:	4618      	mov	r0, r3
 800d160:	f001 f8fe 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800d164:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d166:	2b00      	cmp	r3, #0
 800d168:	d105      	bne.n	800d176 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d172:	2be0      	cmp	r3, #224	@ 0xe0
 800d174:	d102      	bne.n	800d17c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d176:	f06f 030f 	mvn.w	r3, #15
 800d17a:	e06c      	b.n	800d256 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d17c:	78fb      	ldrb	r3, [r7, #3]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	4619      	mov	r1, r3
 800d182:	68b8      	ldr	r0, [r7, #8]
 800d184:	f7ff fe56 	bl	800ce34 <etharp_find_entry>
 800d188:	4603      	mov	r3, r0
 800d18a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d18c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d190:	2b00      	cmp	r3, #0
 800d192:	da02      	bge.n	800d19a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d194:	8afb      	ldrh	r3, [r7, #22]
 800d196:	b25b      	sxtb	r3, r3
 800d198:	e05d      	b.n	800d256 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d19a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d19e:	4933      	ldr	r1, [pc, #204]	@ (800d26c <etharp_update_arp_entry+0x148>)
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	4413      	add	r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	440b      	add	r3, r1
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d1b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1b4:	492d      	ldr	r1, [pc, #180]	@ (800d26c <etharp_update_arp_entry+0x148>)
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	4413      	add	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	440b      	add	r3, r1
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d1c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	3308      	adds	r3, #8
 800d1d4:	4a25      	ldr	r2, [pc, #148]	@ (800d26c <etharp_update_arp_entry+0x148>)
 800d1d6:	4413      	add	r3, r2
 800d1d8:	3304      	adds	r3, #4
 800d1da:	2206      	movs	r2, #6
 800d1dc:	6879      	ldr	r1, [r7, #4]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f002 f9ef 	bl	800f5c2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d1e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1e8:	4920      	ldr	r1, [pc, #128]	@ (800d26c <etharp_update_arp_entry+0x148>)
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	005b      	lsls	r3, r3, #1
 800d1ee:	4413      	add	r3, r2
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	440b      	add	r3, r1
 800d1f4:	3312      	adds	r3, #18
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d1fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1fe:	491b      	ldr	r1, [pc, #108]	@ (800d26c <etharp_update_arp_entry+0x148>)
 800d200:	4613      	mov	r3, r2
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	4413      	add	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	440b      	add	r3, r1
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d021      	beq.n	800d254 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d210:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d214:	4915      	ldr	r1, [pc, #84]	@ (800d26c <etharp_update_arp_entry+0x148>)
 800d216:	4613      	mov	r3, r2
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	4413      	add	r3, r2
 800d21c:	00db      	lsls	r3, r3, #3
 800d21e:	440b      	add	r3, r1
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d224:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d228:	4910      	ldr	r1, [pc, #64]	@ (800d26c <etharp_update_arp_entry+0x148>)
 800d22a:	4613      	mov	r3, r2
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	4413      	add	r3, r2
 800d230:	00db      	lsls	r3, r3, #3
 800d232:	440b      	add	r3, r1
 800d234:	2200      	movs	r2, #0
 800d236:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d23e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6939      	ldr	r1, [r7, #16]
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f001 ff97 	bl	800f17c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d24e:	6938      	ldr	r0, [r7, #16]
 800d250:	f7f9 fa62 	bl	8006718 <pbuf_free>
  }
  return ERR_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	08012554 	.word	0x08012554
 800d264:	0801264c 	.word	0x0801264c
 800d268:	080125cc 	.word	0x080125cc
 800d26c:	20008818 	.word	0x20008818

0800d270 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d278:	2300      	movs	r3, #0
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	e01e      	b.n	800d2bc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d27e:	4913      	ldr	r1, [pc, #76]	@ (800d2cc <etharp_cleanup_netif+0x5c>)
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	4613      	mov	r3, r2
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	4413      	add	r3, r2
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	440b      	add	r3, r1
 800d28c:	3314      	adds	r3, #20
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d292:	7afb      	ldrb	r3, [r7, #11]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00e      	beq.n	800d2b6 <etharp_cleanup_netif+0x46>
 800d298:	490c      	ldr	r1, [pc, #48]	@ (800d2cc <etharp_cleanup_netif+0x5c>)
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	4613      	mov	r3, r2
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	4413      	add	r3, r2
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	440b      	add	r3, r1
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d102      	bne.n	800d2b6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff fce5 	bl	800cc80 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2b09      	cmp	r3, #9
 800d2c0:	dddd      	ble.n	800d27e <etharp_cleanup_netif+0xe>
    }
  }
}
 800d2c2:	bf00      	nop
 800d2c4:	bf00      	nop
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	20008818 	.word	0x20008818

0800d2d0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d2d0:	b5b0      	push	{r4, r5, r7, lr}
 800d2d2:	b08a      	sub	sp, #40	@ 0x28
 800d2d4:	af04      	add	r7, sp, #16
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d107      	bne.n	800d2f0 <etharp_input+0x20>
 800d2e0:	4b3d      	ldr	r3, [pc, #244]	@ (800d3d8 <etharp_input+0x108>)
 800d2e2:	f240 228a 	movw	r2, #650	@ 0x28a
 800d2e6:	493d      	ldr	r1, [pc, #244]	@ (800d3dc <etharp_input+0x10c>)
 800d2e8:	483d      	ldr	r0, [pc, #244]	@ (800d3e0 <etharp_input+0x110>)
 800d2ea:	f002 f88f 	bl	800f40c <iprintf>
 800d2ee:	e06f      	b.n	800d3d0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d300:	d10c      	bne.n	800d31c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d306:	2b06      	cmp	r3, #6
 800d308:	d108      	bne.n	800d31c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d30e:	2b04      	cmp	r3, #4
 800d310:	d104      	bne.n	800d31c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	885b      	ldrh	r3, [r3, #2]
 800d316:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d318:	2b08      	cmp	r3, #8
 800d31a:	d003      	beq.n	800d324 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7f9 f9fb 	bl	8006718 <pbuf_free>
    return;
 800d322:	e055      	b.n	800d3d0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	330e      	adds	r3, #14
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	3318      	adds	r3, #24
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	3304      	adds	r3, #4
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d102      	bne.n	800d344 <etharp_input+0x74>
    for_us = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	75fb      	strb	r3, [r7, #23]
 800d342:	e009      	b.n	800d358 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	3304      	adds	r3, #4
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	bf0c      	ite	eq
 800d350:	2301      	moveq	r3, #1
 800d352:	2300      	movne	r3, #0
 800d354:	b2db      	uxtb	r3, r3
 800d356:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	f103 0208 	add.w	r2, r3, #8
 800d35e:	7dfb      	ldrb	r3, [r7, #23]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <etharp_input+0x98>
 800d364:	2301      	movs	r3, #1
 800d366:	e000      	b.n	800d36a <etharp_input+0x9a>
 800d368:	2302      	movs	r3, #2
 800d36a:	f107 010c 	add.w	r1, r7, #12
 800d36e:	6838      	ldr	r0, [r7, #0]
 800d370:	f7ff fed8 	bl	800d124 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	88db      	ldrh	r3, [r3, #6]
 800d378:	b29b      	uxth	r3, r3
 800d37a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d37e:	d003      	beq.n	800d388 <etharp_input+0xb8>
 800d380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d384:	d01e      	beq.n	800d3c4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d386:	e020      	b.n	800d3ca <etharp_input+0xfa>
      if (for_us) {
 800d388:	7dfb      	ldrb	r3, [r7, #23]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d01c      	beq.n	800d3c8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d3a8:	2102      	movs	r1, #2
 800d3aa:	9103      	str	r1, [sp, #12]
 800d3ac:	f107 010c 	add.w	r1, r7, #12
 800d3b0:	9102      	str	r1, [sp, #8]
 800d3b2:	9201      	str	r2, [sp, #4]
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	462b      	mov	r3, r5
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	4601      	mov	r1, r0
 800d3bc:	6838      	ldr	r0, [r7, #0]
 800d3be:	f000 faeb 	bl	800d998 <etharp_raw>
      break;
 800d3c2:	e001      	b.n	800d3c8 <etharp_input+0xf8>
      break;
 800d3c4:	bf00      	nop
 800d3c6:	e000      	b.n	800d3ca <etharp_input+0xfa>
      break;
 800d3c8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7f9 f9a4 	bl	8006718 <pbuf_free>
}
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	08012554 	.word	0x08012554
 800d3dc:	080126a4 	.word	0x080126a4
 800d3e0:	080125cc 	.word	0x080125cc

0800d3e4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d3f2:	79fa      	ldrb	r2, [r7, #7]
 800d3f4:	4944      	ldr	r1, [pc, #272]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	4413      	add	r3, r2
 800d3fc:	00db      	lsls	r3, r3, #3
 800d3fe:	440b      	add	r3, r1
 800d400:	3314      	adds	r3, #20
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d806      	bhi.n	800d416 <etharp_output_to_arp_index+0x32>
 800d408:	4b40      	ldr	r3, [pc, #256]	@ (800d50c <etharp_output_to_arp_index+0x128>)
 800d40a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d40e:	4940      	ldr	r1, [pc, #256]	@ (800d510 <etharp_output_to_arp_index+0x12c>)
 800d410:	4840      	ldr	r0, [pc, #256]	@ (800d514 <etharp_output_to_arp_index+0x130>)
 800d412:	f001 fffb 	bl	800f40c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d416:	79fa      	ldrb	r2, [r7, #7]
 800d418:	493b      	ldr	r1, [pc, #236]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d41a:	4613      	mov	r3, r2
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	4413      	add	r3, r2
 800d420:	00db      	lsls	r3, r3, #3
 800d422:	440b      	add	r3, r1
 800d424:	3314      	adds	r3, #20
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d153      	bne.n	800d4d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d42c:	79fa      	ldrb	r2, [r7, #7]
 800d42e:	4936      	ldr	r1, [pc, #216]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d430:	4613      	mov	r3, r2
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	4413      	add	r3, r2
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	440b      	add	r3, r1
 800d43a:	3312      	adds	r3, #18
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d442:	d919      	bls.n	800d478 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d444:	79fa      	ldrb	r2, [r7, #7]
 800d446:	4613      	mov	r3, r2
 800d448:	005b      	lsls	r3, r3, #1
 800d44a:	4413      	add	r3, r2
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	4a2e      	ldr	r2, [pc, #184]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d450:	4413      	add	r3, r2
 800d452:	3304      	adds	r3, #4
 800d454:	4619      	mov	r1, r3
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f000 fb4c 	bl	800daf4 <etharp_request>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d138      	bne.n	800d4d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d462:	79fa      	ldrb	r2, [r7, #7]
 800d464:	4928      	ldr	r1, [pc, #160]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d466:	4613      	mov	r3, r2
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	4413      	add	r3, r2
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	440b      	add	r3, r1
 800d470:	3314      	adds	r3, #20
 800d472:	2203      	movs	r2, #3
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	e02d      	b.n	800d4d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d478:	79fa      	ldrb	r2, [r7, #7]
 800d47a:	4923      	ldr	r1, [pc, #140]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d47c:	4613      	mov	r3, r2
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	4413      	add	r3, r2
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	440b      	add	r3, r1
 800d486:	3312      	adds	r3, #18
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d48e:	d321      	bcc.n	800d4d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d490:	79fa      	ldrb	r2, [r7, #7]
 800d492:	4613      	mov	r3, r2
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	4413      	add	r3, r2
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	4a1b      	ldr	r2, [pc, #108]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d49c:	4413      	add	r3, r2
 800d49e:	1d19      	adds	r1, r3, #4
 800d4a0:	79fa      	ldrb	r2, [r7, #7]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	00db      	lsls	r3, r3, #3
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	4a16      	ldr	r2, [pc, #88]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d4ae:	4413      	add	r3, r2
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f000 fafb 	bl	800dab0 <etharp_request_dst>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d109      	bne.n	800d4d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4c0:	79fa      	ldrb	r2, [r7, #7]
 800d4c2:	4911      	ldr	r1, [pc, #68]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	4413      	add	r3, r2
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	440b      	add	r3, r1
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	2203      	movs	r2, #3
 800d4d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d4da:	79fa      	ldrb	r2, [r7, #7]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	4413      	add	r3, r2
 800d4e2:	00db      	lsls	r3, r3, #3
 800d4e4:	3308      	adds	r3, #8
 800d4e6:	4a08      	ldr	r2, [pc, #32]	@ (800d508 <etharp_output_to_arp_index+0x124>)
 800d4e8:	4413      	add	r3, r2
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4f0:	9200      	str	r2, [sp, #0]
 800d4f2:	460a      	mov	r2, r1
 800d4f4:	68b9      	ldr	r1, [r7, #8]
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f001 fe40 	bl	800f17c <ethernet_output>
 800d4fc:	4603      	mov	r3, r0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20008818 	.word	0x20008818
 800d50c:	08012554 	.word	0x08012554
 800d510:	080126c4 	.word	0x080126c4
 800d514:	080125cc 	.word	0x080125cc

0800d518 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08a      	sub	sp, #40	@ 0x28
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d106      	bne.n	800d53c <etharp_output+0x24>
 800d52e:	4b73      	ldr	r3, [pc, #460]	@ (800d6fc <etharp_output+0x1e4>)
 800d530:	f240 321e 	movw	r2, #798	@ 0x31e
 800d534:	4972      	ldr	r1, [pc, #456]	@ (800d700 <etharp_output+0x1e8>)
 800d536:	4873      	ldr	r0, [pc, #460]	@ (800d704 <etharp_output+0x1ec>)
 800d538:	f001 ff68 	bl	800f40c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <etharp_output+0x38>
 800d542:	4b6e      	ldr	r3, [pc, #440]	@ (800d6fc <etharp_output+0x1e4>)
 800d544:	f240 321f 	movw	r2, #799	@ 0x31f
 800d548:	496f      	ldr	r1, [pc, #444]	@ (800d708 <etharp_output+0x1f0>)
 800d54a:	486e      	ldr	r0, [pc, #440]	@ (800d704 <etharp_output+0x1ec>)
 800d54c:	f001 ff5e 	bl	800f40c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d106      	bne.n	800d564 <etharp_output+0x4c>
 800d556:	4b69      	ldr	r3, [pc, #420]	@ (800d6fc <etharp_output+0x1e4>)
 800d558:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d55c:	496b      	ldr	r1, [pc, #428]	@ (800d70c <etharp_output+0x1f4>)
 800d55e:	4869      	ldr	r0, [pc, #420]	@ (800d704 <etharp_output+0x1ec>)
 800d560:	f001 ff54 	bl	800f40c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68f9      	ldr	r1, [r7, #12]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f000 fef8 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d576:	4b66      	ldr	r3, [pc, #408]	@ (800d710 <etharp_output+0x1f8>)
 800d578:	61fb      	str	r3, [r7, #28]
 800d57a:	e0af      	b.n	800d6dc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d584:	2be0      	cmp	r3, #224	@ 0xe0
 800d586:	d118      	bne.n	800d5ba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d588:	2301      	movs	r3, #1
 800d58a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d58c:	2300      	movs	r3, #0
 800d58e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d590:	235e      	movs	r3, #94	@ 0x5e
 800d592:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3301      	adds	r3, #1
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	3302      	adds	r3, #2
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3303      	adds	r3, #3
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d5b2:	f107 0310 	add.w	r3, r7, #16
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	e090      	b.n	800d6dc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	405a      	eors	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4013      	ands	r3, r2
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d012      	beq.n	800d5f8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5d8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d00b      	beq.n	800d5f8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	330c      	adds	r3, #12
 800d5ee:	61bb      	str	r3, [r7, #24]
 800d5f0:	e002      	b.n	800d5f8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d5f2:	f06f 0303 	mvn.w	r3, #3
 800d5f6:	e07d      	b.n	800d6f4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d5f8:	4b46      	ldr	r3, [pc, #280]	@ (800d714 <etharp_output+0x1fc>)
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4a46      	ldr	r2, [pc, #280]	@ (800d718 <etharp_output+0x200>)
 800d600:	460b      	mov	r3, r1
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	440b      	add	r3, r1
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	4413      	add	r3, r2
 800d60a:	3314      	adds	r3, #20
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d925      	bls.n	800d65e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d612:	4b40      	ldr	r3, [pc, #256]	@ (800d714 <etharp_output+0x1fc>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	4619      	mov	r1, r3
 800d618:	4a3f      	ldr	r2, [pc, #252]	@ (800d718 <etharp_output+0x200>)
 800d61a:	460b      	mov	r3, r1
 800d61c:	005b      	lsls	r3, r3, #1
 800d61e:	440b      	add	r3, r1
 800d620:	00db      	lsls	r3, r3, #3
 800d622:	4413      	add	r3, r2
 800d624:	3308      	adds	r3, #8
 800d626:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d117      	bne.n	800d65e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	4b38      	ldr	r3, [pc, #224]	@ (800d714 <etharp_output+0x1fc>)
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	4618      	mov	r0, r3
 800d638:	4937      	ldr	r1, [pc, #220]	@ (800d718 <etharp_output+0x200>)
 800d63a:	4603      	mov	r3, r0
 800d63c:	005b      	lsls	r3, r3, #1
 800d63e:	4403      	add	r3, r0
 800d640:	00db      	lsls	r3, r3, #3
 800d642:	440b      	add	r3, r1
 800d644:	3304      	adds	r3, #4
 800d646:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d648:	429a      	cmp	r2, r3
 800d64a:	d108      	bne.n	800d65e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d64c:	4b31      	ldr	r3, [pc, #196]	@ (800d714 <etharp_output+0x1fc>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	461a      	mov	r2, r3
 800d652:	68b9      	ldr	r1, [r7, #8]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff fec5 	bl	800d3e4 <etharp_output_to_arp_index>
 800d65a:	4603      	mov	r3, r0
 800d65c:	e04a      	b.n	800d6f4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d65e:	2300      	movs	r3, #0
 800d660:	75fb      	strb	r3, [r7, #23]
 800d662:	e031      	b.n	800d6c8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d664:	7dfa      	ldrb	r2, [r7, #23]
 800d666:	492c      	ldr	r1, [pc, #176]	@ (800d718 <etharp_output+0x200>)
 800d668:	4613      	mov	r3, r2
 800d66a:	005b      	lsls	r3, r3, #1
 800d66c:	4413      	add	r3, r2
 800d66e:	00db      	lsls	r3, r3, #3
 800d670:	440b      	add	r3, r1
 800d672:	3314      	adds	r3, #20
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d923      	bls.n	800d6c2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d67a:	7dfa      	ldrb	r2, [r7, #23]
 800d67c:	4926      	ldr	r1, [pc, #152]	@ (800d718 <etharp_output+0x200>)
 800d67e:	4613      	mov	r3, r2
 800d680:	005b      	lsls	r3, r3, #1
 800d682:	4413      	add	r3, r2
 800d684:	00db      	lsls	r3, r3, #3
 800d686:	440b      	add	r3, r1
 800d688:	3308      	adds	r3, #8
 800d68a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d117      	bne.n	800d6c2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	6819      	ldr	r1, [r3, #0]
 800d696:	7dfa      	ldrb	r2, [r7, #23]
 800d698:	481f      	ldr	r0, [pc, #124]	@ (800d718 <etharp_output+0x200>)
 800d69a:	4613      	mov	r3, r2
 800d69c:	005b      	lsls	r3, r3, #1
 800d69e:	4413      	add	r3, r2
 800d6a0:	00db      	lsls	r3, r3, #3
 800d6a2:	4403      	add	r3, r0
 800d6a4:	3304      	adds	r3, #4
 800d6a6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d6a8:	4299      	cmp	r1, r3
 800d6aa:	d10a      	bne.n	800d6c2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d6ac:	4a19      	ldr	r2, [pc, #100]	@ (800d714 <etharp_output+0x1fc>)
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	68b9      	ldr	r1, [r7, #8]
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f7ff fe93 	bl	800d3e4 <etharp_output_to_arp_index>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	e018      	b.n	800d6f4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	75fb      	strb	r3, [r7, #23]
 800d6c8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ca:	2b09      	cmp	r3, #9
 800d6cc:	d9ca      	bls.n	800d664 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	69b9      	ldr	r1, [r7, #24]
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f000 f822 	bl	800d71c <etharp_query>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	e00b      	b.n	800d6f4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d6e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f001 fd45 	bl	800f17c <ethernet_output>
 800d6f2:	4603      	mov	r3, r0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	08012554 	.word	0x08012554
 800d700:	080126a4 	.word	0x080126a4
 800d704:	080125cc 	.word	0x080125cc
 800d708:	080126f4 	.word	0x080126f4
 800d70c:	08012694 	.word	0x08012694
 800d710:	08012d10 	.word	0x08012d10
 800d714:	20008908 	.word	0x20008908
 800d718:	20008818 	.word	0x20008818

0800d71c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08c      	sub	sp, #48	@ 0x30
 800d720:	af02      	add	r7, sp, #8
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3326      	adds	r3, #38	@ 0x26
 800d72c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d72e:	23ff      	movs	r3, #255	@ 0xff
 800d730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d734:	2300      	movs	r3, #0
 800d736:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68f9      	ldr	r1, [r7, #12]
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 fe0e 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10c      	bne.n	800d764 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d752:	2be0      	cmp	r3, #224	@ 0xe0
 800d754:	d006      	beq.n	800d764 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d764:	f06f 030f 	mvn.w	r3, #15
 800d768:	e101      	b.n	800d96e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	2101      	movs	r1, #1
 800d76e:	68b8      	ldr	r0, [r7, #8]
 800d770:	f7ff fb60 	bl	800ce34 <etharp_find_entry>
 800d774:	4603      	mov	r3, r0
 800d776:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d778:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	da02      	bge.n	800d786 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d780:	8a7b      	ldrh	r3, [r7, #18]
 800d782:	b25b      	sxtb	r3, r3
 800d784:	e0f3      	b.n	800d96e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d786:	8a7b      	ldrh	r3, [r7, #18]
 800d788:	2b7e      	cmp	r3, #126	@ 0x7e
 800d78a:	d906      	bls.n	800d79a <etharp_query+0x7e>
 800d78c:	4b7a      	ldr	r3, [pc, #488]	@ (800d978 <etharp_query+0x25c>)
 800d78e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d792:	497a      	ldr	r1, [pc, #488]	@ (800d97c <etharp_query+0x260>)
 800d794:	487a      	ldr	r0, [pc, #488]	@ (800d980 <etharp_query+0x264>)
 800d796:	f001 fe39 	bl	800f40c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d79a:	8a7b      	ldrh	r3, [r7, #18]
 800d79c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d79e:	7c7a      	ldrb	r2, [r7, #17]
 800d7a0:	4978      	ldr	r1, [pc, #480]	@ (800d984 <etharp_query+0x268>)
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	005b      	lsls	r3, r3, #1
 800d7a6:	4413      	add	r3, r2
 800d7a8:	00db      	lsls	r3, r3, #3
 800d7aa:	440b      	add	r3, r1
 800d7ac:	3314      	adds	r3, #20
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d115      	bne.n	800d7e0 <etharp_query+0xc4>
    is_new_entry = 1;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d7b8:	7c7a      	ldrb	r2, [r7, #17]
 800d7ba:	4972      	ldr	r1, [pc, #456]	@ (800d984 <etharp_query+0x268>)
 800d7bc:	4613      	mov	r3, r2
 800d7be:	005b      	lsls	r3, r3, #1
 800d7c0:	4413      	add	r3, r2
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	440b      	add	r3, r1
 800d7c6:	3314      	adds	r3, #20
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d7cc:	7c7a      	ldrb	r2, [r7, #17]
 800d7ce:	496d      	ldr	r1, [pc, #436]	@ (800d984 <etharp_query+0x268>)
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	4413      	add	r3, r2
 800d7d6:	00db      	lsls	r3, r3, #3
 800d7d8:	440b      	add	r3, r1
 800d7da:	3308      	adds	r3, #8
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d7e0:	7c7a      	ldrb	r2, [r7, #17]
 800d7e2:	4968      	ldr	r1, [pc, #416]	@ (800d984 <etharp_query+0x268>)
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	4413      	add	r3, r2
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	440b      	add	r3, r1
 800d7ee:	3314      	adds	r3, #20
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d011      	beq.n	800d81a <etharp_query+0xfe>
 800d7f6:	7c7a      	ldrb	r2, [r7, #17]
 800d7f8:	4962      	ldr	r1, [pc, #392]	@ (800d984 <etharp_query+0x268>)
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	005b      	lsls	r3, r3, #1
 800d7fe:	4413      	add	r3, r2
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	440b      	add	r3, r1
 800d804:	3314      	adds	r3, #20
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d806      	bhi.n	800d81a <etharp_query+0xfe>
 800d80c:	4b5a      	ldr	r3, [pc, #360]	@ (800d978 <etharp_query+0x25c>)
 800d80e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d812:	495d      	ldr	r1, [pc, #372]	@ (800d988 <etharp_query+0x26c>)
 800d814:	485a      	ldr	r0, [pc, #360]	@ (800d980 <etharp_query+0x264>)
 800d816:	f001 fdf9 	bl	800f40c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <etharp_query+0x10a>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10c      	bne.n	800d840 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d826:	68b9      	ldr	r1, [r7, #8]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 f963 	bl	800daf4 <etharp_request>
 800d82e:	4603      	mov	r3, r0
 800d830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d102      	bne.n	800d840 <etharp_query+0x124>
      return result;
 800d83a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d83e:	e096      	b.n	800d96e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d106      	bne.n	800d854 <etharp_query+0x138>
 800d846:	4b4c      	ldr	r3, [pc, #304]	@ (800d978 <etharp_query+0x25c>)
 800d848:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d84c:	494f      	ldr	r1, [pc, #316]	@ (800d98c <etharp_query+0x270>)
 800d84e:	484c      	ldr	r0, [pc, #304]	@ (800d980 <etharp_query+0x264>)
 800d850:	f001 fddc 	bl	800f40c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d854:	7c7a      	ldrb	r2, [r7, #17]
 800d856:	494b      	ldr	r1, [pc, #300]	@ (800d984 <etharp_query+0x268>)
 800d858:	4613      	mov	r3, r2
 800d85a:	005b      	lsls	r3, r3, #1
 800d85c:	4413      	add	r3, r2
 800d85e:	00db      	lsls	r3, r3, #3
 800d860:	440b      	add	r3, r1
 800d862:	3314      	adds	r3, #20
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d917      	bls.n	800d89a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d86a:	4a49      	ldr	r2, [pc, #292]	@ (800d990 <etharp_query+0x274>)
 800d86c:	7c7b      	ldrb	r3, [r7, #17]
 800d86e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d870:	7c7a      	ldrb	r2, [r7, #17]
 800d872:	4613      	mov	r3, r2
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	4413      	add	r3, r2
 800d878:	00db      	lsls	r3, r3, #3
 800d87a:	3308      	adds	r3, #8
 800d87c:	4a41      	ldr	r2, [pc, #260]	@ (800d984 <etharp_query+0x268>)
 800d87e:	4413      	add	r3, r2
 800d880:	3304      	adds	r3, #4
 800d882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d886:	9200      	str	r2, [sp, #0]
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	6879      	ldr	r1, [r7, #4]
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f001 fc75 	bl	800f17c <ethernet_output>
 800d892:	4603      	mov	r3, r0
 800d894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d898:	e067      	b.n	800d96a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d89a:	7c7a      	ldrb	r2, [r7, #17]
 800d89c:	4939      	ldr	r1, [pc, #228]	@ (800d984 <etharp_query+0x268>)
 800d89e:	4613      	mov	r3, r2
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	440b      	add	r3, r1
 800d8a8:	3314      	adds	r3, #20
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d15c      	bne.n	800d96a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8b8:	e01c      	b.n	800d8f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	895a      	ldrh	r2, [r3, #10]
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	891b      	ldrh	r3, [r3, #8]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d10a      	bne.n	800d8dc <etharp_query+0x1c0>
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d006      	beq.n	800d8dc <etharp_query+0x1c0>
 800d8ce:	4b2a      	ldr	r3, [pc, #168]	@ (800d978 <etharp_query+0x25c>)
 800d8d0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d8d4:	492f      	ldr	r1, [pc, #188]	@ (800d994 <etharp_query+0x278>)
 800d8d6:	482a      	ldr	r0, [pc, #168]	@ (800d980 <etharp_query+0x264>)
 800d8d8:	f001 fd98 	bl	800f40c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	7b1b      	ldrb	r3, [r3, #12]
 800d8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <etharp_query+0x1d2>
        copy_needed = 1;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	61bb      	str	r3, [r7, #24]
        break;
 800d8ec:	e005      	b.n	800d8fa <etharp_query+0x1de>
      }
      p = p->next;
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1df      	bne.n	800d8ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d007      	beq.n	800d910 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d906:	200e      	movs	r0, #14
 800d908:	f7f9 f972 	bl	8006bf0 <pbuf_clone>
 800d90c:	61f8      	str	r0, [r7, #28]
 800d90e:	e004      	b.n	800d91a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d914:	69f8      	ldr	r0, [r7, #28]
 800d916:	f7f8 ff9f 	bl	8006858 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d021      	beq.n	800d964 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d920:	7c7a      	ldrb	r2, [r7, #17]
 800d922:	4918      	ldr	r1, [pc, #96]	@ (800d984 <etharp_query+0x268>)
 800d924:	4613      	mov	r3, r2
 800d926:	005b      	lsls	r3, r3, #1
 800d928:	4413      	add	r3, r2
 800d92a:	00db      	lsls	r3, r3, #3
 800d92c:	440b      	add	r3, r1
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00a      	beq.n	800d94a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d934:	7c7a      	ldrb	r2, [r7, #17]
 800d936:	4913      	ldr	r1, [pc, #76]	@ (800d984 <etharp_query+0x268>)
 800d938:	4613      	mov	r3, r2
 800d93a:	005b      	lsls	r3, r3, #1
 800d93c:	4413      	add	r3, r2
 800d93e:	00db      	lsls	r3, r3, #3
 800d940:	440b      	add	r3, r1
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4618      	mov	r0, r3
 800d946:	f7f8 fee7 	bl	8006718 <pbuf_free>
      }
      arp_table[i].q = p;
 800d94a:	7c7a      	ldrb	r2, [r7, #17]
 800d94c:	490d      	ldr	r1, [pc, #52]	@ (800d984 <etharp_query+0x268>)
 800d94e:	4613      	mov	r3, r2
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	4413      	add	r3, r2
 800d954:	00db      	lsls	r3, r3, #3
 800d956:	440b      	add	r3, r1
 800d958:	69fa      	ldr	r2, [r7, #28]
 800d95a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d962:	e002      	b.n	800d96a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d964:	23ff      	movs	r3, #255	@ 0xff
 800d966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d96a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3728      	adds	r7, #40	@ 0x28
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	08012554 	.word	0x08012554
 800d97c:	08012700 	.word	0x08012700
 800d980:	080125cc 	.word	0x080125cc
 800d984:	20008818 	.word	0x20008818
 800d988:	08012710 	.word	0x08012710
 800d98c:	080126f4 	.word	0x080126f4
 800d990:	20008908 	.word	0x20008908
 800d994:	08012738 	.word	0x08012738

0800d998 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08a      	sub	sp, #40	@ 0x28
 800d99c:	af02      	add	r7, sp, #8
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <etharp_raw+0x26>
 800d9b0:	4b3a      	ldr	r3, [pc, #232]	@ (800da9c <etharp_raw+0x104>)
 800d9b2:	f240 4257 	movw	r2, #1111	@ 0x457
 800d9b6:	493a      	ldr	r1, [pc, #232]	@ (800daa0 <etharp_raw+0x108>)
 800d9b8:	483a      	ldr	r0, [pc, #232]	@ (800daa4 <etharp_raw+0x10c>)
 800d9ba:	f001 fd27 	bl	800f40c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d9be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d9c2:	211c      	movs	r1, #28
 800d9c4:	200e      	movs	r0, #14
 800d9c6:	f7f8 fbc3 	bl	8006150 <pbuf_alloc>
 800d9ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d102      	bne.n	800d9d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d6:	e05d      	b.n	800da94 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	895b      	ldrh	r3, [r3, #10]
 800d9dc:	2b1b      	cmp	r3, #27
 800d9de:	d806      	bhi.n	800d9ee <etharp_raw+0x56>
 800d9e0:	4b2e      	ldr	r3, [pc, #184]	@ (800da9c <etharp_raw+0x104>)
 800d9e2:	f240 4262 	movw	r2, #1122	@ 0x462
 800d9e6:	4930      	ldr	r1, [pc, #192]	@ (800daa8 <etharp_raw+0x110>)
 800d9e8:	482e      	ldr	r0, [pc, #184]	@ (800daa4 <etharp_raw+0x10c>)
 800d9ea:	f001 fd0f 	bl	800f40c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d9f4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7f7 fb30 	bl	800505c <lwip_htons>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	461a      	mov	r2, r3
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da0a:	2b06      	cmp	r3, #6
 800da0c:	d006      	beq.n	800da1c <etharp_raw+0x84>
 800da0e:	4b23      	ldr	r3, [pc, #140]	@ (800da9c <etharp_raw+0x104>)
 800da10:	f240 4269 	movw	r2, #1129	@ 0x469
 800da14:	4925      	ldr	r1, [pc, #148]	@ (800daac <etharp_raw+0x114>)
 800da16:	4823      	ldr	r0, [pc, #140]	@ (800daa4 <etharp_raw+0x10c>)
 800da18:	f001 fcf8 	bl	800f40c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	3308      	adds	r3, #8
 800da20:	2206      	movs	r2, #6
 800da22:	6839      	ldr	r1, [r7, #0]
 800da24:	4618      	mov	r0, r3
 800da26:	f001 fdcc 	bl	800f5c2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	3312      	adds	r3, #18
 800da2e:	2206      	movs	r2, #6
 800da30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da32:	4618      	mov	r0, r3
 800da34:	f001 fdc5 	bl	800f5c2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	330e      	adds	r3, #14
 800da3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da3e:	6812      	ldr	r2, [r2, #0]
 800da40:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	3318      	adds	r3, #24
 800da46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da48:	6812      	ldr	r2, [r2, #0]
 800da4a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2200      	movs	r2, #0
 800da50:	701a      	strb	r2, [r3, #0]
 800da52:	2200      	movs	r2, #0
 800da54:	f042 0201 	orr.w	r2, r2, #1
 800da58:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f042 0208 	orr.w	r2, r2, #8
 800da62:	709a      	strb	r2, [r3, #2]
 800da64:	2200      	movs	r2, #0
 800da66:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	2206      	movs	r2, #6
 800da6c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	2204      	movs	r2, #4
 800da72:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da74:	f640 0306 	movw	r3, #2054	@ 0x806
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	69b9      	ldr	r1, [r7, #24]
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f001 fb7b 	bl	800f17c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800da86:	69b8      	ldr	r0, [r7, #24]
 800da88:	f7f8 fe46 	bl	8006718 <pbuf_free>
  p = NULL;
 800da8c:	2300      	movs	r3, #0
 800da8e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800da90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	08012554 	.word	0x08012554
 800daa0:	080126a4 	.word	0x080126a4
 800daa4:	080125cc 	.word	0x080125cc
 800daa8:	08012754 	.word	0x08012754
 800daac:	08012788 	.word	0x08012788

0800dab0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b088      	sub	sp, #32
 800dab4:	af04      	add	r7, sp, #16
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dacc:	2201      	movs	r2, #1
 800dace:	9203      	str	r2, [sp, #12]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	9202      	str	r2, [sp, #8]
 800dad4:	4a06      	ldr	r2, [pc, #24]	@ (800daf0 <etharp_request_dst+0x40>)
 800dad6:	9201      	str	r2, [sp, #4]
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	4603      	mov	r3, r0
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f7ff ff5a 	bl	800d998 <etharp_raw>
 800dae4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	08012d18 	.word	0x08012d18

0800daf4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dafe:	4a05      	ldr	r2, [pc, #20]	@ (800db14 <etharp_request+0x20>)
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7ff ffd4 	bl	800dab0 <etharp_request_dst>
 800db08:	4603      	mov	r3, r0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	08012d10 	.word	0x08012d10

0800db18 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08e      	sub	sp, #56	@ 0x38
 800db1c:	af04      	add	r7, sp, #16
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800db22:	4b79      	ldr	r3, [pc, #484]	@ (800dd08 <icmp_input+0x1f0>)
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800db28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	f003 030f 	and.w	r3, r3, #15
 800db30:	b2db      	uxtb	r3, r3
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	b2db      	uxtb	r3, r3
 800db36:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800db38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db3a:	2b13      	cmp	r3, #19
 800db3c:	f240 80cd 	bls.w	800dcda <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	895b      	ldrh	r3, [r3, #10]
 800db44:	2b03      	cmp	r3, #3
 800db46:	f240 80ca 	bls.w	800dcde <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800db54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f000 80b7 	beq.w	800dccc <icmp_input+0x1b4>
 800db5e:	2b08      	cmp	r3, #8
 800db60:	f040 80b7 	bne.w	800dcd2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800db64:	4b69      	ldr	r3, [pc, #420]	@ (800dd0c <icmp_input+0x1f4>)
 800db66:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db68:	4b67      	ldr	r3, [pc, #412]	@ (800dd08 <icmp_input+0x1f0>)
 800db6a:	695b      	ldr	r3, [r3, #20]
 800db6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db70:	2be0      	cmp	r3, #224	@ 0xe0
 800db72:	f000 80bb 	beq.w	800dcec <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800db76:	4b64      	ldr	r3, [pc, #400]	@ (800dd08 <icmp_input+0x1f0>)
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	4a63      	ldr	r2, [pc, #396]	@ (800dd08 <icmp_input+0x1f0>)
 800db7c:	6812      	ldr	r2, [r2, #0]
 800db7e:	4611      	mov	r1, r2
 800db80:	4618      	mov	r0, r3
 800db82:	f000 fbed 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f040 80b1 	bne.w	800dcf0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	891b      	ldrh	r3, [r3, #8]
 800db92:	2b07      	cmp	r3, #7
 800db94:	f240 80a5 	bls.w	800dce2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db9a:	330e      	adds	r3, #14
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7f8 fd24 	bl	80065ec <pbuf_add_header>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d04b      	beq.n	800dc42 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	891a      	ldrh	r2, [r3, #8]
 800dbae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbb0:	4413      	add	r3, r2
 800dbb2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	891b      	ldrh	r3, [r3, #8]
 800dbb8:	8b7a      	ldrh	r2, [r7, #26]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	f0c0 809a 	bcc.w	800dcf4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dbc0:	8b7b      	ldrh	r3, [r7, #26]
 800dbc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	200e      	movs	r0, #14
 800dbca:	f7f8 fac1 	bl	8006150 <pbuf_alloc>
 800dbce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f000 8090 	beq.w	800dcf8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	895b      	ldrh	r3, [r3, #10]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d203      	bcs.n	800dbee <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dbe6:	6978      	ldr	r0, [r7, #20]
 800dbe8:	f7f8 fd96 	bl	8006718 <pbuf_free>
          goto icmperr;
 800dbec:	e085      	b.n	800dcfa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dbf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f001 fce3 	bl	800f5c2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dbfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6978      	ldr	r0, [r7, #20]
 800dc02:	f7f8 fd03 	bl	800660c <pbuf_remove_header>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d009      	beq.n	800dc20 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc0c:	4b40      	ldr	r3, [pc, #256]	@ (800dd10 <icmp_input+0x1f8>)
 800dc0e:	22b6      	movs	r2, #182	@ 0xb6
 800dc10:	4940      	ldr	r1, [pc, #256]	@ (800dd14 <icmp_input+0x1fc>)
 800dc12:	4841      	ldr	r0, [pc, #260]	@ (800dd18 <icmp_input+0x200>)
 800dc14:	f001 fbfa 	bl	800f40c <iprintf>
          pbuf_free(r);
 800dc18:	6978      	ldr	r0, [r7, #20]
 800dc1a:	f7f8 fd7d 	bl	8006718 <pbuf_free>
          goto icmperr;
 800dc1e:	e06c      	b.n	800dcfa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dc20:	6879      	ldr	r1, [r7, #4]
 800dc22:	6978      	ldr	r0, [r7, #20]
 800dc24:	f7f8 fea0 	bl	8006968 <pbuf_copy>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d003      	beq.n	800dc36 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dc2e:	6978      	ldr	r0, [r7, #20]
 800dc30:	f7f8 fd72 	bl	8006718 <pbuf_free>
          goto icmperr;
 800dc34:	e061      	b.n	800dcfa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7f8 fd6e 	bl	8006718 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	607b      	str	r3, [r7, #4]
 800dc40:	e00f      	b.n	800dc62 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc44:	330e      	adds	r3, #14
 800dc46:	4619      	mov	r1, r3
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f7f8 fcdf 	bl	800660c <pbuf_remove_header>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d006      	beq.n	800dc62 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dc54:	4b2e      	ldr	r3, [pc, #184]	@ (800dd10 <icmp_input+0x1f8>)
 800dc56:	22c7      	movs	r2, #199	@ 0xc7
 800dc58:	4930      	ldr	r1, [pc, #192]	@ (800dd1c <icmp_input+0x204>)
 800dc5a:	482f      	ldr	r0, [pc, #188]	@ (800dd18 <icmp_input+0x200>)
 800dc5c:	f001 fbd6 	bl	800f40c <iprintf>
          goto icmperr;
 800dc60:	e04b      	b.n	800dcfa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dc68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7f8 fcbd 	bl	80065ec <pbuf_add_header>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d12b      	bne.n	800dcd0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dc86:	4b20      	ldr	r3, [pc, #128]	@ (800dd08 <icmp_input+0x1f0>)
 800dc88:	691a      	ldr	r2, [r3, #16]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	2200      	movs	r2, #0
 800dc92:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	2200      	movs	r2, #0
 800dc98:	709a      	strb	r2, [r3, #2]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	22ff      	movs	r2, #255	@ 0xff
 800dca2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	729a      	strb	r2, [r3, #10]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	9302      	str	r3, [sp, #8]
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	9301      	str	r3, [sp, #4]
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	23ff      	movs	r3, #255	@ 0xff
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	69f9      	ldr	r1, [r7, #28]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fa75 	bl	800e1b0 <ip4_output_if>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dcca:	e001      	b.n	800dcd0 <icmp_input+0x1b8>
      break;
 800dccc:	bf00      	nop
 800dcce:	e000      	b.n	800dcd2 <icmp_input+0x1ba>
      break;
 800dcd0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7f8 fd20 	bl	8006718 <pbuf_free>
  return;
 800dcd8:	e013      	b.n	800dd02 <icmp_input+0x1ea>
    goto lenerr;
 800dcda:	bf00      	nop
 800dcdc:	e002      	b.n	800dce4 <icmp_input+0x1cc>
    goto lenerr;
 800dcde:	bf00      	nop
 800dce0:	e000      	b.n	800dce4 <icmp_input+0x1cc>
        goto lenerr;
 800dce2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7f8 fd17 	bl	8006718 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dcea:	e00a      	b.n	800dd02 <icmp_input+0x1ea>
        goto icmperr;
 800dcec:	bf00      	nop
 800dcee:	e004      	b.n	800dcfa <icmp_input+0x1e2>
        goto icmperr;
 800dcf0:	bf00      	nop
 800dcf2:	e002      	b.n	800dcfa <icmp_input+0x1e2>
          goto icmperr;
 800dcf4:	bf00      	nop
 800dcf6:	e000      	b.n	800dcfa <icmp_input+0x1e2>
          goto icmperr;
 800dcf8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7f8 fd0c 	bl	8006718 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd00:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dd02:	3728      	adds	r7, #40	@ 0x28
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	20005248 	.word	0x20005248
 800dd0c:	2000525c 	.word	0x2000525c
 800dd10:	080127cc 	.word	0x080127cc
 800dd14:	08012804 	.word	0x08012804
 800dd18:	0801283c 	.word	0x0801283c
 800dd1c:	08012864 	.word	0x08012864

0800dd20 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	2103      	movs	r1, #3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f814 	bl	800dd60 <icmp_send_response>
}
 800dd38:	bf00      	nop
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dd4c:	78fb      	ldrb	r3, [r7, #3]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	210b      	movs	r1, #11
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 f804 	bl	800dd60 <icmp_send_response>
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08c      	sub	sp, #48	@ 0x30
 800dd64:	af04      	add	r7, sp, #16
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dd70:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dd74:	2124      	movs	r1, #36	@ 0x24
 800dd76:	2022      	movs	r0, #34	@ 0x22
 800dd78:	f7f8 f9ea 	bl	8006150 <pbuf_alloc>
 800dd7c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d04c      	beq.n	800de1e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	895b      	ldrh	r3, [r3, #10]
 800dd88:	2b23      	cmp	r3, #35	@ 0x23
 800dd8a:	d806      	bhi.n	800dd9a <icmp_send_response+0x3a>
 800dd8c:	4b26      	ldr	r3, [pc, #152]	@ (800de28 <icmp_send_response+0xc8>)
 800dd8e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800dd92:	4926      	ldr	r1, [pc, #152]	@ (800de2c <icmp_send_response+0xcc>)
 800dd94:	4826      	ldr	r0, [pc, #152]	@ (800de30 <icmp_send_response+0xd0>)
 800dd96:	f001 fb39 	bl	800f40c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	78fa      	ldrb	r2, [r7, #3]
 800ddaa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	78ba      	ldrb	r2, [r7, #2]
 800ddb0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	711a      	strb	r2, [r3, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	719a      	strb	r2, [r3, #6]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	f103 0008 	add.w	r0, r3, #8
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	221c      	movs	r2, #28
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	f001 fbf4 	bl	800f5c2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dde0:	f107 030c 	add.w	r3, r7, #12
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 f825 	bl	800de34 <ip4_route>
 800ddea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d011      	beq.n	800de16 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	709a      	strb	r2, [r3, #2]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ddfc:	f107 020c 	add.w	r2, r7, #12
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	9302      	str	r3, [sp, #8]
 800de04:	2301      	movs	r3, #1
 800de06:	9301      	str	r3, [sp, #4]
 800de08:	2300      	movs	r3, #0
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	23ff      	movs	r3, #255	@ 0xff
 800de0e:	2100      	movs	r1, #0
 800de10:	69f8      	ldr	r0, [r7, #28]
 800de12:	f000 f9cd 	bl	800e1b0 <ip4_output_if>
  }
  pbuf_free(q);
 800de16:	69f8      	ldr	r0, [r7, #28]
 800de18:	f7f8 fc7e 	bl	8006718 <pbuf_free>
 800de1c:	e000      	b.n	800de20 <icmp_send_response+0xc0>
    return;
 800de1e:	bf00      	nop
}
 800de20:	3720      	adds	r7, #32
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	080127cc 	.word	0x080127cc
 800de2c:	08012898 	.word	0x08012898
 800de30:	0801283c 	.word	0x0801283c

0800de34 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800de3c:	4b33      	ldr	r3, [pc, #204]	@ (800df0c <ip4_route+0xd8>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	e036      	b.n	800deb2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d02b      	beq.n	800deac <ip4_route+0x78>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de5a:	089b      	lsrs	r3, r3, #2
 800de5c:	f003 0301 	and.w	r3, r3, #1
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d022      	beq.n	800deac <ip4_route+0x78>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	3304      	adds	r3, #4
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d01d      	beq.n	800deac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3304      	adds	r3, #4
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	405a      	eors	r2, r3
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3308      	adds	r3, #8
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4013      	ands	r3, r2
 800de84:	2b00      	cmp	r3, #0
 800de86:	d101      	bne.n	800de8c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	e038      	b.n	800defe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de92:	f003 0302 	and.w	r3, r3, #2
 800de96:	2b00      	cmp	r3, #0
 800de98:	d108      	bne.n	800deac <ip4_route+0x78>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	330c      	adds	r3, #12
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d101      	bne.n	800deac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	e028      	b.n	800defe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	60fb      	str	r3, [r7, #12]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1c5      	bne.n	800de44 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800deb8:	4b15      	ldr	r3, [pc, #84]	@ (800df10 <ip4_route+0xdc>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d01a      	beq.n	800def6 <ip4_route+0xc2>
 800dec0:	4b13      	ldr	r3, [pc, #76]	@ (800df10 <ip4_route+0xdc>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dec8:	f003 0301 	and.w	r3, r3, #1
 800decc:	2b00      	cmp	r3, #0
 800dece:	d012      	beq.n	800def6 <ip4_route+0xc2>
 800ded0:	4b0f      	ldr	r3, [pc, #60]	@ (800df10 <ip4_route+0xdc>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ded8:	f003 0304 	and.w	r3, r3, #4
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00a      	beq.n	800def6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dee0:	4b0b      	ldr	r3, [pc, #44]	@ (800df10 <ip4_route+0xdc>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3304      	adds	r3, #4
 800dee6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b7f      	cmp	r3, #127	@ 0x7f
 800def4:	d101      	bne.n	800defa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	e001      	b.n	800defe <ip4_route+0xca>
  }

  return netif_default;
 800defa:	4b05      	ldr	r3, [pc, #20]	@ (800df10 <ip4_route+0xdc>)
 800defc:	681b      	ldr	r3, [r3, #0]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	200087ac 	.word	0x200087ac
 800df10:	200087b0 	.word	0x200087b0

0800df14 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d016      	beq.n	800df5a <ip4_input_accept+0x46>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	3304      	adds	r3, #4
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d011      	beq.n	800df5a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df36:	4b0b      	ldr	r3, [pc, #44]	@ (800df64 <ip4_input_accept+0x50>)
 800df38:	695a      	ldr	r2, [r3, #20]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	3304      	adds	r3, #4
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d008      	beq.n	800df56 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800df44:	4b07      	ldr	r3, [pc, #28]	@ (800df64 <ip4_input_accept+0x50>)
 800df46:	695b      	ldr	r3, [r3, #20]
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	4618      	mov	r0, r3
 800df4c:	f000 fa08 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800df50:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800df56:	2301      	movs	r3, #1
 800df58:	e000      	b.n	800df5c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	20005248 	.word	0x20005248

0800df68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	091b      	lsrs	r3, r3, #4
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b04      	cmp	r3, #4
 800df82:	d004      	beq.n	800df8e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7f8 fbc7 	bl	8006718 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	e107      	b.n	800e19e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	f003 030f 	and.w	r3, r3, #15
 800df96:	b2db      	uxtb	r3, r3
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	885b      	ldrh	r3, [r3, #2]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7f7 f859 	bl	800505c <lwip_htons>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	891b      	ldrh	r3, [r3, #8]
 800dfb2:	89ba      	ldrh	r2, [r7, #12]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d204      	bcs.n	800dfc2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dfb8:	89bb      	ldrh	r3, [r7, #12]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7f8 fa25 	bl	800640c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	895b      	ldrh	r3, [r3, #10]
 800dfc6:	89fa      	ldrh	r2, [r7, #14]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d807      	bhi.n	800dfdc <ip4_input+0x74>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	891b      	ldrh	r3, [r3, #8]
 800dfd0:	89ba      	ldrh	r2, [r7, #12]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d802      	bhi.n	800dfdc <ip4_input+0x74>
 800dfd6:	89fb      	ldrh	r3, [r7, #14]
 800dfd8:	2b13      	cmp	r3, #19
 800dfda:	d804      	bhi.n	800dfe6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7f8 fb9b 	bl	8006718 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e0db      	b.n	800e19e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	4a6f      	ldr	r2, [pc, #444]	@ (800e1a8 <ip4_input+0x240>)
 800dfec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	4a6d      	ldr	r2, [pc, #436]	@ (800e1a8 <ip4_input+0x240>)
 800dff4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dff6:	4b6c      	ldr	r3, [pc, #432]	@ (800e1a8 <ip4_input+0x240>)
 800dff8:	695b      	ldr	r3, [r3, #20]
 800dffa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dffe:	2be0      	cmp	r3, #224	@ 0xe0
 800e000:	d112      	bne.n	800e028 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d007      	beq.n	800e022 <ip4_input+0xba>
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	3304      	adds	r3, #4
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <ip4_input+0xba>
      netif = inp;
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	613b      	str	r3, [r7, #16]
 800e020:	e02a      	b.n	800e078 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e022:	2300      	movs	r3, #0
 800e024:	613b      	str	r3, [r7, #16]
 800e026:	e027      	b.n	800e078 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e028:	6838      	ldr	r0, [r7, #0]
 800e02a:	f7ff ff73 	bl	800df14 <ip4_input_accept>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d002      	beq.n	800e03a <ip4_input+0xd2>
      netif = inp;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	613b      	str	r3, [r7, #16]
 800e038:	e01e      	b.n	800e078 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e03e:	4b5a      	ldr	r3, [pc, #360]	@ (800e1a8 <ip4_input+0x240>)
 800e040:	695b      	ldr	r3, [r3, #20]
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b7f      	cmp	r3, #127	@ 0x7f
 800e046:	d017      	beq.n	800e078 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e048:	4b58      	ldr	r3, [pc, #352]	@ (800e1ac <ip4_input+0x244>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	613b      	str	r3, [r7, #16]
 800e04e:	e00e      	b.n	800e06e <ip4_input+0x106>
          if (netif == inp) {
 800e050:	693a      	ldr	r2, [r7, #16]
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d006      	beq.n	800e066 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e058:	6938      	ldr	r0, [r7, #16]
 800e05a:	f7ff ff5b 	bl	800df14 <ip4_input_accept>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d108      	bne.n	800e076 <ip4_input+0x10e>
 800e064:	e000      	b.n	800e068 <ip4_input+0x100>
            continue;
 800e066:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	613b      	str	r3, [r7, #16]
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1ed      	bne.n	800e050 <ip4_input+0xe8>
 800e074:	e000      	b.n	800e078 <ip4_input+0x110>
            break;
 800e076:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e078:	4b4b      	ldr	r3, [pc, #300]	@ (800e1a8 <ip4_input+0x240>)
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 f96e 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d105      	bne.n	800e096 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e08a:	4b47      	ldr	r3, [pc, #284]	@ (800e1a8 <ip4_input+0x240>)
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e092:	2be0      	cmp	r3, #224	@ 0xe0
 800e094:	d104      	bne.n	800e0a0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7f8 fb3e 	bl	8006718 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	e07e      	b.n	800e19e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d104      	bne.n	800e0b0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7f8 fb36 	bl	8006718 <pbuf_free>
    return ERR_OK;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e076      	b.n	800e19e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	88db      	ldrh	r3, [r3, #6]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e0bc:	4013      	ands	r3, r2
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00b      	beq.n	800e0da <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fc92 	bl	800e9ec <ip4_reass>
 800e0c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d101      	bne.n	800e0d4 <ip4_input+0x16c>
      return ERR_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	e064      	b.n	800e19e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e0da:	4a33      	ldr	r2, [pc, #204]	@ (800e1a8 <ip4_input+0x240>)
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e0e0:	4a31      	ldr	r2, [pc, #196]	@ (800e1a8 <ip4_input+0x240>)
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e0e6:	4a30      	ldr	r2, [pc, #192]	@ (800e1a8 <ip4_input+0x240>)
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	f003 030f 	and.w	r3, r3, #15
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	4b2a      	ldr	r3, [pc, #168]	@ (800e1a8 <ip4_input+0x240>)
 800e0fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e100:	89fb      	ldrh	r3, [r7, #14]
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7f8 fa81 	bl	800660c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	7a5b      	ldrb	r3, [r3, #9]
 800e10e:	2b11      	cmp	r3, #17
 800e110:	d006      	beq.n	800e120 <ip4_input+0x1b8>
 800e112:	2b11      	cmp	r3, #17
 800e114:	dc13      	bgt.n	800e13e <ip4_input+0x1d6>
 800e116:	2b01      	cmp	r3, #1
 800e118:	d00c      	beq.n	800e134 <ip4_input+0x1cc>
 800e11a:	2b06      	cmp	r3, #6
 800e11c:	d005      	beq.n	800e12a <ip4_input+0x1c2>
 800e11e:	e00e      	b.n	800e13e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e120:	6839      	ldr	r1, [r7, #0]
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7fe f8e6 	bl	800c2f4 <udp_input>
        break;
 800e128:	e026      	b.n	800e178 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7fa f92d 	bl	800838c <tcp_input>
        break;
 800e132:	e021      	b.n	800e178 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e134:	6839      	ldr	r1, [r7, #0]
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff fcee 	bl	800db18 <icmp_input>
        break;
 800e13c:	e01c      	b.n	800e178 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e13e:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a8 <ip4_input+0x240>)
 800e140:	695b      	ldr	r3, [r3, #20]
 800e142:	6939      	ldr	r1, [r7, #16]
 800e144:	4618      	mov	r0, r3
 800e146:	f000 f90b 	bl	800e360 <ip4_addr_isbroadcast_u32>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d10f      	bne.n	800e170 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e150:	4b15      	ldr	r3, [pc, #84]	@ (800e1a8 <ip4_input+0x240>)
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e158:	2be0      	cmp	r3, #224	@ 0xe0
 800e15a:	d009      	beq.n	800e170 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e15c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7f8 fac5 	bl	80066f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e168:	2102      	movs	r1, #2
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7ff fdd8 	bl	800dd20 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f7f8 fad1 	bl	8006718 <pbuf_free>
        break;
 800e176:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e178:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a8 <ip4_input+0x240>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e17e:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a8 <ip4_input+0x240>)
 800e180:	2200      	movs	r2, #0
 800e182:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e184:	4b08      	ldr	r3, [pc, #32]	@ (800e1a8 <ip4_input+0x240>)
 800e186:	2200      	movs	r2, #0
 800e188:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e18a:	4b07      	ldr	r3, [pc, #28]	@ (800e1a8 <ip4_input+0x240>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e190:	4b05      	ldr	r3, [pc, #20]	@ (800e1a8 <ip4_input+0x240>)
 800e192:	2200      	movs	r2, #0
 800e194:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e196:	4b04      	ldr	r3, [pc, #16]	@ (800e1a8 <ip4_input+0x240>)
 800e198:	2200      	movs	r2, #0
 800e19a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	20005248 	.word	0x20005248
 800e1ac:	200087ac 	.word	0x200087ac

0800e1b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08a      	sub	sp, #40	@ 0x28
 800e1b4:	af04      	add	r7, sp, #16
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
 800e1bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d009      	beq.n	800e1dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <ip4_output_if+0x26>
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d102      	bne.n	800e1dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d8:	3304      	adds	r3, #4
 800e1da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e1dc:	78fa      	ldrb	r2, [r7, #3]
 800e1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e0:	9302      	str	r3, [sp, #8]
 800e1e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1e6:	9301      	str	r3, [sp, #4]
 800e1e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	6979      	ldr	r1, [r7, #20]
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f000 f805 	bl	800e204 <ip4_output_if_src>
 800e1fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b088      	sub	sp, #32
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
 800e210:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	7b9b      	ldrb	r3, [r3, #14]
 800e216:	2b01      	cmp	r3, #1
 800e218:	d006      	beq.n	800e228 <ip4_output_if_src+0x24>
 800e21a:	4b4b      	ldr	r3, [pc, #300]	@ (800e348 <ip4_output_if_src+0x144>)
 800e21c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800e220:	494a      	ldr	r1, [pc, #296]	@ (800e34c <ip4_output_if_src+0x148>)
 800e222:	484b      	ldr	r0, [pc, #300]	@ (800e350 <ip4_output_if_src+0x14c>)
 800e224:	f001 f8f2 	bl	800f40c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d060      	beq.n	800e2f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e22e:	2314      	movs	r3, #20
 800e230:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e232:	2114      	movs	r1, #20
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f7f8 f9d9 	bl	80065ec <pbuf_add_header>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e240:	f06f 0301 	mvn.w	r3, #1
 800e244:	e07c      	b.n	800e340 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	895b      	ldrh	r3, [r3, #10]
 800e250:	2b13      	cmp	r3, #19
 800e252:	d806      	bhi.n	800e262 <ip4_output_if_src+0x5e>
 800e254:	4b3c      	ldr	r3, [pc, #240]	@ (800e348 <ip4_output_if_src+0x144>)
 800e256:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800e25a:	493e      	ldr	r1, [pc, #248]	@ (800e354 <ip4_output_if_src+0x150>)
 800e25c:	483c      	ldr	r0, [pc, #240]	@ (800e350 <ip4_output_if_src+0x14c>)
 800e25e:	f001 f8d5 	bl	800f40c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	78fa      	ldrb	r2, [r7, #3]
 800e266:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e26e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e278:	8b7b      	ldrh	r3, [r7, #26]
 800e27a:	089b      	lsrs	r3, r3, #2
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e284:	b2da      	uxtb	r2, r3
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e290:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	891b      	ldrh	r3, [r3, #8]
 800e296:	4618      	mov	r0, r3
 800e298:	f7f6 fee0 	bl	800505c <lwip_htons>
 800e29c:	4603      	mov	r3, r0
 800e29e:	461a      	mov	r2, r3
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	719a      	strb	r2, [r3, #6]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2ae:	4b2a      	ldr	r3, [pc, #168]	@ (800e358 <ip4_output_if_src+0x154>)
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f6 fed2 	bl	800505c <lwip_htons>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e2c0:	4b25      	ldr	r3, [pc, #148]	@ (800e358 <ip4_output_if_src+0x154>)
 800e2c2:	881b      	ldrh	r3, [r3, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	4b23      	ldr	r3, [pc, #140]	@ (800e358 <ip4_output_if_src+0x154>)
 800e2ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d104      	bne.n	800e2dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e2d2:	4b22      	ldr	r3, [pc, #136]	@ (800e35c <ip4_output_if_src+0x158>)
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	60da      	str	r2, [r3, #12]
 800e2da:	e003      	b.n	800e2e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	729a      	strb	r2, [r3, #10]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	72da      	strb	r2, [r3, #11]
 800e2ee:	e00f      	b.n	800e310 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	895b      	ldrh	r3, [r3, #10]
 800e2f4:	2b13      	cmp	r3, #19
 800e2f6:	d802      	bhi.n	800e2fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e2f8:	f06f 0301 	mvn.w	r3, #1
 800e2fc:	e020      	b.n	800e340 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e30a:	f107 0314 	add.w	r3, r7, #20
 800e30e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e312:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00c      	beq.n	800e332 <ip4_output_if_src+0x12e>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	891a      	ldrh	r2, [r3, #8]
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e320:	429a      	cmp	r2, r3
 800e322:	d906      	bls.n	800e332 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 fd53 	bl	800edd4 <ip4_frag>
 800e32e:	4603      	mov	r3, r0
 800e330:	e006      	b.n	800e340 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	68f9      	ldr	r1, [r7, #12]
 800e33a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e33c:	4798      	blx	r3
 800e33e:	4603      	mov	r3, r0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	080128c4 	.word	0x080128c4
 800e34c:	080128f8 	.word	0x080128f8
 800e350:	08012904 	.word	0x08012904
 800e354:	0801292c 	.word	0x0801292c
 800e358:	2000890a 	.word	0x2000890a
 800e35c:	08012d0c 	.word	0x08012d0c

0800e360 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e360:	b480      	push	{r7}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e374:	d002      	beq.n	800e37c <ip4_addr_isbroadcast_u32+0x1c>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d101      	bne.n	800e380 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e37c:	2301      	movs	r3, #1
 800e37e:	e02a      	b.n	800e3d6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e386:	f003 0302 	and.w	r3, r3, #2
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	e021      	b.n	800e3d6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	3304      	adds	r3, #4
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d101      	bne.n	800e3a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e019      	b.n	800e3d6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	405a      	eors	r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	3308      	adds	r3, #8
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10d      	bne.n	800e3d4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	3308      	adds	r3, #8
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	43da      	mvns	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d101      	bne.n	800e3d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e000      	b.n	800e3d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e3d4:	2300      	movs	r3, #0
  }
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3714      	adds	r7, #20
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
	...

0800e3e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e3ee:	4b12      	ldr	r3, [pc, #72]	@ (800e438 <ip_reass_tmr+0x54>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e3f4:	e018      	b.n	800e428 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	7fdb      	ldrb	r3, [r3, #31]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00b      	beq.n	800e416 <ip_reass_tmr+0x32>
      r->timer--;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	7fdb      	ldrb	r3, [r3, #31]
 800e402:	3b01      	subs	r3, #1
 800e404:	b2da      	uxtb	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	e008      	b.n	800e428 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e420:	68b9      	ldr	r1, [r7, #8]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 f80a 	bl	800e43c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d1e3      	bne.n	800e3f6 <ip_reass_tmr+0x12>
    }
  }
}
 800e42e:	bf00      	nop
 800e430:	bf00      	nop
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	2000890c 	.word	0x2000890c

0800e43c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b088      	sub	sp, #32
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d105      	bne.n	800e45e <ip_reass_free_complete_datagram+0x22>
 800e452:	4b45      	ldr	r3, [pc, #276]	@ (800e568 <ip_reass_free_complete_datagram+0x12c>)
 800e454:	22ab      	movs	r2, #171	@ 0xab
 800e456:	4945      	ldr	r1, [pc, #276]	@ (800e56c <ip_reass_free_complete_datagram+0x130>)
 800e458:	4845      	ldr	r0, [pc, #276]	@ (800e570 <ip_reass_free_complete_datagram+0x134>)
 800e45a:	f000 ffd7 	bl	800f40c <iprintf>
  if (prev != NULL) {
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00a      	beq.n	800e47a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d005      	beq.n	800e47a <ip_reass_free_complete_datagram+0x3e>
 800e46e:	4b3e      	ldr	r3, [pc, #248]	@ (800e568 <ip_reass_free_complete_datagram+0x12c>)
 800e470:	22ad      	movs	r2, #173	@ 0xad
 800e472:	4940      	ldr	r1, [pc, #256]	@ (800e574 <ip_reass_free_complete_datagram+0x138>)
 800e474:	483e      	ldr	r0, [pc, #248]	@ (800e570 <ip_reass_free_complete_datagram+0x134>)
 800e476:	f000 ffc9 	bl	800f40c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	889b      	ldrh	r3, [r3, #4]
 800e486:	b29b      	uxth	r3, r3
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d12a      	bne.n	800e4e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	6858      	ldr	r0, [r3, #4]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	2214      	movs	r2, #20
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	f001 f88c 	bl	800f5c2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	69b8      	ldr	r0, [r7, #24]
 800e4ae:	f7ff fc47 	bl	800dd40 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e4b2:	69b8      	ldr	r0, [r7, #24]
 800e4b4:	f7f8 f9b8 	bl	8006828 <pbuf_clen>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e4bc:	8bfa      	ldrh	r2, [r7, #30]
 800e4be:	8a7b      	ldrh	r3, [r7, #18]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4c6:	db05      	blt.n	800e4d4 <ip_reass_free_complete_datagram+0x98>
 800e4c8:	4b27      	ldr	r3, [pc, #156]	@ (800e568 <ip_reass_free_complete_datagram+0x12c>)
 800e4ca:	22bc      	movs	r2, #188	@ 0xbc
 800e4cc:	492a      	ldr	r1, [pc, #168]	@ (800e578 <ip_reass_free_complete_datagram+0x13c>)
 800e4ce:	4828      	ldr	r0, [pc, #160]	@ (800e570 <ip_reass_free_complete_datagram+0x134>)
 800e4d0:	f000 ff9c 	bl	800f40c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e4d4:	8bfa      	ldrh	r2, [r7, #30]
 800e4d6:	8a7b      	ldrh	r3, [r7, #18]
 800e4d8:	4413      	add	r3, r2
 800e4da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e4dc:	69b8      	ldr	r0, [r7, #24]
 800e4de:	f7f8 f91b 	bl	8006718 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e4e8:	e01f      	b.n	800e52a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f7f8 f994 	bl	8006828 <pbuf_clen>
 800e500:	4603      	mov	r3, r0
 800e502:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e504:	8bfa      	ldrh	r2, [r7, #30]
 800e506:	8a7b      	ldrh	r3, [r7, #18]
 800e508:	4413      	add	r3, r2
 800e50a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e50e:	db05      	blt.n	800e51c <ip_reass_free_complete_datagram+0xe0>
 800e510:	4b15      	ldr	r3, [pc, #84]	@ (800e568 <ip_reass_free_complete_datagram+0x12c>)
 800e512:	22cc      	movs	r2, #204	@ 0xcc
 800e514:	4918      	ldr	r1, [pc, #96]	@ (800e578 <ip_reass_free_complete_datagram+0x13c>)
 800e516:	4816      	ldr	r0, [pc, #88]	@ (800e570 <ip_reass_free_complete_datagram+0x134>)
 800e518:	f000 ff78 	bl	800f40c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e51c:	8bfa      	ldrh	r2, [r7, #30]
 800e51e:	8a7b      	ldrh	r3, [r7, #18]
 800e520:	4413      	add	r3, r2
 800e522:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7f8 f8f7 	bl	8006718 <pbuf_free>
  while (p != NULL) {
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1dc      	bne.n	800e4ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 f8c2 	bl	800e6bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e538:	4b10      	ldr	r3, [pc, #64]	@ (800e57c <ip_reass_free_complete_datagram+0x140>)
 800e53a:	881b      	ldrh	r3, [r3, #0]
 800e53c:	8bfa      	ldrh	r2, [r7, #30]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d905      	bls.n	800e54e <ip_reass_free_complete_datagram+0x112>
 800e542:	4b09      	ldr	r3, [pc, #36]	@ (800e568 <ip_reass_free_complete_datagram+0x12c>)
 800e544:	22d2      	movs	r2, #210	@ 0xd2
 800e546:	490e      	ldr	r1, [pc, #56]	@ (800e580 <ip_reass_free_complete_datagram+0x144>)
 800e548:	4809      	ldr	r0, [pc, #36]	@ (800e570 <ip_reass_free_complete_datagram+0x134>)
 800e54a:	f000 ff5f 	bl	800f40c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e54e:	4b0b      	ldr	r3, [pc, #44]	@ (800e57c <ip_reass_free_complete_datagram+0x140>)
 800e550:	881a      	ldrh	r2, [r3, #0]
 800e552:	8bfb      	ldrh	r3, [r7, #30]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	b29a      	uxth	r2, r3
 800e558:	4b08      	ldr	r3, [pc, #32]	@ (800e57c <ip_reass_free_complete_datagram+0x140>)
 800e55a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e55c:	8bfb      	ldrh	r3, [r7, #30]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3720      	adds	r7, #32
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	0801295c 	.word	0x0801295c
 800e56c:	08012998 	.word	0x08012998
 800e570:	080129a4 	.word	0x080129a4
 800e574:	080129cc 	.word	0x080129cc
 800e578:	080129e0 	.word	0x080129e0
 800e57c:	20008910 	.word	0x20008910
 800e580:	08012a00 	.word	0x08012a00

0800e584 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b08a      	sub	sp, #40	@ 0x28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e58e:	2300      	movs	r3, #0
 800e590:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e592:	2300      	movs	r3, #0
 800e594:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e596:	2300      	movs	r3, #0
 800e598:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e5a2:	4b28      	ldr	r3, [pc, #160]	@ (800e644 <ip_reass_remove_oldest_datagram+0xc0>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e5a8:	e030      	b.n	800e60c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ac:	695a      	ldr	r2, [r3, #20]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d10c      	bne.n	800e5d0 <ip_reass_remove_oldest_datagram+0x4c>
 800e5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b8:	699a      	ldr	r2, [r3, #24]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	691b      	ldr	r3, [r3, #16]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d106      	bne.n	800e5d0 <ip_reass_remove_oldest_datagram+0x4c>
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c4:	899a      	ldrh	r2, [r3, #12]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	889b      	ldrh	r3, [r3, #4]
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d014      	beq.n	800e5fa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e5d6:	6a3b      	ldr	r3, [r7, #32]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d104      	bne.n	800e5e6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5de:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	61bb      	str	r3, [r7, #24]
 800e5e4:	e009      	b.n	800e5fa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e8:	7fda      	ldrb	r2, [r3, #31]
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	7fdb      	ldrb	r3, [r3, #31]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d803      	bhi.n	800e5fa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e604:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1cb      	bne.n	800e5aa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d008      	beq.n	800e62a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e618:	69b9      	ldr	r1, [r7, #24]
 800e61a:	6a38      	ldr	r0, [r7, #32]
 800e61c:	f7ff ff0e 	bl	800e43c <ip_reass_free_complete_datagram>
 800e620:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e622:	697a      	ldr	r2, [r7, #20]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	4413      	add	r3, r2
 800e628:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e62a:	697a      	ldr	r2, [r7, #20]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	429a      	cmp	r2, r3
 800e630:	da02      	bge.n	800e638 <ip_reass_remove_oldest_datagram+0xb4>
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	2b01      	cmp	r3, #1
 800e636:	dcac      	bgt.n	800e592 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e638:	697b      	ldr	r3, [r7, #20]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3728      	adds	r7, #40	@ 0x28
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	2000890c 	.word	0x2000890c

0800e648 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e652:	2004      	movs	r0, #4
 800e654:	f7f7 f97a 	bl	800594c <memp_malloc>
 800e658:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d110      	bne.n	800e682 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff ff8e 	bl	800e584 <ip_reass_remove_oldest_datagram>
 800e668:	4602      	mov	r2, r0
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	4293      	cmp	r3, r2
 800e66e:	dc03      	bgt.n	800e678 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e670:	2004      	movs	r0, #4
 800e672:	f7f7 f96b 	bl	800594c <memp_malloc>
 800e676:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d101      	bne.n	800e682 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	e016      	b.n	800e6b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e682:	2220      	movs	r2, #32
 800e684:	2100      	movs	r1, #0
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f000 ff25 	bl	800f4d6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	220f      	movs	r2, #15
 800e690:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e692:	4b09      	ldr	r3, [pc, #36]	@ (800e6b8 <ip_reass_enqueue_new_datagram+0x70>)
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e69a:	4a07      	ldr	r2, [pc, #28]	@ (800e6b8 <ip_reass_enqueue_new_datagram+0x70>)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3308      	adds	r3, #8
 800e6a4:	2214      	movs	r2, #20
 800e6a6:	6879      	ldr	r1, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f000 ff8a 	bl	800f5c2 <memcpy>
  return ipr;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	2000890c 	.word	0x2000890c

0800e6bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e6c6:	4b10      	ldr	r3, [pc, #64]	@ (800e708 <ip_reass_dequeue_datagram+0x4c>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d104      	bne.n	800e6da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800e708 <ip_reass_dequeue_datagram+0x4c>)
 800e6d6:	6013      	str	r3, [r2, #0]
 800e6d8:	e00d      	b.n	800e6f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d106      	bne.n	800e6ee <ip_reass_dequeue_datagram+0x32>
 800e6e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e70c <ip_reass_dequeue_datagram+0x50>)
 800e6e2:	f240 1245 	movw	r2, #325	@ 0x145
 800e6e6:	490a      	ldr	r1, [pc, #40]	@ (800e710 <ip_reass_dequeue_datagram+0x54>)
 800e6e8:	480a      	ldr	r0, [pc, #40]	@ (800e714 <ip_reass_dequeue_datagram+0x58>)
 800e6ea:	f000 fe8f 	bl	800f40c <iprintf>
    prev->next = ipr->next;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	2004      	movs	r0, #4
 800e6fa:	f7f7 f997 	bl	8005a2c <memp_free>
}
 800e6fe:	bf00      	nop
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	2000890c 	.word	0x2000890c
 800e70c:	0801295c 	.word	0x0801295c
 800e710:	08012a24 	.word	0x08012a24
 800e714:	080129a4 	.word	0x080129a4

0800e718 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b08c      	sub	sp, #48	@ 0x30
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e724:	2300      	movs	r3, #0
 800e726:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e728:	2301      	movs	r3, #1
 800e72a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	885b      	ldrh	r3, [r3, #2]
 800e736:	b29b      	uxth	r3, r3
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f6 fc8f 	bl	800505c <lwip_htons>
 800e73e:	4603      	mov	r3, r0
 800e740:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f003 030f 	and.w	r3, r3, #15
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e750:	7e7b      	ldrb	r3, [r7, #25]
 800e752:	b29b      	uxth	r3, r3
 800e754:	8b7a      	ldrh	r2, [r7, #26]
 800e756:	429a      	cmp	r2, r3
 800e758:	d202      	bcs.n	800e760 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e75a:	f04f 33ff 	mov.w	r3, #4294967295
 800e75e:	e135      	b.n	800e9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e760:	7e7b      	ldrb	r3, [r7, #25]
 800e762:	b29b      	uxth	r3, r3
 800e764:	8b7a      	ldrh	r2, [r7, #26]
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	88db      	ldrh	r3, [r3, #6]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	4618      	mov	r0, r3
 800e772:	f7f6 fc73 	bl	800505c <lwip_htons>
 800e776:	4603      	mov	r3, r0
 800e778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e78a:	2200      	movs	r2, #0
 800e78c:	701a      	strb	r2, [r3, #0]
 800e78e:	2200      	movs	r2, #0
 800e790:	705a      	strb	r2, [r3, #1]
 800e792:	2200      	movs	r2, #0
 800e794:	709a      	strb	r2, [r3, #2]
 800e796:	2200      	movs	r2, #0
 800e798:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79c:	8afa      	ldrh	r2, [r7, #22]
 800e79e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e7a0:	8afa      	ldrh	r2, [r7, #22]
 800e7a2:	8b7b      	ldrh	r3, [r7, #26]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ae:	88db      	ldrh	r3, [r3, #6]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	8afa      	ldrh	r2, [r7, #22]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d902      	bls.n	800e7be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7bc:	e106      	b.n	800e9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7c4:	e068      	b.n	800e898 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ce:	889b      	ldrh	r3, [r3, #4]
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	889b      	ldrh	r3, [r3, #4]
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d235      	bcs.n	800e848 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d020      	beq.n	800e82a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ea:	889b      	ldrh	r3, [r3, #4]
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f0:	88db      	ldrh	r3, [r3, #6]
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d307      	bcc.n	800e808 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fa:	88db      	ldrh	r3, [r3, #6]
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	889b      	ldrh	r3, [r3, #4]
 800e802:	b29b      	uxth	r3, r3
 800e804:	429a      	cmp	r2, r3
 800e806:	d902      	bls.n	800e80e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e808:	f04f 33ff 	mov.w	r3, #4294967295
 800e80c:	e0de      	b.n	800e9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e816:	88db      	ldrh	r3, [r3, #6]
 800e818:	b29a      	uxth	r2, r3
 800e81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81c:	889b      	ldrh	r3, [r3, #4]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	429a      	cmp	r2, r3
 800e822:	d03d      	beq.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e824:	2300      	movs	r3, #0
 800e826:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e828:	e03a      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82c:	88db      	ldrh	r3, [r3, #6]
 800e82e:	b29a      	uxth	r2, r3
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	889b      	ldrh	r3, [r3, #4]
 800e834:	b29b      	uxth	r3, r3
 800e836:	429a      	cmp	r2, r3
 800e838:	d902      	bls.n	800e840 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e83a:	f04f 33ff 	mov.w	r3, #4294967295
 800e83e:	e0c5      	b.n	800e9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	605a      	str	r2, [r3, #4]
      break;
 800e846:	e02b      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e84a:	889b      	ldrh	r3, [r3, #4]
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	889b      	ldrh	r3, [r3, #4]
 800e852:	b29b      	uxth	r3, r3
 800e854:	429a      	cmp	r2, r3
 800e856:	d102      	bne.n	800e85e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e858:	f04f 33ff 	mov.w	r3, #4294967295
 800e85c:	e0b6      	b.n	800e9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e860:	889b      	ldrh	r3, [r3, #4]
 800e862:	b29a      	uxth	r2, r3
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	88db      	ldrh	r3, [r3, #6]
 800e868:	b29b      	uxth	r3, r3
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d202      	bcs.n	800e874 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e86e:	f04f 33ff 	mov.w	r3, #4294967295
 800e872:	e0ab      	b.n	800e9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e876:	2b00      	cmp	r3, #0
 800e878:	d009      	beq.n	800e88e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87c:	88db      	ldrh	r3, [r3, #6]
 800e87e:	b29a      	uxth	r2, r3
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	889b      	ldrh	r3, [r3, #4]
 800e884:	b29b      	uxth	r3, r3
 800e886:	429a      	cmp	r2, r3
 800e888:	d001      	beq.n	800e88e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d193      	bne.n	800e7c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e89e:	e000      	b.n	800e8a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e8a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d12d      	bne.n	800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d01c      	beq.n	800e8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b0:	88db      	ldrh	r3, [r3, #6]
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b6:	889b      	ldrh	r3, [r3, #4]
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d906      	bls.n	800e8cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e8be:	4b45      	ldr	r3, [pc, #276]	@ (800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8c0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e8c4:	4944      	ldr	r1, [pc, #272]	@ (800e9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e8c6:	4845      	ldr	r0, [pc, #276]	@ (800e9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8c8:	f000 fda0 	bl	800f40c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d4:	88db      	ldrh	r3, [r3, #6]
 800e8d6:	b29a      	uxth	r2, r3
 800e8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8da:	889b      	ldrh	r3, [r3, #4]
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d010      	beq.n	800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	623b      	str	r3, [r7, #32]
 800e8e6:	e00d      	b.n	800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d006      	beq.n	800e8fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e8f0:	4b38      	ldr	r3, [pc, #224]	@ (800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8f2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e8f6:	493a      	ldr	r1, [pc, #232]	@ (800e9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e8f8:	4838      	ldr	r0, [pc, #224]	@ (800e9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8fa:	f000 fd87 	bl	800f40c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d105      	bne.n	800e916 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	7f9b      	ldrb	r3, [r3, #30]
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	2b00      	cmp	r3, #0
 800e914:	d059      	beq.n	800e9ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d04f      	beq.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d006      	beq.n	800e932 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	889b      	ldrh	r3, [r3, #4]
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d002      	beq.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	623b      	str	r3, [r7, #32]
 800e936:	e041      	b.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e942:	e012      	b.n	800e96a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e94c:	88db      	ldrh	r3, [r3, #6]
 800e94e:	b29a      	uxth	r2, r3
 800e950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e952:	889b      	ldrh	r3, [r3, #4]
 800e954:	b29b      	uxth	r3, r3
 800e956:	429a      	cmp	r2, r3
 800e958:	d002      	beq.n	800e960 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	623b      	str	r3, [r7, #32]
            break;
 800e95e:	e007      	b.n	800e970 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e962:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1e9      	bne.n	800e944 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e970:	6a3b      	ldr	r3, [r7, #32]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d022      	beq.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d106      	bne.n	800e98c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e97e:	4b15      	ldr	r3, [pc, #84]	@ (800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e980:	f240 12df 	movw	r2, #479	@ 0x1df
 800e984:	4917      	ldr	r1, [pc, #92]	@ (800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e986:	4815      	ldr	r0, [pc, #84]	@ (800e9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e988:	f000 fd40 	bl	800f40c <iprintf>
          LWIP_ASSERT("sanity check",
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e994:	429a      	cmp	r2, r3
 800e996:	d106      	bne.n	800e9a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e998:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e99a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e99e:	4911      	ldr	r1, [pc, #68]	@ (800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e9a0:	480e      	ldr	r0, [pc, #56]	@ (800e9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9a2:	f000 fd33 	bl	800f40c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d006      	beq.n	800e9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e9ae:	4b09      	ldr	r3, [pc, #36]	@ (800e9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9b0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e9b4:	490c      	ldr	r1, [pc, #48]	@ (800e9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e9b6:	4809      	ldr	r0, [pc, #36]	@ (800e9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9b8:	f000 fd28 	bl	800f40c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	bf14      	ite	ne
 800e9c2:	2301      	movne	r3, #1
 800e9c4:	2300      	moveq	r3, #0
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	e000      	b.n	800e9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3730      	adds	r7, #48	@ 0x30
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	0801295c 	.word	0x0801295c
 800e9d8:	08012a40 	.word	0x08012a40
 800e9dc:	080129a4 	.word	0x080129a4
 800e9e0:	08012a60 	.word	0x08012a60
 800e9e4:	08012a98 	.word	0x08012a98
 800e9e8:	08012aa8 	.word	0x08012aa8

0800e9ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b08e      	sub	sp, #56	@ 0x38
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	f003 030f 	and.w	r3, r3, #15
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	2b14      	cmp	r3, #20
 800ea0a:	f040 8171 	bne.w	800ecf0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ea0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea10:	88db      	ldrh	r3, [r3, #6]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7f6 fb21 	bl	800505c <lwip_htons>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	00db      	lsls	r3, r3, #3
 800ea24:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ea26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea28:	885b      	ldrh	r3, [r3, #2]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7f6 fb15 	bl	800505c <lwip_htons>
 800ea32:	4603      	mov	r3, r0
 800ea34:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ea36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	f003 030f 	and.w	r3, r3, #15
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800ea46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	f0c0 8150 	bcc.w	800ecf4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ea54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7f7 fee1 	bl	8006828 <pbuf_clen>
 800ea66:	4603      	mov	r3, r0
 800ea68:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ea6a:	4b8c      	ldr	r3, [pc, #560]	@ (800ec9c <ip4_reass+0x2b0>)
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	8c3b      	ldrh	r3, [r7, #32]
 800ea72:	4413      	add	r3, r2
 800ea74:	2b0a      	cmp	r3, #10
 800ea76:	dd10      	ble.n	800ea9a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ea78:	8c3b      	ldrh	r3, [r7, #32]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea7e:	f7ff fd81 	bl	800e584 <ip_reass_remove_oldest_datagram>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f000 8137 	beq.w	800ecf8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ea8a:	4b84      	ldr	r3, [pc, #528]	@ (800ec9c <ip4_reass+0x2b0>)
 800ea8c:	881b      	ldrh	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	8c3b      	ldrh	r3, [r7, #32]
 800ea92:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ea94:	2b0a      	cmp	r3, #10
 800ea96:	f300 812f 	bgt.w	800ecf8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ea9a:	4b81      	ldr	r3, [pc, #516]	@ (800eca0 <ip4_reass+0x2b4>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800eaa0:	e015      	b.n	800eace <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa4:	695a      	ldr	r2, [r3, #20]
 800eaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d10c      	bne.n	800eac8 <ip4_reass+0xdc>
 800eaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab0:	699a      	ldr	r2, [r3, #24]
 800eab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d106      	bne.n	800eac8 <ip4_reass+0xdc>
 800eaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabc:	899a      	ldrh	r2, [r3, #12]
 800eabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac0:	889b      	ldrh	r3, [r3, #4]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d006      	beq.n	800ead6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	633b      	str	r3, [r7, #48]	@ 0x30
 800eace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e6      	bne.n	800eaa2 <ip4_reass+0xb6>
 800ead4:	e000      	b.n	800ead8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ead6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ead8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d109      	bne.n	800eaf2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eade:	8c3b      	ldrh	r3, [r7, #32]
 800eae0:	4619      	mov	r1, r3
 800eae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eae4:	f7ff fdb0 	bl	800e648 <ip_reass_enqueue_new_datagram>
 800eae8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d11c      	bne.n	800eb2a <ip4_reass+0x13e>
      goto nullreturn;
 800eaf0:	e105      	b.n	800ecfe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eaf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf4:	88db      	ldrh	r3, [r3, #6]
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7f6 faaf 	bl	800505c <lwip_htons>
 800eafe:	4603      	mov	r3, r0
 800eb00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d110      	bne.n	800eb2a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800eb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb0a:	89db      	ldrh	r3, [r3, #14]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7f6 faa5 	bl	800505c <lwip_htons>
 800eb12:	4603      	mov	r3, r0
 800eb14:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d006      	beq.n	800eb2a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1e:	3308      	adds	r3, #8
 800eb20:	2214      	movs	r2, #20
 800eb22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 fd4c 	bl	800f5c2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800eb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2c:	88db      	ldrh	r3, [r3, #6]
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	f003 0320 	and.w	r3, r3, #32
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	bf0c      	ite	eq
 800eb38:	2301      	moveq	r3, #1
 800eb3a:	2300      	movne	r3, #0
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00e      	beq.n	800eb64 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800eb46:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800eb48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb4a:	4413      	add	r3, r2
 800eb4c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800eb4e:	8b7a      	ldrh	r2, [r7, #26]
 800eb50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb52:	429a      	cmp	r2, r3
 800eb54:	f0c0 80a0 	bcc.w	800ec98 <ip4_reass+0x2ac>
 800eb58:	8b7b      	ldrh	r3, [r7, #26]
 800eb5a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	f200 809a 	bhi.w	800ec98 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800eb64:	69fa      	ldr	r2, [r7, #28]
 800eb66:	6879      	ldr	r1, [r7, #4]
 800eb68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb6a:	f7ff fdd5 	bl	800e718 <ip_reass_chain_frag_into_datagram_and_validate>
 800eb6e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb76:	f000 809b 	beq.w	800ecb0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eb7a:	4b48      	ldr	r3, [pc, #288]	@ (800ec9c <ip4_reass+0x2b0>)
 800eb7c:	881a      	ldrh	r2, [r3, #0]
 800eb7e:	8c3b      	ldrh	r3, [r7, #32]
 800eb80:	4413      	add	r3, r2
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	4b45      	ldr	r3, [pc, #276]	@ (800ec9c <ip4_reass+0x2b0>)
 800eb86:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00d      	beq.n	800ebaa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800eb8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800eb90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb92:	4413      	add	r3, r2
 800eb94:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800eb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb98:	8a7a      	ldrh	r2, [r7, #18]
 800eb9a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb9e:	7f9b      	ldrb	r3, [r3, #30]
 800eba0:	f043 0301 	orr.w	r3, r3, #1
 800eba4:	b2da      	uxtb	r2, r3
 800eba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d171      	bne.n	800ec94 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ebb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb2:	8b9b      	ldrh	r3, [r3, #28]
 800ebb4:	3314      	adds	r3, #20
 800ebb6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ebca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebcc:	3308      	adds	r3, #8
 800ebce:	2214      	movs	r2, #20
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebd4:	f000 fcf5 	bl	800f5c2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ebd8:	8a3b      	ldrh	r3, [r7, #16]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f6 fa3e 	bl	800505c <lwip_htons>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	2200      	movs	r2, #0
 800ebec:	719a      	strb	r2, [r3, #6]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ebf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	729a      	strb	r2, [r3, #10]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ec02:	e00d      	b.n	800ec20 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ec04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ec0a:	2114      	movs	r1, #20
 800ec0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ec0e:	f7f7 fcfd 	bl	800660c <pbuf_remove_header>
      pbuf_cat(p, r);
 800ec12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7f7 fe41 	bl	800689c <pbuf_cat>
      r = iprh->next_pbuf;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800ec20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1ee      	bne.n	800ec04 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ec26:	4b1e      	ldr	r3, [pc, #120]	@ (800eca0 <ip4_reass+0x2b4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d102      	bne.n	800ec36 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ec30:	2300      	movs	r3, #0
 800ec32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec34:	e010      	b.n	800ec58 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec36:	4b1a      	ldr	r3, [pc, #104]	@ (800eca0 <ip4_reass+0x2b4>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec3c:	e007      	b.n	800ec4e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ec3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d006      	beq.n	800ec56 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1f4      	bne.n	800ec3e <ip4_reass+0x252>
 800ec54:	e000      	b.n	800ec58 <ip4_reass+0x26c>
          break;
 800ec56:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ec58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec5c:	f7ff fd2e 	bl	800e6bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7f7 fde1 	bl	8006828 <pbuf_clen>
 800ec66:	4603      	mov	r3, r0
 800ec68:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec9c <ip4_reass+0x2b0>)
 800ec6c:	881b      	ldrh	r3, [r3, #0]
 800ec6e:	8c3a      	ldrh	r2, [r7, #32]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d906      	bls.n	800ec82 <ip4_reass+0x296>
 800ec74:	4b0b      	ldr	r3, [pc, #44]	@ (800eca4 <ip4_reass+0x2b8>)
 800ec76:	f240 229b 	movw	r2, #667	@ 0x29b
 800ec7a:	490b      	ldr	r1, [pc, #44]	@ (800eca8 <ip4_reass+0x2bc>)
 800ec7c:	480b      	ldr	r0, [pc, #44]	@ (800ecac <ip4_reass+0x2c0>)
 800ec7e:	f000 fbc5 	bl	800f40c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ec82:	4b06      	ldr	r3, [pc, #24]	@ (800ec9c <ip4_reass+0x2b0>)
 800ec84:	881a      	ldrh	r2, [r3, #0]
 800ec86:	8c3b      	ldrh	r3, [r7, #32]
 800ec88:	1ad3      	subs	r3, r2, r3
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	4b03      	ldr	r3, [pc, #12]	@ (800ec9c <ip4_reass+0x2b0>)
 800ec8e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	e038      	b.n	800ed06 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ec94:	2300      	movs	r3, #0
 800ec96:	e036      	b.n	800ed06 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ec98:	bf00      	nop
 800ec9a:	e00a      	b.n	800ecb2 <ip4_reass+0x2c6>
 800ec9c:	20008910 	.word	0x20008910
 800eca0:	2000890c 	.word	0x2000890c
 800eca4:	0801295c 	.word	0x0801295c
 800eca8:	08012acc 	.word	0x08012acc
 800ecac:	080129a4 	.word	0x080129a4
    goto nullreturn_ipr;
 800ecb0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d106      	bne.n	800ecc6 <ip4_reass+0x2da>
 800ecb8:	4b15      	ldr	r3, [pc, #84]	@ (800ed10 <ip4_reass+0x324>)
 800ecba:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800ecbe:	4915      	ldr	r1, [pc, #84]	@ (800ed14 <ip4_reass+0x328>)
 800ecc0:	4815      	ldr	r0, [pc, #84]	@ (800ed18 <ip4_reass+0x32c>)
 800ecc2:	f000 fba3 	bl	800f40c <iprintf>
  if (ipr->p == NULL) {
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d116      	bne.n	800ecfc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ecce:	4b13      	ldr	r3, [pc, #76]	@ (800ed1c <ip4_reass+0x330>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d006      	beq.n	800ece6 <ip4_reass+0x2fa>
 800ecd8:	4b0d      	ldr	r3, [pc, #52]	@ (800ed10 <ip4_reass+0x324>)
 800ecda:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ecde:	4910      	ldr	r1, [pc, #64]	@ (800ed20 <ip4_reass+0x334>)
 800ece0:	480d      	ldr	r0, [pc, #52]	@ (800ed18 <ip4_reass+0x32c>)
 800ece2:	f000 fb93 	bl	800f40c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ece6:	2100      	movs	r1, #0
 800ece8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ecea:	f7ff fce7 	bl	800e6bc <ip_reass_dequeue_datagram>
 800ecee:	e006      	b.n	800ecfe <ip4_reass+0x312>
    goto nullreturn;
 800ecf0:	bf00      	nop
 800ecf2:	e004      	b.n	800ecfe <ip4_reass+0x312>
    goto nullreturn;
 800ecf4:	bf00      	nop
 800ecf6:	e002      	b.n	800ecfe <ip4_reass+0x312>
      goto nullreturn;
 800ecf8:	bf00      	nop
 800ecfa:	e000      	b.n	800ecfe <ip4_reass+0x312>
  }

nullreturn:
 800ecfc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7f7 fd0a 	bl	8006718 <pbuf_free>
  return NULL;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3738      	adds	r7, #56	@ 0x38
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	0801295c 	.word	0x0801295c
 800ed14:	08012ae8 	.word	0x08012ae8
 800ed18:	080129a4 	.word	0x080129a4
 800ed1c:	2000890c 	.word	0x2000890c
 800ed20:	08012af4 	.word	0x08012af4

0800ed24 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ed28:	2005      	movs	r0, #5
 800ed2a:	f7f6 fe0f 	bl	800594c <memp_malloc>
 800ed2e:	4603      	mov	r3, r0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ed42:	4b07      	ldr	r3, [pc, #28]	@ (800ed60 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ed44:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800ed48:	4906      	ldr	r1, [pc, #24]	@ (800ed64 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ed4a:	4807      	ldr	r0, [pc, #28]	@ (800ed68 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ed4c:	f000 fb5e 	bl	800f40c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ed50:	6879      	ldr	r1, [r7, #4]
 800ed52:	2005      	movs	r0, #5
 800ed54:	f7f6 fe6a 	bl	8005a2c <memp_free>
}
 800ed58:	bf00      	nop
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	0801295c 	.word	0x0801295c
 800ed64:	08012b14 	.word	0x08012b14
 800ed68:	080129a4 	.word	0x080129a4

0800ed6c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d106      	bne.n	800ed8c <ipfrag_free_pbuf_custom+0x20>
 800ed7e:	4b11      	ldr	r3, [pc, #68]	@ (800edc4 <ipfrag_free_pbuf_custom+0x58>)
 800ed80:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ed84:	4910      	ldr	r1, [pc, #64]	@ (800edc8 <ipfrag_free_pbuf_custom+0x5c>)
 800ed86:	4811      	ldr	r0, [pc, #68]	@ (800edcc <ipfrag_free_pbuf_custom+0x60>)
 800ed88:	f000 fb40 	bl	800f40c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d006      	beq.n	800eda2 <ipfrag_free_pbuf_custom+0x36>
 800ed94:	4b0b      	ldr	r3, [pc, #44]	@ (800edc4 <ipfrag_free_pbuf_custom+0x58>)
 800ed96:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ed9a:	490d      	ldr	r1, [pc, #52]	@ (800edd0 <ipfrag_free_pbuf_custom+0x64>)
 800ed9c:	480b      	ldr	r0, [pc, #44]	@ (800edcc <ipfrag_free_pbuf_custom+0x60>)
 800ed9e:	f000 fb35 	bl	800f40c <iprintf>
  if (pcr->original != NULL) {
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d004      	beq.n	800edb4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	695b      	ldr	r3, [r3, #20]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7f7 fcb2 	bl	8006718 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f7ff ffbd 	bl	800ed34 <ip_frag_free_pbuf_custom_ref>
}
 800edba:	bf00      	nop
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	0801295c 	.word	0x0801295c
 800edc8:	08012b20 	.word	0x08012b20
 800edcc:	080129a4 	.word	0x080129a4
 800edd0:	08012b2c 	.word	0x08012b2c

0800edd4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b094      	sub	sp, #80	@ 0x50
 800edd8:	af02      	add	r7, sp, #8
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800edea:	3b14      	subs	r3, #20
 800edec:	2b00      	cmp	r3, #0
 800edee:	da00      	bge.n	800edf2 <ip4_frag+0x1e>
 800edf0:	3307      	adds	r3, #7
 800edf2:	10db      	asrs	r3, r3, #3
 800edf4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800edf6:	2314      	movs	r3, #20
 800edf8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ee00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ee04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	f003 030f 	and.w	r3, r3, #15
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	2b14      	cmp	r3, #20
 800ee14:	d002      	beq.n	800ee1c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ee16:	f06f 0305 	mvn.w	r3, #5
 800ee1a:	e110      	b.n	800f03e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	895b      	ldrh	r3, [r3, #10]
 800ee20:	2b13      	cmp	r3, #19
 800ee22:	d809      	bhi.n	800ee38 <ip4_frag+0x64>
 800ee24:	4b88      	ldr	r3, [pc, #544]	@ (800f048 <ip4_frag+0x274>)
 800ee26:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800ee2a:	4988      	ldr	r1, [pc, #544]	@ (800f04c <ip4_frag+0x278>)
 800ee2c:	4888      	ldr	r0, [pc, #544]	@ (800f050 <ip4_frag+0x27c>)
 800ee2e:	f000 faed 	bl	800f40c <iprintf>
 800ee32:	f06f 0305 	mvn.w	r3, #5
 800ee36:	e102      	b.n	800f03e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ee38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3a:	88db      	ldrh	r3, [r3, #6]
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7f6 f90c 	bl	800505c <lwip_htons>
 800ee44:	4603      	mov	r3, r0
 800ee46:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800ee48:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ee4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee4e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ee52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ee54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ee58:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	891b      	ldrh	r3, [r3, #8]
 800ee5e:	3b14      	subs	r3, #20
 800ee60:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800ee64:	e0e1      	b.n	800f02a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ee66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ee68:	00db      	lsls	r3, r3, #3
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ee70:	4293      	cmp	r3, r2
 800ee72:	bf28      	it	cs
 800ee74:	4613      	movcs	r3, r2
 800ee76:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ee78:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ee7c:	2114      	movs	r1, #20
 800ee7e:	200e      	movs	r0, #14
 800ee80:	f7f7 f966 	bl	8006150 <pbuf_alloc>
 800ee84:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800ee86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f000 80d5 	beq.w	800f038 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee90:	895b      	ldrh	r3, [r3, #10]
 800ee92:	2b13      	cmp	r3, #19
 800ee94:	d806      	bhi.n	800eea4 <ip4_frag+0xd0>
 800ee96:	4b6c      	ldr	r3, [pc, #432]	@ (800f048 <ip4_frag+0x274>)
 800ee98:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800ee9c:	496d      	ldr	r1, [pc, #436]	@ (800f054 <ip4_frag+0x280>)
 800ee9e:	486c      	ldr	r0, [pc, #432]	@ (800f050 <ip4_frag+0x27c>)
 800eea0:	f000 fab4 	bl	800f40c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	2214      	movs	r2, #20
 800eeaa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 fb88 	bl	800f5c2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800eeb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eeba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800eebe:	e064      	b.n	800ef8a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	895a      	ldrh	r2, [r3, #10]
 800eec4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800eec6:	1ad3      	subs	r3, r2, r3
 800eec8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	895b      	ldrh	r3, [r3, #10]
 800eece:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d906      	bls.n	800eee2 <ip4_frag+0x10e>
 800eed4:	4b5c      	ldr	r3, [pc, #368]	@ (800f048 <ip4_frag+0x274>)
 800eed6:	f240 322d 	movw	r2, #813	@ 0x32d
 800eeda:	495f      	ldr	r1, [pc, #380]	@ (800f058 <ip4_frag+0x284>)
 800eedc:	485c      	ldr	r0, [pc, #368]	@ (800f050 <ip4_frag+0x27c>)
 800eede:	f000 fa95 	bl	800f40c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800eee2:	8bfa      	ldrh	r2, [r7, #30]
 800eee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800eee8:	4293      	cmp	r3, r2
 800eeea:	bf28      	it	cs
 800eeec:	4613      	movcs	r3, r2
 800eeee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800eef2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d105      	bne.n	800ef06 <ip4_frag+0x132>
        poff = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60fb      	str	r3, [r7, #12]
        continue;
 800ef04:	e041      	b.n	800ef8a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ef06:	f7ff ff0d 	bl	800ed24 <ip_frag_alloc_pbuf_custom_ref>
 800ef0a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d103      	bne.n	800ef1a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ef12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef14:	f7f7 fc00 	bl	8006718 <pbuf_free>
        goto memerr;
 800ef18:	e08f      	b.n	800f03a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ef1a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ef20:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ef22:	4413      	add	r3, r2
 800ef24:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800ef28:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ef2c:	9201      	str	r2, [sp, #4]
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	4603      	mov	r3, r0
 800ef32:	2241      	movs	r2, #65	@ 0x41
 800ef34:	2000      	movs	r0, #0
 800ef36:	f7f7 fa35 	bl	80063a4 <pbuf_alloced_custom>
 800ef3a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d106      	bne.n	800ef50 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ef42:	69b8      	ldr	r0, [r7, #24]
 800ef44:	f7ff fef6 	bl	800ed34 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ef48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef4a:	f7f7 fbe5 	bl	8006718 <pbuf_free>
        goto memerr;
 800ef4e:	e074      	b.n	800f03a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f7f7 fc81 	bl	8006858 <pbuf_ref>
      pcr->original = p;
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	4a3f      	ldr	r2, [pc, #252]	@ (800f05c <ip4_frag+0x288>)
 800ef60:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ef62:	6979      	ldr	r1, [r7, #20]
 800ef64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef66:	f7f7 fc99 	bl	800689c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ef6a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ef6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800ef78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d004      	beq.n	800ef8a <ip4_frag+0x1b6>
        poff = 0;
 800ef80:	2300      	movs	r3, #0
 800ef82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ef8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d196      	bne.n	800eec0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ef92:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ef94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ef98:	4413      	add	r3, r2
 800ef9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800efa0:	f1a3 0213 	sub.w	r2, r3, #19
 800efa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800efa8:	429a      	cmp	r2, r3
 800efaa:	bfcc      	ite	gt
 800efac:	2301      	movgt	r3, #1
 800efae:	2300      	movle	r3, #0
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800efb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800efb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efbc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800efbe:	6a3b      	ldr	r3, [r7, #32]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <ip4_frag+0x1f6>
 800efc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d003      	beq.n	800efd2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800efca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800efcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800efd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800efd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7f6 f841 	bl	800505c <lwip_htons>
 800efda:	4603      	mov	r3, r0
 800efdc:	461a      	mov	r2, r3
 800efde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800efe2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800efe4:	3314      	adds	r3, #20
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	4618      	mov	r0, r3
 800efea:	f7f6 f837 	bl	800505c <lwip_htons>
 800efee:	4603      	mov	r3, r0
 800eff0:	461a      	mov	r2, r3
 800eff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff8:	2200      	movs	r2, #0
 800effa:	729a      	strb	r2, [r3, #10]
 800effc:	2200      	movs	r2, #0
 800effe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	695b      	ldr	r3, [r3, #20]
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f008:	68b8      	ldr	r0, [r7, #8]
 800f00a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f00c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f00e:	f7f7 fb83 	bl	8006718 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f012:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f016:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800f01e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f022:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f024:	4413      	add	r3, r2
 800f026:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800f02a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f02e:	2b00      	cmp	r3, #0
 800f030:	f47f af19 	bne.w	800ee66 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	e002      	b.n	800f03e <ip4_frag+0x26a>
      goto memerr;
 800f038:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f03a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3748      	adds	r7, #72	@ 0x48
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	0801295c 	.word	0x0801295c
 800f04c:	08012b38 	.word	0x08012b38
 800f050:	080129a4 	.word	0x080129a4
 800f054:	08012b54 	.word	0x08012b54
 800f058:	08012b74 	.word	0x08012b74
 800f05c:	0800ed6d 	.word	0x0800ed6d

0800f060 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f06a:	230e      	movs	r3, #14
 800f06c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	895b      	ldrh	r3, [r3, #10]
 800f072:	2b0e      	cmp	r3, #14
 800f074:	d96e      	bls.n	800f154 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7bdb      	ldrb	r3, [r3, #15]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d106      	bne.n	800f08c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f084:	3301      	adds	r3, #1
 800f086:	b2da      	uxtb	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	7b1a      	ldrb	r2, [r3, #12]
 800f096:	7b5b      	ldrb	r3, [r3, #13]
 800f098:	021b      	lsls	r3, r3, #8
 800f09a:	4313      	orrs	r3, r2
 800f09c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	f003 0301 	and.w	r3, r3, #1
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d023      	beq.n	800f0f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d10f      	bne.n	800f0d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	785b      	ldrb	r3, [r3, #1]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d11b      	bne.n	800f0f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f0be:	2b5e      	cmp	r3, #94	@ 0x5e
 800f0c0:	d117      	bne.n	800f0f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7b5b      	ldrb	r3, [r3, #13]
 800f0c6:	f043 0310 	orr.w	r3, r3, #16
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	735a      	strb	r2, [r3, #13]
 800f0d0:	e00f      	b.n	800f0f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	2206      	movs	r2, #6
 800f0d6:	4928      	ldr	r1, [pc, #160]	@ (800f178 <ethernet_input+0x118>)
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 f9ec 	bl	800f4b6 <memcmp>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d106      	bne.n	800f0f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7b5b      	ldrb	r3, [r3, #13]
 800f0e8:	f043 0308 	orr.w	r3, r3, #8
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f0f2:	89fb      	ldrh	r3, [r7, #14]
 800f0f4:	2b08      	cmp	r3, #8
 800f0f6:	d003      	beq.n	800f100 <ethernet_input+0xa0>
 800f0f8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800f0fc:	d014      	beq.n	800f128 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f0fe:	e032      	b.n	800f166 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f106:	f003 0308 	and.w	r3, r3, #8
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d024      	beq.n	800f158 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f10e:	8afb      	ldrh	r3, [r7, #22]
 800f110:	4619      	mov	r1, r3
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f7f7 fa7a 	bl	800660c <pbuf_remove_header>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d11e      	bne.n	800f15c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f11e:	6839      	ldr	r1, [r7, #0]
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7fe ff21 	bl	800df68 <ip4_input>
      break;
 800f126:	e013      	b.n	800f150 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f12e:	f003 0308 	and.w	r3, r3, #8
 800f132:	2b00      	cmp	r3, #0
 800f134:	d014      	beq.n	800f160 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f136:	8afb      	ldrh	r3, [r7, #22]
 800f138:	4619      	mov	r1, r3
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7f7 fa66 	bl	800660c <pbuf_remove_header>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d10e      	bne.n	800f164 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f146:	6839      	ldr	r1, [r7, #0]
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7fe f8c1 	bl	800d2d0 <etharp_input>
      break;
 800f14e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	e00c      	b.n	800f16e <ethernet_input+0x10e>
    goto free_and_return;
 800f154:	bf00      	nop
 800f156:	e006      	b.n	800f166 <ethernet_input+0x106>
        goto free_and_return;
 800f158:	bf00      	nop
 800f15a:	e004      	b.n	800f166 <ethernet_input+0x106>
        goto free_and_return;
 800f15c:	bf00      	nop
 800f15e:	e002      	b.n	800f166 <ethernet_input+0x106>
        goto free_and_return;
 800f160:	bf00      	nop
 800f162:	e000      	b.n	800f166 <ethernet_input+0x106>
        goto free_and_return;
 800f164:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7f7 fad6 	bl	8006718 <pbuf_free>
  return ERR_OK;
 800f16c:	2300      	movs	r3, #0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3718      	adds	r7, #24
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	08012d10 	.word	0x08012d10

0800f17c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f18a:	8c3b      	ldrh	r3, [r7, #32]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7f5 ff65 	bl	800505c <lwip_htons>
 800f192:	4603      	mov	r3, r0
 800f194:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f196:	210e      	movs	r1, #14
 800f198:	68b8      	ldr	r0, [r7, #8]
 800f19a:	f7f7 fa27 	bl	80065ec <pbuf_add_header>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d125      	bne.n	800f1f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	8afa      	ldrh	r2, [r7, #22]
 800f1ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	2206      	movs	r2, #6
 800f1b4:	6839      	ldr	r1, [r7, #0]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f000 fa03 	bl	800f5c2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	3306      	adds	r3, #6
 800f1c0:	2206      	movs	r2, #6
 800f1c2:	6879      	ldr	r1, [r7, #4]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f000 f9fc 	bl	800f5c2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f1d0:	2b06      	cmp	r3, #6
 800f1d2:	d006      	beq.n	800f1e2 <ethernet_output+0x66>
 800f1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800f200 <ethernet_output+0x84>)
 800f1d6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f1da:	490a      	ldr	r1, [pc, #40]	@ (800f204 <ethernet_output+0x88>)
 800f1dc:	480a      	ldr	r0, [pc, #40]	@ (800f208 <ethernet_output+0x8c>)
 800f1de:	f000 f915 	bl	800f40c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	68b9      	ldr	r1, [r7, #8]
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	4798      	blx	r3
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	e002      	b.n	800f1f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f1f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f1f2:	f06f 0301 	mvn.w	r3, #1
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3718      	adds	r7, #24
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	08012b84 	.word	0x08012b84
 800f204:	08012bbc 	.word	0x08012bbc
 800f208:	08012bf0 	.word	0x08012bf0

0800f20c <rand>:
 800f20c:	4b16      	ldr	r3, [pc, #88]	@ (800f268 <rand+0x5c>)
 800f20e:	b510      	push	{r4, lr}
 800f210:	681c      	ldr	r4, [r3, #0]
 800f212:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f214:	b9b3      	cbnz	r3, 800f244 <rand+0x38>
 800f216:	2018      	movs	r0, #24
 800f218:	f000 fa4a 	bl	800f6b0 <malloc>
 800f21c:	4602      	mov	r2, r0
 800f21e:	6320      	str	r0, [r4, #48]	@ 0x30
 800f220:	b920      	cbnz	r0, 800f22c <rand+0x20>
 800f222:	4b12      	ldr	r3, [pc, #72]	@ (800f26c <rand+0x60>)
 800f224:	4812      	ldr	r0, [pc, #72]	@ (800f270 <rand+0x64>)
 800f226:	2152      	movs	r1, #82	@ 0x52
 800f228:	f000 f9da 	bl	800f5e0 <__assert_func>
 800f22c:	4911      	ldr	r1, [pc, #68]	@ (800f274 <rand+0x68>)
 800f22e:	4b12      	ldr	r3, [pc, #72]	@ (800f278 <rand+0x6c>)
 800f230:	e9c0 1300 	strd	r1, r3, [r0]
 800f234:	4b11      	ldr	r3, [pc, #68]	@ (800f27c <rand+0x70>)
 800f236:	6083      	str	r3, [r0, #8]
 800f238:	230b      	movs	r3, #11
 800f23a:	8183      	strh	r3, [r0, #12]
 800f23c:	2100      	movs	r1, #0
 800f23e:	2001      	movs	r0, #1
 800f240:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f244:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f246:	480e      	ldr	r0, [pc, #56]	@ (800f280 <rand+0x74>)
 800f248:	690b      	ldr	r3, [r1, #16]
 800f24a:	694c      	ldr	r4, [r1, #20]
 800f24c:	4a0d      	ldr	r2, [pc, #52]	@ (800f284 <rand+0x78>)
 800f24e:	4358      	muls	r0, r3
 800f250:	fb02 0004 	mla	r0, r2, r4, r0
 800f254:	fba3 3202 	umull	r3, r2, r3, r2
 800f258:	3301      	adds	r3, #1
 800f25a:	eb40 0002 	adc.w	r0, r0, r2
 800f25e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f262:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f266:	bd10      	pop	{r4, pc}
 800f268:	20000038 	.word	0x20000038
 800f26c:	08012d1e 	.word	0x08012d1e
 800f270:	08012d35 	.word	0x08012d35
 800f274:	abcd330e 	.word	0xabcd330e
 800f278:	e66d1234 	.word	0xe66d1234
 800f27c:	0005deec 	.word	0x0005deec
 800f280:	5851f42d 	.word	0x5851f42d
 800f284:	4c957f2d 	.word	0x4c957f2d

0800f288 <std>:
 800f288:	2300      	movs	r3, #0
 800f28a:	b510      	push	{r4, lr}
 800f28c:	4604      	mov	r4, r0
 800f28e:	e9c0 3300 	strd	r3, r3, [r0]
 800f292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f296:	6083      	str	r3, [r0, #8]
 800f298:	8181      	strh	r1, [r0, #12]
 800f29a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f29c:	81c2      	strh	r2, [r0, #14]
 800f29e:	6183      	str	r3, [r0, #24]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	2208      	movs	r2, #8
 800f2a4:	305c      	adds	r0, #92	@ 0x5c
 800f2a6:	f000 f916 	bl	800f4d6 <memset>
 800f2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f2e0 <std+0x58>)
 800f2ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800f2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f2e4 <std+0x5c>)
 800f2b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f2e8 <std+0x60>)
 800f2b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f2ec <std+0x64>)
 800f2b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f0 <std+0x68>)
 800f2bc:	6224      	str	r4, [r4, #32]
 800f2be:	429c      	cmp	r4, r3
 800f2c0:	d006      	beq.n	800f2d0 <std+0x48>
 800f2c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f2c6:	4294      	cmp	r4, r2
 800f2c8:	d002      	beq.n	800f2d0 <std+0x48>
 800f2ca:	33d0      	adds	r3, #208	@ 0xd0
 800f2cc:	429c      	cmp	r4, r3
 800f2ce:	d105      	bne.n	800f2dc <std+0x54>
 800f2d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d8:	f000 b970 	b.w	800f5bc <__retarget_lock_init_recursive>
 800f2dc:	bd10      	pop	{r4, pc}
 800f2de:	bf00      	nop
 800f2e0:	0800f431 	.word	0x0800f431
 800f2e4:	0800f453 	.word	0x0800f453
 800f2e8:	0800f48b 	.word	0x0800f48b
 800f2ec:	0800f4af 	.word	0x0800f4af
 800f2f0:	20008914 	.word	0x20008914

0800f2f4 <stdio_exit_handler>:
 800f2f4:	4a02      	ldr	r2, [pc, #8]	@ (800f300 <stdio_exit_handler+0xc>)
 800f2f6:	4903      	ldr	r1, [pc, #12]	@ (800f304 <stdio_exit_handler+0x10>)
 800f2f8:	4803      	ldr	r0, [pc, #12]	@ (800f308 <stdio_exit_handler+0x14>)
 800f2fa:	f000 b869 	b.w	800f3d0 <_fwalk_sglue>
 800f2fe:	bf00      	nop
 800f300:	2000002c 	.word	0x2000002c
 800f304:	0800fec5 	.word	0x0800fec5
 800f308:	2000003c 	.word	0x2000003c

0800f30c <cleanup_stdio>:
 800f30c:	6841      	ldr	r1, [r0, #4]
 800f30e:	4b0c      	ldr	r3, [pc, #48]	@ (800f340 <cleanup_stdio+0x34>)
 800f310:	4299      	cmp	r1, r3
 800f312:	b510      	push	{r4, lr}
 800f314:	4604      	mov	r4, r0
 800f316:	d001      	beq.n	800f31c <cleanup_stdio+0x10>
 800f318:	f000 fdd4 	bl	800fec4 <_fflush_r>
 800f31c:	68a1      	ldr	r1, [r4, #8]
 800f31e:	4b09      	ldr	r3, [pc, #36]	@ (800f344 <cleanup_stdio+0x38>)
 800f320:	4299      	cmp	r1, r3
 800f322:	d002      	beq.n	800f32a <cleanup_stdio+0x1e>
 800f324:	4620      	mov	r0, r4
 800f326:	f000 fdcd 	bl	800fec4 <_fflush_r>
 800f32a:	68e1      	ldr	r1, [r4, #12]
 800f32c:	4b06      	ldr	r3, [pc, #24]	@ (800f348 <cleanup_stdio+0x3c>)
 800f32e:	4299      	cmp	r1, r3
 800f330:	d004      	beq.n	800f33c <cleanup_stdio+0x30>
 800f332:	4620      	mov	r0, r4
 800f334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f338:	f000 bdc4 	b.w	800fec4 <_fflush_r>
 800f33c:	bd10      	pop	{r4, pc}
 800f33e:	bf00      	nop
 800f340:	20008914 	.word	0x20008914
 800f344:	2000897c 	.word	0x2000897c
 800f348:	200089e4 	.word	0x200089e4

0800f34c <global_stdio_init.part.0>:
 800f34c:	b510      	push	{r4, lr}
 800f34e:	4b0b      	ldr	r3, [pc, #44]	@ (800f37c <global_stdio_init.part.0+0x30>)
 800f350:	4c0b      	ldr	r4, [pc, #44]	@ (800f380 <global_stdio_init.part.0+0x34>)
 800f352:	4a0c      	ldr	r2, [pc, #48]	@ (800f384 <global_stdio_init.part.0+0x38>)
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	4620      	mov	r0, r4
 800f358:	2200      	movs	r2, #0
 800f35a:	2104      	movs	r1, #4
 800f35c:	f7ff ff94 	bl	800f288 <std>
 800f360:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f364:	2201      	movs	r2, #1
 800f366:	2109      	movs	r1, #9
 800f368:	f7ff ff8e 	bl	800f288 <std>
 800f36c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f370:	2202      	movs	r2, #2
 800f372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f376:	2112      	movs	r1, #18
 800f378:	f7ff bf86 	b.w	800f288 <std>
 800f37c:	20008a4c 	.word	0x20008a4c
 800f380:	20008914 	.word	0x20008914
 800f384:	0800f2f5 	.word	0x0800f2f5

0800f388 <__sfp_lock_acquire>:
 800f388:	4801      	ldr	r0, [pc, #4]	@ (800f390 <__sfp_lock_acquire+0x8>)
 800f38a:	f000 b918 	b.w	800f5be <__retarget_lock_acquire_recursive>
 800f38e:	bf00      	nop
 800f390:	20008a55 	.word	0x20008a55

0800f394 <__sfp_lock_release>:
 800f394:	4801      	ldr	r0, [pc, #4]	@ (800f39c <__sfp_lock_release+0x8>)
 800f396:	f000 b913 	b.w	800f5c0 <__retarget_lock_release_recursive>
 800f39a:	bf00      	nop
 800f39c:	20008a55 	.word	0x20008a55

0800f3a0 <__sinit>:
 800f3a0:	b510      	push	{r4, lr}
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	f7ff fff0 	bl	800f388 <__sfp_lock_acquire>
 800f3a8:	6a23      	ldr	r3, [r4, #32]
 800f3aa:	b11b      	cbz	r3, 800f3b4 <__sinit+0x14>
 800f3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3b0:	f7ff bff0 	b.w	800f394 <__sfp_lock_release>
 800f3b4:	4b04      	ldr	r3, [pc, #16]	@ (800f3c8 <__sinit+0x28>)
 800f3b6:	6223      	str	r3, [r4, #32]
 800f3b8:	4b04      	ldr	r3, [pc, #16]	@ (800f3cc <__sinit+0x2c>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1f5      	bne.n	800f3ac <__sinit+0xc>
 800f3c0:	f7ff ffc4 	bl	800f34c <global_stdio_init.part.0>
 800f3c4:	e7f2      	b.n	800f3ac <__sinit+0xc>
 800f3c6:	bf00      	nop
 800f3c8:	0800f30d 	.word	0x0800f30d
 800f3cc:	20008a4c 	.word	0x20008a4c

0800f3d0 <_fwalk_sglue>:
 800f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3d4:	4607      	mov	r7, r0
 800f3d6:	4688      	mov	r8, r1
 800f3d8:	4614      	mov	r4, r2
 800f3da:	2600      	movs	r6, #0
 800f3dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3e0:	f1b9 0901 	subs.w	r9, r9, #1
 800f3e4:	d505      	bpl.n	800f3f2 <_fwalk_sglue+0x22>
 800f3e6:	6824      	ldr	r4, [r4, #0]
 800f3e8:	2c00      	cmp	r4, #0
 800f3ea:	d1f7      	bne.n	800f3dc <_fwalk_sglue+0xc>
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f2:	89ab      	ldrh	r3, [r5, #12]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d907      	bls.n	800f408 <_fwalk_sglue+0x38>
 800f3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	d003      	beq.n	800f408 <_fwalk_sglue+0x38>
 800f400:	4629      	mov	r1, r5
 800f402:	4638      	mov	r0, r7
 800f404:	47c0      	blx	r8
 800f406:	4306      	orrs	r6, r0
 800f408:	3568      	adds	r5, #104	@ 0x68
 800f40a:	e7e9      	b.n	800f3e0 <_fwalk_sglue+0x10>

0800f40c <iprintf>:
 800f40c:	b40f      	push	{r0, r1, r2, r3}
 800f40e:	b507      	push	{r0, r1, r2, lr}
 800f410:	4906      	ldr	r1, [pc, #24]	@ (800f42c <iprintf+0x20>)
 800f412:	ab04      	add	r3, sp, #16
 800f414:	6808      	ldr	r0, [r1, #0]
 800f416:	f853 2b04 	ldr.w	r2, [r3], #4
 800f41a:	6881      	ldr	r1, [r0, #8]
 800f41c:	9301      	str	r3, [sp, #4]
 800f41e:	f000 fa27 	bl	800f870 <_vfiprintf_r>
 800f422:	b003      	add	sp, #12
 800f424:	f85d eb04 	ldr.w	lr, [sp], #4
 800f428:	b004      	add	sp, #16
 800f42a:	4770      	bx	lr
 800f42c:	20000038 	.word	0x20000038

0800f430 <__sread>:
 800f430:	b510      	push	{r4, lr}
 800f432:	460c      	mov	r4, r1
 800f434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f438:	f000 f878 	bl	800f52c <_read_r>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	bfab      	itete	ge
 800f440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f442:	89a3      	ldrhlt	r3, [r4, #12]
 800f444:	181b      	addge	r3, r3, r0
 800f446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f44a:	bfac      	ite	ge
 800f44c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f44e:	81a3      	strhlt	r3, [r4, #12]
 800f450:	bd10      	pop	{r4, pc}

0800f452 <__swrite>:
 800f452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f456:	461f      	mov	r7, r3
 800f458:	898b      	ldrh	r3, [r1, #12]
 800f45a:	05db      	lsls	r3, r3, #23
 800f45c:	4605      	mov	r5, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	4616      	mov	r6, r2
 800f462:	d505      	bpl.n	800f470 <__swrite+0x1e>
 800f464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f468:	2302      	movs	r3, #2
 800f46a:	2200      	movs	r2, #0
 800f46c:	f000 f84c 	bl	800f508 <_lseek_r>
 800f470:	89a3      	ldrh	r3, [r4, #12]
 800f472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f47a:	81a3      	strh	r3, [r4, #12]
 800f47c:	4632      	mov	r2, r6
 800f47e:	463b      	mov	r3, r7
 800f480:	4628      	mov	r0, r5
 800f482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f486:	f000 b863 	b.w	800f550 <_write_r>

0800f48a <__sseek>:
 800f48a:	b510      	push	{r4, lr}
 800f48c:	460c      	mov	r4, r1
 800f48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f492:	f000 f839 	bl	800f508 <_lseek_r>
 800f496:	1c43      	adds	r3, r0, #1
 800f498:	89a3      	ldrh	r3, [r4, #12]
 800f49a:	bf15      	itete	ne
 800f49c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f49e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f4a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f4a6:	81a3      	strheq	r3, [r4, #12]
 800f4a8:	bf18      	it	ne
 800f4aa:	81a3      	strhne	r3, [r4, #12]
 800f4ac:	bd10      	pop	{r4, pc}

0800f4ae <__sclose>:
 800f4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b2:	f000 b819 	b.w	800f4e8 <_close_r>

0800f4b6 <memcmp>:
 800f4b6:	b510      	push	{r4, lr}
 800f4b8:	3901      	subs	r1, #1
 800f4ba:	4402      	add	r2, r0
 800f4bc:	4290      	cmp	r0, r2
 800f4be:	d101      	bne.n	800f4c4 <memcmp+0xe>
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	e005      	b.n	800f4d0 <memcmp+0x1a>
 800f4c4:	7803      	ldrb	r3, [r0, #0]
 800f4c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f4ca:	42a3      	cmp	r3, r4
 800f4cc:	d001      	beq.n	800f4d2 <memcmp+0x1c>
 800f4ce:	1b18      	subs	r0, r3, r4
 800f4d0:	bd10      	pop	{r4, pc}
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	e7f2      	b.n	800f4bc <memcmp+0x6>

0800f4d6 <memset>:
 800f4d6:	4402      	add	r2, r0
 800f4d8:	4603      	mov	r3, r0
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d100      	bne.n	800f4e0 <memset+0xa>
 800f4de:	4770      	bx	lr
 800f4e0:	f803 1b01 	strb.w	r1, [r3], #1
 800f4e4:	e7f9      	b.n	800f4da <memset+0x4>
	...

0800f4e8 <_close_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4d06      	ldr	r5, [pc, #24]	@ (800f504 <_close_r+0x1c>)
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	f7f1 fbd2 	bl	8000c9c <_close>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d102      	bne.n	800f502 <_close_r+0x1a>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	b103      	cbz	r3, 800f502 <_close_r+0x1a>
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	bd38      	pop	{r3, r4, r5, pc}
 800f504:	20008a50 	.word	0x20008a50

0800f508 <_lseek_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d07      	ldr	r5, [pc, #28]	@ (800f528 <_lseek_r+0x20>)
 800f50c:	4604      	mov	r4, r0
 800f50e:	4608      	mov	r0, r1
 800f510:	4611      	mov	r1, r2
 800f512:	2200      	movs	r2, #0
 800f514:	602a      	str	r2, [r5, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	f7f1 fbe7 	bl	8000cea <_lseek>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	d102      	bne.n	800f526 <_lseek_r+0x1e>
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	b103      	cbz	r3, 800f526 <_lseek_r+0x1e>
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	20008a50 	.word	0x20008a50

0800f52c <_read_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4d07      	ldr	r5, [pc, #28]	@ (800f54c <_read_r+0x20>)
 800f530:	4604      	mov	r4, r0
 800f532:	4608      	mov	r0, r1
 800f534:	4611      	mov	r1, r2
 800f536:	2200      	movs	r2, #0
 800f538:	602a      	str	r2, [r5, #0]
 800f53a:	461a      	mov	r2, r3
 800f53c:	f7f1 fb75 	bl	8000c2a <_read>
 800f540:	1c43      	adds	r3, r0, #1
 800f542:	d102      	bne.n	800f54a <_read_r+0x1e>
 800f544:	682b      	ldr	r3, [r5, #0]
 800f546:	b103      	cbz	r3, 800f54a <_read_r+0x1e>
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	bd38      	pop	{r3, r4, r5, pc}
 800f54c:	20008a50 	.word	0x20008a50

0800f550 <_write_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4d07      	ldr	r5, [pc, #28]	@ (800f570 <_write_r+0x20>)
 800f554:	4604      	mov	r4, r0
 800f556:	4608      	mov	r0, r1
 800f558:	4611      	mov	r1, r2
 800f55a:	2200      	movs	r2, #0
 800f55c:	602a      	str	r2, [r5, #0]
 800f55e:	461a      	mov	r2, r3
 800f560:	f7f1 fb80 	bl	8000c64 <_write>
 800f564:	1c43      	adds	r3, r0, #1
 800f566:	d102      	bne.n	800f56e <_write_r+0x1e>
 800f568:	682b      	ldr	r3, [r5, #0]
 800f56a:	b103      	cbz	r3, 800f56e <_write_r+0x1e>
 800f56c:	6023      	str	r3, [r4, #0]
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
 800f570:	20008a50 	.word	0x20008a50

0800f574 <__libc_init_array>:
 800f574:	b570      	push	{r4, r5, r6, lr}
 800f576:	4d0d      	ldr	r5, [pc, #52]	@ (800f5ac <__libc_init_array+0x38>)
 800f578:	4c0d      	ldr	r4, [pc, #52]	@ (800f5b0 <__libc_init_array+0x3c>)
 800f57a:	1b64      	subs	r4, r4, r5
 800f57c:	10a4      	asrs	r4, r4, #2
 800f57e:	2600      	movs	r6, #0
 800f580:	42a6      	cmp	r6, r4
 800f582:	d109      	bne.n	800f598 <__libc_init_array+0x24>
 800f584:	4d0b      	ldr	r5, [pc, #44]	@ (800f5b4 <__libc_init_array+0x40>)
 800f586:	4c0c      	ldr	r4, [pc, #48]	@ (800f5b8 <__libc_init_array+0x44>)
 800f588:	f000 fe4a 	bl	8010220 <_init>
 800f58c:	1b64      	subs	r4, r4, r5
 800f58e:	10a4      	asrs	r4, r4, #2
 800f590:	2600      	movs	r6, #0
 800f592:	42a6      	cmp	r6, r4
 800f594:	d105      	bne.n	800f5a2 <__libc_init_array+0x2e>
 800f596:	bd70      	pop	{r4, r5, r6, pc}
 800f598:	f855 3b04 	ldr.w	r3, [r5], #4
 800f59c:	4798      	blx	r3
 800f59e:	3601      	adds	r6, #1
 800f5a0:	e7ee      	b.n	800f580 <__libc_init_array+0xc>
 800f5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5a6:	4798      	blx	r3
 800f5a8:	3601      	adds	r6, #1
 800f5aa:	e7f2      	b.n	800f592 <__libc_init_array+0x1e>
 800f5ac:	08012e04 	.word	0x08012e04
 800f5b0:	08012e04 	.word	0x08012e04
 800f5b4:	08012e04 	.word	0x08012e04
 800f5b8:	08012e08 	.word	0x08012e08

0800f5bc <__retarget_lock_init_recursive>:
 800f5bc:	4770      	bx	lr

0800f5be <__retarget_lock_acquire_recursive>:
 800f5be:	4770      	bx	lr

0800f5c0 <__retarget_lock_release_recursive>:
 800f5c0:	4770      	bx	lr

0800f5c2 <memcpy>:
 800f5c2:	440a      	add	r2, r1
 800f5c4:	4291      	cmp	r1, r2
 800f5c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5ca:	d100      	bne.n	800f5ce <memcpy+0xc>
 800f5cc:	4770      	bx	lr
 800f5ce:	b510      	push	{r4, lr}
 800f5d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5d8:	4291      	cmp	r1, r2
 800f5da:	d1f9      	bne.n	800f5d0 <memcpy+0xe>
 800f5dc:	bd10      	pop	{r4, pc}
	...

0800f5e0 <__assert_func>:
 800f5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5e2:	4614      	mov	r4, r2
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	4b09      	ldr	r3, [pc, #36]	@ (800f60c <__assert_func+0x2c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	68d8      	ldr	r0, [r3, #12]
 800f5ee:	b954      	cbnz	r4, 800f606 <__assert_func+0x26>
 800f5f0:	4b07      	ldr	r3, [pc, #28]	@ (800f610 <__assert_func+0x30>)
 800f5f2:	461c      	mov	r4, r3
 800f5f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5f8:	9100      	str	r1, [sp, #0]
 800f5fa:	462b      	mov	r3, r5
 800f5fc:	4905      	ldr	r1, [pc, #20]	@ (800f614 <__assert_func+0x34>)
 800f5fe:	f000 fc89 	bl	800ff14 <fiprintf>
 800f602:	f000 fd3d 	bl	8010080 <abort>
 800f606:	4b04      	ldr	r3, [pc, #16]	@ (800f618 <__assert_func+0x38>)
 800f608:	e7f4      	b.n	800f5f4 <__assert_func+0x14>
 800f60a:	bf00      	nop
 800f60c:	20000038 	.word	0x20000038
 800f610:	08012dc8 	.word	0x08012dc8
 800f614:	08012d9a 	.word	0x08012d9a
 800f618:	08012d8d 	.word	0x08012d8d

0800f61c <_free_r>:
 800f61c:	b538      	push	{r3, r4, r5, lr}
 800f61e:	4605      	mov	r5, r0
 800f620:	2900      	cmp	r1, #0
 800f622:	d041      	beq.n	800f6a8 <_free_r+0x8c>
 800f624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f628:	1f0c      	subs	r4, r1, #4
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	bfb8      	it	lt
 800f62e:	18e4      	addlt	r4, r4, r3
 800f630:	f000 f8e8 	bl	800f804 <__malloc_lock>
 800f634:	4a1d      	ldr	r2, [pc, #116]	@ (800f6ac <_free_r+0x90>)
 800f636:	6813      	ldr	r3, [r2, #0]
 800f638:	b933      	cbnz	r3, 800f648 <_free_r+0x2c>
 800f63a:	6063      	str	r3, [r4, #4]
 800f63c:	6014      	str	r4, [r2, #0]
 800f63e:	4628      	mov	r0, r5
 800f640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f644:	f000 b8e4 	b.w	800f810 <__malloc_unlock>
 800f648:	42a3      	cmp	r3, r4
 800f64a:	d908      	bls.n	800f65e <_free_r+0x42>
 800f64c:	6820      	ldr	r0, [r4, #0]
 800f64e:	1821      	adds	r1, r4, r0
 800f650:	428b      	cmp	r3, r1
 800f652:	bf01      	itttt	eq
 800f654:	6819      	ldreq	r1, [r3, #0]
 800f656:	685b      	ldreq	r3, [r3, #4]
 800f658:	1809      	addeq	r1, r1, r0
 800f65a:	6021      	streq	r1, [r4, #0]
 800f65c:	e7ed      	b.n	800f63a <_free_r+0x1e>
 800f65e:	461a      	mov	r2, r3
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	b10b      	cbz	r3, 800f668 <_free_r+0x4c>
 800f664:	42a3      	cmp	r3, r4
 800f666:	d9fa      	bls.n	800f65e <_free_r+0x42>
 800f668:	6811      	ldr	r1, [r2, #0]
 800f66a:	1850      	adds	r0, r2, r1
 800f66c:	42a0      	cmp	r0, r4
 800f66e:	d10b      	bne.n	800f688 <_free_r+0x6c>
 800f670:	6820      	ldr	r0, [r4, #0]
 800f672:	4401      	add	r1, r0
 800f674:	1850      	adds	r0, r2, r1
 800f676:	4283      	cmp	r3, r0
 800f678:	6011      	str	r1, [r2, #0]
 800f67a:	d1e0      	bne.n	800f63e <_free_r+0x22>
 800f67c:	6818      	ldr	r0, [r3, #0]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	6053      	str	r3, [r2, #4]
 800f682:	4408      	add	r0, r1
 800f684:	6010      	str	r0, [r2, #0]
 800f686:	e7da      	b.n	800f63e <_free_r+0x22>
 800f688:	d902      	bls.n	800f690 <_free_r+0x74>
 800f68a:	230c      	movs	r3, #12
 800f68c:	602b      	str	r3, [r5, #0]
 800f68e:	e7d6      	b.n	800f63e <_free_r+0x22>
 800f690:	6820      	ldr	r0, [r4, #0]
 800f692:	1821      	adds	r1, r4, r0
 800f694:	428b      	cmp	r3, r1
 800f696:	bf04      	itt	eq
 800f698:	6819      	ldreq	r1, [r3, #0]
 800f69a:	685b      	ldreq	r3, [r3, #4]
 800f69c:	6063      	str	r3, [r4, #4]
 800f69e:	bf04      	itt	eq
 800f6a0:	1809      	addeq	r1, r1, r0
 800f6a2:	6021      	streq	r1, [r4, #0]
 800f6a4:	6054      	str	r4, [r2, #4]
 800f6a6:	e7ca      	b.n	800f63e <_free_r+0x22>
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20008a5c 	.word	0x20008a5c

0800f6b0 <malloc>:
 800f6b0:	4b02      	ldr	r3, [pc, #8]	@ (800f6bc <malloc+0xc>)
 800f6b2:	4601      	mov	r1, r0
 800f6b4:	6818      	ldr	r0, [r3, #0]
 800f6b6:	f000 b825 	b.w	800f704 <_malloc_r>
 800f6ba:	bf00      	nop
 800f6bc:	20000038 	.word	0x20000038

0800f6c0 <sbrk_aligned>:
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	4e0f      	ldr	r6, [pc, #60]	@ (800f700 <sbrk_aligned+0x40>)
 800f6c4:	460c      	mov	r4, r1
 800f6c6:	6831      	ldr	r1, [r6, #0]
 800f6c8:	4605      	mov	r5, r0
 800f6ca:	b911      	cbnz	r1, 800f6d2 <sbrk_aligned+0x12>
 800f6cc:	f000 fcc8 	bl	8010060 <_sbrk_r>
 800f6d0:	6030      	str	r0, [r6, #0]
 800f6d2:	4621      	mov	r1, r4
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f000 fcc3 	bl	8010060 <_sbrk_r>
 800f6da:	1c43      	adds	r3, r0, #1
 800f6dc:	d103      	bne.n	800f6e6 <sbrk_aligned+0x26>
 800f6de:	f04f 34ff 	mov.w	r4, #4294967295
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	1cc4      	adds	r4, r0, #3
 800f6e8:	f024 0403 	bic.w	r4, r4, #3
 800f6ec:	42a0      	cmp	r0, r4
 800f6ee:	d0f8      	beq.n	800f6e2 <sbrk_aligned+0x22>
 800f6f0:	1a21      	subs	r1, r4, r0
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f000 fcb4 	bl	8010060 <_sbrk_r>
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	d1f2      	bne.n	800f6e2 <sbrk_aligned+0x22>
 800f6fc:	e7ef      	b.n	800f6de <sbrk_aligned+0x1e>
 800f6fe:	bf00      	nop
 800f700:	20008a58 	.word	0x20008a58

0800f704 <_malloc_r>:
 800f704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f708:	1ccd      	adds	r5, r1, #3
 800f70a:	f025 0503 	bic.w	r5, r5, #3
 800f70e:	3508      	adds	r5, #8
 800f710:	2d0c      	cmp	r5, #12
 800f712:	bf38      	it	cc
 800f714:	250c      	movcc	r5, #12
 800f716:	2d00      	cmp	r5, #0
 800f718:	4606      	mov	r6, r0
 800f71a:	db01      	blt.n	800f720 <_malloc_r+0x1c>
 800f71c:	42a9      	cmp	r1, r5
 800f71e:	d904      	bls.n	800f72a <_malloc_r+0x26>
 800f720:	230c      	movs	r3, #12
 800f722:	6033      	str	r3, [r6, #0]
 800f724:	2000      	movs	r0, #0
 800f726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f72a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f800 <_malloc_r+0xfc>
 800f72e:	f000 f869 	bl	800f804 <__malloc_lock>
 800f732:	f8d8 3000 	ldr.w	r3, [r8]
 800f736:	461c      	mov	r4, r3
 800f738:	bb44      	cbnz	r4, 800f78c <_malloc_r+0x88>
 800f73a:	4629      	mov	r1, r5
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7ff ffbf 	bl	800f6c0 <sbrk_aligned>
 800f742:	1c43      	adds	r3, r0, #1
 800f744:	4604      	mov	r4, r0
 800f746:	d158      	bne.n	800f7fa <_malloc_r+0xf6>
 800f748:	f8d8 4000 	ldr.w	r4, [r8]
 800f74c:	4627      	mov	r7, r4
 800f74e:	2f00      	cmp	r7, #0
 800f750:	d143      	bne.n	800f7da <_malloc_r+0xd6>
 800f752:	2c00      	cmp	r4, #0
 800f754:	d04b      	beq.n	800f7ee <_malloc_r+0xea>
 800f756:	6823      	ldr	r3, [r4, #0]
 800f758:	4639      	mov	r1, r7
 800f75a:	4630      	mov	r0, r6
 800f75c:	eb04 0903 	add.w	r9, r4, r3
 800f760:	f000 fc7e 	bl	8010060 <_sbrk_r>
 800f764:	4581      	cmp	r9, r0
 800f766:	d142      	bne.n	800f7ee <_malloc_r+0xea>
 800f768:	6821      	ldr	r1, [r4, #0]
 800f76a:	1a6d      	subs	r5, r5, r1
 800f76c:	4629      	mov	r1, r5
 800f76e:	4630      	mov	r0, r6
 800f770:	f7ff ffa6 	bl	800f6c0 <sbrk_aligned>
 800f774:	3001      	adds	r0, #1
 800f776:	d03a      	beq.n	800f7ee <_malloc_r+0xea>
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	442b      	add	r3, r5
 800f77c:	6023      	str	r3, [r4, #0]
 800f77e:	f8d8 3000 	ldr.w	r3, [r8]
 800f782:	685a      	ldr	r2, [r3, #4]
 800f784:	bb62      	cbnz	r2, 800f7e0 <_malloc_r+0xdc>
 800f786:	f8c8 7000 	str.w	r7, [r8]
 800f78a:	e00f      	b.n	800f7ac <_malloc_r+0xa8>
 800f78c:	6822      	ldr	r2, [r4, #0]
 800f78e:	1b52      	subs	r2, r2, r5
 800f790:	d420      	bmi.n	800f7d4 <_malloc_r+0xd0>
 800f792:	2a0b      	cmp	r2, #11
 800f794:	d917      	bls.n	800f7c6 <_malloc_r+0xc2>
 800f796:	1961      	adds	r1, r4, r5
 800f798:	42a3      	cmp	r3, r4
 800f79a:	6025      	str	r5, [r4, #0]
 800f79c:	bf18      	it	ne
 800f79e:	6059      	strne	r1, [r3, #4]
 800f7a0:	6863      	ldr	r3, [r4, #4]
 800f7a2:	bf08      	it	eq
 800f7a4:	f8c8 1000 	streq.w	r1, [r8]
 800f7a8:	5162      	str	r2, [r4, r5]
 800f7aa:	604b      	str	r3, [r1, #4]
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f000 f82f 	bl	800f810 <__malloc_unlock>
 800f7b2:	f104 000b 	add.w	r0, r4, #11
 800f7b6:	1d23      	adds	r3, r4, #4
 800f7b8:	f020 0007 	bic.w	r0, r0, #7
 800f7bc:	1ac2      	subs	r2, r0, r3
 800f7be:	bf1c      	itt	ne
 800f7c0:	1a1b      	subne	r3, r3, r0
 800f7c2:	50a3      	strne	r3, [r4, r2]
 800f7c4:	e7af      	b.n	800f726 <_malloc_r+0x22>
 800f7c6:	6862      	ldr	r2, [r4, #4]
 800f7c8:	42a3      	cmp	r3, r4
 800f7ca:	bf0c      	ite	eq
 800f7cc:	f8c8 2000 	streq.w	r2, [r8]
 800f7d0:	605a      	strne	r2, [r3, #4]
 800f7d2:	e7eb      	b.n	800f7ac <_malloc_r+0xa8>
 800f7d4:	4623      	mov	r3, r4
 800f7d6:	6864      	ldr	r4, [r4, #4]
 800f7d8:	e7ae      	b.n	800f738 <_malloc_r+0x34>
 800f7da:	463c      	mov	r4, r7
 800f7dc:	687f      	ldr	r7, [r7, #4]
 800f7de:	e7b6      	b.n	800f74e <_malloc_r+0x4a>
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	42a3      	cmp	r3, r4
 800f7e6:	d1fb      	bne.n	800f7e0 <_malloc_r+0xdc>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	6053      	str	r3, [r2, #4]
 800f7ec:	e7de      	b.n	800f7ac <_malloc_r+0xa8>
 800f7ee:	230c      	movs	r3, #12
 800f7f0:	6033      	str	r3, [r6, #0]
 800f7f2:	4630      	mov	r0, r6
 800f7f4:	f000 f80c 	bl	800f810 <__malloc_unlock>
 800f7f8:	e794      	b.n	800f724 <_malloc_r+0x20>
 800f7fa:	6005      	str	r5, [r0, #0]
 800f7fc:	e7d6      	b.n	800f7ac <_malloc_r+0xa8>
 800f7fe:	bf00      	nop
 800f800:	20008a5c 	.word	0x20008a5c

0800f804 <__malloc_lock>:
 800f804:	4801      	ldr	r0, [pc, #4]	@ (800f80c <__malloc_lock+0x8>)
 800f806:	f7ff beda 	b.w	800f5be <__retarget_lock_acquire_recursive>
 800f80a:	bf00      	nop
 800f80c:	20008a54 	.word	0x20008a54

0800f810 <__malloc_unlock>:
 800f810:	4801      	ldr	r0, [pc, #4]	@ (800f818 <__malloc_unlock+0x8>)
 800f812:	f7ff bed5 	b.w	800f5c0 <__retarget_lock_release_recursive>
 800f816:	bf00      	nop
 800f818:	20008a54 	.word	0x20008a54

0800f81c <__sfputc_r>:
 800f81c:	6893      	ldr	r3, [r2, #8]
 800f81e:	3b01      	subs	r3, #1
 800f820:	2b00      	cmp	r3, #0
 800f822:	b410      	push	{r4}
 800f824:	6093      	str	r3, [r2, #8]
 800f826:	da08      	bge.n	800f83a <__sfputc_r+0x1e>
 800f828:	6994      	ldr	r4, [r2, #24]
 800f82a:	42a3      	cmp	r3, r4
 800f82c:	db01      	blt.n	800f832 <__sfputc_r+0x16>
 800f82e:	290a      	cmp	r1, #10
 800f830:	d103      	bne.n	800f83a <__sfputc_r+0x1e>
 800f832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f836:	f000 bb7f 	b.w	800ff38 <__swbuf_r>
 800f83a:	6813      	ldr	r3, [r2, #0]
 800f83c:	1c58      	adds	r0, r3, #1
 800f83e:	6010      	str	r0, [r2, #0]
 800f840:	7019      	strb	r1, [r3, #0]
 800f842:	4608      	mov	r0, r1
 800f844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f848:	4770      	bx	lr

0800f84a <__sfputs_r>:
 800f84a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84c:	4606      	mov	r6, r0
 800f84e:	460f      	mov	r7, r1
 800f850:	4614      	mov	r4, r2
 800f852:	18d5      	adds	r5, r2, r3
 800f854:	42ac      	cmp	r4, r5
 800f856:	d101      	bne.n	800f85c <__sfputs_r+0x12>
 800f858:	2000      	movs	r0, #0
 800f85a:	e007      	b.n	800f86c <__sfputs_r+0x22>
 800f85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f860:	463a      	mov	r2, r7
 800f862:	4630      	mov	r0, r6
 800f864:	f7ff ffda 	bl	800f81c <__sfputc_r>
 800f868:	1c43      	adds	r3, r0, #1
 800f86a:	d1f3      	bne.n	800f854 <__sfputs_r+0xa>
 800f86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f870 <_vfiprintf_r>:
 800f870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f874:	460d      	mov	r5, r1
 800f876:	b09d      	sub	sp, #116	@ 0x74
 800f878:	4614      	mov	r4, r2
 800f87a:	4698      	mov	r8, r3
 800f87c:	4606      	mov	r6, r0
 800f87e:	b118      	cbz	r0, 800f888 <_vfiprintf_r+0x18>
 800f880:	6a03      	ldr	r3, [r0, #32]
 800f882:	b90b      	cbnz	r3, 800f888 <_vfiprintf_r+0x18>
 800f884:	f7ff fd8c 	bl	800f3a0 <__sinit>
 800f888:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f88a:	07d9      	lsls	r1, r3, #31
 800f88c:	d405      	bmi.n	800f89a <_vfiprintf_r+0x2a>
 800f88e:	89ab      	ldrh	r3, [r5, #12]
 800f890:	059a      	lsls	r2, r3, #22
 800f892:	d402      	bmi.n	800f89a <_vfiprintf_r+0x2a>
 800f894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f896:	f7ff fe92 	bl	800f5be <__retarget_lock_acquire_recursive>
 800f89a:	89ab      	ldrh	r3, [r5, #12]
 800f89c:	071b      	lsls	r3, r3, #28
 800f89e:	d501      	bpl.n	800f8a4 <_vfiprintf_r+0x34>
 800f8a0:	692b      	ldr	r3, [r5, #16]
 800f8a2:	b99b      	cbnz	r3, 800f8cc <_vfiprintf_r+0x5c>
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f000 fb84 	bl	800ffb4 <__swsetup_r>
 800f8ac:	b170      	cbz	r0, 800f8cc <_vfiprintf_r+0x5c>
 800f8ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8b0:	07dc      	lsls	r4, r3, #31
 800f8b2:	d504      	bpl.n	800f8be <_vfiprintf_r+0x4e>
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b8:	b01d      	add	sp, #116	@ 0x74
 800f8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8be:	89ab      	ldrh	r3, [r5, #12]
 800f8c0:	0598      	lsls	r0, r3, #22
 800f8c2:	d4f7      	bmi.n	800f8b4 <_vfiprintf_r+0x44>
 800f8c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8c6:	f7ff fe7b 	bl	800f5c0 <__retarget_lock_release_recursive>
 800f8ca:	e7f3      	b.n	800f8b4 <_vfiprintf_r+0x44>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8d0:	2320      	movs	r3, #32
 800f8d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8da:	2330      	movs	r3, #48	@ 0x30
 800f8dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa8c <_vfiprintf_r+0x21c>
 800f8e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8e4:	f04f 0901 	mov.w	r9, #1
 800f8e8:	4623      	mov	r3, r4
 800f8ea:	469a      	mov	sl, r3
 800f8ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8f0:	b10a      	cbz	r2, 800f8f6 <_vfiprintf_r+0x86>
 800f8f2:	2a25      	cmp	r2, #37	@ 0x25
 800f8f4:	d1f9      	bne.n	800f8ea <_vfiprintf_r+0x7a>
 800f8f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f8fa:	d00b      	beq.n	800f914 <_vfiprintf_r+0xa4>
 800f8fc:	465b      	mov	r3, fp
 800f8fe:	4622      	mov	r2, r4
 800f900:	4629      	mov	r1, r5
 800f902:	4630      	mov	r0, r6
 800f904:	f7ff ffa1 	bl	800f84a <__sfputs_r>
 800f908:	3001      	adds	r0, #1
 800f90a:	f000 80a7 	beq.w	800fa5c <_vfiprintf_r+0x1ec>
 800f90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f910:	445a      	add	r2, fp
 800f912:	9209      	str	r2, [sp, #36]	@ 0x24
 800f914:	f89a 3000 	ldrb.w	r3, [sl]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f000 809f 	beq.w	800fa5c <_vfiprintf_r+0x1ec>
 800f91e:	2300      	movs	r3, #0
 800f920:	f04f 32ff 	mov.w	r2, #4294967295
 800f924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f928:	f10a 0a01 	add.w	sl, sl, #1
 800f92c:	9304      	str	r3, [sp, #16]
 800f92e:	9307      	str	r3, [sp, #28]
 800f930:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f934:	931a      	str	r3, [sp, #104]	@ 0x68
 800f936:	4654      	mov	r4, sl
 800f938:	2205      	movs	r2, #5
 800f93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f93e:	4853      	ldr	r0, [pc, #332]	@ (800fa8c <_vfiprintf_r+0x21c>)
 800f940:	f7f0 fc56 	bl	80001f0 <memchr>
 800f944:	9a04      	ldr	r2, [sp, #16]
 800f946:	b9d8      	cbnz	r0, 800f980 <_vfiprintf_r+0x110>
 800f948:	06d1      	lsls	r1, r2, #27
 800f94a:	bf44      	itt	mi
 800f94c:	2320      	movmi	r3, #32
 800f94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f952:	0713      	lsls	r3, r2, #28
 800f954:	bf44      	itt	mi
 800f956:	232b      	movmi	r3, #43	@ 0x2b
 800f958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f95c:	f89a 3000 	ldrb.w	r3, [sl]
 800f960:	2b2a      	cmp	r3, #42	@ 0x2a
 800f962:	d015      	beq.n	800f990 <_vfiprintf_r+0x120>
 800f964:	9a07      	ldr	r2, [sp, #28]
 800f966:	4654      	mov	r4, sl
 800f968:	2000      	movs	r0, #0
 800f96a:	f04f 0c0a 	mov.w	ip, #10
 800f96e:	4621      	mov	r1, r4
 800f970:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f974:	3b30      	subs	r3, #48	@ 0x30
 800f976:	2b09      	cmp	r3, #9
 800f978:	d94b      	bls.n	800fa12 <_vfiprintf_r+0x1a2>
 800f97a:	b1b0      	cbz	r0, 800f9aa <_vfiprintf_r+0x13a>
 800f97c:	9207      	str	r2, [sp, #28]
 800f97e:	e014      	b.n	800f9aa <_vfiprintf_r+0x13a>
 800f980:	eba0 0308 	sub.w	r3, r0, r8
 800f984:	fa09 f303 	lsl.w	r3, r9, r3
 800f988:	4313      	orrs	r3, r2
 800f98a:	9304      	str	r3, [sp, #16]
 800f98c:	46a2      	mov	sl, r4
 800f98e:	e7d2      	b.n	800f936 <_vfiprintf_r+0xc6>
 800f990:	9b03      	ldr	r3, [sp, #12]
 800f992:	1d19      	adds	r1, r3, #4
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	9103      	str	r1, [sp, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	bfbb      	ittet	lt
 800f99c:	425b      	neglt	r3, r3
 800f99e:	f042 0202 	orrlt.w	r2, r2, #2
 800f9a2:	9307      	strge	r3, [sp, #28]
 800f9a4:	9307      	strlt	r3, [sp, #28]
 800f9a6:	bfb8      	it	lt
 800f9a8:	9204      	strlt	r2, [sp, #16]
 800f9aa:	7823      	ldrb	r3, [r4, #0]
 800f9ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9ae:	d10a      	bne.n	800f9c6 <_vfiprintf_r+0x156>
 800f9b0:	7863      	ldrb	r3, [r4, #1]
 800f9b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9b4:	d132      	bne.n	800fa1c <_vfiprintf_r+0x1ac>
 800f9b6:	9b03      	ldr	r3, [sp, #12]
 800f9b8:	1d1a      	adds	r2, r3, #4
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	9203      	str	r2, [sp, #12]
 800f9be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9c2:	3402      	adds	r4, #2
 800f9c4:	9305      	str	r3, [sp, #20]
 800f9c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa9c <_vfiprintf_r+0x22c>
 800f9ca:	7821      	ldrb	r1, [r4, #0]
 800f9cc:	2203      	movs	r2, #3
 800f9ce:	4650      	mov	r0, sl
 800f9d0:	f7f0 fc0e 	bl	80001f0 <memchr>
 800f9d4:	b138      	cbz	r0, 800f9e6 <_vfiprintf_r+0x176>
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	eba0 000a 	sub.w	r0, r0, sl
 800f9dc:	2240      	movs	r2, #64	@ 0x40
 800f9de:	4082      	lsls	r2, r0
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	3401      	adds	r4, #1
 800f9e4:	9304      	str	r3, [sp, #16]
 800f9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ea:	4829      	ldr	r0, [pc, #164]	@ (800fa90 <_vfiprintf_r+0x220>)
 800f9ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9f0:	2206      	movs	r2, #6
 800f9f2:	f7f0 fbfd 	bl	80001f0 <memchr>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	d03f      	beq.n	800fa7a <_vfiprintf_r+0x20a>
 800f9fa:	4b26      	ldr	r3, [pc, #152]	@ (800fa94 <_vfiprintf_r+0x224>)
 800f9fc:	bb1b      	cbnz	r3, 800fa46 <_vfiprintf_r+0x1d6>
 800f9fe:	9b03      	ldr	r3, [sp, #12]
 800fa00:	3307      	adds	r3, #7
 800fa02:	f023 0307 	bic.w	r3, r3, #7
 800fa06:	3308      	adds	r3, #8
 800fa08:	9303      	str	r3, [sp, #12]
 800fa0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa0c:	443b      	add	r3, r7
 800fa0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa10:	e76a      	b.n	800f8e8 <_vfiprintf_r+0x78>
 800fa12:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa16:	460c      	mov	r4, r1
 800fa18:	2001      	movs	r0, #1
 800fa1a:	e7a8      	b.n	800f96e <_vfiprintf_r+0xfe>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	3401      	adds	r4, #1
 800fa20:	9305      	str	r3, [sp, #20]
 800fa22:	4619      	mov	r1, r3
 800fa24:	f04f 0c0a 	mov.w	ip, #10
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa2e:	3a30      	subs	r2, #48	@ 0x30
 800fa30:	2a09      	cmp	r2, #9
 800fa32:	d903      	bls.n	800fa3c <_vfiprintf_r+0x1cc>
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d0c6      	beq.n	800f9c6 <_vfiprintf_r+0x156>
 800fa38:	9105      	str	r1, [sp, #20]
 800fa3a:	e7c4      	b.n	800f9c6 <_vfiprintf_r+0x156>
 800fa3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa40:	4604      	mov	r4, r0
 800fa42:	2301      	movs	r3, #1
 800fa44:	e7f0      	b.n	800fa28 <_vfiprintf_r+0x1b8>
 800fa46:	ab03      	add	r3, sp, #12
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	462a      	mov	r2, r5
 800fa4c:	4b12      	ldr	r3, [pc, #72]	@ (800fa98 <_vfiprintf_r+0x228>)
 800fa4e:	a904      	add	r1, sp, #16
 800fa50:	4630      	mov	r0, r6
 800fa52:	f3af 8000 	nop.w
 800fa56:	4607      	mov	r7, r0
 800fa58:	1c78      	adds	r0, r7, #1
 800fa5a:	d1d6      	bne.n	800fa0a <_vfiprintf_r+0x19a>
 800fa5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa5e:	07d9      	lsls	r1, r3, #31
 800fa60:	d405      	bmi.n	800fa6e <_vfiprintf_r+0x1fe>
 800fa62:	89ab      	ldrh	r3, [r5, #12]
 800fa64:	059a      	lsls	r2, r3, #22
 800fa66:	d402      	bmi.n	800fa6e <_vfiprintf_r+0x1fe>
 800fa68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa6a:	f7ff fda9 	bl	800f5c0 <__retarget_lock_release_recursive>
 800fa6e:	89ab      	ldrh	r3, [r5, #12]
 800fa70:	065b      	lsls	r3, r3, #25
 800fa72:	f53f af1f 	bmi.w	800f8b4 <_vfiprintf_r+0x44>
 800fa76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa78:	e71e      	b.n	800f8b8 <_vfiprintf_r+0x48>
 800fa7a:	ab03      	add	r3, sp, #12
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	462a      	mov	r2, r5
 800fa80:	4b05      	ldr	r3, [pc, #20]	@ (800fa98 <_vfiprintf_r+0x228>)
 800fa82:	a904      	add	r1, sp, #16
 800fa84:	4630      	mov	r0, r6
 800fa86:	f000 f879 	bl	800fb7c <_printf_i>
 800fa8a:	e7e4      	b.n	800fa56 <_vfiprintf_r+0x1e6>
 800fa8c:	08012dc9 	.word	0x08012dc9
 800fa90:	08012dd3 	.word	0x08012dd3
 800fa94:	00000000 	.word	0x00000000
 800fa98:	0800f84b 	.word	0x0800f84b
 800fa9c:	08012dcf 	.word	0x08012dcf

0800faa0 <_printf_common>:
 800faa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faa4:	4616      	mov	r6, r2
 800faa6:	4698      	mov	r8, r3
 800faa8:	688a      	ldr	r2, [r1, #8]
 800faaa:	690b      	ldr	r3, [r1, #16]
 800faac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fab0:	4293      	cmp	r3, r2
 800fab2:	bfb8      	it	lt
 800fab4:	4613      	movlt	r3, r2
 800fab6:	6033      	str	r3, [r6, #0]
 800fab8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fabc:	4607      	mov	r7, r0
 800fabe:	460c      	mov	r4, r1
 800fac0:	b10a      	cbz	r2, 800fac6 <_printf_common+0x26>
 800fac2:	3301      	adds	r3, #1
 800fac4:	6033      	str	r3, [r6, #0]
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	0699      	lsls	r1, r3, #26
 800faca:	bf42      	ittt	mi
 800facc:	6833      	ldrmi	r3, [r6, #0]
 800face:	3302      	addmi	r3, #2
 800fad0:	6033      	strmi	r3, [r6, #0]
 800fad2:	6825      	ldr	r5, [r4, #0]
 800fad4:	f015 0506 	ands.w	r5, r5, #6
 800fad8:	d106      	bne.n	800fae8 <_printf_common+0x48>
 800fada:	f104 0a19 	add.w	sl, r4, #25
 800fade:	68e3      	ldr	r3, [r4, #12]
 800fae0:	6832      	ldr	r2, [r6, #0]
 800fae2:	1a9b      	subs	r3, r3, r2
 800fae4:	42ab      	cmp	r3, r5
 800fae6:	dc26      	bgt.n	800fb36 <_printf_common+0x96>
 800fae8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800faec:	6822      	ldr	r2, [r4, #0]
 800faee:	3b00      	subs	r3, #0
 800faf0:	bf18      	it	ne
 800faf2:	2301      	movne	r3, #1
 800faf4:	0692      	lsls	r2, r2, #26
 800faf6:	d42b      	bmi.n	800fb50 <_printf_common+0xb0>
 800faf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fafc:	4641      	mov	r1, r8
 800fafe:	4638      	mov	r0, r7
 800fb00:	47c8      	blx	r9
 800fb02:	3001      	adds	r0, #1
 800fb04:	d01e      	beq.n	800fb44 <_printf_common+0xa4>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	6922      	ldr	r2, [r4, #16]
 800fb0a:	f003 0306 	and.w	r3, r3, #6
 800fb0e:	2b04      	cmp	r3, #4
 800fb10:	bf02      	ittt	eq
 800fb12:	68e5      	ldreq	r5, [r4, #12]
 800fb14:	6833      	ldreq	r3, [r6, #0]
 800fb16:	1aed      	subeq	r5, r5, r3
 800fb18:	68a3      	ldr	r3, [r4, #8]
 800fb1a:	bf0c      	ite	eq
 800fb1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb20:	2500      	movne	r5, #0
 800fb22:	4293      	cmp	r3, r2
 800fb24:	bfc4      	itt	gt
 800fb26:	1a9b      	subgt	r3, r3, r2
 800fb28:	18ed      	addgt	r5, r5, r3
 800fb2a:	2600      	movs	r6, #0
 800fb2c:	341a      	adds	r4, #26
 800fb2e:	42b5      	cmp	r5, r6
 800fb30:	d11a      	bne.n	800fb68 <_printf_common+0xc8>
 800fb32:	2000      	movs	r0, #0
 800fb34:	e008      	b.n	800fb48 <_printf_common+0xa8>
 800fb36:	2301      	movs	r3, #1
 800fb38:	4652      	mov	r2, sl
 800fb3a:	4641      	mov	r1, r8
 800fb3c:	4638      	mov	r0, r7
 800fb3e:	47c8      	blx	r9
 800fb40:	3001      	adds	r0, #1
 800fb42:	d103      	bne.n	800fb4c <_printf_common+0xac>
 800fb44:	f04f 30ff 	mov.w	r0, #4294967295
 800fb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb4c:	3501      	adds	r5, #1
 800fb4e:	e7c6      	b.n	800fade <_printf_common+0x3e>
 800fb50:	18e1      	adds	r1, r4, r3
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	2030      	movs	r0, #48	@ 0x30
 800fb56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb5a:	4422      	add	r2, r4
 800fb5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb64:	3302      	adds	r3, #2
 800fb66:	e7c7      	b.n	800faf8 <_printf_common+0x58>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	4622      	mov	r2, r4
 800fb6c:	4641      	mov	r1, r8
 800fb6e:	4638      	mov	r0, r7
 800fb70:	47c8      	blx	r9
 800fb72:	3001      	adds	r0, #1
 800fb74:	d0e6      	beq.n	800fb44 <_printf_common+0xa4>
 800fb76:	3601      	adds	r6, #1
 800fb78:	e7d9      	b.n	800fb2e <_printf_common+0x8e>
	...

0800fb7c <_printf_i>:
 800fb7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb80:	7e0f      	ldrb	r7, [r1, #24]
 800fb82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb84:	2f78      	cmp	r7, #120	@ 0x78
 800fb86:	4691      	mov	r9, r2
 800fb88:	4680      	mov	r8, r0
 800fb8a:	460c      	mov	r4, r1
 800fb8c:	469a      	mov	sl, r3
 800fb8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb92:	d807      	bhi.n	800fba4 <_printf_i+0x28>
 800fb94:	2f62      	cmp	r7, #98	@ 0x62
 800fb96:	d80a      	bhi.n	800fbae <_printf_i+0x32>
 800fb98:	2f00      	cmp	r7, #0
 800fb9a:	f000 80d2 	beq.w	800fd42 <_printf_i+0x1c6>
 800fb9e:	2f58      	cmp	r7, #88	@ 0x58
 800fba0:	f000 80b9 	beq.w	800fd16 <_printf_i+0x19a>
 800fba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fba8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fbac:	e03a      	b.n	800fc24 <_printf_i+0xa8>
 800fbae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fbb2:	2b15      	cmp	r3, #21
 800fbb4:	d8f6      	bhi.n	800fba4 <_printf_i+0x28>
 800fbb6:	a101      	add	r1, pc, #4	@ (adr r1, 800fbbc <_printf_i+0x40>)
 800fbb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbbc:	0800fc15 	.word	0x0800fc15
 800fbc0:	0800fc29 	.word	0x0800fc29
 800fbc4:	0800fba5 	.word	0x0800fba5
 800fbc8:	0800fba5 	.word	0x0800fba5
 800fbcc:	0800fba5 	.word	0x0800fba5
 800fbd0:	0800fba5 	.word	0x0800fba5
 800fbd4:	0800fc29 	.word	0x0800fc29
 800fbd8:	0800fba5 	.word	0x0800fba5
 800fbdc:	0800fba5 	.word	0x0800fba5
 800fbe0:	0800fba5 	.word	0x0800fba5
 800fbe4:	0800fba5 	.word	0x0800fba5
 800fbe8:	0800fd29 	.word	0x0800fd29
 800fbec:	0800fc53 	.word	0x0800fc53
 800fbf0:	0800fce3 	.word	0x0800fce3
 800fbf4:	0800fba5 	.word	0x0800fba5
 800fbf8:	0800fba5 	.word	0x0800fba5
 800fbfc:	0800fd4b 	.word	0x0800fd4b
 800fc00:	0800fba5 	.word	0x0800fba5
 800fc04:	0800fc53 	.word	0x0800fc53
 800fc08:	0800fba5 	.word	0x0800fba5
 800fc0c:	0800fba5 	.word	0x0800fba5
 800fc10:	0800fceb 	.word	0x0800fceb
 800fc14:	6833      	ldr	r3, [r6, #0]
 800fc16:	1d1a      	adds	r2, r3, #4
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	6032      	str	r2, [r6, #0]
 800fc1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc24:	2301      	movs	r3, #1
 800fc26:	e09d      	b.n	800fd64 <_printf_i+0x1e8>
 800fc28:	6833      	ldr	r3, [r6, #0]
 800fc2a:	6820      	ldr	r0, [r4, #0]
 800fc2c:	1d19      	adds	r1, r3, #4
 800fc2e:	6031      	str	r1, [r6, #0]
 800fc30:	0606      	lsls	r6, r0, #24
 800fc32:	d501      	bpl.n	800fc38 <_printf_i+0xbc>
 800fc34:	681d      	ldr	r5, [r3, #0]
 800fc36:	e003      	b.n	800fc40 <_printf_i+0xc4>
 800fc38:	0645      	lsls	r5, r0, #25
 800fc3a:	d5fb      	bpl.n	800fc34 <_printf_i+0xb8>
 800fc3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc40:	2d00      	cmp	r5, #0
 800fc42:	da03      	bge.n	800fc4c <_printf_i+0xd0>
 800fc44:	232d      	movs	r3, #45	@ 0x2d
 800fc46:	426d      	negs	r5, r5
 800fc48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc4c:	4859      	ldr	r0, [pc, #356]	@ (800fdb4 <_printf_i+0x238>)
 800fc4e:	230a      	movs	r3, #10
 800fc50:	e011      	b.n	800fc76 <_printf_i+0xfa>
 800fc52:	6821      	ldr	r1, [r4, #0]
 800fc54:	6833      	ldr	r3, [r6, #0]
 800fc56:	0608      	lsls	r0, r1, #24
 800fc58:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc5c:	d402      	bmi.n	800fc64 <_printf_i+0xe8>
 800fc5e:	0649      	lsls	r1, r1, #25
 800fc60:	bf48      	it	mi
 800fc62:	b2ad      	uxthmi	r5, r5
 800fc64:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc66:	4853      	ldr	r0, [pc, #332]	@ (800fdb4 <_printf_i+0x238>)
 800fc68:	6033      	str	r3, [r6, #0]
 800fc6a:	bf14      	ite	ne
 800fc6c:	230a      	movne	r3, #10
 800fc6e:	2308      	moveq	r3, #8
 800fc70:	2100      	movs	r1, #0
 800fc72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc76:	6866      	ldr	r6, [r4, #4]
 800fc78:	60a6      	str	r6, [r4, #8]
 800fc7a:	2e00      	cmp	r6, #0
 800fc7c:	bfa2      	ittt	ge
 800fc7e:	6821      	ldrge	r1, [r4, #0]
 800fc80:	f021 0104 	bicge.w	r1, r1, #4
 800fc84:	6021      	strge	r1, [r4, #0]
 800fc86:	b90d      	cbnz	r5, 800fc8c <_printf_i+0x110>
 800fc88:	2e00      	cmp	r6, #0
 800fc8a:	d04b      	beq.n	800fd24 <_printf_i+0x1a8>
 800fc8c:	4616      	mov	r6, r2
 800fc8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc92:	fb03 5711 	mls	r7, r3, r1, r5
 800fc96:	5dc7      	ldrb	r7, [r0, r7]
 800fc98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc9c:	462f      	mov	r7, r5
 800fc9e:	42bb      	cmp	r3, r7
 800fca0:	460d      	mov	r5, r1
 800fca2:	d9f4      	bls.n	800fc8e <_printf_i+0x112>
 800fca4:	2b08      	cmp	r3, #8
 800fca6:	d10b      	bne.n	800fcc0 <_printf_i+0x144>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	07df      	lsls	r7, r3, #31
 800fcac:	d508      	bpl.n	800fcc0 <_printf_i+0x144>
 800fcae:	6923      	ldr	r3, [r4, #16]
 800fcb0:	6861      	ldr	r1, [r4, #4]
 800fcb2:	4299      	cmp	r1, r3
 800fcb4:	bfde      	ittt	le
 800fcb6:	2330      	movle	r3, #48	@ 0x30
 800fcb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fcc0:	1b92      	subs	r2, r2, r6
 800fcc2:	6122      	str	r2, [r4, #16]
 800fcc4:	f8cd a000 	str.w	sl, [sp]
 800fcc8:	464b      	mov	r3, r9
 800fcca:	aa03      	add	r2, sp, #12
 800fccc:	4621      	mov	r1, r4
 800fcce:	4640      	mov	r0, r8
 800fcd0:	f7ff fee6 	bl	800faa0 <_printf_common>
 800fcd4:	3001      	adds	r0, #1
 800fcd6:	d14a      	bne.n	800fd6e <_printf_i+0x1f2>
 800fcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcdc:	b004      	add	sp, #16
 800fcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	f043 0320 	orr.w	r3, r3, #32
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	4833      	ldr	r0, [pc, #204]	@ (800fdb8 <_printf_i+0x23c>)
 800fcec:	2778      	movs	r7, #120	@ 0x78
 800fcee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	6831      	ldr	r1, [r6, #0]
 800fcf6:	061f      	lsls	r7, r3, #24
 800fcf8:	f851 5b04 	ldr.w	r5, [r1], #4
 800fcfc:	d402      	bmi.n	800fd04 <_printf_i+0x188>
 800fcfe:	065f      	lsls	r7, r3, #25
 800fd00:	bf48      	it	mi
 800fd02:	b2ad      	uxthmi	r5, r5
 800fd04:	6031      	str	r1, [r6, #0]
 800fd06:	07d9      	lsls	r1, r3, #31
 800fd08:	bf44      	itt	mi
 800fd0a:	f043 0320 	orrmi.w	r3, r3, #32
 800fd0e:	6023      	strmi	r3, [r4, #0]
 800fd10:	b11d      	cbz	r5, 800fd1a <_printf_i+0x19e>
 800fd12:	2310      	movs	r3, #16
 800fd14:	e7ac      	b.n	800fc70 <_printf_i+0xf4>
 800fd16:	4827      	ldr	r0, [pc, #156]	@ (800fdb4 <_printf_i+0x238>)
 800fd18:	e7e9      	b.n	800fcee <_printf_i+0x172>
 800fd1a:	6823      	ldr	r3, [r4, #0]
 800fd1c:	f023 0320 	bic.w	r3, r3, #32
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	e7f6      	b.n	800fd12 <_printf_i+0x196>
 800fd24:	4616      	mov	r6, r2
 800fd26:	e7bd      	b.n	800fca4 <_printf_i+0x128>
 800fd28:	6833      	ldr	r3, [r6, #0]
 800fd2a:	6825      	ldr	r5, [r4, #0]
 800fd2c:	6961      	ldr	r1, [r4, #20]
 800fd2e:	1d18      	adds	r0, r3, #4
 800fd30:	6030      	str	r0, [r6, #0]
 800fd32:	062e      	lsls	r6, r5, #24
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	d501      	bpl.n	800fd3c <_printf_i+0x1c0>
 800fd38:	6019      	str	r1, [r3, #0]
 800fd3a:	e002      	b.n	800fd42 <_printf_i+0x1c6>
 800fd3c:	0668      	lsls	r0, r5, #25
 800fd3e:	d5fb      	bpl.n	800fd38 <_printf_i+0x1bc>
 800fd40:	8019      	strh	r1, [r3, #0]
 800fd42:	2300      	movs	r3, #0
 800fd44:	6123      	str	r3, [r4, #16]
 800fd46:	4616      	mov	r6, r2
 800fd48:	e7bc      	b.n	800fcc4 <_printf_i+0x148>
 800fd4a:	6833      	ldr	r3, [r6, #0]
 800fd4c:	1d1a      	adds	r2, r3, #4
 800fd4e:	6032      	str	r2, [r6, #0]
 800fd50:	681e      	ldr	r6, [r3, #0]
 800fd52:	6862      	ldr	r2, [r4, #4]
 800fd54:	2100      	movs	r1, #0
 800fd56:	4630      	mov	r0, r6
 800fd58:	f7f0 fa4a 	bl	80001f0 <memchr>
 800fd5c:	b108      	cbz	r0, 800fd62 <_printf_i+0x1e6>
 800fd5e:	1b80      	subs	r0, r0, r6
 800fd60:	6060      	str	r0, [r4, #4]
 800fd62:	6863      	ldr	r3, [r4, #4]
 800fd64:	6123      	str	r3, [r4, #16]
 800fd66:	2300      	movs	r3, #0
 800fd68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd6c:	e7aa      	b.n	800fcc4 <_printf_i+0x148>
 800fd6e:	6923      	ldr	r3, [r4, #16]
 800fd70:	4632      	mov	r2, r6
 800fd72:	4649      	mov	r1, r9
 800fd74:	4640      	mov	r0, r8
 800fd76:	47d0      	blx	sl
 800fd78:	3001      	adds	r0, #1
 800fd7a:	d0ad      	beq.n	800fcd8 <_printf_i+0x15c>
 800fd7c:	6823      	ldr	r3, [r4, #0]
 800fd7e:	079b      	lsls	r3, r3, #30
 800fd80:	d413      	bmi.n	800fdaa <_printf_i+0x22e>
 800fd82:	68e0      	ldr	r0, [r4, #12]
 800fd84:	9b03      	ldr	r3, [sp, #12]
 800fd86:	4298      	cmp	r0, r3
 800fd88:	bfb8      	it	lt
 800fd8a:	4618      	movlt	r0, r3
 800fd8c:	e7a6      	b.n	800fcdc <_printf_i+0x160>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	4632      	mov	r2, r6
 800fd92:	4649      	mov	r1, r9
 800fd94:	4640      	mov	r0, r8
 800fd96:	47d0      	blx	sl
 800fd98:	3001      	adds	r0, #1
 800fd9a:	d09d      	beq.n	800fcd8 <_printf_i+0x15c>
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	68e3      	ldr	r3, [r4, #12]
 800fda0:	9903      	ldr	r1, [sp, #12]
 800fda2:	1a5b      	subs	r3, r3, r1
 800fda4:	42ab      	cmp	r3, r5
 800fda6:	dcf2      	bgt.n	800fd8e <_printf_i+0x212>
 800fda8:	e7eb      	b.n	800fd82 <_printf_i+0x206>
 800fdaa:	2500      	movs	r5, #0
 800fdac:	f104 0619 	add.w	r6, r4, #25
 800fdb0:	e7f5      	b.n	800fd9e <_printf_i+0x222>
 800fdb2:	bf00      	nop
 800fdb4:	08012dda 	.word	0x08012dda
 800fdb8:	08012deb 	.word	0x08012deb

0800fdbc <__sflush_r>:
 800fdbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc4:	0716      	lsls	r6, r2, #28
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	460c      	mov	r4, r1
 800fdca:	d454      	bmi.n	800fe76 <__sflush_r+0xba>
 800fdcc:	684b      	ldr	r3, [r1, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	dc02      	bgt.n	800fdd8 <__sflush_r+0x1c>
 800fdd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	dd48      	ble.n	800fe6a <__sflush_r+0xae>
 800fdd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fdda:	2e00      	cmp	r6, #0
 800fddc:	d045      	beq.n	800fe6a <__sflush_r+0xae>
 800fdde:	2300      	movs	r3, #0
 800fde0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fde4:	682f      	ldr	r7, [r5, #0]
 800fde6:	6a21      	ldr	r1, [r4, #32]
 800fde8:	602b      	str	r3, [r5, #0]
 800fdea:	d030      	beq.n	800fe4e <__sflush_r+0x92>
 800fdec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fdee:	89a3      	ldrh	r3, [r4, #12]
 800fdf0:	0759      	lsls	r1, r3, #29
 800fdf2:	d505      	bpl.n	800fe00 <__sflush_r+0x44>
 800fdf4:	6863      	ldr	r3, [r4, #4]
 800fdf6:	1ad2      	subs	r2, r2, r3
 800fdf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fdfa:	b10b      	cbz	r3, 800fe00 <__sflush_r+0x44>
 800fdfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fdfe:	1ad2      	subs	r2, r2, r3
 800fe00:	2300      	movs	r3, #0
 800fe02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe04:	6a21      	ldr	r1, [r4, #32]
 800fe06:	4628      	mov	r0, r5
 800fe08:	47b0      	blx	r6
 800fe0a:	1c43      	adds	r3, r0, #1
 800fe0c:	89a3      	ldrh	r3, [r4, #12]
 800fe0e:	d106      	bne.n	800fe1e <__sflush_r+0x62>
 800fe10:	6829      	ldr	r1, [r5, #0]
 800fe12:	291d      	cmp	r1, #29
 800fe14:	d82b      	bhi.n	800fe6e <__sflush_r+0xb2>
 800fe16:	4a2a      	ldr	r2, [pc, #168]	@ (800fec0 <__sflush_r+0x104>)
 800fe18:	410a      	asrs	r2, r1
 800fe1a:	07d6      	lsls	r6, r2, #31
 800fe1c:	d427      	bmi.n	800fe6e <__sflush_r+0xb2>
 800fe1e:	2200      	movs	r2, #0
 800fe20:	6062      	str	r2, [r4, #4]
 800fe22:	04d9      	lsls	r1, r3, #19
 800fe24:	6922      	ldr	r2, [r4, #16]
 800fe26:	6022      	str	r2, [r4, #0]
 800fe28:	d504      	bpl.n	800fe34 <__sflush_r+0x78>
 800fe2a:	1c42      	adds	r2, r0, #1
 800fe2c:	d101      	bne.n	800fe32 <__sflush_r+0x76>
 800fe2e:	682b      	ldr	r3, [r5, #0]
 800fe30:	b903      	cbnz	r3, 800fe34 <__sflush_r+0x78>
 800fe32:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe36:	602f      	str	r7, [r5, #0]
 800fe38:	b1b9      	cbz	r1, 800fe6a <__sflush_r+0xae>
 800fe3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe3e:	4299      	cmp	r1, r3
 800fe40:	d002      	beq.n	800fe48 <__sflush_r+0x8c>
 800fe42:	4628      	mov	r0, r5
 800fe44:	f7ff fbea 	bl	800f61c <_free_r>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe4c:	e00d      	b.n	800fe6a <__sflush_r+0xae>
 800fe4e:	2301      	movs	r3, #1
 800fe50:	4628      	mov	r0, r5
 800fe52:	47b0      	blx	r6
 800fe54:	4602      	mov	r2, r0
 800fe56:	1c50      	adds	r0, r2, #1
 800fe58:	d1c9      	bne.n	800fdee <__sflush_r+0x32>
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0c6      	beq.n	800fdee <__sflush_r+0x32>
 800fe60:	2b1d      	cmp	r3, #29
 800fe62:	d001      	beq.n	800fe68 <__sflush_r+0xac>
 800fe64:	2b16      	cmp	r3, #22
 800fe66:	d11e      	bne.n	800fea6 <__sflush_r+0xea>
 800fe68:	602f      	str	r7, [r5, #0]
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	e022      	b.n	800feb4 <__sflush_r+0xf8>
 800fe6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	e01b      	b.n	800feae <__sflush_r+0xf2>
 800fe76:	690f      	ldr	r7, [r1, #16]
 800fe78:	2f00      	cmp	r7, #0
 800fe7a:	d0f6      	beq.n	800fe6a <__sflush_r+0xae>
 800fe7c:	0793      	lsls	r3, r2, #30
 800fe7e:	680e      	ldr	r6, [r1, #0]
 800fe80:	bf08      	it	eq
 800fe82:	694b      	ldreq	r3, [r1, #20]
 800fe84:	600f      	str	r7, [r1, #0]
 800fe86:	bf18      	it	ne
 800fe88:	2300      	movne	r3, #0
 800fe8a:	eba6 0807 	sub.w	r8, r6, r7
 800fe8e:	608b      	str	r3, [r1, #8]
 800fe90:	f1b8 0f00 	cmp.w	r8, #0
 800fe94:	dde9      	ble.n	800fe6a <__sflush_r+0xae>
 800fe96:	6a21      	ldr	r1, [r4, #32]
 800fe98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe9a:	4643      	mov	r3, r8
 800fe9c:	463a      	mov	r2, r7
 800fe9e:	4628      	mov	r0, r5
 800fea0:	47b0      	blx	r6
 800fea2:	2800      	cmp	r0, #0
 800fea4:	dc08      	bgt.n	800feb8 <__sflush_r+0xfc>
 800fea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feae:	81a3      	strh	r3, [r4, #12]
 800feb0:	f04f 30ff 	mov.w	r0, #4294967295
 800feb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb8:	4407      	add	r7, r0
 800feba:	eba8 0800 	sub.w	r8, r8, r0
 800febe:	e7e7      	b.n	800fe90 <__sflush_r+0xd4>
 800fec0:	dfbffffe 	.word	0xdfbffffe

0800fec4 <_fflush_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	690b      	ldr	r3, [r1, #16]
 800fec8:	4605      	mov	r5, r0
 800feca:	460c      	mov	r4, r1
 800fecc:	b913      	cbnz	r3, 800fed4 <_fflush_r+0x10>
 800fece:	2500      	movs	r5, #0
 800fed0:	4628      	mov	r0, r5
 800fed2:	bd38      	pop	{r3, r4, r5, pc}
 800fed4:	b118      	cbz	r0, 800fede <_fflush_r+0x1a>
 800fed6:	6a03      	ldr	r3, [r0, #32]
 800fed8:	b90b      	cbnz	r3, 800fede <_fflush_r+0x1a>
 800feda:	f7ff fa61 	bl	800f3a0 <__sinit>
 800fede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d0f3      	beq.n	800fece <_fflush_r+0xa>
 800fee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fee8:	07d0      	lsls	r0, r2, #31
 800feea:	d404      	bmi.n	800fef6 <_fflush_r+0x32>
 800feec:	0599      	lsls	r1, r3, #22
 800feee:	d402      	bmi.n	800fef6 <_fflush_r+0x32>
 800fef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fef2:	f7ff fb64 	bl	800f5be <__retarget_lock_acquire_recursive>
 800fef6:	4628      	mov	r0, r5
 800fef8:	4621      	mov	r1, r4
 800fefa:	f7ff ff5f 	bl	800fdbc <__sflush_r>
 800fefe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff00:	07da      	lsls	r2, r3, #31
 800ff02:	4605      	mov	r5, r0
 800ff04:	d4e4      	bmi.n	800fed0 <_fflush_r+0xc>
 800ff06:	89a3      	ldrh	r3, [r4, #12]
 800ff08:	059b      	lsls	r3, r3, #22
 800ff0a:	d4e1      	bmi.n	800fed0 <_fflush_r+0xc>
 800ff0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff0e:	f7ff fb57 	bl	800f5c0 <__retarget_lock_release_recursive>
 800ff12:	e7dd      	b.n	800fed0 <_fflush_r+0xc>

0800ff14 <fiprintf>:
 800ff14:	b40e      	push	{r1, r2, r3}
 800ff16:	b503      	push	{r0, r1, lr}
 800ff18:	4601      	mov	r1, r0
 800ff1a:	ab03      	add	r3, sp, #12
 800ff1c:	4805      	ldr	r0, [pc, #20]	@ (800ff34 <fiprintf+0x20>)
 800ff1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff22:	6800      	ldr	r0, [r0, #0]
 800ff24:	9301      	str	r3, [sp, #4]
 800ff26:	f7ff fca3 	bl	800f870 <_vfiprintf_r>
 800ff2a:	b002      	add	sp, #8
 800ff2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff30:	b003      	add	sp, #12
 800ff32:	4770      	bx	lr
 800ff34:	20000038 	.word	0x20000038

0800ff38 <__swbuf_r>:
 800ff38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3a:	460e      	mov	r6, r1
 800ff3c:	4614      	mov	r4, r2
 800ff3e:	4605      	mov	r5, r0
 800ff40:	b118      	cbz	r0, 800ff4a <__swbuf_r+0x12>
 800ff42:	6a03      	ldr	r3, [r0, #32]
 800ff44:	b90b      	cbnz	r3, 800ff4a <__swbuf_r+0x12>
 800ff46:	f7ff fa2b 	bl	800f3a0 <__sinit>
 800ff4a:	69a3      	ldr	r3, [r4, #24]
 800ff4c:	60a3      	str	r3, [r4, #8]
 800ff4e:	89a3      	ldrh	r3, [r4, #12]
 800ff50:	071a      	lsls	r2, r3, #28
 800ff52:	d501      	bpl.n	800ff58 <__swbuf_r+0x20>
 800ff54:	6923      	ldr	r3, [r4, #16]
 800ff56:	b943      	cbnz	r3, 800ff6a <__swbuf_r+0x32>
 800ff58:	4621      	mov	r1, r4
 800ff5a:	4628      	mov	r0, r5
 800ff5c:	f000 f82a 	bl	800ffb4 <__swsetup_r>
 800ff60:	b118      	cbz	r0, 800ff6a <__swbuf_r+0x32>
 800ff62:	f04f 37ff 	mov.w	r7, #4294967295
 800ff66:	4638      	mov	r0, r7
 800ff68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	6922      	ldr	r2, [r4, #16]
 800ff6e:	1a98      	subs	r0, r3, r2
 800ff70:	6963      	ldr	r3, [r4, #20]
 800ff72:	b2f6      	uxtb	r6, r6
 800ff74:	4283      	cmp	r3, r0
 800ff76:	4637      	mov	r7, r6
 800ff78:	dc05      	bgt.n	800ff86 <__swbuf_r+0x4e>
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f7ff ffa1 	bl	800fec4 <_fflush_r>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	d1ed      	bne.n	800ff62 <__swbuf_r+0x2a>
 800ff86:	68a3      	ldr	r3, [r4, #8]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	60a3      	str	r3, [r4, #8]
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	1c5a      	adds	r2, r3, #1
 800ff90:	6022      	str	r2, [r4, #0]
 800ff92:	701e      	strb	r6, [r3, #0]
 800ff94:	6962      	ldr	r2, [r4, #20]
 800ff96:	1c43      	adds	r3, r0, #1
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d004      	beq.n	800ffa6 <__swbuf_r+0x6e>
 800ff9c:	89a3      	ldrh	r3, [r4, #12]
 800ff9e:	07db      	lsls	r3, r3, #31
 800ffa0:	d5e1      	bpl.n	800ff66 <__swbuf_r+0x2e>
 800ffa2:	2e0a      	cmp	r6, #10
 800ffa4:	d1df      	bne.n	800ff66 <__swbuf_r+0x2e>
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f7ff ff8b 	bl	800fec4 <_fflush_r>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d0d9      	beq.n	800ff66 <__swbuf_r+0x2e>
 800ffb2:	e7d6      	b.n	800ff62 <__swbuf_r+0x2a>

0800ffb4 <__swsetup_r>:
 800ffb4:	b538      	push	{r3, r4, r5, lr}
 800ffb6:	4b29      	ldr	r3, [pc, #164]	@ (801005c <__swsetup_r+0xa8>)
 800ffb8:	4605      	mov	r5, r0
 800ffba:	6818      	ldr	r0, [r3, #0]
 800ffbc:	460c      	mov	r4, r1
 800ffbe:	b118      	cbz	r0, 800ffc8 <__swsetup_r+0x14>
 800ffc0:	6a03      	ldr	r3, [r0, #32]
 800ffc2:	b90b      	cbnz	r3, 800ffc8 <__swsetup_r+0x14>
 800ffc4:	f7ff f9ec 	bl	800f3a0 <__sinit>
 800ffc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffcc:	0719      	lsls	r1, r3, #28
 800ffce:	d422      	bmi.n	8010016 <__swsetup_r+0x62>
 800ffd0:	06da      	lsls	r2, r3, #27
 800ffd2:	d407      	bmi.n	800ffe4 <__swsetup_r+0x30>
 800ffd4:	2209      	movs	r2, #9
 800ffd6:	602a      	str	r2, [r5, #0]
 800ffd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffdc:	81a3      	strh	r3, [r4, #12]
 800ffde:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe2:	e033      	b.n	801004c <__swsetup_r+0x98>
 800ffe4:	0758      	lsls	r0, r3, #29
 800ffe6:	d512      	bpl.n	801000e <__swsetup_r+0x5a>
 800ffe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ffea:	b141      	cbz	r1, 800fffe <__swsetup_r+0x4a>
 800ffec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fff0:	4299      	cmp	r1, r3
 800fff2:	d002      	beq.n	800fffa <__swsetup_r+0x46>
 800fff4:	4628      	mov	r0, r5
 800fff6:	f7ff fb11 	bl	800f61c <_free_r>
 800fffa:	2300      	movs	r3, #0
 800fffc:	6363      	str	r3, [r4, #52]	@ 0x34
 800fffe:	89a3      	ldrh	r3, [r4, #12]
 8010000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010004:	81a3      	strh	r3, [r4, #12]
 8010006:	2300      	movs	r3, #0
 8010008:	6063      	str	r3, [r4, #4]
 801000a:	6923      	ldr	r3, [r4, #16]
 801000c:	6023      	str	r3, [r4, #0]
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	f043 0308 	orr.w	r3, r3, #8
 8010014:	81a3      	strh	r3, [r4, #12]
 8010016:	6923      	ldr	r3, [r4, #16]
 8010018:	b94b      	cbnz	r3, 801002e <__swsetup_r+0x7a>
 801001a:	89a3      	ldrh	r3, [r4, #12]
 801001c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010024:	d003      	beq.n	801002e <__swsetup_r+0x7a>
 8010026:	4621      	mov	r1, r4
 8010028:	4628      	mov	r0, r5
 801002a:	f000 f856 	bl	80100da <__smakebuf_r>
 801002e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010032:	f013 0201 	ands.w	r2, r3, #1
 8010036:	d00a      	beq.n	801004e <__swsetup_r+0x9a>
 8010038:	2200      	movs	r2, #0
 801003a:	60a2      	str	r2, [r4, #8]
 801003c:	6962      	ldr	r2, [r4, #20]
 801003e:	4252      	negs	r2, r2
 8010040:	61a2      	str	r2, [r4, #24]
 8010042:	6922      	ldr	r2, [r4, #16]
 8010044:	b942      	cbnz	r2, 8010058 <__swsetup_r+0xa4>
 8010046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801004a:	d1c5      	bne.n	800ffd8 <__swsetup_r+0x24>
 801004c:	bd38      	pop	{r3, r4, r5, pc}
 801004e:	0799      	lsls	r1, r3, #30
 8010050:	bf58      	it	pl
 8010052:	6962      	ldrpl	r2, [r4, #20]
 8010054:	60a2      	str	r2, [r4, #8]
 8010056:	e7f4      	b.n	8010042 <__swsetup_r+0x8e>
 8010058:	2000      	movs	r0, #0
 801005a:	e7f7      	b.n	801004c <__swsetup_r+0x98>
 801005c:	20000038 	.word	0x20000038

08010060 <_sbrk_r>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	4d06      	ldr	r5, [pc, #24]	@ (801007c <_sbrk_r+0x1c>)
 8010064:	2300      	movs	r3, #0
 8010066:	4604      	mov	r4, r0
 8010068:	4608      	mov	r0, r1
 801006a:	602b      	str	r3, [r5, #0]
 801006c:	f7f0 fe4a 	bl	8000d04 <_sbrk>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	d102      	bne.n	801007a <_sbrk_r+0x1a>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	b103      	cbz	r3, 801007a <_sbrk_r+0x1a>
 8010078:	6023      	str	r3, [r4, #0]
 801007a:	bd38      	pop	{r3, r4, r5, pc}
 801007c:	20008a50 	.word	0x20008a50

08010080 <abort>:
 8010080:	b508      	push	{r3, lr}
 8010082:	2006      	movs	r0, #6
 8010084:	f000 f88e 	bl	80101a4 <raise>
 8010088:	2001      	movs	r0, #1
 801008a:	f7f0 fdc3 	bl	8000c14 <_exit>

0801008e <__swhatbuf_r>:
 801008e:	b570      	push	{r4, r5, r6, lr}
 8010090:	460c      	mov	r4, r1
 8010092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010096:	2900      	cmp	r1, #0
 8010098:	b096      	sub	sp, #88	@ 0x58
 801009a:	4615      	mov	r5, r2
 801009c:	461e      	mov	r6, r3
 801009e:	da0d      	bge.n	80100bc <__swhatbuf_r+0x2e>
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80100a6:	f04f 0100 	mov.w	r1, #0
 80100aa:	bf14      	ite	ne
 80100ac:	2340      	movne	r3, #64	@ 0x40
 80100ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80100b2:	2000      	movs	r0, #0
 80100b4:	6031      	str	r1, [r6, #0]
 80100b6:	602b      	str	r3, [r5, #0]
 80100b8:	b016      	add	sp, #88	@ 0x58
 80100ba:	bd70      	pop	{r4, r5, r6, pc}
 80100bc:	466a      	mov	r2, sp
 80100be:	f000 f879 	bl	80101b4 <_fstat_r>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	dbec      	blt.n	80100a0 <__swhatbuf_r+0x12>
 80100c6:	9901      	ldr	r1, [sp, #4]
 80100c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80100cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80100d0:	4259      	negs	r1, r3
 80100d2:	4159      	adcs	r1, r3
 80100d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100d8:	e7eb      	b.n	80100b2 <__swhatbuf_r+0x24>

080100da <__smakebuf_r>:
 80100da:	898b      	ldrh	r3, [r1, #12]
 80100dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100de:	079d      	lsls	r5, r3, #30
 80100e0:	4606      	mov	r6, r0
 80100e2:	460c      	mov	r4, r1
 80100e4:	d507      	bpl.n	80100f6 <__smakebuf_r+0x1c>
 80100e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80100ea:	6023      	str	r3, [r4, #0]
 80100ec:	6123      	str	r3, [r4, #16]
 80100ee:	2301      	movs	r3, #1
 80100f0:	6163      	str	r3, [r4, #20]
 80100f2:	b003      	add	sp, #12
 80100f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f6:	ab01      	add	r3, sp, #4
 80100f8:	466a      	mov	r2, sp
 80100fa:	f7ff ffc8 	bl	801008e <__swhatbuf_r>
 80100fe:	9f00      	ldr	r7, [sp, #0]
 8010100:	4605      	mov	r5, r0
 8010102:	4639      	mov	r1, r7
 8010104:	4630      	mov	r0, r6
 8010106:	f7ff fafd 	bl	800f704 <_malloc_r>
 801010a:	b948      	cbnz	r0, 8010120 <__smakebuf_r+0x46>
 801010c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010110:	059a      	lsls	r2, r3, #22
 8010112:	d4ee      	bmi.n	80100f2 <__smakebuf_r+0x18>
 8010114:	f023 0303 	bic.w	r3, r3, #3
 8010118:	f043 0302 	orr.w	r3, r3, #2
 801011c:	81a3      	strh	r3, [r4, #12]
 801011e:	e7e2      	b.n	80100e6 <__smakebuf_r+0xc>
 8010120:	89a3      	ldrh	r3, [r4, #12]
 8010122:	6020      	str	r0, [r4, #0]
 8010124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010128:	81a3      	strh	r3, [r4, #12]
 801012a:	9b01      	ldr	r3, [sp, #4]
 801012c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010130:	b15b      	cbz	r3, 801014a <__smakebuf_r+0x70>
 8010132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010136:	4630      	mov	r0, r6
 8010138:	f000 f84e 	bl	80101d8 <_isatty_r>
 801013c:	b128      	cbz	r0, 801014a <__smakebuf_r+0x70>
 801013e:	89a3      	ldrh	r3, [r4, #12]
 8010140:	f023 0303 	bic.w	r3, r3, #3
 8010144:	f043 0301 	orr.w	r3, r3, #1
 8010148:	81a3      	strh	r3, [r4, #12]
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	431d      	orrs	r5, r3
 801014e:	81a5      	strh	r5, [r4, #12]
 8010150:	e7cf      	b.n	80100f2 <__smakebuf_r+0x18>

08010152 <_raise_r>:
 8010152:	291f      	cmp	r1, #31
 8010154:	b538      	push	{r3, r4, r5, lr}
 8010156:	4605      	mov	r5, r0
 8010158:	460c      	mov	r4, r1
 801015a:	d904      	bls.n	8010166 <_raise_r+0x14>
 801015c:	2316      	movs	r3, #22
 801015e:	6003      	str	r3, [r0, #0]
 8010160:	f04f 30ff 	mov.w	r0, #4294967295
 8010164:	bd38      	pop	{r3, r4, r5, pc}
 8010166:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010168:	b112      	cbz	r2, 8010170 <_raise_r+0x1e>
 801016a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801016e:	b94b      	cbnz	r3, 8010184 <_raise_r+0x32>
 8010170:	4628      	mov	r0, r5
 8010172:	f000 f853 	bl	801021c <_getpid_r>
 8010176:	4622      	mov	r2, r4
 8010178:	4601      	mov	r1, r0
 801017a:	4628      	mov	r0, r5
 801017c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010180:	f000 b83a 	b.w	80101f8 <_kill_r>
 8010184:	2b01      	cmp	r3, #1
 8010186:	d00a      	beq.n	801019e <_raise_r+0x4c>
 8010188:	1c59      	adds	r1, r3, #1
 801018a:	d103      	bne.n	8010194 <_raise_r+0x42>
 801018c:	2316      	movs	r3, #22
 801018e:	6003      	str	r3, [r0, #0]
 8010190:	2001      	movs	r0, #1
 8010192:	e7e7      	b.n	8010164 <_raise_r+0x12>
 8010194:	2100      	movs	r1, #0
 8010196:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801019a:	4620      	mov	r0, r4
 801019c:	4798      	blx	r3
 801019e:	2000      	movs	r0, #0
 80101a0:	e7e0      	b.n	8010164 <_raise_r+0x12>
	...

080101a4 <raise>:
 80101a4:	4b02      	ldr	r3, [pc, #8]	@ (80101b0 <raise+0xc>)
 80101a6:	4601      	mov	r1, r0
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	f7ff bfd2 	b.w	8010152 <_raise_r>
 80101ae:	bf00      	nop
 80101b0:	20000038 	.word	0x20000038

080101b4 <_fstat_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4d07      	ldr	r5, [pc, #28]	@ (80101d4 <_fstat_r+0x20>)
 80101b8:	2300      	movs	r3, #0
 80101ba:	4604      	mov	r4, r0
 80101bc:	4608      	mov	r0, r1
 80101be:	4611      	mov	r1, r2
 80101c0:	602b      	str	r3, [r5, #0]
 80101c2:	f7f0 fd77 	bl	8000cb4 <_fstat>
 80101c6:	1c43      	adds	r3, r0, #1
 80101c8:	d102      	bne.n	80101d0 <_fstat_r+0x1c>
 80101ca:	682b      	ldr	r3, [r5, #0]
 80101cc:	b103      	cbz	r3, 80101d0 <_fstat_r+0x1c>
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	bd38      	pop	{r3, r4, r5, pc}
 80101d2:	bf00      	nop
 80101d4:	20008a50 	.word	0x20008a50

080101d8 <_isatty_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	4d06      	ldr	r5, [pc, #24]	@ (80101f4 <_isatty_r+0x1c>)
 80101dc:	2300      	movs	r3, #0
 80101de:	4604      	mov	r4, r0
 80101e0:	4608      	mov	r0, r1
 80101e2:	602b      	str	r3, [r5, #0]
 80101e4:	f7f0 fd76 	bl	8000cd4 <_isatty>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d102      	bne.n	80101f2 <_isatty_r+0x1a>
 80101ec:	682b      	ldr	r3, [r5, #0]
 80101ee:	b103      	cbz	r3, 80101f2 <_isatty_r+0x1a>
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	20008a50 	.word	0x20008a50

080101f8 <_kill_r>:
 80101f8:	b538      	push	{r3, r4, r5, lr}
 80101fa:	4d07      	ldr	r5, [pc, #28]	@ (8010218 <_kill_r+0x20>)
 80101fc:	2300      	movs	r3, #0
 80101fe:	4604      	mov	r4, r0
 8010200:	4608      	mov	r0, r1
 8010202:	4611      	mov	r1, r2
 8010204:	602b      	str	r3, [r5, #0]
 8010206:	f7f0 fcf3 	bl	8000bf0 <_kill>
 801020a:	1c43      	adds	r3, r0, #1
 801020c:	d102      	bne.n	8010214 <_kill_r+0x1c>
 801020e:	682b      	ldr	r3, [r5, #0]
 8010210:	b103      	cbz	r3, 8010214 <_kill_r+0x1c>
 8010212:	6023      	str	r3, [r4, #0]
 8010214:	bd38      	pop	{r3, r4, r5, pc}
 8010216:	bf00      	nop
 8010218:	20008a50 	.word	0x20008a50

0801021c <_getpid_r>:
 801021c:	f7f0 bcdf 	b.w	8000bde <_getpid>

08010220 <_init>:
 8010220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010222:	bf00      	nop
 8010224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010226:	bc08      	pop	{r3}
 8010228:	469e      	mov	lr, r3
 801022a:	4770      	bx	lr

0801022c <_fini>:
 801022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022e:	bf00      	nop
 8010230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010232:	bc08      	pop	{r3}
 8010234:	469e      	mov	lr, r3
 8010236:	4770      	bx	lr
