
F446ZE_TCP_client_with_lwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010564  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c34  08010714  08010714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013348  08013348  00015070  2**0
                  CONTENTS
  4 .ARM          00000008  08013348  08013348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013350  08013350  00015070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013350  08013350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013354  08013354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08013358  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015070  2**0
                  CONTENTS
 10 .bss          000089d0  20000070  20000070  00015070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a40  20008a40  00015070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022dc4  00000000  00000000  000150a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a4b  00000000  00000000  00037e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  0003d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015fd  00000000  00000000  0003f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c2a  00000000  00000000  00040a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c974  00000000  00000000  00071647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3f17  00000000  00000000  0009dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00191ed2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d50  00000000  00000000  00191f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00199c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080106fc 	.word	0x080106fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080106fc 	.word	0x080106fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fe06 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f814 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f926 	bl	80007dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f8cc 	bl	800072c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000594:	f000 f8f4 	bl	8000780 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000598:	f000 f876 	bl	8000688 <MX_TIM1_Init>
  MX_LWIP_Init();
 800059c:	f003 ffa2 	bl	80044e4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <main+0x30>)
 80005a2:	f002 fdb5 	bl	8003110 <HAL_TIM_Base_Start_IT>
  tcp_client_init();
 80005a6:	f000 fc1d 	bl	8000de4 <tcp_client_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	MX_LWIP_Process();
 80005aa:	f004 f8db 	bl	8004764 <MX_LWIP_Process>
 80005ae:	e7fc      	b.n	80005aa <main+0x2a>
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	@ 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f00f f867 	bl	800f696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	@ (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000614:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000628:	23a8      	movs	r3, #168	@ 0xa8
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000630:	2307      	movs	r3, #7
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f002 f881 	bl	8002740 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f978 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fae2 	bl	8002c30 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f961 	bl	8000938 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	@ 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <MX_TIM1_Init+0xa0>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006ac:	f244 129f 	movw	r2, #16799	@ 0x419f
 80006b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006ba:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006d2:	4814      	ldr	r0, [pc, #80]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006d4:	f002 fccc 	bl	8003070 <HAL_TIM_Base_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006de:	f000 f92b 	bl	8000938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4619      	mov	r1, r3
 80006ee:	480d      	ldr	r0, [pc, #52]	@ (8000724 <MX_TIM1_Init+0x9c>)
 80006f0:	f002 fe6e 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006fa:	f000 f91d 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <MX_TIM1_Init+0x9c>)
 800070c:	f003 f896 	bl	800383c <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000716:	f000 f90f 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000008c 	.word	0x2000008c
 8000728:	40010000 	.word	0x40010000

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART3_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000764:	f003 f8fa 	bl	800395c <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f8e3 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000d4 	.word	0x200000d4
 800077c:	40004800 	.word	0x40004800

08000780 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800078a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2204      	movs	r2, #4
 8000790:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2202      	movs	r2, #2
 8000796:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	f001 fead 	bl	8002522 <HAL_PCD_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f8b3 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000011c 	.word	0x2000011c

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000928 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000928 <MX_GPIO_Init+0x14c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b49      	ldr	r3, [pc, #292]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a44      	ldr	r2, [pc, #272]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b3e      	ldr	r3, [pc, #248]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3d      	ldr	r2, [pc, #244]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b37      	ldr	r3, [pc, #220]	@ (8000928 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a36      	ldr	r2, [pc, #216]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <MX_GPIO_Init+0x14c>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a28      	ldr	r2, [pc, #160]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008a0:	4822      	ldr	r0, [pc, #136]	@ (800092c <MX_GPIO_Init+0x150>)
 80008a2:	f001 fe0b 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2140      	movs	r1, #64	@ 0x40
 80008aa:	4821      	ldr	r0, [pc, #132]	@ (8000930 <MX_GPIO_Init+0x154>)
 80008ac:	f001 fe06 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481b      	ldr	r0, [pc, #108]	@ (8000934 <MX_GPIO_Init+0x158>)
 80008c8:	f001 fc4c 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008cc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_GPIO_Init+0x150>)
 80008e6:	f001 fc3d 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ea:	2340      	movs	r3, #64	@ 0x40
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0x154>)
 8000902:	f001 fc2f 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000906:	2380      	movs	r3, #128	@ 0x80
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_GPIO_Init+0x154>)
 800091a:	f001 fc23 	bl	8002164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	40021800 	.word	0x40021800
 8000934:	40020800 	.word	0x40020800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <HAL_TIM_Base_MspInit+0x48>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d115      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_TIM_Base_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2019      	movs	r0, #25
 80009c8:	f000 fd55 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009cc:	2019      	movs	r0, #25
 80009ce:	f000 fd6e 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010000 	.word	0x40010000
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a50:	2307      	movs	r3, #7
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5c:	f001 fb82 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40004800 	.word	0x40004800
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a94:	d13f      	bne.n	8000b16 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a20      	ldr	r2, [pc, #128]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ab2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4815      	ldr	r0, [pc, #84]	@ (8000b24 <HAL_PCD_MspInit+0xb0>)
 8000ad0:	f001 fb48 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480e      	ldr	r0, [pc, #56]	@ (8000b24 <HAL_PCD_MspInit+0xb0>)
 8000aea:	f001 fb3b 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af8:	6353      	str	r3, [r2, #52]	@ 0x34
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_PCD_MspInit+0xac>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	@ 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <NMI_Handler+0x4>

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7e:	f000 fb5b 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b8e:	f002 fb2f 	bl	80031f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000008c 	.word	0x2000008c

08000b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return 1;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_kill>:

int _kill(int pid, int sig)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <_kill+0x20>)
 8000bb8:	2216      	movs	r2, #22
 8000bba:	601a      	str	r2, [r3, #0]
  return -1;
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	20008a30 	.word	0x20008a30

08000bd0 <_exit>:

void _exit (int status)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ffe5 	bl	8000bac <_kill>
  while (1) {}    /* Make sure we hang here */
 8000be2:	bf00      	nop
 8000be4:	e7fd      	b.n	8000be2 <_exit+0x12>

08000be6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e00a      	b.n	8000c0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bf8:	f3af 8000 	nop.w
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	b2ca      	uxtb	r2, r1
 8000c06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbf0      	blt.n	8000bf8 <_read+0x12>
  }

  return len;
 8000c16:	687b      	ldr	r3, [r7, #4]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e009      	b.n	8000c46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	60ba      	str	r2, [r7, #8]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3301      	adds	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbf1      	blt.n	8000c32 <_write+0x12>
  }
  return len;
 8000c4e:	687b      	ldr	r3, [r7, #4]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_close>:

int _close(int file)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c80:	605a      	str	r2, [r3, #4]
  return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_isatty>:

int _isatty(int file)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <_sbrk+0x5c>)
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <_sbrk+0x60>)
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <_sbrk+0x64>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d205      	bcs.n	8000cfc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <_sbrk+0x6c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a06      	ldr	r2, [pc, #24]	@ (8000d24 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20030000 	.word	0x20030000
 8000d20:	00000400 	.word	0x00000400
 8000d24:	20000600 	.word	0x20000600
 8000d28:	20008a40 	.word	0x20008a40
 8000d2c:	20008a30 	.word	0x20008a30

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <HAL_TIM_PeriodElapsedCallback>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b09d      	sub	sp, #116	@ 0x74
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	char buf[100];
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000d5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d60:	481b      	ldr	r0, [pc, #108]	@ (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d62:	f001 fbc4 	bl	80024ee <HAL_GPIO_TogglePin>
	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending TCPclient Message %d\n", counter);
 8000d66:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	491a      	ldr	r1, [pc, #104]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d70:	4618      	mov	r0, r3
 8000d72:	f00e fc03 	bl	800f57c <siprintf>
 8000d76:	66f8      	str	r0, [r7, #108]	@ 0x6c

	if (counter !=0)
 8000d78:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d023      	beq.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		/* allocate pbuf */
		esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4a15      	ldr	r2, [pc, #84]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d86:	6814      	ldr	r4, [r2, #0]
 8000d88:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2036      	movs	r0, #54	@ 0x36
 8000d90:	f004 fef6 	bl	8005b80 <pbuf_alloc>
 8000d94:	4603      	mov	r3, r0
 8000d96:	60a3      	str	r3, [r4, #8]


		/* copy data to pbuf */
		pbuf_take(esTx->p, (char*)buf, len);
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000da0:	b292      	uxth	r2, r2
 8000da2:	f107 0108 	add.w	r1, r7, #8
 8000da6:	4618      	mov	r0, r3
 8000da8:	f005 fc2a 	bl	8006600 <pbuf_take>

		tcp_client_send(pcbTx, esTx);
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f927 	bl	800100a <tcp_client_send>

		pbuf_free(esTx->p);
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f005 f9c0 	bl	8006148 <pbuf_free>
	}

}
 8000dc8:	bf00      	nop
 8000dca:	3774      	adds	r7, #116	@ 0x74
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	20000604 	.word	0x20000604
 8000dd8:	08010714 	.word	0x08010714
 8000ddc:	20000608 	.word	0x20000608
 8000de0:	2000060c 	.word	0x2000060c

08000de4 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000dea:	f006 ffff 	bl	8007dec <tcp_new>
 8000dee:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 1, 194);
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <tcp_client_init+0x24>)
 8000df2:	603b      	str	r3, [r7, #0]
	tcp_connect(tpcb, &destIPADDR, 31, tcp_client_connected);
 8000df4:	4639      	mov	r1, r7
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <tcp_client_init+0x28>)
 8000df8:	221f      	movs	r2, #31
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f006 f8ba 	bl	8006f74 <tcp_connect>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	c201a8c0 	.word	0xc201a8c0
 8000e0c:	08000e11 	.word	0x08000e11

08000e10 <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000e1e:	200c      	movs	r0, #12
 8000e20:	f004 f9b2 	bl	8005188 <mem_malloc>
 8000e24:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d023      	beq.n	8000e74 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	68b8      	ldr	r0, [r7, #8]
 8000e48:	f006 ffd8 	bl	8007dfc <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000e4c:	490f      	ldr	r1, [pc, #60]	@ (8000e8c <tcp_client_connected+0x7c>)
 8000e4e:	68b8      	ldr	r0, [r7, #8]
 8000e50:	f006 ffe6 	bl	8007e20 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	490e      	ldr	r1, [pc, #56]	@ (8000e90 <tcp_client_connected+0x80>)
 8000e58:	68b8      	ldr	r0, [r7, #8]
 8000e5a:	f007 f847 	bl	8007eec <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <tcp_client_connected+0x84>)
 8000e60:	68b8      	ldr	r0, [r7, #8]
 8000e62:	f006 ffff 	bl	8007e64 <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000e66:	6939      	ldr	r1, [r7, #16]
 8000e68:	68b8      	ldr	r0, [r7, #8]
 8000e6a:	f000 f943 	bl	80010f4 <tcp_client_handle>

    ret_err = ERR_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
 8000e72:	e005      	b.n	8000e80 <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000e74:	6939      	ldr	r1, [r7, #16]
 8000e76:	68b8      	ldr	r0, [r7, #8]
 8000e78:	f000 f915 	bl	80010a6 <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000e7c:	23ff      	movs	r3, #255	@ 0xff
 8000e7e:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08000e99 	.word	0x08000e99
 8000e90:	08000f89 	.word	0x08000f89
 8000e94:	08000fd1 	.word	0x08000fd1

08000e98 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <tcp_client_recv+0x20>
 8000eac:	4b33      	ldr	r3, [pc, #204]	@ (8000f7c <tcp_client_recv+0xe4>)
 8000eae:	22e0      	movs	r2, #224	@ 0xe0
 8000eb0:	4933      	ldr	r1, [pc, #204]	@ (8000f80 <tcp_client_recv+0xe8>)
 8000eb2:	4834      	ldr	r0, [pc, #208]	@ (8000f84 <tcp_client_recv+0xec>)
 8000eb4:	f00e fb50 	bl	800f558 <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10d      	bne.n	8000ede <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	68b8      	ldr	r0, [r7, #8]
 8000ed4:	f000 f8e7 	bl	80010a6 <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75fb      	strb	r3, [r7, #23]
 8000edc:	e047      	b.n	8000f6e <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00b      	beq.n	8000efe <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f005 f928 	bl	8006148 <pbuf_free>
    }
    ret_err = err;
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	75fb      	strb	r3, [r7, #23]
 8000efc:	e037      	b.n	8000f6e <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d112      	bne.n	8000f2c <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	891b      	ldrh	r3, [r3, #8]
 8000f10:	4619      	mov	r1, r3
 8000f12:	68b8      	ldr	r0, [r7, #8]
 8000f14:	f005 ff98 	bl	8006e48 <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8000f18:	6939      	ldr	r1, [r7, #16]
 8000f1a:	68b8      	ldr	r0, [r7, #8]
 8000f1c:	f000 f8ea 	bl	80010f4 <tcp_client_handle>

    pbuf_free(p);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f005 f911 	bl	8006148 <pbuf_free>

    ret_err = ERR_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
 8000f2a:	e020      	b.n	8000f6e <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d10e      	bne.n	8000f52 <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	891b      	ldrh	r3, [r3, #8]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	68b8      	ldr	r0, [r7, #8]
 8000f3c:	f005 ff84 	bl	8006e48 <tcp_recved>
    es->p = NULL;
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f005 f8fe 	bl	8006148 <pbuf_free>
    ret_err = ERR_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	75fb      	strb	r3, [r7, #23]
 8000f50:	e00d      	b.n	8000f6e <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	891b      	ldrh	r3, [r3, #8]
 8000f56:	4619      	mov	r1, r3
 8000f58:	68b8      	ldr	r0, [r7, #8]
 8000f5a:	f005 ff75 	bl	8006e48 <tcp_recved>
    es->p = NULL;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f005 f8ef 	bl	8006148 <pbuf_free>
    ret_err = ERR_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08010734 	.word	0x08010734
 8000f80:	08010750 	.word	0x08010750
 8000f84:	0801075c 	.word	0x0801075c

08000f88 <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00e      	beq.n	8000fba <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d107      	bne.n	8000fb4 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d103      	bne.n	8000fb4 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f000 f879 	bl	80010a6 <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e004      	b.n	8000fc4 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f005 fede 	bl	8006d7c <tcp_abort>
    ret_err = ERR_ABRT;
 8000fc0:	23f3      	movs	r3, #243	@ 0xf3
 8000fc2:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d107      	bne.n	8001000 <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d103      	bne.n	8001000 <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8000ff8:	6979      	ldr	r1, [r7, #20]
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f000 f853 	bl	80010a6 <tcp_client_connection_close>
  }
  return ERR_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001018:	e031      	b.n	800107e <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6859      	ldr	r1, [r3, #4]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	895a      	ldrh	r2, [r3, #10]
 8001028:	2301      	movs	r3, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f009 fe0a 	bl	800ac44 <tcp_write>
 8001030:	4603      	mov	r3, r0
 8001032:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d118      	bne.n	800106e <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	895b      	ldrh	r3, [r3, #10]
 8001040:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	4618      	mov	r0, r3
 8001058:	f005 f916 	bl	8006288 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800105c:	6938      	ldr	r0, [r7, #16]
 800105e:	f005 f873 	bl	8006148 <pbuf_free>
 8001062:	4603      	mov	r3, r0
 8001064:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f7      	beq.n	800105c <tcp_client_send+0x52>
 800106c:	e007      	b.n	800107e <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 800106e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001076:	d102      	bne.n	800107e <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 800107e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10b      	bne.n	800109e <tcp_client_send+0x94>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	895a      	ldrh	r2, [r3, #10]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
         (es->p != NULL) &&
 800109a:	429a      	cmp	r2, r3
 800109c:	d9bd      	bls.n	800101a <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80010b0:	2100      	movs	r1, #0
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f006 fea2 	bl	8007dfc <tcp_arg>
  tcp_sent(tpcb, NULL);
 80010b8:	2100      	movs	r1, #0
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f006 fed2 	bl	8007e64 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80010c0:	2100      	movs	r1, #0
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f006 feac 	bl	8007e20 <tcp_recv>
  tcp_err(tpcb, NULL);
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f006 feec 	bl	8007ea8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f006 ff09 	bl	8007eec <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f003 feeb 	bl	8004ebc <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f005 fd5e 	bl	8006ba8 <tcp_close>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8b1b      	ldrh	r3, [r3, #24]
 8001108:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4618      	mov	r0, r3
 8001110:	f00d f97e 	bl	800e410 <ip4addr_ntoa>
 8001114:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 8001116:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <tcp_client_handle+0x40>)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <tcp_client_handle+0x44>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]

	counter++;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <tcp_client_handle+0x48>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <tcp_client_handle+0x48>)
 800112a:	6013      	str	r3, [r2, #0]

}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000608 	.word	0x20000608
 8001138:	2000060c 	.word	0x2000060c
 800113c:	20000604 	.word	0x20000604

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001178 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001144:	f7ff fdf4 	bl	8000d30 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	@ (8001180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	@ (800118c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800116e:	f00e fae1 	bl	800f734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fa05 	bl	8000580 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001178:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001184:	08013358 	.word	0x08013358
  ldr r2, =_sbss
 8001188:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800118c:	20008a40 	.word	0x20008a40

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f94f 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fbbc 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f967 	bl	80014ca <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f92f 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000000 	.word	0x20000000
 8001230:	20000008 	.word	0x20000008
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008
 800125c:	20000610 	.word	0x20000610

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000610 	.word	0x20000610

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	@ (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	@ (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff3e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff31 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06c      	b.n	80015d0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2223      	movs	r2, #35	@ 0x23
 8001504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f869 	bl	80015e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <HAL_ETH_Init+0xf4>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a30      	ldr	r2, [pc, #192]	@ (80015d8 <HAL_ETH_Init+0xf4>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <HAL_ETH_Init+0xf4>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800152a:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <HAL_ETH_Init+0xf8>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a2b      	ldr	r2, [pc, #172]	@ (80015dc <HAL_ETH_Init+0xf8>)
 8001530:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001534:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <HAL_ETH_Init+0xf8>)
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4927      	ldr	r1, [pc, #156]	@ (80015dc <HAL_ETH_Init+0xf8>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_ETH_Init+0xf8>)
 8001546:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800155e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001560:	f7ff fe7e 	bl	8001260 <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001566:	e011      	b.n	800158c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001568:	f7ff fe7a 	bl	8001260 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001576:	d909      	bls.n	800158c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2204      	movs	r2, #4
 800157c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	22e0      	movs	r2, #224	@ 0xe0
 8001584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e021      	b.n	80015d0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1e4      	bne.n	8001568 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fb3a 	bl	8001c18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fbe1 	bl	8001d6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fc37 	bl	8001e1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	461a      	mov	r2, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fb9f 	bl	8001cfc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2210      	movs	r2, #16
 80015ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800

080015e0 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e07c      	b.n	8001714 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001620:	2b23      	cmp	r3, #35	@ 0x23
 8001622:	d176      	bne.n	8001712 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001624:	2200      	movs	r2, #0
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 fc65 	bl	8001ef8 <ETH_Prepare_Tx_Descriptors>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d009      	beq.n	8001648 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	f043 0202 	orr.w	r2, r3, #2
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e065      	b.n	8001714 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001648:	f3bf 8f4f 	dsb	sy
}
 800164c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3206      	adds	r2, #6
 8001656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	629a      	str	r2, [r3, #40]	@ 0x28
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166a:	2b03      	cmp	r3, #3
 800166c:	d904      	bls.n	8001678 <HAL_ETH_Transmit+0x84>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	1f1a      	subs	r2, r3, #4
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3106      	adds	r1, #6
 8001684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001688:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800168c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800168e:	f7ff fde7 	bl	8001260 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001694:	e037      	b.n	8001706 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d011      	beq.n	80016cc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ae:	f043 0208 	orr.w	r2, r3, #8
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e023      	b.n	8001714 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d018      	beq.n	8001706 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016d4:	f7ff fdc4 	bl	8001260 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d302      	bcc.n	80016ea <HAL_ETH_Transmit+0xf6>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10d      	bne.n	8001706 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f0:	f043 0204 	orr.w	r2, r3, #4
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001700:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e006      	b.n	8001714 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	dbc3      	blt.n	8001696 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d109      	bne.n	8001748 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0a8      	b.n	800189a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800174e:	2b23      	cmp	r3, #35	@ 0x23
 8001750:	d001      	beq.n	8001756 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0a1      	b.n	800189a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	3212      	adds	r2, #18
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800176c:	f1c3 0304 	rsb	r3, r3, #4
 8001770:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001772:	e06a      	b.n	800184a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <HAL_ETH_ReadData+0x88>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d040      	beq.n	8001826 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017d8:	3b04      	subs	r3, #4
 80017da:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001800:	461a      	mov	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	b29b      	uxth	r3, r3
 8001806:	f003 f997 	bl	8004b38 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	441a      	add	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d902      	bls.n	8001838 <HAL_ETH_ReadData+0x11c>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b04      	subs	r3, #4
 8001836:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	3212      	adds	r2, #18
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800184e:	2b00      	cmp	r3, #0
 8001850:	db06      	blt.n	8001860 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d202      	bcs.n	8001860 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d089      	beq.n	8001774 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	441a      	add	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f815 	bl	80018a4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80018b0:	2301      	movs	r3, #1
 80018b2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018b8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	3212      	adds	r2, #18
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018ca:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018cc:	e03d      	b.n	800194a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d112      	bne.n	80018fc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 f8fc 	bl	8004ad8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	74fb      	strb	r3, [r7, #19]
 80018ea:	e007      	b.n	80018fc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	461a      	mov	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	461a      	mov	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80018fc:	7cfb      	ldrb	r3, [r7, #19]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4a24      	ldr	r2, [pc, #144]	@ (80019a0 <ETH_UpdateDescriptor+0xfc>)
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	e003      	b.n	800191a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001918:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d902      	bls.n	8001938 <ETH_UpdateDescriptor+0x94>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b04      	subs	r3, #4
 8001936:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	3212      	adds	r2, #18
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	617b      	str	r3, [r7, #20]
      desccount--;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3b01      	subs	r3, #1
 8001948:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <ETH_UpdateDescriptor+0xb2>
 8001950:	7cfb      	ldrb	r3, [r7, #19]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1bb      	bne.n	80018ce <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	429a      	cmp	r2, r3
 800195e:	d01a      	beq.n	8001996 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	3301      	adds	r3, #1
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800196a:	f3bf 8f5f 	dmb	sy
}
 800196e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	18ca      	adds	r2, r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001988:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	80004600 	.word	0x80004600

080019a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4b51      	ldr	r3, [pc, #324]	@ (8001b00 <ETH_SetMACConfig+0x15c>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7c1b      	ldrb	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <ETH_SetMACConfig+0x28>
 80019c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019ca:	e000      	b.n	80019ce <ETH_SetMACConfig+0x2a>
 80019cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	7c5b      	ldrb	r3, [r3, #17]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <ETH_SetMACConfig+0x38>
 80019d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019da:	e000      	b.n	80019de <ETH_SetMACConfig+0x3a>
 80019dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	7fdb      	ldrb	r3, [r3, #31]
 80019ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80019ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	7f92      	ldrb	r2, [r2, #30]
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	d102      	bne.n	8001a02 <ETH_SetMACConfig+0x5e>
 80019fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a00:	e000      	b.n	8001a04 <ETH_SetMACConfig+0x60>
 8001a02:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	7f1b      	ldrb	r3, [r3, #28]
 8001a0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	791b      	ldrb	r3, [r3, #4]
 8001a18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d102      	bne.n	8001a2c <ETH_SetMACConfig+0x88>
 8001a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2a:	e000      	b.n	8001a2e <ETH_SetMACConfig+0x8a>
 8001a2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7bdb      	ldrb	r3, [r3, #15]
 8001a34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a46:	4313      	orrs	r3, r2
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fc0a 	bl	8001278 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d101      	bne.n	8001a92 <ETH_SetMACConfig+0xee>
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	e000      	b.n	8001a94 <ETH_SetMACConfig+0xf0>
 8001a92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001aa2:	2a01      	cmp	r2, #1
 8001aa4:	d101      	bne.n	8001aaa <ETH_SetMACConfig+0x106>
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	e000      	b.n	8001aac <ETH_SetMACConfig+0x108>
 8001aaa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001aac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001ab4:	2a01      	cmp	r2, #1
 8001ab6:	d101      	bne.n	8001abc <ETH_SetMACConfig+0x118>
 8001ab8:	2204      	movs	r2, #4
 8001aba:	e000      	b.n	8001abe <ETH_SetMACConfig+0x11a>
 8001abc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d101      	bne.n	8001ace <ETH_SetMACConfig+0x12a>
 8001aca:	2202      	movs	r2, #2
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x12c>
 8001ace:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff fbc5 	bl	8001278 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	ff20810f 	.word	0xff20810f

08001b04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c14 <ETH_SetDMAConfig+0x110>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7b1b      	ldrb	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <ETH_SetDMAConfig+0x2c>
 8001b2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b2e:	e000      	b.n	8001b32 <ETH_SetDMAConfig+0x2e>
 8001b30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7b5b      	ldrb	r3, [r3, #13]
 8001b36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	7f52      	ldrb	r2, [r2, #29]
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	d102      	bne.n	8001b48 <ETH_SetDMAConfig+0x44>
 8001b42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b46:	e000      	b.n	8001b4a <ETH_SetDMAConfig+0x46>
 8001b48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7b9b      	ldrb	r3, [r3, #14]
 8001b50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	7f1b      	ldrb	r3, [r3, #28]
 8001b5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	7f9b      	ldrb	r3, [r3, #30]
 8001b66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f7ff fb6c 	bl	8001278 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bb8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001bbe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bc4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bcc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001bce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bd6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bdc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff fb3d 	bl	8001278 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f8de3f23 	.word	0xf8de3f23

08001c18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0a6      	sub	sp, #152	@ 0x98
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c54:	2300      	movs	r3, #0
 8001c56:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fe86 	bl	80019a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ccc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff08 	bl	8001b04 <ETH_SetDMAConfig>
}
 8001cf4:	bf00      	nop
 8001cf6:	3798      	adds	r7, #152	@ 0x98
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	3204      	adds	r2, #4
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <ETH_MACAddressConfig+0x68>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	061a      	lsls	r2, r3, #24
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3302      	adds	r3, #2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	4313      	orrs	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <ETH_MACAddressConfig+0x6c>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	6013      	str	r3, [r2, #0]
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40028040 	.word	0x40028040
 8001d68:	40028044 	.word	0x40028044

08001d6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e03e      	b.n	8001df8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68d9      	ldr	r1, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	3206      	adds	r2, #6
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d80c      	bhi.n	8001ddc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68d9      	ldr	r1, [r3, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e004      	b.n	8001de6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d9bd      	bls.n	8001d7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	611a      	str	r2, [r3, #16]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e046      	b.n	8001eba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6919      	ldr	r1, [r3, #16]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2200      	movs	r2, #0
 8001e48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001e70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	3212      	adds	r2, #18
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d80c      	bhi.n	8001eaa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6919      	ldr	r1, [r3, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	e004      	b.n	8001eb4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d9b5      	bls.n	8001e2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eea:	60da      	str	r2, [r3, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b08d      	sub	sp, #52	@ 0x34
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3318      	adds	r3, #24
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f3a:	d007      	beq.n	8001f4c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f40:	3304      	adds	r3, #4
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e103      	b.n	8002158 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3301      	adds	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8001f68:	f023 031f 	bic.w	r3, r3, #31
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	6852      	ldr	r2, [r2, #4]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001fd6:	f3bf 8f5f 	dmb	sy
}
 8001fda:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001fe8:	e084      	b.n	80020f4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e005      	b.n	8002016 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002018:	3301      	adds	r3, #1
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800201c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201e:	2b03      	cmp	r3, #3
 8002020:	d902      	bls.n	8002028 <ETH_Prepare_Tx_Descriptors+0x130>
 8002022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002024:	3b04      	subs	r3, #4
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800204a:	d007      	beq.n	800205c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002050:	3304      	adds	r3, #4
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d029      	beq.n	80020b0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800206e:	e019      	b.n	80020a4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002070:	f3bf 8f5f 	dmb	sy
}
 8002074:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002084:	3301      	adds	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800208a:	2b03      	cmp	r3, #3
 800208c:	d902      	bls.n	8002094 <ETH_Prepare_Tx_Descriptors+0x19c>
 800208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002090:	3b04      	subs	r3, #4
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a0:	3301      	adds	r3, #1
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d3e1      	bcc.n	8002070 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	e053      	b.n	8002158 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	3301      	adds	r3, #1
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80020ce:	f023 031f 	bic.w	r3, r3, #31
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	6852      	ldr	r2, [r2, #4]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	3301      	adds	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80020e2:	f3bf 8f5f 	dmb	sy
}
 80020e6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f af76 	bne.w	8001fea <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e005      	b.n	800211e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800212e:	6979      	ldr	r1, [r7, #20]
 8002130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002132:	3304      	adds	r3, #4
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800213e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4413      	add	r3, r2
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002152:	b662      	cpsie	i
}
 8002154:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3734      	adds	r7, #52	@ 0x34
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e177      	b.n	8002470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8166 	bne.w	800246a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80c0 	beq.w	800246a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b66      	ldr	r3, [pc, #408]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a65      	ldr	r2, [pc, #404]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b63      	ldr	r3, [pc, #396]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a61      	ldr	r2, [pc, #388]	@ (800248c <HAL_GPIO_Init+0x328>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_GPIO_Init+0x32c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d037      	beq.n	80023a2 <HAL_GPIO_Init+0x23e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a57      	ldr	r2, [pc, #348]	@ (8002494 <HAL_GPIO_Init+0x330>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d031      	beq.n	800239e <HAL_GPIO_Init+0x23a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a56      	ldr	r2, [pc, #344]	@ (8002498 <HAL_GPIO_Init+0x334>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02b      	beq.n	800239a <HAL_GPIO_Init+0x236>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a55      	ldr	r2, [pc, #340]	@ (800249c <HAL_GPIO_Init+0x338>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d025      	beq.n	8002396 <HAL_GPIO_Init+0x232>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a54      	ldr	r2, [pc, #336]	@ (80024a0 <HAL_GPIO_Init+0x33c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01f      	beq.n	8002392 <HAL_GPIO_Init+0x22e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a53      	ldr	r2, [pc, #332]	@ (80024a4 <HAL_GPIO_Init+0x340>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x22a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a52      	ldr	r2, [pc, #328]	@ (80024a8 <HAL_GPIO_Init+0x344>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x226>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a51      	ldr	r2, [pc, #324]	@ (80024ac <HAL_GPIO_Init+0x348>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a50      	ldr	r2, [pc, #320]	@ (80024b0 <HAL_GPIO_Init+0x34c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4f      	ldr	r2, [pc, #316]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x21a>
 800237a:	2309      	movs	r3, #9
 800237c:	e012      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800237e:	230a      	movs	r3, #10
 8002380:	e010      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002382:	2308      	movs	r3, #8
 8002384:	e00e      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002386:	2307      	movs	r3, #7
 8002388:	e00c      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800238a:	2306      	movs	r3, #6
 800238c:	e00a      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800238e:	2305      	movs	r3, #5
 8002390:	e008      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002392:	2304      	movs	r3, #4
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 8002396:	2303      	movs	r3, #3
 8002398:	e004      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800239a:	2302      	movs	r3, #2
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x240>
 80023a2:	2300      	movs	r3, #0
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b4:	4935      	ldr	r1, [pc, #212]	@ (800248c <HAL_GPIO_Init+0x328>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c2:	4b3d      	ldr	r3, [pc, #244]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e6:	4a34      	ldr	r2, [pc, #208]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ec:	4b32      	ldr	r3, [pc, #200]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002410:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002416:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243a:	4a1f      	ldr	r2, [pc, #124]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002464:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <HAL_GPIO_Init+0x354>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3301      	adds	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b0f      	cmp	r3, #15
 8002474:	f67f ae84 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40013800 	.word	0x40013800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400
 8002498:	40020800 	.word	0x40020800
 800249c:	40020c00 	.word	0x40020c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40021400 	.word	0x40021400
 80024a8:	40021800 	.word	0x40021800
 80024ac:	40021c00 	.word	0x40021c00
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40022400 	.word	0x40022400
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	041a      	lsls	r2, r3, #16
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43d9      	mvns	r1, r3
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	400b      	ands	r3, r1
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af02      	add	r7, sp, #8
 8002528:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e101      	b.n	8002738 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fa90 	bl	8000a74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2203      	movs	r2, #3
 8002558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002562:	d102      	bne.n	800256a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f001 fd1c 	bl	8003fac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7c1a      	ldrb	r2, [r3, #16]
 800257c:	f88d 2000 	strb.w	r2, [sp]
 8002580:	3304      	adds	r3, #4
 8002582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002584:	f001 fcae 	bl	8003ee4 <USB_CoreInit>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0ce      	b.n	8002738 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fd14 	bl	8003fce <USB_SetCurrentMode>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0bf      	b.n	8002738 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e04a      	b.n	8002654 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3315      	adds	r3, #21
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3314      	adds	r3, #20
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	b298      	uxth	r0, r3
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	332e      	adds	r3, #46	@ 0x2e
 80025fa:	4602      	mov	r2, r0
 80025fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3318      	adds	r3, #24
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	331c      	adds	r3, #28
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3320      	adds	r3, #32
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3324      	adds	r3, #36	@ 0x24
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3301      	adds	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3af      	bcc.n	80025be <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e044      	b.n	80026ee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	3301      	adds	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	791b      	ldrb	r3, [r3, #4]
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3b5      	bcc.n	8002664 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7c1a      	ldrb	r2, [r3, #16]
 8002700:	f88d 2000 	strb.w	r2, [sp]
 8002704:	3304      	adds	r3, #4
 8002706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002708:	f001 fcae 	bl	8004068 <USB_DevInit>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00c      	b.n	8002738 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f001 fe76 	bl	8004422 <USB_DevDisconnect>

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e267      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d075      	beq.n	800284a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275e:	4b88      	ldr	r3, [pc, #544]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b85      	ldr	r3, [pc, #532]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b82      	ldr	r3, [pc, #520]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002782:	d10b      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4b7e      	ldr	r3, [pc, #504]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05b      	beq.n	8002848 <HAL_RCC_OscConfig+0x108>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e242      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x74>
 80027a6:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x98>
 80027be:	4b70      	ldr	r3, [pc, #448]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027d8:	4b69      	ldr	r3, [pc, #420]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a68      	ldr	r2, [pc, #416]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b66      	ldr	r3, [pc, #408]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a65      	ldr	r2, [pc, #404]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fd32 	bl	8001260 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fd2e 	bl	8001260 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	@ 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e207      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b5b      	ldr	r3, [pc, #364]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xc0>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fd1e 	bl	8001260 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fd1a 	bl	8001260 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	@ 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1f3      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0xe8>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002856:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b44      	ldr	r3, [pc, #272]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1c7      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4937      	ldr	r1, [pc, #220]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b34      	ldr	r3, [pc, #208]	@ (8002984 <HAL_RCC_OscConfig+0x244>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fcd3 	bl	8001260 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe fccf 	bl	8001260 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1a8      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4925      	ldr	r1, [pc, #148]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <HAL_RCC_OscConfig+0x244>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fcb2 	bl	8001260 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fcae 	bl	8001260 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e187      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d036      	beq.n	8002998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_RCC_OscConfig+0x248>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fc92 	bl	8001260 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fc8e 	bl	8001260 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e167      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x240>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x200>
 800295e:	e01b      	b.n	8002998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_RCC_OscConfig+0x248>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fc7b 	bl	8001260 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e00e      	b.n	800298c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fc77 	bl	8001260 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d907      	bls.n	800298c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e150      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002980:	40023800 	.word	0x40023800
 8002984:	42470000 	.word	0x42470000
 8002988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ea      	bne.n	800296e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8097 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b81      	ldr	r3, [pc, #516]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b77      	ldr	r3, [pc, #476]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b74      	ldr	r3, [pc, #464]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a73      	ldr	r2, [pc, #460]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fc37 	bl	8001260 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe fc33 	bl	8001260 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e10c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <HAL_RCC_OscConfig+0x474>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x2ea>
 8002a1c:	4b64      	ldr	r3, [pc, #400]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	4a63      	ldr	r2, [pc, #396]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a28:	e01c      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x30c>
 8002a32:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0x324>
 8002a4c:	4b58      	ldr	r3, [pc, #352]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a57      	ldr	r2, [pc, #348]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	4b55      	ldr	r3, [pc, #340]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5c:	4a54      	ldr	r2, [pc, #336]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fbf8 	bl	8001260 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fbf4 	bl	8001260 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0cb      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b49      	ldr	r3, [pc, #292]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCC_OscConfig+0x334>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fbe2 	bl	8001260 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fbde 	bl	8001260 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0b5      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	4a38      	ldr	r2, [pc, #224]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a1 	beq.w	8002c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ade:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d05c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d141      	bne.n	8002b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af2:	4b31      	ldr	r3, [pc, #196]	@ (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fbb2 	bl	8001260 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fbae 	bl	8001260 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e087      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b12:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	019b      	lsls	r3, r3, #6
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	491b      	ldr	r1, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b48:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fb87 	bl	8001260 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe fb83 	bl	8001260 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e05c      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x416>
 8002b74:	e054      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <HAL_RCC_OscConfig+0x478>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fb70 	bl	8001260 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fb6c 	bl	8001260 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e045      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_RCC_OscConfig+0x470>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x444>
 8002ba2:	e03d      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e038      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x4ec>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d121      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0cc      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d90c      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b65      	ldr	r3, [pc, #404]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a58      	ldr	r2, [pc, #352]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d044      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d119      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	4b3f      	ldr	r3, [pc, #252]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e067      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b37      	ldr	r3, [pc, #220]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4934      	ldr	r1, [pc, #208]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d20:	f7fe fa9e 	bl	8001260 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe fa9a 	bl	8001260 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e04f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d20c      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f9fe 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023c00 	.word	0x40023c00
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08013164 	.word	0x08013164
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e00:	b094      	sub	sp, #80	@ 0x50
 8002e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e08:	2300      	movs	r3, #0
 8002e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e14:	4b79      	ldr	r3, [pc, #484]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d00d      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x40>
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	f200 80e1 	bhi.w	8002fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e2e:	e0db      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b73      	ldr	r3, [pc, #460]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e32:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e34:	e0db      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e36:	4b73      	ldr	r3, [pc, #460]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e3a:	e0d8      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e44:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e46:	4b6d      	ldr	r3, [pc, #436]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e66:	2300      	movs	r3, #0
 8002e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e6e:	4622      	mov	r2, r4
 8002e70:	462b      	mov	r3, r5
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	0159      	lsls	r1, r3, #5
 8002e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e80:	0150      	lsls	r0, r2, #5
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4621      	mov	r1, r4
 8002e88:	1a51      	subs	r1, r2, r1
 8002e8a:	6139      	str	r1, [r7, #16]
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	018b      	lsls	r3, r1, #6
 8002ea4:	4651      	mov	r1, sl
 8002ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eaa:	4651      	mov	r1, sl
 8002eac:	018a      	lsls	r2, r1, #6
 8002eae:	4651      	mov	r1, sl
 8002eb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ece:	4690      	mov	r8, r2
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	eb18 0303 	adds.w	r3, r8, r3
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	462b      	mov	r3, r5
 8002edc:	eb49 0303 	adc.w	r3, r9, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	024b      	lsls	r3, r1, #9
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ef8:	4621      	mov	r1, r4
 8002efa:	024a      	lsls	r2, r1, #9
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f0c:	f7fd f9c0 	bl	8000290 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f18:	e058      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b38      	ldr	r3, [pc, #224]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	4611      	mov	r1, r2
 8002f26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f34:	4642      	mov	r2, r8
 8002f36:	464b      	mov	r3, r9
 8002f38:	f04f 0000 	mov.w	r0, #0
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	0159      	lsls	r1, r3, #5
 8002f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f46:	0150      	lsls	r0, r2, #5
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f52:	4649      	mov	r1, r9
 8002f54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f70:	eb63 050b 	sbc.w	r5, r3, fp
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	00eb      	lsls	r3, r5, #3
 8002f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f82:	00e2      	lsls	r2, r4, #3
 8002f84:	4614      	mov	r4, r2
 8002f86:	461d      	mov	r5, r3
 8002f88:	4643      	mov	r3, r8
 8002f8a:	18e3      	adds	r3, r4, r3
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	464b      	mov	r3, r9
 8002f90:	eb45 0303 	adc.w	r3, r5, r3
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	028b      	lsls	r3, r1, #10
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fac:	4621      	mov	r1, r4
 8002fae:	028a      	lsls	r2, r1, #10
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc0:	f7fd f966 	bl	8000290 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3750      	adds	r7, #80	@ 0x50
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	00f42400 	.word	0x00f42400
 8003004:	007a1200 	.word	0x007a1200

08003008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b03      	ldr	r3, [pc, #12]	@ (800301c <HAL_RCC_GetHCLKFreq+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000000 	.word	0x20000000

08003020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003024:	f7ff fff0 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0a9b      	lsrs	r3, r3, #10
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	@ (8003044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	08013174 	.word	0x08013174

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800304c:	f7ff ffdc 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0b5b      	lsrs	r3, r3, #13
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	@ (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08013174 	.word	0x08013174

08003070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e041      	b.n	8003106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fc7c 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f000 fa7e 	bl	80035b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e04e      	b.n	80031c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a23      	ldr	r2, [pc, #140]	@ (80031d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003152:	d01d      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1f      	ldr	r2, [pc, #124]	@ (80031d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1e      	ldr	r2, [pc, #120]	@ (80031dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1c      	ldr	r2, [pc, #112]	@ (80031e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a19      	ldr	r2, [pc, #100]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x80>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a18      	ldr	r2, [pc, #96]	@ (80031ec <HAL_TIM_Base_Start_IT+0xdc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d111      	bne.n	80031b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d010      	beq.n	80031c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b2:	e007      	b.n	80031c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40000c00 	.word	0x40000c00
 80031e4:	40010400 	.word	0x40010400
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40001800 	.word	0x40001800

080031f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d020      	beq.n	8003254 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0202 	mvn.w	r2, #2
 8003224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f999 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f98b 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f99c 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d020      	beq.n	80032a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0204 	mvn.w	r2, #4
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2202      	movs	r2, #2
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f973 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f965 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f976 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d020      	beq.n	80032ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0208 	mvn.w	r2, #8
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2204      	movs	r2, #4
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f94d 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f93f 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f950 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d020      	beq.n	8003338 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01b      	beq.n	8003338 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0210 	mvn.w	r2, #16
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2208      	movs	r2, #8
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f927 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f919 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f92a 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0201 	mvn.w	r2, #1
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fcfc 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fae4 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f8fb 	bl	800359a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0220 	mvn.w	r2, #32
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fab6 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0b4      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d03e      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342a:	f200 8087 	bhi.w	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003432:	f000 8086 	beq.w	8003542 <HAL_TIM_ConfigClockSource+0x172>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343a:	d87f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b70      	cmp	r3, #112	@ 0x70
 800343e:	d01a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xa6>
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d87b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b60      	cmp	r3, #96	@ 0x60
 8003446:	d050      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11a>
 8003448:	2b60      	cmp	r3, #96	@ 0x60
 800344a:	d877      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b50      	cmp	r3, #80	@ 0x50
 800344e:	d03c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xfa>
 8003450:	2b50      	cmp	r3, #80	@ 0x50
 8003452:	d873      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d058      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13a>
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d86f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b30      	cmp	r3, #48	@ 0x30
 800345e:	d064      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b30      	cmp	r3, #48	@ 0x30
 8003462:	d86b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d060      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d867      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d05a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	e062      	b.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003486:	f000 f9b9 	bl	80037fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e04f      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b4:	f000 f9a2 	bl	80037fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 f916 	bl	8003708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2150      	movs	r1, #80	@ 0x50
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f96f 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e02c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 f935 	bl	8003766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2160      	movs	r1, #96	@ 0x60
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f95f 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 8003508:	e01c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 f8f6 	bl	8003708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	@ 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f94f 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 8003528:	e00c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f000 f946 	bl	80037c6 <TIM_ITRx_SetConfig>
      break;
 800353a:	e003      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e000      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a46      	ldr	r2, [pc, #280]	@ (80036dc <TIM_Base_SetConfig+0x12c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ce:	d00f      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a43      	ldr	r2, [pc, #268]	@ (80036e0 <TIM_Base_SetConfig+0x130>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a42      	ldr	r2, [pc, #264]	@ (80036e4 <TIM_Base_SetConfig+0x134>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a41      	ldr	r2, [pc, #260]	@ (80036e8 <TIM_Base_SetConfig+0x138>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a40      	ldr	r2, [pc, #256]	@ (80036ec <TIM_Base_SetConfig+0x13c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a35      	ldr	r2, [pc, #212]	@ (80036dc <TIM_Base_SetConfig+0x12c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003610:	d027      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a32      	ldr	r2, [pc, #200]	@ (80036e0 <TIM_Base_SetConfig+0x130>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d023      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a31      	ldr	r2, [pc, #196]	@ (80036e4 <TIM_Base_SetConfig+0x134>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01f      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a30      	ldr	r2, [pc, #192]	@ (80036e8 <TIM_Base_SetConfig+0x138>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2f      	ldr	r2, [pc, #188]	@ (80036ec <TIM_Base_SetConfig+0x13c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d017      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2e      	ldr	r2, [pc, #184]	@ (80036f0 <TIM_Base_SetConfig+0x140>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2d      	ldr	r2, [pc, #180]	@ (80036f4 <TIM_Base_SetConfig+0x144>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00f      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2c      	ldr	r2, [pc, #176]	@ (80036f8 <TIM_Base_SetConfig+0x148>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00b      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2b      	ldr	r2, [pc, #172]	@ (80036fc <TIM_Base_SetConfig+0x14c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2a      	ldr	r2, [pc, #168]	@ (8003700 <TIM_Base_SetConfig+0x150>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a29      	ldr	r2, [pc, #164]	@ (8003704 <TIM_Base_SetConfig+0x154>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a10      	ldr	r2, [pc, #64]	@ (80036dc <TIM_Base_SetConfig+0x12c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0xf8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a12      	ldr	r2, [pc, #72]	@ (80036ec <TIM_Base_SetConfig+0x13c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]
  }
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40010400 	.word	0x40010400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	40001800 	.word	0x40001800
 8003700:	40001c00 	.word	0x40001c00
 8003704:	40002000 	.word	0x40002000

08003708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 030a 	bic.w	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003766:	b480      	push	{r7}
 8003768:	b087      	sub	sp, #28
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 0210 	bic.w	r2, r3, #16
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	031b      	lsls	r3, r3, #12
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f043 0307 	orr.w	r3, r3, #7
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	431a      	orrs	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4313      	orrs	r3, r2
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003850:	2302      	movs	r3, #2
 8003852:	e05a      	b.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a0:	d01d      	beq.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d018      	beq.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a17      	ldr	r2, [pc, #92]	@ (800392c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a15      	ldr	r2, [pc, #84]	@ (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10c      	bne.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40010400 	.word	0x40010400
 800392c:	40014000 	.word	0x40014000
 8003930:	40001800 	.word	0x40001800

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd f82e 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	@ 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800399e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f82b 	bl	80039fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b0c0      	sub	sp, #256	@ 0x100
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	68d9      	ldr	r1, [r3, #12]
 8003a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	ea40 0301 	orr.w	r3, r0, r1
 8003a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a54:	f021 010c 	bic.w	r1, r1, #12
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a62:	430b      	orrs	r3, r1
 8003a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	6999      	ldr	r1, [r3, #24]
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	ea40 0301 	orr.w	r3, r0, r1
 8003a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc8 <UART_SetConfig+0x2cc>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d005      	beq.n	8003a9c <UART_SetConfig+0xa0>
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b8d      	ldr	r3, [pc, #564]	@ (8003ccc <UART_SetConfig+0x2d0>)
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d104      	bne.n	8003aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7ff fad4 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003aa4:	e003      	b.n	8003aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7ff fabb 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab8:	f040 810c 	bne.w	8003cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	1891      	adds	r1, r2, r2
 8003ad4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ade:	4621      	mov	r1, r4
 8003ae0:	eb12 0801 	adds.w	r8, r2, r1
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	eb43 0901 	adc.w	r9, r3, r1
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afe:	4690      	mov	r8, r2
 8003b00:	4699      	mov	r9, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	eb18 0303 	adds.w	r3, r8, r3
 8003b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	eb49 0303 	adc.w	r3, r9, r3
 8003b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	18db      	adds	r3, r3, r3
 8003b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b30:	4613      	mov	r3, r2
 8003b32:	eb42 0303 	adc.w	r3, r2, r3
 8003b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b40:	f7fc fba6 	bl	8000290 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4b61      	ldr	r3, [pc, #388]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	011c      	lsls	r4, r3, #4
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b74:	4641      	mov	r1, r8
 8003b76:	eb12 0a01 	adds.w	sl, r2, r1
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b94:	4692      	mov	sl, r2
 8003b96:	469b      	mov	fp, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	18db      	adds	r3, r3, r3
 8003bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bd6:	f7fc fb5b 	bl	8000290 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bf6:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c04:	441c      	add	r4, r3
 8003c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c18:	4642      	mov	r2, r8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c20:	415b      	adcs	r3, r3
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c28:	4641      	mov	r1, r8
 8003c2a:	1851      	adds	r1, r2, r1
 8003c2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c2e:	4649      	mov	r1, r9
 8003c30:	414b      	adcs	r3, r1
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c40:	4659      	mov	r1, fp
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4642      	mov	r2, r8
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	460a      	mov	r2, r1
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	18db      	adds	r3, r3, r3
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c82:	4613      	mov	r3, r2
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c92:	f7fc fafd 	bl	8000290 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	2164      	movs	r1, #100	@ 0x64
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	3332      	adds	r3, #50	@ 0x32
 8003cae:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <UART_SetConfig+0x2d4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	f003 0207 	and.w	r2, r3, #7
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4422      	add	r2, r4
 8003cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc4:	e106      	b.n	8003ed4 <UART_SetConfig+0x4d8>
 8003cc6:	bf00      	nop
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ce6:	4642      	mov	r2, r8
 8003ce8:	464b      	mov	r3, r9
 8003cea:	1891      	adds	r1, r2, r2
 8003cec:	6239      	str	r1, [r7, #32]
 8003cee:	415b      	adcs	r3, r3
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	1854      	adds	r4, r2, r1
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	eb43 0501 	adc.w	r5, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	eb45 0303 	adc.w	r3, r5, r3
 8003d22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d42:	4629      	mov	r1, r5
 8003d44:	008b      	lsls	r3, r1, #2
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	008a      	lsls	r2, r1, #2
 8003d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d54:	f7fc fa9c 	bl	8000290 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b60      	ldr	r3, [pc, #384]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011c      	lsls	r4, r3, #4
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	61b9      	str	r1, [r7, #24]
 8003d80:	415b      	adcs	r3, r3
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6139      	str	r1, [r7, #16]
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003de0:	4649      	mov	r1, r9
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dea:	4641      	mov	r1, r8
 8003dec:	008a      	lsls	r2, r1, #2
 8003dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003df2:	f7fc fa4d 	bl	8000290 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2264      	movs	r2, #100	@ 0x64
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	1acb      	subs	r3, r1, r3
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	3332      	adds	r3, #50	@ 0x32
 8003e10:	4a33      	ldr	r2, [pc, #204]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e1c:	441c      	add	r4, r3
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e22:	2200      	movs	r2, #0
 8003e24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	415b      	adcs	r3, r3
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	1851      	adds	r1, r2, r1
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	4649      	mov	r1, r9
 8003e44:	414b      	adcs	r3, r1
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e54:	4659      	mov	r1, fp
 8003e56:	00cb      	lsls	r3, r1, #3
 8003e58:	4651      	mov	r1, sl
 8003e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5e:	4651      	mov	r1, sl
 8003e60:	00ca      	lsls	r2, r1, #3
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e6e:	464b      	mov	r3, r9
 8003e70:	460a      	mov	r2, r1
 8003e72:	eb42 0303 	adc.w	r3, r2, r3
 8003e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e90:	4649      	mov	r1, r9
 8003e92:	008b      	lsls	r3, r1, #2
 8003e94:	4641      	mov	r1, r8
 8003e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	008a      	lsls	r2, r1, #2
 8003e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ea2:	f7fc f9f5 	bl	8000290 <__aeabi_uldivmod>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003eac:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2164      	movs	r1, #100	@ 0x64
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	3332      	adds	r3, #50	@ 0x32
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <UART_SetConfig+0x4e4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 020f 	and.w	r2, r3, #15
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4422      	add	r2, r4
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee0:	51eb851f 	.word	0x51eb851f

08003ee4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	f107 001c 	add.w	r0, r7, #28
 8003ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ef6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d123      	bne.n	8003f46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 faa0 	bl	8004480 <USB_CoreReset>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	e01b      	b.n	8003f7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa94 	bl	8004480 <USB_CoreReset>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f70:	e005      	b.n	8003f7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f7e:	7fbb      	ldrb	r3, [r7, #30]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10b      	bne.n	8003f9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f043 0206 	orr.w	r2, r3, #6
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fa8:	b004      	add	sp, #16
 8003faa:	4770      	bx	lr

08003fac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f023 0201 	bic.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d115      	bne.n	800401c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f7fd f93b 	bl	8001278 <HAL_Delay>
      ms += 10U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	330a      	adds	r3, #10
 8004006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fa2b 	bl	8004464 <USB_GetMode>
 800400e:	4603      	mov	r3, r0
 8004010:	2b01      	cmp	r3, #1
 8004012:	d01e      	beq.n	8004052 <USB_SetCurrentMode+0x84>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2bc7      	cmp	r3, #199	@ 0xc7
 8004018:	d9f0      	bls.n	8003ffc <USB_SetCurrentMode+0x2e>
 800401a:	e01a      	b.n	8004052 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d115      	bne.n	800404e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800402e:	200a      	movs	r0, #10
 8004030:	f7fd f922 	bl	8001278 <HAL_Delay>
      ms += 10U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	330a      	adds	r3, #10
 8004038:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa12 	bl	8004464 <USB_GetMode>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <USB_SetCurrentMode+0x84>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2bc7      	cmp	r3, #199	@ 0xc7
 800404a:	d9f0      	bls.n	800402e <USB_SetCurrentMode+0x60>
 800404c:	e001      	b.n	8004052 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e005      	b.n	800405e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2bc8      	cmp	r3, #200	@ 0xc8
 8004056:	d101      	bne.n	800405c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004068:	b084      	sub	sp, #16
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e009      	b.n	800409c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3340      	adds	r3, #64	@ 0x40
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	2200      	movs	r2, #0
 8004094:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3301      	adds	r3, #1
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b0e      	cmp	r3, #14
 80040a0:	d9f2      	bls.n	8004088 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11c      	bne.n	80040e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80040e2:	e00b      	b.n	80040fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004102:	461a      	mov	r2, r3
 8004104:	2300      	movs	r3, #0
 8004106:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004108:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10d      	bne.n	800412c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004118:	2100      	movs	r1, #0
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f968 	bl	80043f0 <USB_SetDevSpeed>
 8004120:	e008      	b.n	8004134 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004122:	2101      	movs	r1, #1
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f963 	bl	80043f0 <USB_SetDevSpeed>
 800412a:	e003      	b.n	8004134 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800412c:	2103      	movs	r1, #3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f95e 	bl	80043f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004134:	2110      	movs	r1, #16
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8fa 	bl	8004330 <USB_FlushTxFifo>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f924 	bl	8004394 <USB_FlushRxFifo>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415c:	461a      	mov	r2, r3
 800415e:	2300      	movs	r3, #0
 8004160:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004168:	461a      	mov	r2, r3
 800416a:	2300      	movs	r3, #0
 800416c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004174:	461a      	mov	r2, r3
 8004176:	2300      	movs	r3, #0
 8004178:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	e043      	b.n	8004208 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004192:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004196:	d118      	bne.n	80041ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041aa:	461a      	mov	r2, r3
 80041ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e013      	b.n	80041dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e008      	b.n	80041dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d6:	461a      	mov	r2, r3
 80041d8:	2300      	movs	r3, #0
 80041da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fa:	461a      	mov	r2, r3
 80041fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004200:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	3301      	adds	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800420c:	461a      	mov	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4293      	cmp	r3, r2
 8004212:	d3b5      	bcc.n	8004180 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e043      	b.n	80042a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800422c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004230:	d118      	bne.n	8004264 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004244:	461a      	mov	r2, r3
 8004246:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e013      	b.n	8004276 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425a:	461a      	mov	r2, r3
 800425c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e008      	b.n	8004276 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004270:	461a      	mov	r2, r3
 8004272:	2300      	movs	r3, #0
 8004274:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004282:	461a      	mov	r2, r3
 8004284:	2300      	movs	r3, #0
 8004286:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004294:	461a      	mov	r2, r3
 8004296:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800429a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	3301      	adds	r3, #1
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042a6:	461a      	mov	r2, r3
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d3b5      	bcc.n	800421a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80042ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f043 0210 	orr.w	r2, r3, #16
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <USB_DevInit+0x2c4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f043 0208 	orr.w	r2, r3, #8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004304:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004328:	b004      	add	sp, #16
 800432a:	4770      	bx	lr
 800432c:	803c3800 	.word	0x803c3800

08004330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800434a:	d901      	bls.n	8004350 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e01b      	b.n	8004388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	daf2      	bge.n	800433e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	019b      	lsls	r3, r3, #6
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004374:	d901      	bls.n	800437a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e006      	b.n	8004388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b20      	cmp	r3, #32
 8004384:	d0f0      	beq.n	8004368 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043ac:	d901      	bls.n	80043b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e018      	b.n	80043e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	daf2      	bge.n	80043a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2210      	movs	r2, #16
 80043c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043d0:	d901      	bls.n	80043d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e006      	b.n	80043e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d0f0      	beq.n	80043c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800443c:	f023 0303 	bic.w	r3, r3, #3
 8004440:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0301 	and.w	r3, r3, #1
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3301      	adds	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004498:	d901      	bls.n	800449e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e01b      	b.n	80044d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	daf2      	bge.n	800448c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044c2:	d901      	bls.n	80044c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e006      	b.n	80044d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d0f0      	beq.n	80044b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80044ea:	4b87      	ldr	r3, [pc, #540]	@ (8004708 <MX_LWIP_Init+0x224>)
 80044ec:	22c0      	movs	r2, #192	@ 0xc0
 80044ee:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80044f0:	4b85      	ldr	r3, [pc, #532]	@ (8004708 <MX_LWIP_Init+0x224>)
 80044f2:	22a8      	movs	r2, #168	@ 0xa8
 80044f4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80044f6:	4b84      	ldr	r3, [pc, #528]	@ (8004708 <MX_LWIP_Init+0x224>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 194;
 80044fc:	4b82      	ldr	r3, [pc, #520]	@ (8004708 <MX_LWIP_Init+0x224>)
 80044fe:	22c2      	movs	r2, #194	@ 0xc2
 8004500:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004502:	4b82      	ldr	r3, [pc, #520]	@ (800470c <MX_LWIP_Init+0x228>)
 8004504:	22ff      	movs	r2, #255	@ 0xff
 8004506:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004508:	4b80      	ldr	r3, [pc, #512]	@ (800470c <MX_LWIP_Init+0x228>)
 800450a:	22ff      	movs	r2, #255	@ 0xff
 800450c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800450e:	4b7f      	ldr	r3, [pc, #508]	@ (800470c <MX_LWIP_Init+0x228>)
 8004510:	22ff      	movs	r2, #255	@ 0xff
 8004512:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004514:	4b7d      	ldr	r3, [pc, #500]	@ (800470c <MX_LWIP_Init+0x228>)
 8004516:	2200      	movs	r2, #0
 8004518:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800451a:	4b7d      	ldr	r3, [pc, #500]	@ (8004710 <MX_LWIP_Init+0x22c>)
 800451c:	22c0      	movs	r2, #192	@ 0xc0
 800451e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004520:	4b7b      	ldr	r3, [pc, #492]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004522:	22a8      	movs	r2, #168	@ 0xa8
 8004524:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004526:	4b7a      	ldr	r3, [pc, #488]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004528:	2201      	movs	r2, #1
 800452a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800452c:	4b78      	ldr	r3, [pc, #480]	@ (8004710 <MX_LWIP_Init+0x22c>)
 800452e:	2201      	movs	r2, #1
 8004530:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004532:	f000 fb6f 	bl	8004c14 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004536:	4b74      	ldr	r3, [pc, #464]	@ (8004708 <MX_LWIP_Init+0x224>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	061a      	lsls	r2, r3, #24
 800453c:	4b72      	ldr	r3, [pc, #456]	@ (8004708 <MX_LWIP_Init+0x224>)
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	4b70      	ldr	r3, [pc, #448]	@ (8004708 <MX_LWIP_Init+0x224>)
 8004546:	789b      	ldrb	r3, [r3, #2]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	4313      	orrs	r3, r2
 800454c:	4a6e      	ldr	r2, [pc, #440]	@ (8004708 <MX_LWIP_Init+0x224>)
 800454e:	78d2      	ldrb	r2, [r2, #3]
 8004550:	4313      	orrs	r3, r2
 8004552:	061a      	lsls	r2, r3, #24
 8004554:	4b6c      	ldr	r3, [pc, #432]	@ (8004708 <MX_LWIP_Init+0x224>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	0619      	lsls	r1, r3, #24
 800455a:	4b6b      	ldr	r3, [pc, #428]	@ (8004708 <MX_LWIP_Init+0x224>)
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	4319      	orrs	r1, r3
 8004562:	4b69      	ldr	r3, [pc, #420]	@ (8004708 <MX_LWIP_Init+0x224>)
 8004564:	789b      	ldrb	r3, [r3, #2]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	430b      	orrs	r3, r1
 800456a:	4967      	ldr	r1, [pc, #412]	@ (8004708 <MX_LWIP_Init+0x224>)
 800456c:	78c9      	ldrb	r1, [r1, #3]
 800456e:	430b      	orrs	r3, r1
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004576:	431a      	orrs	r2, r3
 8004578:	4b63      	ldr	r3, [pc, #396]	@ (8004708 <MX_LWIP_Init+0x224>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	0619      	lsls	r1, r3, #24
 800457e:	4b62      	ldr	r3, [pc, #392]	@ (8004708 <MX_LWIP_Init+0x224>)
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	4319      	orrs	r1, r3
 8004586:	4b60      	ldr	r3, [pc, #384]	@ (8004708 <MX_LWIP_Init+0x224>)
 8004588:	789b      	ldrb	r3, [r3, #2]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	430b      	orrs	r3, r1
 800458e:	495e      	ldr	r1, [pc, #376]	@ (8004708 <MX_LWIP_Init+0x224>)
 8004590:	78c9      	ldrb	r1, [r1, #3]
 8004592:	430b      	orrs	r3, r1
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800459a:	431a      	orrs	r2, r3
 800459c:	4b5a      	ldr	r3, [pc, #360]	@ (8004708 <MX_LWIP_Init+0x224>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	0619      	lsls	r1, r3, #24
 80045a2:	4b59      	ldr	r3, [pc, #356]	@ (8004708 <MX_LWIP_Init+0x224>)
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	4319      	orrs	r1, r3
 80045aa:	4b57      	ldr	r3, [pc, #348]	@ (8004708 <MX_LWIP_Init+0x224>)
 80045ac:	789b      	ldrb	r3, [r3, #2]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	430b      	orrs	r3, r1
 80045b2:	4955      	ldr	r1, [pc, #340]	@ (8004708 <MX_LWIP_Init+0x224>)
 80045b4:	78c9      	ldrb	r1, [r1, #3]
 80045b6:	430b      	orrs	r3, r1
 80045b8:	0e1b      	lsrs	r3, r3, #24
 80045ba:	4313      	orrs	r3, r2
 80045bc:	4a55      	ldr	r2, [pc, #340]	@ (8004714 <MX_LWIP_Init+0x230>)
 80045be:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80045c0:	4b52      	ldr	r3, [pc, #328]	@ (800470c <MX_LWIP_Init+0x228>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	061a      	lsls	r2, r3, #24
 80045c6:	4b51      	ldr	r3, [pc, #324]	@ (800470c <MX_LWIP_Init+0x228>)
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	4b4f      	ldr	r3, [pc, #316]	@ (800470c <MX_LWIP_Init+0x228>)
 80045d0:	789b      	ldrb	r3, [r3, #2]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	4313      	orrs	r3, r2
 80045d6:	4a4d      	ldr	r2, [pc, #308]	@ (800470c <MX_LWIP_Init+0x228>)
 80045d8:	78d2      	ldrb	r2, [r2, #3]
 80045da:	4313      	orrs	r3, r2
 80045dc:	061a      	lsls	r2, r3, #24
 80045de:	4b4b      	ldr	r3, [pc, #300]	@ (800470c <MX_LWIP_Init+0x228>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	0619      	lsls	r1, r3, #24
 80045e4:	4b49      	ldr	r3, [pc, #292]	@ (800470c <MX_LWIP_Init+0x228>)
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	4319      	orrs	r1, r3
 80045ec:	4b47      	ldr	r3, [pc, #284]	@ (800470c <MX_LWIP_Init+0x228>)
 80045ee:	789b      	ldrb	r3, [r3, #2]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	430b      	orrs	r3, r1
 80045f4:	4945      	ldr	r1, [pc, #276]	@ (800470c <MX_LWIP_Init+0x228>)
 80045f6:	78c9      	ldrb	r1, [r1, #3]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004600:	431a      	orrs	r2, r3
 8004602:	4b42      	ldr	r3, [pc, #264]	@ (800470c <MX_LWIP_Init+0x228>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	0619      	lsls	r1, r3, #24
 8004608:	4b40      	ldr	r3, [pc, #256]	@ (800470c <MX_LWIP_Init+0x228>)
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	4319      	orrs	r1, r3
 8004610:	4b3e      	ldr	r3, [pc, #248]	@ (800470c <MX_LWIP_Init+0x228>)
 8004612:	789b      	ldrb	r3, [r3, #2]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	430b      	orrs	r3, r1
 8004618:	493c      	ldr	r1, [pc, #240]	@ (800470c <MX_LWIP_Init+0x228>)
 800461a:	78c9      	ldrb	r1, [r1, #3]
 800461c:	430b      	orrs	r3, r1
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004624:	431a      	orrs	r2, r3
 8004626:	4b39      	ldr	r3, [pc, #228]	@ (800470c <MX_LWIP_Init+0x228>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	0619      	lsls	r1, r3, #24
 800462c:	4b37      	ldr	r3, [pc, #220]	@ (800470c <MX_LWIP_Init+0x228>)
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	4319      	orrs	r1, r3
 8004634:	4b35      	ldr	r3, [pc, #212]	@ (800470c <MX_LWIP_Init+0x228>)
 8004636:	789b      	ldrb	r3, [r3, #2]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	430b      	orrs	r3, r1
 800463c:	4933      	ldr	r1, [pc, #204]	@ (800470c <MX_LWIP_Init+0x228>)
 800463e:	78c9      	ldrb	r1, [r1, #3]
 8004640:	430b      	orrs	r3, r1
 8004642:	0e1b      	lsrs	r3, r3, #24
 8004644:	4313      	orrs	r3, r2
 8004646:	4a34      	ldr	r2, [pc, #208]	@ (8004718 <MX_LWIP_Init+0x234>)
 8004648:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800464a:	4b31      	ldr	r3, [pc, #196]	@ (8004710 <MX_LWIP_Init+0x22c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	061a      	lsls	r2, r3, #24
 8004650:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	431a      	orrs	r2, r3
 8004658:	4b2d      	ldr	r3, [pc, #180]	@ (8004710 <MX_LWIP_Init+0x22c>)
 800465a:	789b      	ldrb	r3, [r3, #2]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	4313      	orrs	r3, r2
 8004660:	4a2b      	ldr	r2, [pc, #172]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004662:	78d2      	ldrb	r2, [r2, #3]
 8004664:	4313      	orrs	r3, r2
 8004666:	061a      	lsls	r2, r3, #24
 8004668:	4b29      	ldr	r3, [pc, #164]	@ (8004710 <MX_LWIP_Init+0x22c>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	0619      	lsls	r1, r3, #24
 800466e:	4b28      	ldr	r3, [pc, #160]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	4319      	orrs	r1, r3
 8004676:	4b26      	ldr	r3, [pc, #152]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	430b      	orrs	r3, r1
 800467e:	4924      	ldr	r1, [pc, #144]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004680:	78c9      	ldrb	r1, [r1, #3]
 8004682:	430b      	orrs	r3, r1
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800468a:	431a      	orrs	r2, r3
 800468c:	4b20      	ldr	r3, [pc, #128]	@ (8004710 <MX_LWIP_Init+0x22c>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	0619      	lsls	r1, r3, #24
 8004692:	4b1f      	ldr	r3, [pc, #124]	@ (8004710 <MX_LWIP_Init+0x22c>)
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	4319      	orrs	r1, r3
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <MX_LWIP_Init+0x22c>)
 800469c:	789b      	ldrb	r3, [r3, #2]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	430b      	orrs	r3, r1
 80046a2:	491b      	ldr	r1, [pc, #108]	@ (8004710 <MX_LWIP_Init+0x22c>)
 80046a4:	78c9      	ldrb	r1, [r1, #3]
 80046a6:	430b      	orrs	r3, r1
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80046ae:	431a      	orrs	r2, r3
 80046b0:	4b17      	ldr	r3, [pc, #92]	@ (8004710 <MX_LWIP_Init+0x22c>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	0619      	lsls	r1, r3, #24
 80046b6:	4b16      	ldr	r3, [pc, #88]	@ (8004710 <MX_LWIP_Init+0x22c>)
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	4319      	orrs	r1, r3
 80046be:	4b14      	ldr	r3, [pc, #80]	@ (8004710 <MX_LWIP_Init+0x22c>)
 80046c0:	789b      	ldrb	r3, [r3, #2]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	430b      	orrs	r3, r1
 80046c6:	4912      	ldr	r1, [pc, #72]	@ (8004710 <MX_LWIP_Init+0x22c>)
 80046c8:	78c9      	ldrb	r1, [r1, #3]
 80046ca:	430b      	orrs	r3, r1
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	4313      	orrs	r3, r2
 80046d0:	4a12      	ldr	r2, [pc, #72]	@ (800471c <MX_LWIP_Init+0x238>)
 80046d2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80046d4:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <MX_LWIP_Init+0x23c>)
 80046d6:	9302      	str	r3, [sp, #8]
 80046d8:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <MX_LWIP_Init+0x240>)
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	2300      	movs	r3, #0
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <MX_LWIP_Init+0x238>)
 80046e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004718 <MX_LWIP_Init+0x234>)
 80046e4:	490b      	ldr	r1, [pc, #44]	@ (8004714 <MX_LWIP_Init+0x230>)
 80046e6:	4810      	ldr	r0, [pc, #64]	@ (8004728 <MX_LWIP_Init+0x244>)
 80046e8:	f000 ff80 	bl	80055ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80046ec:	480e      	ldr	r0, [pc, #56]	@ (8004728 <MX_LWIP_Init+0x244>)
 80046ee:	f001 f92f 	bl	8005950 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80046f2:	480d      	ldr	r0, [pc, #52]	@ (8004728 <MX_LWIP_Init+0x244>)
 80046f4:	f001 f93c 	bl	8005970 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80046f8:	490c      	ldr	r1, [pc, #48]	@ (800472c <MX_LWIP_Init+0x248>)
 80046fa:	480b      	ldr	r0, [pc, #44]	@ (8004728 <MX_LWIP_Init+0x244>)
 80046fc:	f001 f9a4 	bl	8005a48 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000658 	.word	0x20000658
 800470c:	2000065c 	.word	0x2000065c
 8004710:	20000660 	.word	0x20000660
 8004714:	2000064c 	.word	0x2000064c
 8004718:	20000650 	.word	0x20000650
 800471c:	20000654 	.word	0x20000654
 8004720:	0800f1ad 	.word	0x0800f1ad
 8004724:	08004a25 	.word	0x08004a25
 8004728:	20000618 	.word	0x20000618
 800472c:	08004781 	.word	0x08004781

08004730 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004738:	f7fc fd92 	bl	8001260 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <Ethernet_Link_Periodic_Handle+0x30>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b63      	cmp	r3, #99	@ 0x63
 8004746:	d907      	bls.n	8004758 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004748:	f7fc fd8a 	bl	8001260 <HAL_GetTick>
 800474c:	4603      	mov	r3, r0
 800474e:	4a04      	ldr	r2, [pc, #16]	@ (8004760 <Ethernet_Link_Periodic_Handle+0x30>)
 8004750:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9b5 	bl	8004ac2 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000614 	.word	0x20000614

08004764 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004768:	4804      	ldr	r0, [pc, #16]	@ (800477c <MX_LWIP_Process+0x18>)
 800476a:	f000 f93b 	bl	80049e4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800476e:	f008 f8d1 	bl	800c914 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004772:	4802      	ldr	r0, [pc, #8]	@ (800477c <MX_LWIP_Process+0x18>)
 8004774:	f7ff ffdc 	bl	8004730 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004778:	bf00      	nop
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000618 	.word	0x20000618

08004780 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80047a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004894 <low_level_init+0x100>)
 80047a2:	4a3d      	ldr	r2, [pc, #244]	@ (8004898 <low_level_init+0x104>)
 80047a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80047a6:	2300      	movs	r3, #0
 80047a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80047aa:	2380      	movs	r3, #128	@ 0x80
 80047ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80047ae:	23e1      	movs	r3, #225	@ 0xe1
 80047b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80047b2:	2300      	movs	r3, #0
 80047b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80047b6:	2300      	movs	r3, #0
 80047b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80047ba:	2300      	movs	r3, #0
 80047bc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80047be:	4a35      	ldr	r2, [pc, #212]	@ (8004894 <low_level_init+0x100>)
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80047c6:	4b33      	ldr	r3, [pc, #204]	@ (8004894 <low_level_init+0x100>)
 80047c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047cc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80047ce:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <low_level_init+0x100>)
 80047d0:	4a32      	ldr	r2, [pc, #200]	@ (800489c <low_level_init+0x108>)
 80047d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80047d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004894 <low_level_init+0x100>)
 80047d6:	4a32      	ldr	r2, [pc, #200]	@ (80048a0 <low_level_init+0x10c>)
 80047d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80047da:	4b2e      	ldr	r3, [pc, #184]	@ (8004894 <low_level_init+0x100>)
 80047dc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80047e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80047e2:	482c      	ldr	r0, [pc, #176]	@ (8004894 <low_level_init+0x100>)
 80047e4:	f7fc fe7e 	bl	80014e4 <HAL_ETH_Init>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80047ec:	2238      	movs	r2, #56	@ 0x38
 80047ee:	2100      	movs	r1, #0
 80047f0:	482c      	ldr	r0, [pc, #176]	@ (80048a4 <low_level_init+0x110>)
 80047f2:	f00a ff50 	bl	800f696 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80047f6:	4b2b      	ldr	r3, [pc, #172]	@ (80048a4 <low_level_init+0x110>)
 80047f8:	2221      	movs	r2, #33	@ 0x21
 80047fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80047fc:	4b29      	ldr	r3, [pc, #164]	@ (80048a4 <low_level_init+0x110>)
 80047fe:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004802:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <low_level_init+0x110>)
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800480a:	4827      	ldr	r0, [pc, #156]	@ (80048a8 <low_level_init+0x114>)
 800480c:	f000 fdb6 	bl	800537c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2206      	movs	r2, #6
 8004814:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004818:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <low_level_init+0x100>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004824:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <low_level_init+0x100>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	785a      	ldrb	r2, [r3, #1]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004830:	4b18      	ldr	r3, [pc, #96]	@ (8004894 <low_level_init+0x100>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	789a      	ldrb	r2, [r3, #2]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800483c:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <low_level_init+0x100>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	78da      	ldrb	r2, [r3, #3]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004848:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <low_level_init+0x100>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	791a      	ldrb	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <low_level_init+0x100>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	795a      	ldrb	r2, [r3, #5]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004866:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800486e:	f043 030a 	orr.w	r3, r3, #10
 8004872:	b2da      	uxtb	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d103      	bne.n	8004888 <low_level_init+0xf4>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f91e 	bl	8004ac2 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004886:	e001      	b.n	800488c <low_level_init+0xf8>
    Error_Handler();
 8004888:	f7fc f856 	bl	8000938 <Error_Handler>
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20005130 	.word	0x20005130
 8004898:	40028000 	.word	0x40028000
 800489c:	20005090 	.word	0x20005090
 80048a0:	20004ff0 	.word	0x20004ff0
 80048a4:	200051e0 	.word	0x200051e0
 80048a8:	0801317c 	.word	0x0801317c

080048ac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b092      	sub	sp, #72	@ 0x48
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	2230      	movs	r2, #48	@ 0x30
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f00a fee2 	bl	800f696 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80048d2:	f107 030c 	add.w	r3, r7, #12
 80048d6:	2230      	movs	r2, #48	@ 0x30
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f00a fedb 	bl	800f696 <memset>

  for(q = p; q != NULL; q = q->next)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048e4:	e045      	b.n	8004972 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80048e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d902      	bls.n	80048f2 <low_level_output+0x46>
      return ERR_IF;
 80048ec:	f06f 030b 	mvn.w	r3, #11
 80048f0:	e055      	b.n	800499e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80048f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3348      	adds	r3, #72	@ 0x48
 8004902:	443b      	add	r3, r7
 8004904:	3b3c      	subs	r3, #60	@ 0x3c
 8004906:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800490a:	895b      	ldrh	r3, [r3, #10]
 800490c:	4619      	mov	r1, r3
 800490e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004910:	4613      	mov	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	3348      	adds	r3, #72	@ 0x48
 800491a:	443b      	add	r3, r7
 800491c:	3b38      	subs	r3, #56	@ 0x38
 800491e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004922:	2b00      	cmp	r3, #0
 8004924:	d011      	beq.n	800494a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	f107 000c 	add.w	r0, r7, #12
 800492e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004930:	460b      	mov	r3, r1
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	440b      	add	r3, r1
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	18c1      	adds	r1, r0, r3
 800493a:	4613      	mov	r3, r2
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	3348      	adds	r3, #72	@ 0x48
 8004944:	443b      	add	r3, r7
 8004946:	3b34      	subs	r3, #52	@ 0x34
 8004948:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800494a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3348      	adds	r3, #72	@ 0x48
 800495e:	443b      	add	r3, r7
 8004960:	3b34      	subs	r3, #52	@ 0x34
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004968:	3301      	adds	r3, #1
 800496a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800496c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	643b      	str	r3, [r7, #64]	@ 0x40
 8004972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1b6      	bne.n	80048e6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	891b      	ldrh	r3, [r3, #8]
 800497c:	461a      	mov	r2, r3
 800497e:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <low_level_output+0xfc>)
 8004980:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004982:	4a09      	ldr	r2, [pc, #36]	@ (80049a8 <low_level_output+0xfc>)
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800498a:	4a07      	ldr	r2, [pc, #28]	@ (80049a8 <low_level_output+0xfc>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004990:	2214      	movs	r2, #20
 8004992:	4905      	ldr	r1, [pc, #20]	@ (80049a8 <low_level_output+0xfc>)
 8004994:	4805      	ldr	r0, [pc, #20]	@ (80049ac <low_level_output+0x100>)
 8004996:	f7fc fe2d 	bl	80015f4 <HAL_ETH_Transmit>

  return errval;
 800499a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3748      	adds	r7, #72	@ 0x48
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200051e0 	.word	0x200051e0
 80049ac:	20005130 	.word	0x20005130

080049b0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <low_level_input+0x2c>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	4619      	mov	r1, r3
 80049ca:	4805      	ldr	r0, [pc, #20]	@ (80049e0 <low_level_input+0x30>)
 80049cc:	f7fc fea6 	bl	800171c <HAL_ETH_ReadData>
  }

  return p;
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20004fec 	.word	0x20004fec
 80049e0:	20005130 	.word	0x20005130

080049e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ffdd 	bl	80049b0 <low_level_input>
 80049f6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	4798      	blx	r3
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 fb9a 	bl	8006148 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ea      	bne.n	80049f0 <ethernetif_input+0xc>
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <ethernetif_init+0x1c>
 8004a32:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <ethernetif_init+0x48>)
 8004a34:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004a38:	490d      	ldr	r1, [pc, #52]	@ (8004a70 <ethernetif_init+0x4c>)
 8004a3a:	480e      	ldr	r0, [pc, #56]	@ (8004a74 <ethernetif_init+0x50>)
 8004a3c:	f00a fd8c 	bl	800f558 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2273      	movs	r2, #115	@ 0x73
 8004a44:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2274      	movs	r2, #116	@ 0x74
 8004a4c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <ethernetif_init+0x54>)
 8004a54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a08      	ldr	r2, [pc, #32]	@ (8004a7c <ethernetif_init+0x58>)
 8004a5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fe99 	bl	8004794 <low_level_init>

  return ERR_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	08010784 	.word	0x08010784
 8004a70:	080107a0 	.word	0x080107a0
 8004a74:	080107b0 	.word	0x080107b0
 8004a78:	0800d545 	.word	0x0800d545
 8004a7c:	080048ad 	.word	0x080048ad

08004a80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004a8c:	68f9      	ldr	r1, [r7, #12]
 8004a8e:	4807      	ldr	r0, [pc, #28]	@ (8004aac <pbuf_free_custom+0x2c>)
 8004a90:	f000 fd56 	bl	8005540 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004a94:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <pbuf_free_custom+0x30>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d102      	bne.n	8004aa2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <pbuf_free_custom+0x30>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	0801317c 	.word	0x0801317c
 8004ab0:	20004fec 	.word	0x20004fec

08004ab4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ab8:	f7fc fbd2 	bl	8001260 <HAL_GetTick>
 8004abc:	4603      	mov	r3, r0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]

}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004ae0:	4812      	ldr	r0, [pc, #72]	@ (8004b2c <HAL_ETH_RxAllocateCallback+0x54>)
 8004ae2:	f000 fcbf 	bl	8005464 <memp_malloc_pool>
 8004ae6:	60f8      	str	r0, [r7, #12]
  if (p)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d014      	beq.n	8004b18 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f103 0220 	add.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a0d      	ldr	r2, [pc, #52]	@ (8004b30 <HAL_ETH_RxAllocateCallback+0x58>)
 8004afc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2241      	movs	r2, #65	@ 0x41
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2000      	movs	r0, #0
 8004b12:	f001 f95f 	bl	8005dd4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004b16:	e005      	b.n	8004b24 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004b18:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	0801317c 	.word	0x0801317c
 8004b30:	08004a81 	.word	0x08004a81
 8004b34:	20004fec 	.word	0x20004fec

08004b38 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	@ 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3b20      	subs	r3, #32
 8004b56:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2200      	movs	r2, #0
 8004b62:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e003      	b.n	8004b82 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e009      	b.n	8004ba4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	891a      	ldrh	r2, [r3, #8]
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	4413      	add	r3, r2
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f2      	bne.n	8004b90 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	3724      	adds	r7, #36	@ 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	b21a      	sxth	r2, r3
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	b21b      	sxth	r3, r3
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	b21b      	sxth	r3, r3
 8004bd4:	b29b      	uxth	r3, r3
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	061a      	lsls	r2, r3, #24
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	4313      	orrs	r3, r2
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004c1e:	f000 f8d5 	bl	8004dcc <mem_init>
  memp_init();
 8004c22:	f000 fbdb 	bl	80053dc <memp_init>
  pbuf_init();
  netif_init();
 8004c26:	f000 fcd9 	bl	80055dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004c2a:	f007 feb5 	bl	800c998 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004c2e:	f001 fdab 	bl	8006788 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004c32:	f007 fe27 	bl	800c884 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004c4a:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <ptr_to_mem+0x20>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	4413      	add	r3, r2
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20005884 	.word	0x20005884

08004c64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <mem_to_ptr+0x20>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	b29b      	uxth	r3, r3
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20005884 	.word	0x20005884

08004c88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004c90:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <plug_holes+0x120>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d206      	bcs.n	8004ca8 <plug_holes+0x20>
 8004c9a:	4b44      	ldr	r3, [pc, #272]	@ (8004dac <plug_holes+0x124>)
 8004c9c:	f240 12df 	movw	r2, #479	@ 0x1df
 8004ca0:	4943      	ldr	r1, [pc, #268]	@ (8004db0 <plug_holes+0x128>)
 8004ca2:	4844      	ldr	r0, [pc, #272]	@ (8004db4 <plug_holes+0x12c>)
 8004ca4:	f00a fc58 	bl	800f558 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004ca8:	4b43      	ldr	r3, [pc, #268]	@ (8004db8 <plug_holes+0x130>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d306      	bcc.n	8004cc0 <plug_holes+0x38>
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <plug_holes+0x124>)
 8004cb4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004cb8:	4940      	ldr	r1, [pc, #256]	@ (8004dbc <plug_holes+0x134>)
 8004cba:	483e      	ldr	r0, [pc, #248]	@ (8004db4 <plug_holes+0x12c>)
 8004cbc:	f00a fc4c 	bl	800f558 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	791b      	ldrb	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <plug_holes+0x4e>
 8004cc8:	4b38      	ldr	r3, [pc, #224]	@ (8004dac <plug_holes+0x124>)
 8004cca:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8004cce:	493c      	ldr	r1, [pc, #240]	@ (8004dc0 <plug_holes+0x138>)
 8004cd0:	4838      	ldr	r0, [pc, #224]	@ (8004db4 <plug_holes+0x12c>)
 8004cd2:	f00a fc41 	bl	800f558 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004cde:	d906      	bls.n	8004cee <plug_holes+0x66>
 8004ce0:	4b32      	ldr	r3, [pc, #200]	@ (8004dac <plug_holes+0x124>)
 8004ce2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004ce6:	4937      	ldr	r1, [pc, #220]	@ (8004dc4 <plug_holes+0x13c>)
 8004ce8:	4832      	ldr	r0, [pc, #200]	@ (8004db4 <plug_holes+0x12c>)
 8004cea:	f00a fc35 	bl	800f558 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ffa4 	bl	8004c40 <ptr_to_mem>
 8004cf8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d024      	beq.n	8004d4c <plug_holes+0xc4>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	791b      	ldrb	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d120      	bne.n	8004d4c <plug_holes+0xc4>
 8004d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004db8 <plug_holes+0x130>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d01b      	beq.n	8004d4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004d14:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <plug_holes+0x140>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d102      	bne.n	8004d24 <plug_holes+0x9c>
      lfree = mem;
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc8 <plug_holes+0x140>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	881a      	ldrh	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004d34:	d00a      	beq.n	8004d4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ff80 	bl	8004c40 <ptr_to_mem>
 8004d40:	4604      	mov	r4, r0
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ff8e 	bl	8004c64 <mem_to_ptr>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	885b      	ldrh	r3, [r3, #2]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff75 	bl	8004c40 <ptr_to_mem>
 8004d56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d01f      	beq.n	8004da0 <plug_holes+0x118>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	791b      	ldrb	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11b      	bne.n	8004da0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004d68:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <plug_holes+0x140>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d102      	bne.n	8004d78 <plug_holes+0xf0>
      lfree = pmem;
 8004d72:	4a15      	ldr	r2, [pc, #84]	@ (8004dc8 <plug_holes+0x140>)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	881a      	ldrh	r2, [r3, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004d88:	d00a      	beq.n	8004da0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff56 	bl	8004c40 <ptr_to_mem>
 8004d94:	4604      	mov	r4, r0
 8004d96:	68b8      	ldr	r0, [r7, #8]
 8004d98:	f7ff ff64 	bl	8004c64 <mem_to_ptr>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd90      	pop	{r4, r7, pc}
 8004da8:	20005884 	.word	0x20005884
 8004dac:	080107d8 	.word	0x080107d8
 8004db0:	08010808 	.word	0x08010808
 8004db4:	08010820 	.word	0x08010820
 8004db8:	20005888 	.word	0x20005888
 8004dbc:	08010848 	.word	0x08010848
 8004dc0:	08010864 	.word	0x08010864
 8004dc4:	08010880 	.word	0x08010880
 8004dc8:	2000588c 	.word	0x2000588c

08004dcc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004dd2:	4b18      	ldr	r3, [pc, #96]	@ (8004e34 <mem_init+0x68>)
 8004dd4:	3303      	adds	r3, #3
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b16      	ldr	r3, [pc, #88]	@ (8004e38 <mem_init+0x6c>)
 8004dde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004de0:	4b15      	ldr	r3, [pc, #84]	@ (8004e38 <mem_init+0x6c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004dec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004dfa:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004dfe:	f7ff ff1f 	bl	8004c40 <ptr_to_mem>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4a0d      	ldr	r2, [pc, #52]	@ (8004e3c <mem_init+0x70>)
 8004e06:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004e08:	4b0c      	ldr	r3, [pc, #48]	@ (8004e3c <mem_init+0x70>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004e10:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <mem_init+0x70>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004e18:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004e1a:	4b08      	ldr	r3, [pc, #32]	@ (8004e3c <mem_init+0x70>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004e22:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004e24:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <mem_init+0x6c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a05      	ldr	r2, [pc, #20]	@ (8004e40 <mem_init+0x74>)
 8004e2a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20005230 	.word	0x20005230
 8004e38:	20005884 	.word	0x20005884
 8004e3c:	20005888 	.word	0x20005888
 8004e40:	2000588c 	.word	0x2000588c

08004e44 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff09 	bl	8004c64 <mem_to_ptr>
 8004e52:	4603      	mov	r3, r0
 8004e54:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fef0 	bl	8004c40 <ptr_to_mem>
 8004e60:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	885b      	ldrh	r3, [r3, #2]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff feea 	bl	8004c40 <ptr_to_mem>
 8004e6c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e76:	d818      	bhi.n	8004eaa <mem_link_valid+0x66>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	885b      	ldrh	r3, [r3, #2]
 8004e7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e80:	d813      	bhi.n	8004eaa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e86:	8afa      	ldrh	r2, [r7, #22]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d004      	beq.n	8004e96 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	8afa      	ldrh	r2, [r7, #22]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d109      	bne.n	8004eaa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004e96:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <mem_link_valid+0x74>)
 8004e98:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d006      	beq.n	8004eae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	885b      	ldrh	r3, [r3, #2]
 8004ea4:	8afa      	ldrh	r2, [r7, #22]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d001      	beq.n	8004eae <mem_link_valid+0x6a>
    return 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <mem_link_valid+0x6c>
  }
  return 1;
 8004eae:	2301      	movs	r3, #1
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20005888 	.word	0x20005888

08004ebc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d04c      	beq.n	8004f64 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004ed4:	4b25      	ldr	r3, [pc, #148]	@ (8004f6c <mem_free+0xb0>)
 8004ed6:	f240 2273 	movw	r2, #627	@ 0x273
 8004eda:	4925      	ldr	r1, [pc, #148]	@ (8004f70 <mem_free+0xb4>)
 8004edc:	4825      	ldr	r0, [pc, #148]	@ (8004f74 <mem_free+0xb8>)
 8004ede:	f00a fb3b 	bl	800f558 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ee2:	e040      	b.n	8004f66 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3b08      	subs	r3, #8
 8004ee8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004eea:	4b23      	ldr	r3, [pc, #140]	@ (8004f78 <mem_free+0xbc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d306      	bcc.n	8004f02 <mem_free+0x46>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f103 020c 	add.w	r2, r3, #12
 8004efa:	4b20      	ldr	r3, [pc, #128]	@ (8004f7c <mem_free+0xc0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d907      	bls.n	8004f12 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004f02:	4b1a      	ldr	r3, [pc, #104]	@ (8004f6c <mem_free+0xb0>)
 8004f04:	f240 227f 	movw	r2, #639	@ 0x27f
 8004f08:	491d      	ldr	r1, [pc, #116]	@ (8004f80 <mem_free+0xc4>)
 8004f0a:	481a      	ldr	r0, [pc, #104]	@ (8004f74 <mem_free+0xb8>)
 8004f0c:	f00a fb24 	bl	800f558 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f10:	e029      	b.n	8004f66 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	791b      	ldrb	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004f1a:	4b14      	ldr	r3, [pc, #80]	@ (8004f6c <mem_free+0xb0>)
 8004f1c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004f20:	4918      	ldr	r1, [pc, #96]	@ (8004f84 <mem_free+0xc8>)
 8004f22:	4814      	ldr	r0, [pc, #80]	@ (8004f74 <mem_free+0xb8>)
 8004f24:	f00a fb18 	bl	800f558 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f28:	e01d      	b.n	8004f66 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff ff8a 	bl	8004e44 <mem_link_valid>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <mem_free+0xb0>)
 8004f38:	f240 2295 	movw	r2, #661	@ 0x295
 8004f3c:	4912      	ldr	r1, [pc, #72]	@ (8004f88 <mem_free+0xcc>)
 8004f3e:	480d      	ldr	r0, [pc, #52]	@ (8004f74 <mem_free+0xb8>)
 8004f40:	f00a fb0a 	bl	800f558 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004f44:	e00f      	b.n	8004f66 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <mem_free+0xd0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d202      	bcs.n	8004f5c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004f56:	4a0d      	ldr	r2, [pc, #52]	@ (8004f8c <mem_free+0xd0>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff fe93 	bl	8004c88 <plug_holes>
 8004f62:	e000      	b.n	8004f66 <mem_free+0xaa>
    return;
 8004f64:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	080107d8 	.word	0x080107d8
 8004f70:	080108ac 	.word	0x080108ac
 8004f74:	08010820 	.word	0x08010820
 8004f78:	20005884 	.word	0x20005884
 8004f7c:	20005888 	.word	0x20005888
 8004f80:	080108d0 	.word	0x080108d0
 8004f84:	080108ec 	.word	0x080108ec
 8004f88:	08010914 	.word	0x08010914
 8004f8c:	2000588c 	.word	0x2000588c

08004f90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	3303      	adds	r3, #3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004fa8:	8bfb      	ldrh	r3, [r7, #30]
 8004faa:	2b0b      	cmp	r3, #11
 8004fac:	d801      	bhi.n	8004fb2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004fae:	230c      	movs	r3, #12
 8004fb0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004fb2:	8bfb      	ldrh	r3, [r7, #30]
 8004fb4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004fb8:	d803      	bhi.n	8004fc2 <mem_trim+0x32>
 8004fba:	8bfa      	ldrh	r2, [r7, #30]
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d201      	bcs.n	8004fc6 <mem_trim+0x36>
    return NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e0cc      	b.n	8005160 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004fc6:	4b68      	ldr	r3, [pc, #416]	@ (8005168 <mem_trim+0x1d8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d304      	bcc.n	8004fda <mem_trim+0x4a>
 8004fd0:	4b66      	ldr	r3, [pc, #408]	@ (800516c <mem_trim+0x1dc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d306      	bcc.n	8004fe8 <mem_trim+0x58>
 8004fda:	4b65      	ldr	r3, [pc, #404]	@ (8005170 <mem_trim+0x1e0>)
 8004fdc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004fe0:	4964      	ldr	r1, [pc, #400]	@ (8005174 <mem_trim+0x1e4>)
 8004fe2:	4865      	ldr	r0, [pc, #404]	@ (8005178 <mem_trim+0x1e8>)
 8004fe4:	f00a fab8 	bl	800f558 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004fe8:	4b5f      	ldr	r3, [pc, #380]	@ (8005168 <mem_trim+0x1d8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d304      	bcc.n	8004ffc <mem_trim+0x6c>
 8004ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800516c <mem_trim+0x1dc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d301      	bcc.n	8005000 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	e0af      	b.n	8005160 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3b08      	subs	r3, #8
 8005004:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005006:	69b8      	ldr	r0, [r7, #24]
 8005008:	f7ff fe2c 	bl	8004c64 <mem_to_ptr>
 800500c:	4603      	mov	r3, r0
 800500e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	881a      	ldrh	r2, [r3, #0]
 8005014:	8afb      	ldrh	r3, [r7, #22]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b08      	subs	r3, #8
 800501c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800501e:	8bfa      	ldrh	r2, [r7, #30]
 8005020:	8abb      	ldrh	r3, [r7, #20]
 8005022:	429a      	cmp	r2, r3
 8005024:	d906      	bls.n	8005034 <mem_trim+0xa4>
 8005026:	4b52      	ldr	r3, [pc, #328]	@ (8005170 <mem_trim+0x1e0>)
 8005028:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800502c:	4953      	ldr	r1, [pc, #332]	@ (800517c <mem_trim+0x1ec>)
 800502e:	4852      	ldr	r0, [pc, #328]	@ (8005178 <mem_trim+0x1e8>)
 8005030:	f00a fa92 	bl	800f558 <iprintf>
  if (newsize > size) {
 8005034:	8bfa      	ldrh	r2, [r7, #30]
 8005036:	8abb      	ldrh	r3, [r7, #20]
 8005038:	429a      	cmp	r2, r3
 800503a:	d901      	bls.n	8005040 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	e08f      	b.n	8005160 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005040:	8bfa      	ldrh	r2, [r7, #30]
 8005042:	8abb      	ldrh	r3, [r7, #20]
 8005044:	429a      	cmp	r2, r3
 8005046:	d101      	bne.n	800504c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	e089      	b.n	8005160 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fdf5 	bl	8004c40 <ptr_to_mem>
 8005056:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	791b      	ldrb	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d13f      	bne.n	80050e0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005068:	d106      	bne.n	8005078 <mem_trim+0xe8>
 800506a:	4b41      	ldr	r3, [pc, #260]	@ (8005170 <mem_trim+0x1e0>)
 800506c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005070:	4943      	ldr	r1, [pc, #268]	@ (8005180 <mem_trim+0x1f0>)
 8005072:	4841      	ldr	r0, [pc, #260]	@ (8005178 <mem_trim+0x1e8>)
 8005074:	f00a fa70 	bl	800f558 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800507e:	8afa      	ldrh	r2, [r7, #22]
 8005080:	8bfb      	ldrh	r3, [r7, #30]
 8005082:	4413      	add	r3, r2
 8005084:	b29b      	uxth	r3, r3
 8005086:	3308      	adds	r3, #8
 8005088:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800508a:	4b3e      	ldr	r3, [pc, #248]	@ (8005184 <mem_trim+0x1f4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d106      	bne.n	80050a2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005094:	89fb      	ldrh	r3, [r7, #14]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fdd2 	bl	8004c40 <ptr_to_mem>
 800509c:	4603      	mov	r3, r0
 800509e:	4a39      	ldr	r2, [pc, #228]	@ (8005184 <mem_trim+0x1f4>)
 80050a0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80050a2:	89fb      	ldrh	r3, [r7, #14]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fdcb 	bl	8004c40 <ptr_to_mem>
 80050aa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2200      	movs	r2, #0
 80050b0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	89ba      	ldrh	r2, [r7, #12]
 80050b6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	8afa      	ldrh	r2, [r7, #22]
 80050bc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	89fa      	ldrh	r2, [r7, #14]
 80050c2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80050cc:	d047      	beq.n	800515e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fdb4 	bl	8004c40 <ptr_to_mem>
 80050d8:	4602      	mov	r2, r0
 80050da:	89fb      	ldrh	r3, [r7, #14]
 80050dc:	8053      	strh	r3, [r2, #2]
 80050de:	e03e      	b.n	800515e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80050e0:	8bfb      	ldrh	r3, [r7, #30]
 80050e2:	f103 0214 	add.w	r2, r3, #20
 80050e6:	8abb      	ldrh	r3, [r7, #20]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d838      	bhi.n	800515e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80050ec:	8afa      	ldrh	r2, [r7, #22]
 80050ee:	8bfb      	ldrh	r3, [r7, #30]
 80050f0:	4413      	add	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3308      	adds	r3, #8
 80050f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005100:	d106      	bne.n	8005110 <mem_trim+0x180>
 8005102:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <mem_trim+0x1e0>)
 8005104:	f240 3216 	movw	r2, #790	@ 0x316
 8005108:	491d      	ldr	r1, [pc, #116]	@ (8005180 <mem_trim+0x1f0>)
 800510a:	481b      	ldr	r0, [pc, #108]	@ (8005178 <mem_trim+0x1e8>)
 800510c:	f00a fa24 	bl	800f558 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fd94 	bl	8004c40 <ptr_to_mem>
 8005118:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800511a:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <mem_trim+0x1f4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	429a      	cmp	r2, r3
 8005122:	d202      	bcs.n	800512a <mem_trim+0x19a>
      lfree = mem2;
 8005124:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <mem_trim+0x1f4>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2200      	movs	r2, #0
 800512e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	8afa      	ldrh	r2, [r7, #22]
 800513c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	89fa      	ldrh	r2, [r7, #14]
 8005142:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800514c:	d007      	beq.n	800515e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fd74 	bl	8004c40 <ptr_to_mem>
 8005158:	4602      	mov	r2, r0
 800515a:	89fb      	ldrh	r3, [r7, #14]
 800515c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800515e:	687b      	ldr	r3, [r7, #4]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20005884 	.word	0x20005884
 800516c:	20005888 	.word	0x20005888
 8005170:	080107d8 	.word	0x080107d8
 8005174:	08010948 	.word	0x08010948
 8005178:	08010820 	.word	0x08010820
 800517c:	08010960 	.word	0x08010960
 8005180:	08010980 	.word	0x08010980
 8005184:	2000588c 	.word	0x2000588c

08005188 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <mem_malloc+0x14>
    return NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	e0d9      	b.n	8005350 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	3303      	adds	r3, #3
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80051a8:	8bbb      	ldrh	r3, [r7, #28]
 80051aa:	2b0b      	cmp	r3, #11
 80051ac:	d801      	bhi.n	80051b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80051ae:	230c      	movs	r3, #12
 80051b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80051b2:	8bbb      	ldrh	r3, [r7, #28]
 80051b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80051b8:	d803      	bhi.n	80051c2 <mem_malloc+0x3a>
 80051ba:	8bba      	ldrh	r2, [r7, #28]
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d201      	bcs.n	80051c6 <mem_malloc+0x3e>
    return NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e0c4      	b.n	8005350 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80051c6:	4b64      	ldr	r3, [pc, #400]	@ (8005358 <mem_malloc+0x1d0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fd4a 	bl	8004c64 <mem_to_ptr>
 80051d0:	4603      	mov	r3, r0
 80051d2:	83fb      	strh	r3, [r7, #30]
 80051d4:	e0b4      	b.n	8005340 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80051d6:	8bfb      	ldrh	r3, [r7, #30]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fd31 	bl	8004c40 <ptr_to_mem>
 80051de:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	791b      	ldrb	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f040 80a4 	bne.w	8005332 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	8bfb      	ldrh	r3, [r7, #30]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f1a3 0208 	sub.w	r2, r3, #8
 80051f8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80051fa:	429a      	cmp	r2, r3
 80051fc:	f0c0 8099 	bcc.w	8005332 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	8bfb      	ldrh	r3, [r7, #30]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f1a3 0208 	sub.w	r2, r3, #8
 800520e:	8bbb      	ldrh	r3, [r7, #28]
 8005210:	3314      	adds	r3, #20
 8005212:	429a      	cmp	r2, r3
 8005214:	d333      	bcc.n	800527e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005216:	8bfa      	ldrh	r2, [r7, #30]
 8005218:	8bbb      	ldrh	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	3308      	adds	r3, #8
 8005220:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005222:	8a7b      	ldrh	r3, [r7, #18]
 8005224:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005228:	d106      	bne.n	8005238 <mem_malloc+0xb0>
 800522a:	4b4c      	ldr	r3, [pc, #304]	@ (800535c <mem_malloc+0x1d4>)
 800522c:	f240 3287 	movw	r2, #903	@ 0x387
 8005230:	494b      	ldr	r1, [pc, #300]	@ (8005360 <mem_malloc+0x1d8>)
 8005232:	484c      	ldr	r0, [pc, #304]	@ (8005364 <mem_malloc+0x1dc>)
 8005234:	f00a f990 	bl	800f558 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005238:	8a7b      	ldrh	r3, [r7, #18]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fd00 	bl	8004c40 <ptr_to_mem>
 8005240:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	881a      	ldrh	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8bfa      	ldrh	r2, [r7, #30]
 8005254:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	8a7a      	ldrh	r2, [r7, #18]
 800525a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2201      	movs	r2, #1
 8005260:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800526a:	d00b      	beq.n	8005284 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fce5 	bl	8004c40 <ptr_to_mem>
 8005276:	4602      	mov	r2, r0
 8005278:	8a7b      	ldrh	r3, [r7, #18]
 800527a:	8053      	strh	r3, [r2, #2]
 800527c:	e002      	b.n	8005284 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2201      	movs	r2, #1
 8005282:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005284:	4b34      	ldr	r3, [pc, #208]	@ (8005358 <mem_malloc+0x1d0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	429a      	cmp	r2, r3
 800528c:	d127      	bne.n	80052de <mem_malloc+0x156>
          struct mem *cur = lfree;
 800528e:	4b32      	ldr	r3, [pc, #200]	@ (8005358 <mem_malloc+0x1d0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005294:	e005      	b.n	80052a2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fcd0 	bl	8004c40 <ptr_to_mem>
 80052a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	791b      	ldrb	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <mem_malloc+0x12c>
 80052aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005368 <mem_malloc+0x1e0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1f0      	bne.n	8005296 <mem_malloc+0x10e>
          }
          lfree = cur;
 80052b4:	4a28      	ldr	r2, [pc, #160]	@ (8005358 <mem_malloc+0x1d0>)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80052ba:	4b27      	ldr	r3, [pc, #156]	@ (8005358 <mem_malloc+0x1d0>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b2a      	ldr	r3, [pc, #168]	@ (8005368 <mem_malloc+0x1e0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d00b      	beq.n	80052de <mem_malloc+0x156>
 80052c6:	4b24      	ldr	r3, [pc, #144]	@ (8005358 <mem_malloc+0x1d0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	791b      	ldrb	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <mem_malloc+0x156>
 80052d0:	4b22      	ldr	r3, [pc, #136]	@ (800535c <mem_malloc+0x1d4>)
 80052d2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80052d6:	4925      	ldr	r1, [pc, #148]	@ (800536c <mem_malloc+0x1e4>)
 80052d8:	4822      	ldr	r0, [pc, #136]	@ (8005364 <mem_malloc+0x1dc>)
 80052da:	f00a f93d 	bl	800f558 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80052de:	8bba      	ldrh	r2, [r7, #28]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	3308      	adds	r3, #8
 80052e6:	4a20      	ldr	r2, [pc, #128]	@ (8005368 <mem_malloc+0x1e0>)
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d906      	bls.n	80052fc <mem_malloc+0x174>
 80052ee:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <mem_malloc+0x1d4>)
 80052f0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80052f4:	491e      	ldr	r1, [pc, #120]	@ (8005370 <mem_malloc+0x1e8>)
 80052f6:	481b      	ldr	r0, [pc, #108]	@ (8005364 <mem_malloc+0x1dc>)
 80052f8:	f00a f92e 	bl	800f558 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <mem_malloc+0x18c>
 8005306:	4b15      	ldr	r3, [pc, #84]	@ (800535c <mem_malloc+0x1d4>)
 8005308:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800530c:	4919      	ldr	r1, [pc, #100]	@ (8005374 <mem_malloc+0x1ec>)
 800530e:	4815      	ldr	r0, [pc, #84]	@ (8005364 <mem_malloc+0x1dc>)
 8005310:	f00a f922 	bl	800f558 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d006      	beq.n	800532c <mem_malloc+0x1a4>
 800531e:	4b0f      	ldr	r3, [pc, #60]	@ (800535c <mem_malloc+0x1d4>)
 8005320:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005324:	4914      	ldr	r1, [pc, #80]	@ (8005378 <mem_malloc+0x1f0>)
 8005326:	480f      	ldr	r0, [pc, #60]	@ (8005364 <mem_malloc+0x1dc>)
 8005328:	f00a f916 	bl	800f558 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	3308      	adds	r3, #8
 8005330:	e00e      	b.n	8005350 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005332:	8bfb      	ldrh	r3, [r7, #30]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fc83 	bl	8004c40 <ptr_to_mem>
 800533a:	4603      	mov	r3, r0
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005340:	8bfa      	ldrh	r2, [r7, #30]
 8005342:	8bbb      	ldrh	r3, [r7, #28]
 8005344:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005348:	429a      	cmp	r2, r3
 800534a:	f4ff af44 	bcc.w	80051d6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	2000588c 	.word	0x2000588c
 800535c:	080107d8 	.word	0x080107d8
 8005360:	08010980 	.word	0x08010980
 8005364:	08010820 	.word	0x08010820
 8005368:	20005888 	.word	0x20005888
 800536c:	08010994 	.word	0x08010994
 8005370:	080109b0 	.word	0x080109b0
 8005374:	080109e0 	.word	0x080109e0
 8005378:	08010a10 	.word	0x08010a10

0800537c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	3303      	adds	r3, #3
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e011      	b.n	80053c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4413      	add	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	885b      	ldrh	r3, [r3, #2]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4293      	cmp	r3, r2
 80053cc:	dbe7      	blt.n	800539e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80053e2:	2300      	movs	r3, #0
 80053e4:	80fb      	strh	r3, [r7, #6]
 80053e6:	e009      	b.n	80053fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	4a08      	ldr	r2, [pc, #32]	@ (800540c <memp_init+0x30>)
 80053ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff ffc3 	bl	800537c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	3301      	adds	r3, #1
 80053fa:	80fb      	strh	r3, [r7, #6]
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d9f2      	bls.n	80053e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	080131f4 	.word	0x080131f4

08005410 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d012      	beq.n	800544c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d006      	beq.n	8005448 <do_memp_malloc_pool+0x38>
 800543a:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <do_memp_malloc_pool+0x48>)
 800543c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005440:	4906      	ldr	r1, [pc, #24]	@ (800545c <do_memp_malloc_pool+0x4c>)
 8005442:	4807      	ldr	r0, [pc, #28]	@ (8005460 <do_memp_malloc_pool+0x50>)
 8005444:	f00a f888 	bl	800f558 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	e000      	b.n	800544e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	08010a34 	.word	0x08010a34
 800545c:	08010a64 	.word	0x08010a64
 8005460:	08010a88 	.word	0x08010a88

08005464 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <memp_malloc_pool+0x1c>
 8005472:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <memp_malloc_pool+0x38>)
 8005474:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005478:	4909      	ldr	r1, [pc, #36]	@ (80054a0 <memp_malloc_pool+0x3c>)
 800547a:	480a      	ldr	r0, [pc, #40]	@ (80054a4 <memp_malloc_pool+0x40>)
 800547c:	f00a f86c 	bl	800f558 <iprintf>
  if (desc == NULL) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <memp_malloc_pool+0x26>
    return NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	e003      	b.n	8005492 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ffc0 	bl	8005410 <do_memp_malloc_pool>
 8005490:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	08010a34 	.word	0x08010a34
 80054a0:	08010ab0 	.word	0x08010ab0
 80054a4:	08010a88 	.word	0x08010a88

080054a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d908      	bls.n	80054ca <memp_malloc+0x22>
 80054b8:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <memp_malloc+0x3c>)
 80054ba:	f240 1257 	movw	r2, #343	@ 0x157
 80054be:	490a      	ldr	r1, [pc, #40]	@ (80054e8 <memp_malloc+0x40>)
 80054c0:	480a      	ldr	r0, [pc, #40]	@ (80054ec <memp_malloc+0x44>)
 80054c2:	f00a f849 	bl	800f558 <iprintf>
 80054c6:	2300      	movs	r3, #0
 80054c8:	e008      	b.n	80054dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	4a08      	ldr	r2, [pc, #32]	@ (80054f0 <memp_malloc+0x48>)
 80054ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ff9c 	bl	8005410 <do_memp_malloc_pool>
 80054d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80054da:	68fb      	ldr	r3, [r7, #12]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	08010a34 	.word	0x08010a34
 80054e8:	08010ac4 	.word	0x08010ac4
 80054ec:	08010a88 	.word	0x08010a88
 80054f0:	080131f4 	.word	0x080131f4

080054f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d006      	beq.n	8005516 <do_memp_free_pool+0x22>
 8005508:	4b0a      	ldr	r3, [pc, #40]	@ (8005534 <do_memp_free_pool+0x40>)
 800550a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800550e:	490a      	ldr	r1, [pc, #40]	@ (8005538 <do_memp_free_pool+0x44>)
 8005510:	480a      	ldr	r0, [pc, #40]	@ (800553c <do_memp_free_pool+0x48>)
 8005512:	f00a f821 	bl	800f558 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08010a34 	.word	0x08010a34
 8005538:	08010ae4 	.word	0x08010ae4
 800553c:	08010a88 	.word	0x08010a88

08005540 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <memp_free_pool+0x1e>
 8005550:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <memp_free_pool+0x3c>)
 8005552:	f240 1295 	movw	r2, #405	@ 0x195
 8005556:	490a      	ldr	r1, [pc, #40]	@ (8005580 <memp_free_pool+0x40>)
 8005558:	480a      	ldr	r0, [pc, #40]	@ (8005584 <memp_free_pool+0x44>)
 800555a:	f009 fffd 	bl	800f558 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <memp_free_pool+0x34>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ffc1 	bl	80054f4 <do_memp_free_pool>
 8005572:	e000      	b.n	8005576 <memp_free_pool+0x36>
    return;
 8005574:	bf00      	nop
}
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	08010a34 	.word	0x08010a34
 8005580:	08010ab0 	.word	0x08010ab0
 8005584:	08010a88 	.word	0x08010a88

08005588 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	2b08      	cmp	r3, #8
 8005598:	d907      	bls.n	80055aa <memp_free+0x22>
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <memp_free+0x44>)
 800559c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80055a0:	490b      	ldr	r1, [pc, #44]	@ (80055d0 <memp_free+0x48>)
 80055a2:	480c      	ldr	r0, [pc, #48]	@ (80055d4 <memp_free+0x4c>)
 80055a4:	f009 ffd8 	bl	800f558 <iprintf>
 80055a8:	e00c      	b.n	80055c4 <memp_free+0x3c>

  if (mem == NULL) {
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	4a09      	ldr	r2, [pc, #36]	@ (80055d8 <memp_free+0x50>)
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ff9a 	bl	80054f4 <do_memp_free_pool>
 80055c0:	e000      	b.n	80055c4 <memp_free+0x3c>
    return;
 80055c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	08010a34 	.word	0x08010a34
 80055d0:	08010b04 	.word	0x08010b04
 80055d4:	08010a88 	.word	0x08010a88
 80055d8:	080131f4 	.word	0x080131f4

080055dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80055e0:	bf00      	nop
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <netif_add+0x26>
 8005600:	4b57      	ldr	r3, [pc, #348]	@ (8005760 <netif_add+0x174>)
 8005602:	f240 1227 	movw	r2, #295	@ 0x127
 8005606:	4957      	ldr	r1, [pc, #348]	@ (8005764 <netif_add+0x178>)
 8005608:	4857      	ldr	r0, [pc, #348]	@ (8005768 <netif_add+0x17c>)
 800560a:	f009 ffa5 	bl	800f558 <iprintf>
 800560e:	2300      	movs	r3, #0
 8005610:	e0a2      	b.n	8005758 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <netif_add+0x3e>
 8005618:	4b51      	ldr	r3, [pc, #324]	@ (8005760 <netif_add+0x174>)
 800561a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800561e:	4953      	ldr	r1, [pc, #332]	@ (800576c <netif_add+0x180>)
 8005620:	4851      	ldr	r0, [pc, #324]	@ (8005768 <netif_add+0x17c>)
 8005622:	f009 ff99 	bl	800f558 <iprintf>
 8005626:	2300      	movs	r3, #0
 8005628:	e096      	b.n	8005758 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005630:	4b4f      	ldr	r3, [pc, #316]	@ (8005770 <netif_add+0x184>)
 8005632:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800563a:	4b4d      	ldr	r3, [pc, #308]	@ (8005770 <netif_add+0x184>)
 800563c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005644:	4b4a      	ldr	r3, [pc, #296]	@ (8005770 <netif_add+0x184>)
 8005646:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4a45      	ldr	r2, [pc, #276]	@ (8005774 <netif_add+0x188>)
 800565e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a3a      	ldr	r2, [r7, #32]
 8005678:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800567a:	4b3f      	ldr	r3, [pc, #252]	@ (8005778 <netif_add+0x18c>)
 800567c:	781a      	ldrb	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005688:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f913 	bl	80058bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	4798      	blx	r3
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <netif_add+0xba>
    return NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e058      	b.n	8005758 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056ac:	2bff      	cmp	r3, #255	@ 0xff
 80056ae:	d103      	bne.n	80056b8 <netif_add+0xcc>
        netif->num = 0;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80056bc:	4b2f      	ldr	r3, [pc, #188]	@ (800577c <netif_add+0x190>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e02b      	b.n	800571c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d106      	bne.n	80056da <netif_add+0xee>
 80056cc:	4b24      	ldr	r3, [pc, #144]	@ (8005760 <netif_add+0x174>)
 80056ce:	f240 128b 	movw	r2, #395	@ 0x18b
 80056d2:	492b      	ldr	r1, [pc, #172]	@ (8005780 <netif_add+0x194>)
 80056d4:	4824      	ldr	r0, [pc, #144]	@ (8005768 <netif_add+0x17c>)
 80056d6:	f009 ff3f 	bl	800f558 <iprintf>
        num_netifs++;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3301      	adds	r3, #1
 80056de:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2bff      	cmp	r3, #255	@ 0xff
 80056e4:	dd06      	ble.n	80056f4 <netif_add+0x108>
 80056e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <netif_add+0x174>)
 80056e8:	f240 128d 	movw	r2, #397	@ 0x18d
 80056ec:	4925      	ldr	r1, [pc, #148]	@ (8005784 <netif_add+0x198>)
 80056ee:	481e      	ldr	r0, [pc, #120]	@ (8005768 <netif_add+0x17c>)
 80056f0:	f009 ff32 	bl	800f558 <iprintf>
        if (netif2->num == netif->num) {
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005700:	429a      	cmp	r2, r3
 8005702:	d108      	bne.n	8005716 <netif_add+0x12a>
          netif->num++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800570a:	3301      	adds	r3, #1
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005714:	e005      	b.n	8005722 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1d0      	bne.n	80056c4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1be      	bne.n	80056a6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800572e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005730:	d103      	bne.n	800573a <netif_add+0x14e>
    netif_num = 0;
 8005732:	4b11      	ldr	r3, [pc, #68]	@ (8005778 <netif_add+0x18c>)
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e006      	b.n	8005748 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005740:	3301      	adds	r3, #1
 8005742:	b2da      	uxtb	r2, r3
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <netif_add+0x18c>)
 8005746:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <netif_add+0x190>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005750:	4a0a      	ldr	r2, [pc, #40]	@ (800577c <netif_add+0x190>)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	08010b20 	.word	0x08010b20
 8005764:	08010bb4 	.word	0x08010bb4
 8005768:	08010b70 	.word	0x08010b70
 800576c:	08010bd0 	.word	0x08010bd0
 8005770:	08013258 	.word	0x08013258
 8005774:	08005a6b 	.word	0x08005a6b
 8005778:	20008784 	.word	0x20008784
 800577c:	2000877c 	.word	0x2000877c
 8005780:	08010bf4 	.word	0x08010bf4
 8005784:	08010c08 	.word	0x08010c08

08005788 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f002 fd4f 	bl	8008238 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f007 fa85 	bl	800ccac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <netif_do_set_ipaddr+0x20>
 80057be:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <netif_do_set_ipaddr+0x88>)
 80057c0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80057c4:	491c      	ldr	r1, [pc, #112]	@ (8005838 <netif_do_set_ipaddr+0x8c>)
 80057c6:	481d      	ldr	r0, [pc, #116]	@ (800583c <netif_do_set_ipaddr+0x90>)
 80057c8:	f009 fec6 	bl	800f558 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <netif_do_set_ipaddr+0x34>
 80057d2:	4b18      	ldr	r3, [pc, #96]	@ (8005834 <netif_do_set_ipaddr+0x88>)
 80057d4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80057d8:	4917      	ldr	r1, [pc, #92]	@ (8005838 <netif_do_set_ipaddr+0x8c>)
 80057da:	4818      	ldr	r0, [pc, #96]	@ (800583c <netif_do_set_ipaddr+0x90>)
 80057dc:	f009 febc 	bl	800f558 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3304      	adds	r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d01c      	beq.n	8005828 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3304      	adds	r3, #4
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80057fe:	f107 0314 	add.w	r3, r7, #20
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ffbf 	bl	8005788 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <netif_do_set_ipaddr+0x6a>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	e000      	b.n	8005818 <netif_do_set_ipaddr+0x6c>
 8005816:	2300      	movs	r3, #0
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800581c:	2101      	movs	r1, #1
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f8d2 	bl	80059c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	08010b20 	.word	0x08010b20
 8005838:	08010c38 	.word	0x08010c38
 800583c:	08010b70 	.word	0x08010b70

08005840 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3308      	adds	r3, #8
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d00a      	beq.n	8005870 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <netif_do_set_netmask+0x26>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	e000      	b.n	8005868 <netif_do_set_netmask+0x28>
 8005866:	2300      	movs	r3, #0
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	330c      	adds	r3, #12
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d00a      	beq.n	80058ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <netif_do_set_gw+0x26>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	e000      	b.n	80058a6 <netif_do_set_gw+0x28>
 80058a4:	2300      	movs	r3, #0
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80058d8:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <netif_set_addr+0x90>)
 80058da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80058e2:	4b1a      	ldr	r3, [pc, #104]	@ (800594c <netif_set_addr+0x90>)
 80058e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80058ec:	4b17      	ldr	r3, [pc, #92]	@ (800594c <netif_set_addr+0x90>)
 80058ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <netif_set_addr+0x42>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <netif_set_addr+0x46>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <netif_set_addr+0x48>
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800590c:	f107 0310 	add.w	r3, r7, #16
 8005910:	461a      	mov	r2, r3
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff49 	bl	80057ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7ff ff8e 	bl	8005840 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff ffa8 	bl	800587e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005934:	f107 0310 	add.w	r3, r7, #16
 8005938:	461a      	mov	r2, r3
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff ff35 	bl	80057ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005942:	bf00      	nop
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	08013258 	.word	0x08013258

08005950 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005958:	4a04      	ldr	r2, [pc, #16]	@ (800596c <netif_set_default+0x1c>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20008780 	.word	0x20008780

08005970 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <netif_set_up+0x1e>
 800597e:	4b0f      	ldr	r3, [pc, #60]	@ (80059bc <netif_set_up+0x4c>)
 8005980:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005984:	490e      	ldr	r1, [pc, #56]	@ (80059c0 <netif_set_up+0x50>)
 8005986:	480f      	ldr	r0, [pc, #60]	@ (80059c4 <netif_set_up+0x54>)
 8005988:	f009 fde6 	bl	800f558 <iprintf>
 800598c:	e013      	b.n	80059b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10c      	bne.n	80059b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80059ae:	2103      	movs	r1, #3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f809 	bl	80059c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	08010b20 	.word	0x08010b20
 80059c0:	08010ca8 	.word	0x08010ca8
 80059c4:	08010b70 	.word	0x08010b70

080059c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <netif_issue_reports+0x20>
 80059da:	4b18      	ldr	r3, [pc, #96]	@ (8005a3c <netif_issue_reports+0x74>)
 80059dc:	f240 326d 	movw	r2, #877	@ 0x36d
 80059e0:	4917      	ldr	r1, [pc, #92]	@ (8005a40 <netif_issue_reports+0x78>)
 80059e2:	4818      	ldr	r0, [pc, #96]	@ (8005a44 <netif_issue_reports+0x7c>)
 80059e4:	f009 fdb8 	bl	800f558 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01e      	beq.n	8005a34 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80059fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d017      	beq.n	8005a34 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d013      	beq.n	8005a36 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3304      	adds	r3, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00e      	beq.n	8005a36 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f008 f877 	bl	800db20 <etharp_request>
 8005a32:	e000      	b.n	8005a36 <netif_issue_reports+0x6e>
    return;
 8005a34:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	08010b20 	.word	0x08010b20
 8005a40:	08010cc4 	.word	0x08010cc4
 8005a44:	08010b70 	.word	0x08010b70

08005a48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	61da      	str	r2, [r3, #28]
  }
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005a76:	f06f 030b 	mvn.w	r3, #11
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d013      	beq.n	8005ac0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005a98:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <netif_get_by_index+0x48>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e00c      	b.n	8005aba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	79fa      	ldrb	r2, [r7, #7]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d101      	bne.n	8005ab4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	e006      	b.n	8005ac2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ef      	bne.n	8005aa0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	2000877c 	.word	0x2000877c

08005ad4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005ada:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <pbuf_free_ooseq+0x38>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <pbuf_free_ooseq+0x3c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	e00a      	b.n	8005afe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f002 fbdf 	bl	80082b4 <tcp_free_ooseq>
      return;
 8005af6:	e005      	b.n	8005b04 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f1      	bne.n	8005ae8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20008785 	.word	0x20008785
 8005b10:	20008794 	.word	0x20008794

08005b14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005b18:	4b03      	ldr	r3, [pc, #12]	@ (8005b28 <pbuf_pool_is_empty+0x14>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005b1e:	bf00      	nop
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20008785 	.word	0x20008785

08005b2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4611      	mov	r1, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	80fb      	strh	r3, [r7, #6]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	88ba      	ldrh	r2, [r7, #4]
 8005b58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005b5a:	8b3b      	ldrh	r3, [r7, #24]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	7f3a      	ldrb	r2, [r7, #28]
 8005b66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	73da      	strb	r2, [r3, #15]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	@ 0x30
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	80bb      	strh	r3, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005b96:	887b      	ldrh	r3, [r7, #2]
 8005b98:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005b9c:	d07f      	beq.n	8005c9e <pbuf_alloc+0x11e>
 8005b9e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8005ba2:	f300 80c8 	bgt.w	8005d36 <pbuf_alloc+0x1b6>
 8005ba6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005baa:	d010      	beq.n	8005bce <pbuf_alloc+0x4e>
 8005bac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8005bb0:	f300 80c1 	bgt.w	8005d36 <pbuf_alloc+0x1b6>
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d002      	beq.n	8005bbe <pbuf_alloc+0x3e>
 8005bb8:	2b41      	cmp	r3, #65	@ 0x41
 8005bba:	f040 80bc 	bne.w	8005d36 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005bbe:	887a      	ldrh	r2, [r7, #2]
 8005bc0:	88bb      	ldrh	r3, [r7, #4]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f000 f8d1 	bl	8005d6c <pbuf_alloc_reference>
 8005bca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005bcc:	e0bd      	b.n	8005d4a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005bd6:	88bb      	ldrh	r3, [r7, #4]
 8005bd8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005bda:	2008      	movs	r0, #8
 8005bdc:	f7ff fc64 	bl	80054a8 <memp_malloc>
 8005be0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005be8:	f7ff ff94 	bl	8005b14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005bf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bf4:	f000 faa8 	bl	8006148 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e0a7      	b.n	8005d4c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005bfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005bfe:	3303      	adds	r3, #3
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	8b7a      	ldrh	r2, [r7, #26]
 8005c10:	4293      	cmp	r3, r2
 8005c12:	bf28      	it	cs
 8005c14:	4613      	movcs	r3, r2
 8005c16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005c18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c1a:	3310      	adds	r3, #16
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	3303      	adds	r3, #3
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	4618      	mov	r0, r3
 8005c28:	89f9      	ldrh	r1, [r7, #14]
 8005c2a:	8b7a      	ldrh	r2, [r7, #26]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	887b      	ldrh	r3, [r7, #2]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	460b      	mov	r3, r1
 8005c36:	4601      	mov	r1, r0
 8005c38:	6938      	ldr	r0, [r7, #16]
 8005c3a:	f7ff ff77 	bl	8005b2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d006      	beq.n	8005c58 <pbuf_alloc+0xd8>
 8005c4a:	4b42      	ldr	r3, [pc, #264]	@ (8005d54 <pbuf_alloc+0x1d4>)
 8005c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c50:	4941      	ldr	r1, [pc, #260]	@ (8005d58 <pbuf_alloc+0x1d8>)
 8005c52:	4842      	ldr	r0, [pc, #264]	@ (8005d5c <pbuf_alloc+0x1dc>)
 8005c54:	f009 fc80 	bl	800f558 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005c58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c5a:	3303      	adds	r3, #3
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005c64:	d106      	bne.n	8005c74 <pbuf_alloc+0xf4>
 8005c66:	4b3b      	ldr	r3, [pc, #236]	@ (8005d54 <pbuf_alloc+0x1d4>)
 8005c68:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005c6c:	493c      	ldr	r1, [pc, #240]	@ (8005d60 <pbuf_alloc+0x1e0>)
 8005c6e:	483b      	ldr	r0, [pc, #236]	@ (8005d5c <pbuf_alloc+0x1dc>)
 8005c70:	f009 fc72 	bl	800f558 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7e:	e002      	b.n	8005c86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005c8a:	8b7a      	ldrh	r2, [r7, #26]
 8005c8c:	89fb      	ldrh	r3, [r7, #14]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8005c96:	8b7b      	ldrh	r3, [r7, #26]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d19e      	bne.n	8005bda <pbuf_alloc+0x5a>
      break;
 8005c9c:	e055      	b.n	8005d4a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005c9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ca0:	3303      	adds	r3, #3
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f023 0303 	bic.w	r3, r3, #3
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	88bb      	ldrh	r3, [r7, #4]
 8005cac:	3303      	adds	r3, #3
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f023 0303 	bic.w	r3, r3, #3
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005cba:	8b3b      	ldrh	r3, [r7, #24]
 8005cbc:	3310      	adds	r3, #16
 8005cbe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005cc0:	8b3a      	ldrh	r2, [r7, #24]
 8005cc2:	88bb      	ldrh	r3, [r7, #4]
 8005cc4:	3303      	adds	r3, #3
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d306      	bcc.n	8005cdc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005cce:	8afa      	ldrh	r2, [r7, #22]
 8005cd0:	88bb      	ldrh	r3, [r7, #4]
 8005cd2:	3303      	adds	r3, #3
 8005cd4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d201      	bcs.n	8005ce0 <pbuf_alloc+0x160>
        return NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e035      	b.n	8005d4c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005ce0:	8afb      	ldrh	r3, [r7, #22]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fa50 	bl	8005188 <mem_malloc>
 8005ce8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <pbuf_alloc+0x174>
        return NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e02b      	b.n	8005d4c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005cf4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cf6:	3310      	adds	r3, #16
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3303      	adds	r3, #3
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	4618      	mov	r0, r3
 8005d04:	88b9      	ldrh	r1, [r7, #4]
 8005d06:	88ba      	ldrh	r2, [r7, #4]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	460b      	mov	r3, r1
 8005d12:	4601      	mov	r1, r0
 8005d14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d16:	f7ff ff09 	bl	8005b2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d010      	beq.n	8005d48 <pbuf_alloc+0x1c8>
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <pbuf_alloc+0x1d4>)
 8005d28:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005d2c:	490d      	ldr	r1, [pc, #52]	@ (8005d64 <pbuf_alloc+0x1e4>)
 8005d2e:	480b      	ldr	r0, [pc, #44]	@ (8005d5c <pbuf_alloc+0x1dc>)
 8005d30:	f009 fc12 	bl	800f558 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005d34:	e008      	b.n	8005d48 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005d36:	4b07      	ldr	r3, [pc, #28]	@ (8005d54 <pbuf_alloc+0x1d4>)
 8005d38:	f240 1227 	movw	r2, #295	@ 0x127
 8005d3c:	490a      	ldr	r1, [pc, #40]	@ (8005d68 <pbuf_alloc+0x1e8>)
 8005d3e:	4807      	ldr	r0, [pc, #28]	@ (8005d5c <pbuf_alloc+0x1dc>)
 8005d40:	f009 fc0a 	bl	800f558 <iprintf>
      return NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e001      	b.n	8005d4c <pbuf_alloc+0x1cc>
      break;
 8005d48:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3728      	adds	r7, #40	@ 0x28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	08010d50 	.word	0x08010d50
 8005d58:	08010d80 	.word	0x08010d80
 8005d5c:	08010db0 	.word	0x08010db0
 8005d60:	08010dd8 	.word	0x08010dd8
 8005d64:	08010e0c 	.word	0x08010e0c
 8005d68:	08010e38 	.word	0x08010e38

08005d6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	807b      	strh	r3, [r7, #2]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005d7c:	883b      	ldrh	r3, [r7, #0]
 8005d7e:	2b41      	cmp	r3, #65	@ 0x41
 8005d80:	d009      	beq.n	8005d96 <pbuf_alloc_reference+0x2a>
 8005d82:	883b      	ldrh	r3, [r7, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d006      	beq.n	8005d96 <pbuf_alloc_reference+0x2a>
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <pbuf_alloc_reference+0x5c>)
 8005d8a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005d8e:	490f      	ldr	r1, [pc, #60]	@ (8005dcc <pbuf_alloc_reference+0x60>)
 8005d90:	480f      	ldr	r0, [pc, #60]	@ (8005dd0 <pbuf_alloc_reference+0x64>)
 8005d92:	f009 fbe1 	bl	800f558 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d96:	2007      	movs	r0, #7
 8005d98:	f7ff fb86 	bl	80054a8 <memp_malloc>
 8005d9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e00b      	b.n	8005dc0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005da8:	8879      	ldrh	r1, [r7, #2]
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	2300      	movs	r3, #0
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	883b      	ldrh	r3, [r7, #0]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	460b      	mov	r3, r1
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff feb7 	bl	8005b2c <pbuf_init_alloced_pbuf>
  return p;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	08010d50 	.word	0x08010d50
 8005dcc:	08010e54 	.word	0x08010e54
 8005dd0:	08010db0 	.word	0x08010db0

08005dd4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
 8005de0:	460b      	mov	r3, r1
 8005de2:	81bb      	strh	r3, [r7, #12]
 8005de4:	4613      	mov	r3, r2
 8005de6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005dec:	8a7b      	ldrh	r3, [r7, #18]
 8005dee:	3303      	adds	r3, #3
 8005df0:	f023 0203 	bic.w	r2, r3, #3
 8005df4:	89bb      	ldrh	r3, [r7, #12]
 8005df6:	441a      	add	r2, r3
 8005df8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d901      	bls.n	8005e02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e018      	b.n	8005e34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005e08:	8a7b      	ldrh	r3, [r7, #18]
 8005e0a:	3303      	adds	r3, #3
 8005e0c:	f023 0303 	bic.w	r3, r3, #3
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	4413      	add	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e001      	b.n	8005e1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	89b9      	ldrh	r1, [r7, #12]
 8005e20:	89ba      	ldrh	r2, [r7, #12]
 8005e22:	2302      	movs	r3, #2
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	897b      	ldrh	r3, [r7, #10]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	f7ff fe7d 	bl	8005b2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005e32:	687b      	ldr	r3, [r7, #4]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <pbuf_realloc+0x20>
 8005e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f38 <pbuf_realloc+0xfc>)
 8005e50:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005e54:	4939      	ldr	r1, [pc, #228]	@ (8005f3c <pbuf_realloc+0x100>)
 8005e56:	483a      	ldr	r0, [pc, #232]	@ (8005f40 <pbuf_realloc+0x104>)
 8005e58:	f009 fb7e 	bl	800f558 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	891b      	ldrh	r3, [r3, #8]
 8005e60:	887a      	ldrh	r2, [r7, #2]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d263      	bcs.n	8005f2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	891a      	ldrh	r2, [r3, #8]
 8005e6a:	887b      	ldrh	r3, [r7, #2]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005e70:	887b      	ldrh	r3, [r7, #2]
 8005e72:	817b      	strh	r3, [r7, #10]
  q = p;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005e78:	e018      	b.n	8005eac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	895b      	ldrh	r3, [r3, #10]
 8005e7e:	897a      	ldrh	r2, [r7, #10]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	891a      	ldrh	r2, [r3, #8]
 8005e88:	893b      	ldrh	r3, [r7, #8]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <pbuf_realloc+0x70>
 8005e9e:	4b26      	ldr	r3, [pc, #152]	@ (8005f38 <pbuf_realloc+0xfc>)
 8005ea0:	f240 12af 	movw	r2, #431	@ 0x1af
 8005ea4:	4927      	ldr	r1, [pc, #156]	@ (8005f44 <pbuf_realloc+0x108>)
 8005ea6:	4826      	ldr	r0, [pc, #152]	@ (8005f40 <pbuf_realloc+0x104>)
 8005ea8:	f009 fb56 	bl	800f558 <iprintf>
  while (rem_len > q->len) {
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	895b      	ldrh	r3, [r3, #10]
 8005eb0:	897a      	ldrh	r2, [r7, #10]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d8e1      	bhi.n	8005e7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	7b1b      	ldrb	r3, [r3, #12]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d121      	bne.n	8005f06 <pbuf_realloc+0xca>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	895b      	ldrh	r3, [r3, #10]
 8005ec6:	897a      	ldrh	r2, [r7, #10]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d01c      	beq.n	8005f06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	7b5b      	ldrb	r3, [r3, #13]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d116      	bne.n	8005f06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff f850 	bl	8004f90 <mem_trim>
 8005ef0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <pbuf_realloc+0xca>
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <pbuf_realloc+0xfc>)
 8005efa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005efe:	4912      	ldr	r1, [pc, #72]	@ (8005f48 <pbuf_realloc+0x10c>)
 8005f00:	480f      	ldr	r0, [pc, #60]	@ (8005f40 <pbuf_realloc+0x104>)
 8005f02:	f009 fb29 	bl	800f558 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	897a      	ldrh	r2, [r7, #10]
 8005f0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	895a      	ldrh	r2, [r3, #10]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 f911 	bl	8006148 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e000      	b.n	8005f30 <pbuf_realloc+0xf4>
    return;
 8005f2e:	bf00      	nop

}
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	08010d50 	.word	0x08010d50
 8005f3c:	08010e68 	.word	0x08010e68
 8005f40:	08010db0 	.word	0x08010db0
 8005f44:	08010e80 	.word	0x08010e80
 8005f48:	08010e98 	.word	0x08010e98

08005f4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <pbuf_add_header_impl+0x22>
 8005f60:	4b2b      	ldr	r3, [pc, #172]	@ (8006010 <pbuf_add_header_impl+0xc4>)
 8005f62:	f240 12df 	movw	r2, #479	@ 0x1df
 8005f66:	492b      	ldr	r1, [pc, #172]	@ (8006014 <pbuf_add_header_impl+0xc8>)
 8005f68:	482b      	ldr	r0, [pc, #172]	@ (8006018 <pbuf_add_header_impl+0xcc>)
 8005f6a:	f009 faf5 	bl	800f558 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <pbuf_add_header_impl+0x30>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7a:	d301      	bcc.n	8005f80 <pbuf_add_header_impl+0x34>
    return 1;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e043      	b.n	8006008 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <pbuf_add_header_impl+0x3e>
    return 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e03e      	b.n	8006008 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	891a      	ldrh	r2, [r3, #8]
 8005f92:	8a7b      	ldrh	r3, [r7, #18]
 8005f94:	4413      	add	r3, r2
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8a7a      	ldrh	r2, [r7, #18]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d901      	bls.n	8005fa2 <pbuf_add_header_impl+0x56>
    return 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e032      	b.n	8006008 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	7b1b      	ldrb	r3, [r3, #12]
 8005fa6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005fa8:	8a3b      	ldrh	r3, [r7, #16]
 8005faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00c      	beq.n	8005fcc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	425b      	negs	r3, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3310      	adds	r3, #16
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d20d      	bcs.n	8005fe4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e01d      	b.n	8006008 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	425b      	negs	r3, r3
 8005fda:	4413      	add	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e001      	b.n	8005fe4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e011      	b.n	8006008 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	895a      	ldrh	r2, [r3, #10]
 8005fee:	8a7b      	ldrh	r3, [r7, #18]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	891a      	ldrh	r2, [r3, #8]
 8005ffc:	8a7b      	ldrh	r3, [r7, #18]
 8005ffe:	4413      	add	r3, r2
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	811a      	strh	r2, [r3, #8]


  return 0;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	08010d50 	.word	0x08010d50
 8006014:	08010eb4 	.word	0x08010eb4
 8006018:	08010db0 	.word	0x08010db0

0800601c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006026:	2200      	movs	r2, #0
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ff8e 	bl	8005f4c <pbuf_add_header_impl>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <pbuf_remove_header+0x1e>
 800604c:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <pbuf_remove_header+0x94>)
 800604e:	f240 224b 	movw	r2, #587	@ 0x24b
 8006052:	4920      	ldr	r1, [pc, #128]	@ (80060d4 <pbuf_remove_header+0x98>)
 8006054:	4820      	ldr	r0, [pc, #128]	@ (80060d8 <pbuf_remove_header+0x9c>)
 8006056:	f009 fa7f 	bl	800f558 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <pbuf_remove_header+0x2c>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006066:	d301      	bcc.n	800606c <pbuf_remove_header+0x30>
    return 1;
 8006068:	2301      	movs	r3, #1
 800606a:	e02c      	b.n	80060c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <pbuf_remove_header+0x3a>
    return 0;
 8006072:	2300      	movs	r3, #0
 8006074:	e027      	b.n	80060c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	895b      	ldrh	r3, [r3, #10]
 800607e:	89fa      	ldrh	r2, [r7, #14]
 8006080:	429a      	cmp	r2, r3
 8006082:	d908      	bls.n	8006096 <pbuf_remove_header+0x5a>
 8006084:	4b12      	ldr	r3, [pc, #72]	@ (80060d0 <pbuf_remove_header+0x94>)
 8006086:	f240 2255 	movw	r2, #597	@ 0x255
 800608a:	4914      	ldr	r1, [pc, #80]	@ (80060dc <pbuf_remove_header+0xa0>)
 800608c:	4812      	ldr	r0, [pc, #72]	@ (80060d8 <pbuf_remove_header+0x9c>)
 800608e:	f009 fa63 	bl	800f558 <iprintf>
 8006092:	2301      	movs	r3, #1
 8006094:	e017      	b.n	80060c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	441a      	add	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	895a      	ldrh	r2, [r3, #10]
 80060ac:	89fb      	ldrh	r3, [r7, #14]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	891a      	ldrh	r2, [r3, #8]
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	08010d50 	.word	0x08010d50
 80060d4:	08010eb4 	.word	0x08010eb4
 80060d8:	08010db0 	.word	0x08010db0
 80060dc:	08010ec0 	.word	0x08010ec0

080060e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80060f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da08      	bge.n	800610a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80060f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060fc:	425b      	negs	r3, r3
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ff9b 	bl	800603c <pbuf_remove_header>
 8006106:	4603      	mov	r3, r0
 8006108:	e007      	b.n	800611a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800610a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800610e:	787a      	ldrb	r2, [r7, #1]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff ff1a 	bl	8005f4c <pbuf_add_header_impl>
 8006118:	4603      	mov	r3, r0
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800612e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006132:	2201      	movs	r2, #1
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ffd2 	bl	80060e0 <pbuf_header_impl>
 800613c:	4603      	mov	r3, r0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10b      	bne.n	800616e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <pbuf_free+0x22>
 800615c:	4b38      	ldr	r3, [pc, #224]	@ (8006240 <pbuf_free+0xf8>)
 800615e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006162:	4938      	ldr	r1, [pc, #224]	@ (8006244 <pbuf_free+0xfc>)
 8006164:	4838      	ldr	r0, [pc, #224]	@ (8006248 <pbuf_free+0x100>)
 8006166:	f009 f9f7 	bl	800f558 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800616a:	2300      	movs	r3, #0
 800616c:	e063      	b.n	8006236 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006172:	e05c      	b.n	800622e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7b9b      	ldrb	r3, [r3, #14]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <pbuf_free+0x42>
 800617c:	4b30      	ldr	r3, [pc, #192]	@ (8006240 <pbuf_free+0xf8>)
 800617e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006182:	4932      	ldr	r1, [pc, #200]	@ (800624c <pbuf_free+0x104>)
 8006184:	4830      	ldr	r0, [pc, #192]	@ (8006248 <pbuf_free+0x100>)
 8006186:	f009 f9e7 	bl	800f558 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7b9b      	ldrb	r3, [r3, #14]
 800618e:	3b01      	subs	r3, #1
 8006190:	b2da      	uxtb	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	739a      	strb	r2, [r3, #14]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7b9b      	ldrb	r3, [r3, #14]
 800619a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800619c:	7dbb      	ldrb	r3, [r7, #22]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d143      	bne.n	800622a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	7b1b      	ldrb	r3, [r3, #12]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7b5b      	ldrb	r3, [r3, #13]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d011      	beq.n	80061e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <pbuf_free+0x90>
 80061ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <pbuf_free+0xf8>)
 80061cc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80061d0:	491f      	ldr	r1, [pc, #124]	@ (8006250 <pbuf_free+0x108>)
 80061d2:	481d      	ldr	r0, [pc, #116]	@ (8006248 <pbuf_free+0x100>)
 80061d4:	f009 f9c0 	bl	800f558 <iprintf>
        pc->custom_free_function(p);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
 80061e0:	e01d      	b.n	800621e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d104      	bne.n	80061f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	2008      	movs	r0, #8
 80061ec:	f7ff f9cc 	bl	8005588 <memp_free>
 80061f0:	e015      	b.n	800621e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d104      	bne.n	8006202 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	2007      	movs	r0, #7
 80061fc:	f7ff f9c4 	bl	8005588 <memp_free>
 8006200:	e00d      	b.n	800621e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <pbuf_free+0xc8>
          mem_free(p);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fe fe57 	bl	8004ebc <mem_free>
 800620e:	e006      	b.n	800621e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <pbuf_free+0xf8>)
 8006212:	f240 320f 	movw	r2, #783	@ 0x30f
 8006216:	490f      	ldr	r1, [pc, #60]	@ (8006254 <pbuf_free+0x10c>)
 8006218:	480b      	ldr	r0, [pc, #44]	@ (8006248 <pbuf_free+0x100>)
 800621a:	f009 f99d 	bl	800f558 <iprintf>
        }
      }
      count++;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	3301      	adds	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	e001      	b.n	800622e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d19f      	bne.n	8006174 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	08010d50 	.word	0x08010d50
 8006244:	08010eb4 	.word	0x08010eb4
 8006248:	08010db0 	.word	0x08010db0
 800624c:	08010ee0 	.word	0x08010ee0
 8006250:	08010ef8 	.word	0x08010ef8
 8006254:	08010f1c 	.word	0x08010f1c

08006258 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006264:	e005      	b.n	8006272 <pbuf_clen+0x1a>
    ++len;
 8006266:	89fb      	ldrh	r3, [r7, #14]
 8006268:	3301      	adds	r3, #1
 800626a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f6      	bne.n	8006266 <pbuf_clen+0xe>
  }
  return len;
 8006278:	89fb      	ldrh	r3, [r7, #14]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7b9b      	ldrb	r3, [r3, #14]
 800629a:	3301      	adds	r3, #1
 800629c:	b2da      	uxtb	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	7b9b      	ldrb	r3, [r3, #14]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <pbuf_ref+0x30>
 80062aa:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <pbuf_ref+0x38>)
 80062ac:	f240 3242 	movw	r2, #834	@ 0x342
 80062b0:	4904      	ldr	r1, [pc, #16]	@ (80062c4 <pbuf_ref+0x3c>)
 80062b2:	4805      	ldr	r0, [pc, #20]	@ (80062c8 <pbuf_ref+0x40>)
 80062b4:	f009 f950 	bl	800f558 <iprintf>
  }
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	08010d50 	.word	0x08010d50
 80062c4:	08010f30 	.word	0x08010f30
 80062c8:	08010db0 	.word	0x08010db0

080062cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <pbuf_cat+0x16>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <pbuf_cat+0x26>
 80062e2:	4b20      	ldr	r3, [pc, #128]	@ (8006364 <pbuf_cat+0x98>)
 80062e4:	f240 3259 	movw	r2, #857	@ 0x359
 80062e8:	491f      	ldr	r1, [pc, #124]	@ (8006368 <pbuf_cat+0x9c>)
 80062ea:	4820      	ldr	r0, [pc, #128]	@ (800636c <pbuf_cat+0xa0>)
 80062ec:	f009 f934 	bl	800f558 <iprintf>
 80062f0:	e034      	b.n	800635c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e00a      	b.n	800630e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	891a      	ldrh	r2, [r3, #8]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	891b      	ldrh	r3, [r3, #8]
 8006300:	4413      	add	r3, r2
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f0      	bne.n	80062f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	891a      	ldrh	r2, [r3, #8]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	895b      	ldrh	r3, [r3, #10]
 800631e:	429a      	cmp	r2, r3
 8006320:	d006      	beq.n	8006330 <pbuf_cat+0x64>
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <pbuf_cat+0x98>)
 8006324:	f240 3262 	movw	r2, #866	@ 0x362
 8006328:	4911      	ldr	r1, [pc, #68]	@ (8006370 <pbuf_cat+0xa4>)
 800632a:	4810      	ldr	r0, [pc, #64]	@ (800636c <pbuf_cat+0xa0>)
 800632c:	f009 f914 	bl	800f558 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <pbuf_cat+0x7a>
 8006338:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <pbuf_cat+0x98>)
 800633a:	f240 3263 	movw	r2, #867	@ 0x363
 800633e:	490d      	ldr	r1, [pc, #52]	@ (8006374 <pbuf_cat+0xa8>)
 8006340:	480a      	ldr	r0, [pc, #40]	@ (800636c <pbuf_cat+0xa0>)
 8006342:	f009 f909 	bl	800f558 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	891a      	ldrh	r2, [r3, #8]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	891b      	ldrh	r3, [r3, #8]
 800634e:	4413      	add	r3, r2
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	08010d50 	.word	0x08010d50
 8006368:	08010f44 	.word	0x08010f44
 800636c:	08010db0 	.word	0x08010db0
 8006370:	08010f7c 	.word	0x08010f7c
 8006374:	08010fac 	.word	0x08010fac

08006378 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <pbuf_copy+0x2a>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <pbuf_copy+0x2a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	891a      	ldrh	r2, [r3, #8]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	891b      	ldrh	r3, [r3, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d209      	bcs.n	80063b6 <pbuf_copy+0x3e>
 80063a2:	4b57      	ldr	r3, [pc, #348]	@ (8006500 <pbuf_copy+0x188>)
 80063a4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80063a8:	4956      	ldr	r1, [pc, #344]	@ (8006504 <pbuf_copy+0x18c>)
 80063aa:	4857      	ldr	r0, [pc, #348]	@ (8006508 <pbuf_copy+0x190>)
 80063ac:	f009 f8d4 	bl	800f558 <iprintf>
 80063b0:	f06f 030f 	mvn.w	r3, #15
 80063b4:	e09f      	b.n	80064f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	895b      	ldrh	r3, [r3, #10]
 80063ba:	461a      	mov	r2, r3
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	895b      	ldrh	r3, [r3, #10]
 80063c4:	4619      	mov	r1, r3
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1acb      	subs	r3, r1, r3
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d306      	bcc.n	80063dc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	895b      	ldrh	r3, [r3, #10]
 80063d2:	461a      	mov	r2, r3
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e005      	b.n	80063e8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	895b      	ldrh	r3, [r3, #10]
 80063e0:	461a      	mov	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	18d0      	adds	r0, r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4619      	mov	r1, r3
 80063fc:	f009 f9c1 	bl	800f782 <memcpy>
    offset_to += len;
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	895b      	ldrh	r3, [r3, #10]
 8006414:	461a      	mov	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4293      	cmp	r3, r2
 800641a:	d906      	bls.n	800642a <pbuf_copy+0xb2>
 800641c:	4b38      	ldr	r3, [pc, #224]	@ (8006500 <pbuf_copy+0x188>)
 800641e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006422:	493a      	ldr	r1, [pc, #232]	@ (800650c <pbuf_copy+0x194>)
 8006424:	4838      	ldr	r0, [pc, #224]	@ (8006508 <pbuf_copy+0x190>)
 8006426:	f009 f897 	bl	800f558 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	895b      	ldrh	r3, [r3, #10]
 800642e:	461a      	mov	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4293      	cmp	r3, r2
 8006434:	d906      	bls.n	8006444 <pbuf_copy+0xcc>
 8006436:	4b32      	ldr	r3, [pc, #200]	@ (8006500 <pbuf_copy+0x188>)
 8006438:	f240 32da 	movw	r2, #986	@ 0x3da
 800643c:	4934      	ldr	r1, [pc, #208]	@ (8006510 <pbuf_copy+0x198>)
 800643e:	4832      	ldr	r0, [pc, #200]	@ (8006508 <pbuf_copy+0x190>)
 8006440:	f009 f88a 	bl	800f558 <iprintf>
    if (offset_from >= p_from->len) {
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	895b      	ldrh	r3, [r3, #10]
 8006448:	461a      	mov	r2, r3
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4293      	cmp	r3, r2
 800644e:	d304      	bcc.n	800645a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	895b      	ldrh	r3, [r3, #10]
 800645e:	461a      	mov	r2, r3
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4293      	cmp	r3, r2
 8006464:	d114      	bne.n	8006490 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10c      	bne.n	8006490 <pbuf_copy+0x118>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <pbuf_copy+0x118>
 800647c:	4b20      	ldr	r3, [pc, #128]	@ (8006500 <pbuf_copy+0x188>)
 800647e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8006482:	4924      	ldr	r1, [pc, #144]	@ (8006514 <pbuf_copy+0x19c>)
 8006484:	4820      	ldr	r0, [pc, #128]	@ (8006508 <pbuf_copy+0x190>)
 8006486:	f009 f867 	bl	800f558 <iprintf>
 800648a:	f06f 030f 	mvn.w	r3, #15
 800648e:	e032      	b.n	80064f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d013      	beq.n	80064be <pbuf_copy+0x146>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	895a      	ldrh	r2, [r3, #10]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	891b      	ldrh	r3, [r3, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d10d      	bne.n	80064be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <pbuf_copy+0x146>
 80064aa:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <pbuf_copy+0x188>)
 80064ac:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80064b0:	4919      	ldr	r1, [pc, #100]	@ (8006518 <pbuf_copy+0x1a0>)
 80064b2:	4815      	ldr	r0, [pc, #84]	@ (8006508 <pbuf_copy+0x190>)
 80064b4:	f009 f850 	bl	800f558 <iprintf>
 80064b8:	f06f 0305 	mvn.w	r3, #5
 80064bc:	e01b      	b.n	80064f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d013      	beq.n	80064ec <pbuf_copy+0x174>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	895a      	ldrh	r2, [r3, #10]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	891b      	ldrh	r3, [r3, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d10d      	bne.n	80064ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <pbuf_copy+0x174>
 80064d8:	4b09      	ldr	r3, [pc, #36]	@ (8006500 <pbuf_copy+0x188>)
 80064da:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80064de:	490e      	ldr	r1, [pc, #56]	@ (8006518 <pbuf_copy+0x1a0>)
 80064e0:	4809      	ldr	r0, [pc, #36]	@ (8006508 <pbuf_copy+0x190>)
 80064e2:	f009 f839 	bl	800f558 <iprintf>
 80064e6:	f06f 0305 	mvn.w	r3, #5
 80064ea:	e004      	b.n	80064f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f47f af61 	bne.w	80063b6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	08010d50 	.word	0x08010d50
 8006504:	08010ff8 	.word	0x08010ff8
 8006508:	08010db0 	.word	0x08010db0
 800650c:	08011028 	.word	0x08011028
 8006510:	08011040 	.word	0x08011040
 8006514:	0801105c 	.word	0x0801105c
 8006518:	0801106c 	.word	0x0801106c

0800651c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	460b      	mov	r3, r1
 800652c:	80fb      	strh	r3, [r7, #6]
 800652e:	4613      	mov	r3, r2
 8006530:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d108      	bne.n	8006552 <pbuf_copy_partial+0x36>
 8006540:	4b2b      	ldr	r3, [pc, #172]	@ (80065f0 <pbuf_copy_partial+0xd4>)
 8006542:	f240 420a 	movw	r2, #1034	@ 0x40a
 8006546:	492b      	ldr	r1, [pc, #172]	@ (80065f4 <pbuf_copy_partial+0xd8>)
 8006548:	482b      	ldr	r0, [pc, #172]	@ (80065f8 <pbuf_copy_partial+0xdc>)
 800654a:	f009 f805 	bl	800f558 <iprintf>
 800654e:	2300      	movs	r3, #0
 8006550:	e04a      	b.n	80065e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d108      	bne.n	800656a <pbuf_copy_partial+0x4e>
 8006558:	4b25      	ldr	r3, [pc, #148]	@ (80065f0 <pbuf_copy_partial+0xd4>)
 800655a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800655e:	4927      	ldr	r1, [pc, #156]	@ (80065fc <pbuf_copy_partial+0xe0>)
 8006560:	4825      	ldr	r0, [pc, #148]	@ (80065f8 <pbuf_copy_partial+0xdc>)
 8006562:	f008 fff9 	bl	800f558 <iprintf>
 8006566:	2300      	movs	r3, #0
 8006568:	e03e      	b.n	80065e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	e034      	b.n	80065da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006570:	88bb      	ldrh	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <pbuf_copy_partial+0x70>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	895b      	ldrh	r3, [r3, #10]
 800657a:	88ba      	ldrh	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d305      	bcc.n	800658c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	895b      	ldrh	r3, [r3, #10]
 8006584:	88ba      	ldrh	r2, [r7, #4]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	80bb      	strh	r3, [r7, #4]
 800658a:	e023      	b.n	80065d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	895a      	ldrh	r2, [r3, #10]
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006596:	8b3a      	ldrh	r2, [r7, #24]
 8006598:	88fb      	ldrh	r3, [r7, #6]
 800659a:	429a      	cmp	r2, r3
 800659c:	d901      	bls.n	80065a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80065a2:	8b7b      	ldrh	r3, [r7, #26]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	18d0      	adds	r0, r2, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	88bb      	ldrh	r3, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	8b3a      	ldrh	r2, [r7, #24]
 80065b2:	4619      	mov	r1, r3
 80065b4:	f009 f8e5 	bl	800f782 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80065b8:	8afa      	ldrh	r2, [r7, #22]
 80065ba:	8b3b      	ldrh	r3, [r7, #24]
 80065bc:	4413      	add	r3, r2
 80065be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80065c0:	8b7a      	ldrh	r2, [r7, #26]
 80065c2:	8b3b      	ldrh	r3, [r7, #24]
 80065c4:	4413      	add	r3, r2
 80065c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80065c8:	88fa      	ldrh	r2, [r7, #6]
 80065ca:	8b3b      	ldrh	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <pbuf_copy_partial+0xca>
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1c4      	bne.n	8006570 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80065e6:	8afb      	ldrh	r3, [r7, #22]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	08010d50 	.word	0x08010d50
 80065f4:	08011098 	.word	0x08011098
 80065f8:	08010db0 	.word	0x08010db0
 80065fc:	080110b8 	.word	0x080110b8

08006600 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <pbuf_take+0x30>
 800661c:	4b3a      	ldr	r3, [pc, #232]	@ (8006708 <pbuf_take+0x108>)
 800661e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8006622:	493a      	ldr	r1, [pc, #232]	@ (800670c <pbuf_take+0x10c>)
 8006624:	483a      	ldr	r0, [pc, #232]	@ (8006710 <pbuf_take+0x110>)
 8006626:	f008 ff97 	bl	800f558 <iprintf>
 800662a:	f06f 030f 	mvn.w	r3, #15
 800662e:	e067      	b.n	8006700 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <pbuf_take+0x4a>
 8006636:	4b34      	ldr	r3, [pc, #208]	@ (8006708 <pbuf_take+0x108>)
 8006638:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800663c:	4935      	ldr	r1, [pc, #212]	@ (8006714 <pbuf_take+0x114>)
 800663e:	4834      	ldr	r0, [pc, #208]	@ (8006710 <pbuf_take+0x110>)
 8006640:	f008 ff8a 	bl	800f558 <iprintf>
 8006644:	f06f 030f 	mvn.w	r3, #15
 8006648:	e05a      	b.n	8006700 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	891b      	ldrh	r3, [r3, #8]
 800664e:	88fa      	ldrh	r2, [r7, #6]
 8006650:	429a      	cmp	r2, r3
 8006652:	d909      	bls.n	8006668 <pbuf_take+0x68>
 8006654:	4b2c      	ldr	r3, [pc, #176]	@ (8006708 <pbuf_take+0x108>)
 8006656:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800665a:	492f      	ldr	r1, [pc, #188]	@ (8006718 <pbuf_take+0x118>)
 800665c:	482c      	ldr	r0, [pc, #176]	@ (8006710 <pbuf_take+0x110>)
 800665e:	f008 ff7b 	bl	800f558 <iprintf>
 8006662:	f04f 33ff 	mov.w	r3, #4294967295
 8006666:	e04b      	b.n	8006700 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <pbuf_take+0x7e>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <pbuf_take+0x7e>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	891b      	ldrh	r3, [r3, #8]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	429a      	cmp	r2, r3
 800667c:	d902      	bls.n	8006684 <pbuf_take+0x84>
    return ERR_ARG;
 800667e:	f06f 030f 	mvn.w	r3, #15
 8006682:	e03d      	b.n	8006700 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e028      	b.n	80066dc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <pbuf_take+0x9e>
 8006690:	4b1d      	ldr	r3, [pc, #116]	@ (8006708 <pbuf_take+0x108>)
 8006692:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8006696:	4921      	ldr	r1, [pc, #132]	@ (800671c <pbuf_take+0x11c>)
 8006698:	481d      	ldr	r0, [pc, #116]	@ (8006710 <pbuf_take+0x110>)
 800669a:	f008 ff5d 	bl	800f558 <iprintf>
    buf_copy_len = total_copy_len;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	461a      	mov	r2, r3
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d902      	bls.n	80066b4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	895b      	ldrh	r3, [r3, #10]
 80066b2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	6858      	ldr	r0, [r3, #4]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4413      	add	r3, r2
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f009 f85e 	bl	800f782 <memcpy>
    total_copy_len -= buf_copy_len;
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	4413      	add	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1d3      	bne.n	800668a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d103      	bne.n	80066f0 <pbuf_take+0xf0>
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d006      	beq.n	80066fe <pbuf_take+0xfe>
 80066f0:	4b05      	ldr	r3, [pc, #20]	@ (8006708 <pbuf_take+0x108>)
 80066f2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80066f6:	490a      	ldr	r1, [pc, #40]	@ (8006720 <pbuf_take+0x120>)
 80066f8:	4805      	ldr	r0, [pc, #20]	@ (8006710 <pbuf_take+0x110>)
 80066fa:	f008 ff2d 	bl	800f558 <iprintf>
  return ERR_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	08010d50 	.word	0x08010d50
 800670c:	08011128 	.word	0x08011128
 8006710:	08010db0 	.word	0x08010db0
 8006714:	08011140 	.word	0x08011140
 8006718:	0801115c 	.word	0x0801115c
 800671c:	0801117c 	.word	0x0801117c
 8006720:	08011194 	.word	0x08011194

08006724 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	603a      	str	r2, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
 8006730:	460b      	mov	r3, r1
 8006732:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	8919      	ldrh	r1, [r3, #8]
 8006738:	88ba      	ldrh	r2, [r7, #4]
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fa1f 	bl	8005b80 <pbuf_alloc>
 8006742:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <pbuf_clone+0x2a>
    return NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	e011      	b.n	8006772 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff fe11 	bl	8006378 <pbuf_copy>
 8006756:	4603      	mov	r3, r0
 8006758:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800675a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d006      	beq.n	8006770 <pbuf_clone+0x4c>
 8006762:	4b06      	ldr	r3, [pc, #24]	@ (800677c <pbuf_clone+0x58>)
 8006764:	f240 5224 	movw	r2, #1316	@ 0x524
 8006768:	4905      	ldr	r1, [pc, #20]	@ (8006780 <pbuf_clone+0x5c>)
 800676a:	4806      	ldr	r0, [pc, #24]	@ (8006784 <pbuf_clone+0x60>)
 800676c:	f008 fef4 	bl	800f558 <iprintf>
  return q;
 8006770:	68fb      	ldr	r3, [r7, #12]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	08010d50 	.word	0x08010d50
 8006780:	080111c4 	.word	0x080111c4
 8006784:	08010db0 	.word	0x08010db0

08006788 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800678c:	f008 fde4 	bl	800f358 <rand>
 8006790:	4603      	mov	r3, r0
 8006792:	b29b      	uxth	r3, r3
 8006794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006798:	b29b      	uxth	r3, r3
 800679a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800679e:	b29a      	uxth	r2, r3
 80067a0:	4b01      	ldr	r3, [pc, #4]	@ (80067a8 <tcp_init+0x20>)
 80067a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80067a4:	bf00      	nop
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	2000000a 	.word	0x2000000a

080067ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7d1b      	ldrb	r3, [r3, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <tcp_free+0x1c>
 80067bc:	4b06      	ldr	r3, [pc, #24]	@ (80067d8 <tcp_free+0x2c>)
 80067be:	22d4      	movs	r2, #212	@ 0xd4
 80067c0:	4906      	ldr	r1, [pc, #24]	@ (80067dc <tcp_free+0x30>)
 80067c2:	4807      	ldr	r0, [pc, #28]	@ (80067e0 <tcp_free+0x34>)
 80067c4:	f008 fec8 	bl	800f558 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	2001      	movs	r0, #1
 80067cc:	f7fe fedc 	bl	8005588 <memp_free>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08011250 	.word	0x08011250
 80067dc:	08011280 	.word	0x08011280
 80067e0:	08011294 	.word	0x08011294

080067e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7d1b      	ldrb	r3, [r3, #20]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d105      	bne.n	8006800 <tcp_free_listen+0x1c>
 80067f4:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <tcp_free_listen+0x2c>)
 80067f6:	22df      	movs	r2, #223	@ 0xdf
 80067f8:	4906      	ldr	r1, [pc, #24]	@ (8006814 <tcp_free_listen+0x30>)
 80067fa:	4807      	ldr	r0, [pc, #28]	@ (8006818 <tcp_free_listen+0x34>)
 80067fc:	f008 feac 	bl	800f558 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	2002      	movs	r0, #2
 8006804:	f7fe fec0 	bl	8005588 <memp_free>
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	08011250 	.word	0x08011250
 8006814:	080112bc 	.word	0x080112bc
 8006818:	08011294 	.word	0x08011294

0800681c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006820:	f001 f802 	bl	8007828 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006824:	4b07      	ldr	r3, [pc, #28]	@ (8006844 <tcp_tmr+0x28>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	b2da      	uxtb	r2, r3
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <tcp_tmr+0x28>)
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	4b04      	ldr	r3, [pc, #16]	@ (8006844 <tcp_tmr+0x28>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800683c:	f000 fcb2 	bl	80071a4 <tcp_slowtmr>
  }
}
 8006840:	bf00      	nop
 8006842:	bd80      	pop	{r7, pc}
 8006844:	2000879d 	.word	0x2000879d

08006848 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <tcp_remove_listener+0x1c>
 8006858:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <tcp_remove_listener+0x48>)
 800685a:	22ff      	movs	r2, #255	@ 0xff
 800685c:	490d      	ldr	r1, [pc, #52]	@ (8006894 <tcp_remove_listener+0x4c>)
 800685e:	480e      	ldr	r0, [pc, #56]	@ (8006898 <tcp_remove_listener+0x50>)
 8006860:	f008 fe7a 	bl	800f558 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e00a      	b.n	8006880 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d102      	bne.n	800687a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f1      	bne.n	800686a <tcp_remove_listener+0x22>
    }
  }
}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	08011250 	.word	0x08011250
 8006894:	080112d8 	.word	0x080112d8
 8006898:	08011294 	.word	0x08011294

0800689c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <tcp_listen_closed+0x1c>
 80068aa:	4b14      	ldr	r3, [pc, #80]	@ (80068fc <tcp_listen_closed+0x60>)
 80068ac:	f240 1211 	movw	r2, #273	@ 0x111
 80068b0:	4913      	ldr	r1, [pc, #76]	@ (8006900 <tcp_listen_closed+0x64>)
 80068b2:	4814      	ldr	r0, [pc, #80]	@ (8006904 <tcp_listen_closed+0x68>)
 80068b4:	f008 fe50 	bl	800f558 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7d1b      	ldrb	r3, [r3, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d006      	beq.n	80068ce <tcp_listen_closed+0x32>
 80068c0:	4b0e      	ldr	r3, [pc, #56]	@ (80068fc <tcp_listen_closed+0x60>)
 80068c2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80068c6:	4910      	ldr	r1, [pc, #64]	@ (8006908 <tcp_listen_closed+0x6c>)
 80068c8:	480e      	ldr	r0, [pc, #56]	@ (8006904 <tcp_listen_closed+0x68>)
 80068ca:	f008 fe45 	bl	800f558 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80068ce:	2301      	movs	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e00b      	b.n	80068ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80068d4:	4a0d      	ldr	r2, [pc, #52]	@ (800690c <tcp_listen_closed+0x70>)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff ffb1 	bl	8006848 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d9f0      	bls.n	80068d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	08011250 	.word	0x08011250
 8006900:	08011300 	.word	0x08011300
 8006904:	08011294 	.word	0x08011294
 8006908:	0801130c 	.word	0x0801130c
 800690c:	08013230 	.word	0x08013230

08006910 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006910:	b5b0      	push	{r4, r5, r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af04      	add	r7, sp, #16
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <tcp_close_shutdown+0x20>
 8006922:	4b63      	ldr	r3, [pc, #396]	@ (8006ab0 <tcp_close_shutdown+0x1a0>)
 8006924:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006928:	4962      	ldr	r1, [pc, #392]	@ (8006ab4 <tcp_close_shutdown+0x1a4>)
 800692a:	4863      	ldr	r0, [pc, #396]	@ (8006ab8 <tcp_close_shutdown+0x1a8>)
 800692c:	f008 fe14 	bl	800f558 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d066      	beq.n	8006a04 <tcp_close_shutdown+0xf4>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	7d1b      	ldrb	r3, [r3, #20]
 800693a:	2b04      	cmp	r3, #4
 800693c:	d003      	beq.n	8006946 <tcp_close_shutdown+0x36>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	7d1b      	ldrb	r3, [r3, #20]
 8006942:	2b07      	cmp	r3, #7
 8006944:	d15e      	bne.n	8006a04 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <tcp_close_shutdown+0x48>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006952:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006956:	d055      	beq.n	8006a04 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8b5b      	ldrh	r3, [r3, #26]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <tcp_close_shutdown+0x62>
 8006964:	4b52      	ldr	r3, [pc, #328]	@ (8006ab0 <tcp_close_shutdown+0x1a0>)
 8006966:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800696a:	4954      	ldr	r1, [pc, #336]	@ (8006abc <tcp_close_shutdown+0x1ac>)
 800696c:	4852      	ldr	r0, [pc, #328]	@ (8006ab8 <tcp_close_shutdown+0x1a8>)
 800696e:	f008 fdf3 	bl	800f558 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800697a:	687d      	ldr	r5, [r7, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3304      	adds	r3, #4
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	8ad2      	ldrh	r2, [r2, #22]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	8b09      	ldrh	r1, [r1, #24]
 8006988:	9102      	str	r1, [sp, #8]
 800698a:	9201      	str	r2, [sp, #4]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	462b      	mov	r3, r5
 8006990:	4622      	mov	r2, r4
 8006992:	4601      	mov	r1, r0
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f005 fcf3 	bl	800c380 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fad6 	bl	8007f4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80069a0:	4b47      	ldr	r3, [pc, #284]	@ (8006ac0 <tcp_close_shutdown+0x1b0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d105      	bne.n	80069b6 <tcp_close_shutdown+0xa6>
 80069aa:	4b45      	ldr	r3, [pc, #276]	@ (8006ac0 <tcp_close_shutdown+0x1b0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4a43      	ldr	r2, [pc, #268]	@ (8006ac0 <tcp_close_shutdown+0x1b0>)
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	e013      	b.n	80069de <tcp_close_shutdown+0xce>
 80069b6:	4b42      	ldr	r3, [pc, #264]	@ (8006ac0 <tcp_close_shutdown+0x1b0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	e00c      	b.n	80069d8 <tcp_close_shutdown+0xc8>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d104      	bne.n	80069d2 <tcp_close_shutdown+0xc2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	60da      	str	r2, [r3, #12]
 80069d0:	e005      	b.n	80069de <tcp_close_shutdown+0xce>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ef      	bne.n	80069be <tcp_close_shutdown+0xae>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	4b37      	ldr	r3, [pc, #220]	@ (8006ac4 <tcp_close_shutdown+0x1b4>)
 80069e6:	2201      	movs	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80069ea:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <tcp_close_shutdown+0x1b8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d102      	bne.n	80069fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80069f4:	f003 ff6a 	bl	800a8cc <tcp_trigger_input_pcb_close>
 80069f8:	e002      	b.n	8006a00 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fed6 	bl	80067ac <tcp_free>
      }
      return ERR_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e050      	b.n	8006aa6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7d1b      	ldrb	r3, [r3, #20]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d03b      	beq.n	8006a84 <tcp_close_shutdown+0x174>
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	dc44      	bgt.n	8006a9a <tcp_close_shutdown+0x18a>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <tcp_close_shutdown+0x10a>
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d02a      	beq.n	8006a6e <tcp_close_shutdown+0x15e>
 8006a18:	e03f      	b.n	8006a9a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8adb      	ldrh	r3, [r3, #22]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d021      	beq.n	8006a66 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006a22:	4b2a      	ldr	r3, [pc, #168]	@ (8006acc <tcp_close_shutdown+0x1bc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d105      	bne.n	8006a38 <tcp_close_shutdown+0x128>
 8006a2c:	4b27      	ldr	r3, [pc, #156]	@ (8006acc <tcp_close_shutdown+0x1bc>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	4a26      	ldr	r2, [pc, #152]	@ (8006acc <tcp_close_shutdown+0x1bc>)
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e013      	b.n	8006a60 <tcp_close_shutdown+0x150>
 8006a38:	4b24      	ldr	r3, [pc, #144]	@ (8006acc <tcp_close_shutdown+0x1bc>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	e00c      	b.n	8006a5a <tcp_close_shutdown+0x14a>
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d104      	bne.n	8006a54 <tcp_close_shutdown+0x144>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	e005      	b.n	8006a60 <tcp_close_shutdown+0x150>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ef      	bne.n	8006a40 <tcp_close_shutdown+0x130>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fea0 	bl	80067ac <tcp_free>
      break;
 8006a6c:	e01a      	b.n	8006aa4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ff14 	bl	800689c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4816      	ldr	r0, [pc, #88]	@ (8006ad0 <tcp_close_shutdown+0x1c0>)
 8006a78:	f001 fab8 	bl	8007fec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff feb1 	bl	80067e4 <tcp_free_listen>
      break;
 8006a82:	e00f      	b.n	8006aa4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	480e      	ldr	r0, [pc, #56]	@ (8006ac0 <tcp_close_shutdown+0x1b0>)
 8006a88:	f001 fab0 	bl	8007fec <tcp_pcb_remove>
 8006a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac4 <tcp_close_shutdown+0x1b4>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff fe8a 	bl	80067ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006a98:	e004      	b.n	8006aa4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f81a 	bl	8006ad4 <tcp_close_shutdown_fin>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	e000      	b.n	8006aa6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bdb0      	pop	{r4, r5, r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	08011250 	.word	0x08011250
 8006ab4:	08011324 	.word	0x08011324
 8006ab8:	08011294 	.word	0x08011294
 8006abc:	08011344 	.word	0x08011344
 8006ac0:	20008794 	.word	0x20008794
 8006ac4:	2000879c 	.word	0x2000879c
 8006ac8:	200087d4 	.word	0x200087d4
 8006acc:	2000878c 	.word	0x2000878c
 8006ad0:	20008790 	.word	0x20008790

08006ad4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <tcp_close_shutdown_fin+0x1c>
 8006ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8006b9c <tcp_close_shutdown_fin+0xc8>)
 8006ae4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8006ae8:	492d      	ldr	r1, [pc, #180]	@ (8006ba0 <tcp_close_shutdown_fin+0xcc>)
 8006aea:	482e      	ldr	r0, [pc, #184]	@ (8006ba4 <tcp_close_shutdown_fin+0xd0>)
 8006aec:	f008 fd34 	bl	800f558 <iprintf>

  switch (pcb->state) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7d1b      	ldrb	r3, [r3, #20]
 8006af4:	2b07      	cmp	r3, #7
 8006af6:	d020      	beq.n	8006b3a <tcp_close_shutdown_fin+0x66>
 8006af8:	2b07      	cmp	r3, #7
 8006afa:	dc2b      	bgt.n	8006b54 <tcp_close_shutdown_fin+0x80>
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d002      	beq.n	8006b06 <tcp_close_shutdown_fin+0x32>
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d00d      	beq.n	8006b20 <tcp_close_shutdown_fin+0x4c>
 8006b04:	e026      	b.n	8006b54 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f004 fd48 	bl	800b59c <tcp_send_fin>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11f      	bne.n	8006b58 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b1e:	e01b      	b.n	8006b58 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f004 fd3b 	bl	800b59c <tcp_send_fin>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d114      	bne.n	8006b5c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2205      	movs	r2, #5
 8006b36:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b38:	e010      	b.n	8006b5c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f004 fd2e 	bl	800b59c <tcp_send_fin>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2209      	movs	r2, #9
 8006b50:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b52:	e005      	b.n	8006b60 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e01c      	b.n	8006b92 <tcp_close_shutdown_fin+0xbe>
      break;
 8006b58:	bf00      	nop
 8006b5a:	e002      	b.n	8006b62 <tcp_close_shutdown_fin+0x8e>
      break;
 8006b5c:	bf00      	nop
 8006b5e:	e000      	b.n	8006b62 <tcp_close_shutdown_fin+0x8e>
      break;
 8006b60:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f004 fe54 	bl	800b818 <tcp_output>
 8006b70:	e00d      	b.n	8006b8e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d108      	bne.n	8006b8e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8b5b      	ldrh	r3, [r3, #26]
 8006b80:	f043 0308 	orr.w	r3, r3, #8
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e001      	b.n	8006b92 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08011250 	.word	0x08011250
 8006ba0:	08011300 	.word	0x08011300
 8006ba4:	08011294 	.word	0x08011294

08006ba8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <tcp_close+0x22>
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf4 <tcp_close+0x4c>)
 8006bb8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006bbc:	490e      	ldr	r1, [pc, #56]	@ (8006bf8 <tcp_close+0x50>)
 8006bbe:	480f      	ldr	r0, [pc, #60]	@ (8006bfc <tcp_close+0x54>)
 8006bc0:	f008 fcca 	bl	800f558 <iprintf>
 8006bc4:	f06f 030f 	mvn.w	r3, #15
 8006bc8:	e00f      	b.n	8006bea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7d1b      	ldrb	r3, [r3, #20]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d006      	beq.n	8006be0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8b5b      	ldrh	r3, [r3, #26]
 8006bd6:	f043 0310 	orr.w	r3, r3, #16
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006be0:	2101      	movs	r1, #1
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fe94 	bl	8006910 <tcp_close_shutdown>
 8006be8:	4603      	mov	r3, r0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08011250 	.word	0x08011250
 8006bf8:	08011360 	.word	0x08011360
 8006bfc:	08011294 	.word	0x08011294

08006c00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08e      	sub	sp, #56	@ 0x38
 8006c04:	af04      	add	r7, sp, #16
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d107      	bne.n	8006c20 <tcp_abandon+0x20>
 8006c10:	4b52      	ldr	r3, [pc, #328]	@ (8006d5c <tcp_abandon+0x15c>)
 8006c12:	f240 223d 	movw	r2, #573	@ 0x23d
 8006c16:	4952      	ldr	r1, [pc, #328]	@ (8006d60 <tcp_abandon+0x160>)
 8006c18:	4852      	ldr	r0, [pc, #328]	@ (8006d64 <tcp_abandon+0x164>)
 8006c1a:	f008 fc9d 	bl	800f558 <iprintf>
 8006c1e:	e099      	b.n	8006d54 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7d1b      	ldrb	r3, [r3, #20]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d106      	bne.n	8006c36 <tcp_abandon+0x36>
 8006c28:	4b4c      	ldr	r3, [pc, #304]	@ (8006d5c <tcp_abandon+0x15c>)
 8006c2a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006c2e:	494e      	ldr	r1, [pc, #312]	@ (8006d68 <tcp_abandon+0x168>)
 8006c30:	484c      	ldr	r0, [pc, #304]	@ (8006d64 <tcp_abandon+0x164>)
 8006c32:	f008 fc91 	bl	800f558 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7d1b      	ldrb	r3, [r3, #20]
 8006c3a:	2b0a      	cmp	r3, #10
 8006c3c:	d107      	bne.n	8006c4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	484a      	ldr	r0, [pc, #296]	@ (8006d6c <tcp_abandon+0x16c>)
 8006c42:	f001 f9d3 	bl	8007fec <tcp_pcb_remove>
    tcp_free(pcb);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fdb0 	bl	80067ac <tcp_free>
 8006c4c:	e082      	b.n	8006d54 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	7d1b      	ldrb	r3, [r3, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d126      	bne.n	8006cc6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8adb      	ldrh	r3, [r3, #22]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d02e      	beq.n	8006cde <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c80:	4b3b      	ldr	r3, [pc, #236]	@ (8006d70 <tcp_abandon+0x170>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d105      	bne.n	8006c96 <tcp_abandon+0x96>
 8006c8a:	4b39      	ldr	r3, [pc, #228]	@ (8006d70 <tcp_abandon+0x170>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4a37      	ldr	r2, [pc, #220]	@ (8006d70 <tcp_abandon+0x170>)
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	e013      	b.n	8006cbe <tcp_abandon+0xbe>
 8006c96:	4b36      	ldr	r3, [pc, #216]	@ (8006d70 <tcp_abandon+0x170>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	e00c      	b.n	8006cb8 <tcp_abandon+0xb8>
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d104      	bne.n	8006cb2 <tcp_abandon+0xb2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	60da      	str	r2, [r3, #12]
 8006cb0:	e005      	b.n	8006cbe <tcp_abandon+0xbe>
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ef      	bne.n	8006c9e <tcp_abandon+0x9e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	60da      	str	r2, [r3, #12]
 8006cc4:	e00b      	b.n	8006cde <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8adb      	ldrh	r3, [r3, #22]
 8006cce:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4828      	ldr	r0, [pc, #160]	@ (8006d74 <tcp_abandon+0x174>)
 8006cd4:	f001 f98a 	bl	8007fec <tcp_pcb_remove>
 8006cd8:	4b27      	ldr	r3, [pc, #156]	@ (8006d78 <tcp_abandon+0x178>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fe7c 	bl	80079e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fe73 	bl	80079e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fe6a 	bl	80079e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	8b12      	ldrh	r2, [r2, #24]
 8006d24:	9202      	str	r2, [sp, #8]
 8006d26:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	69b9      	ldr	r1, [r7, #24]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f005 fb24 	bl	800c380 <tcp_rst>
    }
    last_state = pcb->state;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7d1b      	ldrb	r3, [r3, #20]
 8006d3c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fd34 	bl	80067ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <tcp_abandon+0x154>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f06f 010c 	mvn.w	r1, #12
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	4798      	blx	r3
  }
}
 8006d54:	3728      	adds	r7, #40	@ 0x28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	08011250 	.word	0x08011250
 8006d60:	08011394 	.word	0x08011394
 8006d64:	08011294 	.word	0x08011294
 8006d68:	080113b0 	.word	0x080113b0
 8006d6c:	20008798 	.word	0x20008798
 8006d70:	2000878c 	.word	0x2000878c
 8006d74:	20008794 	.word	0x20008794
 8006d78:	2000879c 	.word	0x2000879c

08006d7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006d84:	2101      	movs	r1, #1
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff ff3a 	bl	8006c00 <tcp_abandon>
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <tcp_update_rcv_ann_wnd+0x1c>
 8006da2:	4b25      	ldr	r3, [pc, #148]	@ (8006e38 <tcp_update_rcv_ann_wnd+0xa4>)
 8006da4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006da8:	4924      	ldr	r1, [pc, #144]	@ (8006e3c <tcp_update_rcv_ann_wnd+0xa8>)
 8006daa:	4825      	ldr	r0, [pc, #148]	@ (8006e40 <tcp_update_rcv_ann_wnd+0xac>)
 8006dac:	f008 fbd4 	bl	800f558 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006db8:	4413      	add	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006dc4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006dc8:	bf28      	it	cs
 8006dca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006dce:	b292      	uxth	r2, r2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	db08      	blt.n	8006dec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	e020      	b.n	8006e2e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dd03      	ble.n	8006e02 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e00:	e014      	b.n	8006e2c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e14:	d306      	bcc.n	8006e24 <tcp_update_rcv_ann_wnd+0x90>
 8006e16:	4b08      	ldr	r3, [pc, #32]	@ (8006e38 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e18:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006e1c:	4909      	ldr	r1, [pc, #36]	@ (8006e44 <tcp_update_rcv_ann_wnd+0xb0>)
 8006e1e:	4808      	ldr	r0, [pc, #32]	@ (8006e40 <tcp_update_rcv_ann_wnd+0xac>)
 8006e20:	f008 fb9a 	bl	800f558 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006e2c:	2300      	movs	r3, #0
  }
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	08011250 	.word	0x08011250
 8006e3c:	080114ac 	.word	0x080114ac
 8006e40:	08011294 	.word	0x08011294
 8006e44:	080114d0 	.word	0x080114d0

08006e48 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d107      	bne.n	8006e6a <tcp_recved+0x22>
 8006e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed8 <tcp_recved+0x90>)
 8006e5c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006e60:	491e      	ldr	r1, [pc, #120]	@ (8006edc <tcp_recved+0x94>)
 8006e62:	481f      	ldr	r0, [pc, #124]	@ (8006ee0 <tcp_recved+0x98>)
 8006e64:	f008 fb78 	bl	800f558 <iprintf>
 8006e68:	e032      	b.n	8006ed0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	7d1b      	ldrb	r3, [r3, #20]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d106      	bne.n	8006e80 <tcp_recved+0x38>
 8006e72:	4b19      	ldr	r3, [pc, #100]	@ (8006ed8 <tcp_recved+0x90>)
 8006e74:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006e78:	491a      	ldr	r1, [pc, #104]	@ (8006ee4 <tcp_recved+0x9c>)
 8006e7a:	4819      	ldr	r0, [pc, #100]	@ (8006ee0 <tcp_recved+0x98>)
 8006e7c:	f008 fb6c 	bl	800f558 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006e84:	887b      	ldrh	r3, [r7, #2]
 8006e86:	4413      	add	r3, r2
 8006e88:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006e8a:	89fb      	ldrh	r3, [r7, #14]
 8006e8c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006e90:	d804      	bhi.n	8006e9c <tcp_recved+0x54>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e96:	89fa      	ldrh	r2, [r7, #14]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d204      	bcs.n	8006ea6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ea4:	e002      	b.n	8006eac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	89fa      	ldrh	r2, [r7, #14]
 8006eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ff71 	bl	8006d94 <tcp_update_rcv_ann_wnd>
 8006eb2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006eba:	d309      	bcc.n	8006ed0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8b5b      	ldrh	r3, [r3, #26]
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f004 fca4 	bl	800b818 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	08011250 	.word	0x08011250
 8006edc:	080114ec 	.word	0x080114ec
 8006ee0:	08011294 	.word	0x08011294
 8006ee4:	08011504 	.word	0x08011504

08006ee8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8006f6c <tcp_new_port+0x84>)
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	4b1c      	ldr	r3, [pc, #112]	@ (8006f6c <tcp_new_port+0x84>)
 8006efc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006efe:	4b1b      	ldr	r3, [pc, #108]	@ (8006f6c <tcp_new_port+0x84>)
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d103      	bne.n	8006f12 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006f0a:	4b18      	ldr	r3, [pc, #96]	@ (8006f6c <tcp_new_port+0x84>)
 8006f0c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8006f10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006f12:	2300      	movs	r3, #0
 8006f14:	71fb      	strb	r3, [r7, #7]
 8006f16:	e01e      	b.n	8006f56 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	4a15      	ldr	r2, [pc, #84]	@ (8006f70 <tcp_new_port+0x88>)
 8006f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	e011      	b.n	8006f4a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	8ada      	ldrh	r2, [r3, #22]
 8006f2a:	4b10      	ldr	r3, [pc, #64]	@ (8006f6c <tcp_new_port+0x84>)
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d108      	bne.n	8006f44 <tcp_new_port+0x5c>
        n++;
 8006f32:	88bb      	ldrh	r3, [r7, #4]
 8006f34:	3301      	adds	r3, #1
 8006f36:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006f38:	88bb      	ldrh	r3, [r7, #4]
 8006f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f3e:	d3d8      	bcc.n	8006ef2 <tcp_new_port+0xa>
          return 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e00d      	b.n	8006f60 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1ea      	bne.n	8006f26 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	3301      	adds	r3, #1
 8006f54:	71fb      	strb	r3, [r7, #7]
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d9dd      	bls.n	8006f18 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	@ (8006f6c <tcp_new_port+0x84>)
 8006f5e:	881b      	ldrh	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	2000000a 	.word	0x2000000a
 8006f70:	08013230 	.word	0x08013230

08006f74 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	@ 0x28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <tcp_connect+0x2e>
 8006f8e:	4b7d      	ldr	r3, [pc, #500]	@ (8007184 <tcp_connect+0x210>)
 8006f90:	f240 4235 	movw	r2, #1077	@ 0x435
 8006f94:	497c      	ldr	r1, [pc, #496]	@ (8007188 <tcp_connect+0x214>)
 8006f96:	487d      	ldr	r0, [pc, #500]	@ (800718c <tcp_connect+0x218>)
 8006f98:	f008 fade 	bl	800f558 <iprintf>
 8006f9c:	f06f 030f 	mvn.w	r3, #15
 8006fa0:	e0ec      	b.n	800717c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <tcp_connect+0x48>
 8006fa8:	4b76      	ldr	r3, [pc, #472]	@ (8007184 <tcp_connect+0x210>)
 8006faa:	f240 4236 	movw	r2, #1078	@ 0x436
 8006fae:	4978      	ldr	r1, [pc, #480]	@ (8007190 <tcp_connect+0x21c>)
 8006fb0:	4876      	ldr	r0, [pc, #472]	@ (800718c <tcp_connect+0x218>)
 8006fb2:	f008 fad1 	bl	800f558 <iprintf>
 8006fb6:	f06f 030f 	mvn.w	r3, #15
 8006fba:	e0df      	b.n	800717c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	7d1b      	ldrb	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <tcp_connect+0x64>
 8006fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8007184 <tcp_connect+0x210>)
 8006fc6:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8006fca:	4972      	ldr	r1, [pc, #456]	@ (8007194 <tcp_connect+0x220>)
 8006fcc:	486f      	ldr	r0, [pc, #444]	@ (800718c <tcp_connect+0x218>)
 8006fce:	f008 fac3 	bl	800f558 <iprintf>
 8006fd2:	f06f 0309 	mvn.w	r3, #9
 8006fd6:	e0d1      	b.n	800717c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <tcp_connect+0x70>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	e000      	b.n	8006fe6 <tcp_connect+0x72>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	88fa      	ldrh	r2, [r7, #6]
 8006fee:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	7a1b      	ldrb	r3, [r3, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	7a1b      	ldrb	r3, [r3, #8]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fd43 	bl	8005a88 <netif_get_by_index>
 8007002:	6278      	str	r0, [r7, #36]	@ 0x24
 8007004:	e005      	b.n	8007012 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3304      	adds	r3, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f006 ff28 	bl	800de60 <ip4_route>
 8007010:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d102      	bne.n	800701e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8007018:	f06f 0303 	mvn.w	r3, #3
 800701c:	e0ae      	b.n	800717c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <tcp_connect+0xb8>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d111      	bne.n	8007050 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <tcp_connect+0xc4>
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	3304      	adds	r3, #4
 8007036:	e000      	b.n	800703a <tcp_connect+0xc6>
 8007038:	2300      	movs	r3, #0
 800703a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <tcp_connect+0xd4>
      return ERR_RTE;
 8007042:	f06f 0303 	mvn.w	r3, #3
 8007046:	e099      	b.n	800717c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8adb      	ldrh	r3, [r3, #22]
 8007054:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8adb      	ldrh	r3, [r3, #22]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800705e:	f7ff ff43 	bl	8006ee8 <tcp_new_port>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8adb      	ldrh	r3, [r3, #22]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <tcp_connect+0x104>
      return ERR_BUF;
 8007072:	f06f 0301 	mvn.w	r3, #1
 8007076:	e081      	b.n	800717c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f001 f84b 	bl	8008114 <tcp_next_iss>
 800707e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	1e5a      	subs	r2, r3, #1
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	1e5a      	subs	r2, r3, #1
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	1e5a      	subs	r2, r3, #1
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80070aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80070c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80070cc:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3304      	adds	r3, #4
 80070d6:	461a      	mov	r2, r3
 80070d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070da:	f001 f841 	bl	8008160 <tcp_eff_send_mss_netif>
 80070de:	4603      	mov	r3, r0
 80070e0:	461a      	mov	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80070f6:	2102      	movs	r1, #2
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f004 fa9f 	bl	800b63c <tcp_enqueue_flags>
 80070fe:	4603      	mov	r3, r0
 8007100:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8007102:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d136      	bne.n	8007178 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2202      	movs	r2, #2
 800710e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8007110:	8b7b      	ldrh	r3, [r7, #26]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d021      	beq.n	800715a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007116:	4b20      	ldr	r3, [pc, #128]	@ (8007198 <tcp_connect+0x224>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	429a      	cmp	r2, r3
 800711e:	d105      	bne.n	800712c <tcp_connect+0x1b8>
 8007120:	4b1d      	ldr	r3, [pc, #116]	@ (8007198 <tcp_connect+0x224>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	4a1c      	ldr	r2, [pc, #112]	@ (8007198 <tcp_connect+0x224>)
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	e013      	b.n	8007154 <tcp_connect+0x1e0>
 800712c:	4b1a      	ldr	r3, [pc, #104]	@ (8007198 <tcp_connect+0x224>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	623b      	str	r3, [r7, #32]
 8007132:	e00c      	b.n	800714e <tcp_connect+0x1da>
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	429a      	cmp	r2, r3
 800713c:	d104      	bne.n	8007148 <tcp_connect+0x1d4>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	e005      	b.n	8007154 <tcp_connect+0x1e0>
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ef      	bne.n	8007134 <tcp_connect+0x1c0>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800715a:	4b10      	ldr	r3, [pc, #64]	@ (800719c <tcp_connect+0x228>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	4a0e      	ldr	r2, [pc, #56]	@ (800719c <tcp_connect+0x228>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	f005 facc 	bl	800c704 <tcp_timer_needed>
 800716c:	4b0c      	ldr	r3, [pc, #48]	@ (80071a0 <tcp_connect+0x22c>)
 800716e:	2201      	movs	r2, #1
 8007170:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f004 fb50 	bl	800b818 <tcp_output>
  }
  return ret;
 8007178:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3728      	adds	r7, #40	@ 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	08011250 	.word	0x08011250
 8007188:	0801152c 	.word	0x0801152c
 800718c:	08011294 	.word	0x08011294
 8007190:	08011548 	.word	0x08011548
 8007194:	08011564 	.word	0x08011564
 8007198:	2000878c 	.word	0x2000878c
 800719c:	20008794 	.word	0x20008794
 80071a0:	2000879c 	.word	0x2000879c

080071a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80071a4:	b5b0      	push	{r4, r5, r7, lr}
 80071a6:	b090      	sub	sp, #64	@ 0x40
 80071a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80071b0:	4b95      	ldr	r3, [pc, #596]	@ (8007408 <tcp_slowtmr+0x264>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a94      	ldr	r2, [pc, #592]	@ (8007408 <tcp_slowtmr+0x264>)
 80071b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80071ba:	4b94      	ldr	r3, [pc, #592]	@ (800740c <tcp_slowtmr+0x268>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	4b92      	ldr	r3, [pc, #584]	@ (800740c <tcp_slowtmr+0x268>)
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	e000      	b.n	80071ca <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80071c8:	bf00      	nop
  prev = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80071ce:	4b90      	ldr	r3, [pc, #576]	@ (8007410 <tcp_slowtmr+0x26c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80071d4:	e29f      	b.n	8007716 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80071d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d8:	7d1b      	ldrb	r3, [r3, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <tcp_slowtmr+0x48>
 80071de:	4b8d      	ldr	r3, [pc, #564]	@ (8007414 <tcp_slowtmr+0x270>)
 80071e0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80071e4:	498c      	ldr	r1, [pc, #560]	@ (8007418 <tcp_slowtmr+0x274>)
 80071e6:	488d      	ldr	r0, [pc, #564]	@ (800741c <tcp_slowtmr+0x278>)
 80071e8:	f008 f9b6 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	7d1b      	ldrb	r3, [r3, #20]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d106      	bne.n	8007202 <tcp_slowtmr+0x5e>
 80071f4:	4b87      	ldr	r3, [pc, #540]	@ (8007414 <tcp_slowtmr+0x270>)
 80071f6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80071fa:	4989      	ldr	r1, [pc, #548]	@ (8007420 <tcp_slowtmr+0x27c>)
 80071fc:	4887      	ldr	r0, [pc, #540]	@ (800741c <tcp_slowtmr+0x278>)
 80071fe:	f008 f9ab 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007204:	7d1b      	ldrb	r3, [r3, #20]
 8007206:	2b0a      	cmp	r3, #10
 8007208:	d106      	bne.n	8007218 <tcp_slowtmr+0x74>
 800720a:	4b82      	ldr	r3, [pc, #520]	@ (8007414 <tcp_slowtmr+0x270>)
 800720c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007210:	4984      	ldr	r1, [pc, #528]	@ (8007424 <tcp_slowtmr+0x280>)
 8007212:	4882      	ldr	r0, [pc, #520]	@ (800741c <tcp_slowtmr+0x278>)
 8007214:	f008 f9a0 	bl	800f558 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721a:	7f9a      	ldrb	r2, [r3, #30]
 800721c:	4b7b      	ldr	r3, [pc, #492]	@ (800740c <tcp_slowtmr+0x268>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d105      	bne.n	8007230 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800722e:	e272      	b.n	8007716 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8007230:	4b76      	ldr	r3, [pc, #472]	@ (800740c <tcp_slowtmr+0x268>)
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007236:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	7d1b      	ldrb	r3, [r3, #20]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d10a      	bne.n	8007262 <tcp_slowtmr+0xbe>
 800724c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007252:	2b05      	cmp	r3, #5
 8007254:	d905      	bls.n	8007262 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800725a:	3301      	adds	r3, #1
 800725c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007260:	e11e      	b.n	80074a0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007264:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007268:	2b0b      	cmp	r3, #11
 800726a:	d905      	bls.n	8007278 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800726c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007270:	3301      	adds	r3, #1
 8007272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007276:	e113      	b.n	80074a0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800727e:	2b00      	cmp	r3, #0
 8007280:	d075      	beq.n	800736e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007286:	2b00      	cmp	r3, #0
 8007288:	d006      	beq.n	8007298 <tcp_slowtmr+0xf4>
 800728a:	4b62      	ldr	r3, [pc, #392]	@ (8007414 <tcp_slowtmr+0x270>)
 800728c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007290:	4965      	ldr	r1, [pc, #404]	@ (8007428 <tcp_slowtmr+0x284>)
 8007292:	4862      	ldr	r0, [pc, #392]	@ (800741c <tcp_slowtmr+0x278>)
 8007294:	f008 f960 	bl	800f558 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <tcp_slowtmr+0x10a>
 80072a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007414 <tcp_slowtmr+0x270>)
 80072a2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80072a6:	4961      	ldr	r1, [pc, #388]	@ (800742c <tcp_slowtmr+0x288>)
 80072a8:	485c      	ldr	r0, [pc, #368]	@ (800741c <tcp_slowtmr+0x278>)
 80072aa:	f008 f955 	bl	800f558 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80072b4:	2b0b      	cmp	r3, #11
 80072b6:	d905      	bls.n	80072c4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80072b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072bc:	3301      	adds	r3, #1
 80072be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072c2:	e0ed      	b.n	80074a0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80072c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4a58      	ldr	r2, [pc, #352]	@ (8007430 <tcp_slowtmr+0x28c>)
 80072ce:	5cd3      	ldrb	r3, [r2, r3]
 80072d0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072d8:	7c7a      	ldrb	r2, [r7, #17]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d907      	bls.n	80072ee <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80072de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072e4:	3301      	adds	r3, #1
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80072ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072f4:	7c7a      	ldrb	r2, [r7, #17]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	f200 80d2 	bhi.w	80074a0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80072fc:	2301      	movs	r3, #1
 80072fe:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007306:	2b00      	cmp	r3, #0
 8007308:	d108      	bne.n	800731c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800730a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800730c:	f005 f92c 	bl	800c568 <tcp_zero_window_probe>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d014      	beq.n	8007340 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007316:	2300      	movs	r3, #0
 8007318:	623b      	str	r3, [r7, #32]
 800731a:	e011      	b.n	8007340 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800731c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007322:	4619      	mov	r1, r3
 8007324:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007326:	f003 fff1 	bl	800b30c <tcp_split_unsent_seg>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d107      	bne.n	8007340 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007332:	f004 fa71 	bl	800b818 <tcp_output>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 80ac 	beq.w	80074a0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007352:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007356:	2b06      	cmp	r3, #6
 8007358:	f200 80a2 	bhi.w	80074a0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800735c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007362:	3301      	adds	r3, #1
 8007364:	b2da      	uxtb	r2, r3
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800736c:	e098      	b.n	80074a0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007370:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	db0f      	blt.n	8007398 <tcp_slowtmr+0x1f4>
 8007378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800737e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007382:	4293      	cmp	r3, r2
 8007384:	d008      	beq.n	8007398 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007388:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800738c:	b29b      	uxth	r3, r3
 800738e:	3301      	adds	r3, #1
 8007390:	b29b      	uxth	r3, r3
 8007392:	b21a      	sxth	r2, r3
 8007394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007396:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80073a4:	429a      	cmp	r2, r3
 80073a6:	db7b      	blt.n	80074a0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80073a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073aa:	f004 fd29 	bl	800be00 <tcp_rexmit_rto_prepare>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <tcp_slowtmr+0x220>
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d171      	bne.n	80074a0 <tcp_slowtmr+0x2fc>
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d06d      	beq.n	80074a0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80073c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c6:	7d1b      	ldrb	r3, [r3, #20]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d03a      	beq.n	8007442 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80073cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073d2:	2b0c      	cmp	r3, #12
 80073d4:	bf28      	it	cs
 80073d6:	230c      	movcs	r3, #12
 80073d8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80073e0:	10db      	asrs	r3, r3, #3
 80073e2:	b21b      	sxth	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80073ec:	4413      	add	r3, r2
 80073ee:	7efa      	ldrb	r2, [r7, #27]
 80073f0:	4910      	ldr	r1, [pc, #64]	@ (8007434 <tcp_slowtmr+0x290>)
 80073f2:	5c8a      	ldrb	r2, [r1, r2]
 80073f4:	4093      	lsls	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80073fe:	4293      	cmp	r3, r2
 8007400:	dc1a      	bgt.n	8007438 <tcp_slowtmr+0x294>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	b21a      	sxth	r2, r3
 8007406:	e019      	b.n	800743c <tcp_slowtmr+0x298>
 8007408:	20008788 	.word	0x20008788
 800740c:	2000879e 	.word	0x2000879e
 8007410:	20008794 	.word	0x20008794
 8007414:	08011250 	.word	0x08011250
 8007418:	08011594 	.word	0x08011594
 800741c:	08011294 	.word	0x08011294
 8007420:	080115c0 	.word	0x080115c0
 8007424:	080115ec 	.word	0x080115ec
 8007428:	0801161c 	.word	0x0801161c
 800742c:	08011650 	.word	0x08011650
 8007430:	08013228 	.word	0x08013228
 8007434:	08013218 	.word	0x08013218
 8007438:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800743c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007444:	2200      	movs	r2, #0
 8007446:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800744e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007450:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007454:	4293      	cmp	r3, r2
 8007456:	bf28      	it	cs
 8007458:	4613      	movcs	r3, r2
 800745a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800745c:	8a7b      	ldrh	r3, [r7, #18]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800746e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007470:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	b29b      	uxth	r3, r3
 8007476:	429a      	cmp	r2, r3
 8007478:	d206      	bcs.n	8007488 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007484:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8007492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007494:	2200      	movs	r2, #0
 8007496:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800749a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800749c:	f004 fd20 	bl	800bee0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80074a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a2:	7d1b      	ldrb	r3, [r3, #20]
 80074a4:	2b06      	cmp	r3, #6
 80074a6:	d111      	bne.n	80074cc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	8b5b      	ldrh	r3, [r3, #26]
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074b4:	4b9d      	ldr	r3, [pc, #628]	@ (800772c <tcp_slowtmr+0x588>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b28      	cmp	r3, #40	@ 0x28
 80074c0:	d904      	bls.n	80074cc <tcp_slowtmr+0x328>
          ++pcb_remove;
 80074c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074c6:	3301      	adds	r3, #1
 80074c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	7a5b      	ldrb	r3, [r3, #9]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d04c      	beq.n	8007572 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80074d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074da:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d003      	beq.n	80074e8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80074e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80074e4:	2b07      	cmp	r3, #7
 80074e6:	d144      	bne.n	8007572 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074e8:	4b90      	ldr	r3, [pc, #576]	@ (800772c <tcp_slowtmr+0x588>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80074f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074f8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80074fc:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8007500:	498b      	ldr	r1, [pc, #556]	@ (8007730 <tcp_slowtmr+0x58c>)
 8007502:	fba1 1303 	umull	r1, r3, r1, r3
 8007506:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007508:	429a      	cmp	r2, r3
 800750a:	d90a      	bls.n	8007522 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800750c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007510:	3301      	adds	r3, #1
 8007512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007516:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800751a:	3301      	adds	r3, #1
 800751c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007520:	e027      	b.n	8007572 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007522:	4b82      	ldr	r3, [pc, #520]	@ (800772c <tcp_slowtmr+0x588>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007534:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007538:	4618      	mov	r0, r3
 800753a:	4b7e      	ldr	r3, [pc, #504]	@ (8007734 <tcp_slowtmr+0x590>)
 800753c:	fb00 f303 	mul.w	r3, r0, r3
 8007540:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007542:	497b      	ldr	r1, [pc, #492]	@ (8007730 <tcp_slowtmr+0x58c>)
 8007544:	fba1 1303 	umull	r1, r3, r1, r3
 8007548:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800754a:	429a      	cmp	r2, r3
 800754c:	d911      	bls.n	8007572 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800754e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007550:	f004 ffca 	bl	800c4e8 <tcp_keepalive>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800755a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800755e:	2b00      	cmp	r3, #0
 8007560:	d107      	bne.n	8007572 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8007562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007564:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007568:	3301      	adds	r3, #1
 800756a:	b2da      	uxtb	r2, r3
 800756c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007576:	2b00      	cmp	r3, #0
 8007578:	d011      	beq.n	800759e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800757a:	4b6c      	ldr	r3, [pc, #432]	@ (800772c <tcp_slowtmr+0x588>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007586:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800758a:	4619      	mov	r1, r3
 800758c:	460b      	mov	r3, r1
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	440b      	add	r3, r1
 8007592:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8007598:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800759a:	f000 fe8b 	bl	80082b4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800759e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a0:	7d1b      	ldrb	r3, [r3, #20]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d10b      	bne.n	80075be <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80075a6:	4b61      	ldr	r3, [pc, #388]	@ (800772c <tcp_slowtmr+0x588>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b28      	cmp	r3, #40	@ 0x28
 80075b2:	d904      	bls.n	80075be <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80075b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075b8:	3301      	adds	r3, #1
 80075ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80075be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c0:	7d1b      	ldrb	r3, [r3, #20]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d10b      	bne.n	80075de <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80075c6:	4b59      	ldr	r3, [pc, #356]	@ (800772c <tcp_slowtmr+0x588>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80075d2:	d904      	bls.n	80075de <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80075d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075d8:	3301      	adds	r3, #1
 80075da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80075de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d060      	beq.n	80076a8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ec:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80075ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075f0:	f000 fcac 	bl	8007f4c <tcp_pcb_purge>
      if (prev != NULL) {
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d010      	beq.n	800761c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80075fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007738 <tcp_slowtmr+0x594>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007600:	429a      	cmp	r2, r3
 8007602:	d106      	bne.n	8007612 <tcp_slowtmr+0x46e>
 8007604:	4b4d      	ldr	r3, [pc, #308]	@ (800773c <tcp_slowtmr+0x598>)
 8007606:	f240 526d 	movw	r2, #1389	@ 0x56d
 800760a:	494d      	ldr	r1, [pc, #308]	@ (8007740 <tcp_slowtmr+0x59c>)
 800760c:	484d      	ldr	r0, [pc, #308]	@ (8007744 <tcp_slowtmr+0x5a0>)
 800760e:	f007 ffa3 	bl	800f558 <iprintf>
        prev->next = pcb->next;
 8007612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	e00f      	b.n	800763c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800761c:	4b46      	ldr	r3, [pc, #280]	@ (8007738 <tcp_slowtmr+0x594>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007622:	429a      	cmp	r2, r3
 8007624:	d006      	beq.n	8007634 <tcp_slowtmr+0x490>
 8007626:	4b45      	ldr	r3, [pc, #276]	@ (800773c <tcp_slowtmr+0x598>)
 8007628:	f240 5271 	movw	r2, #1393	@ 0x571
 800762c:	4946      	ldr	r1, [pc, #280]	@ (8007748 <tcp_slowtmr+0x5a4>)
 800762e:	4845      	ldr	r0, [pc, #276]	@ (8007744 <tcp_slowtmr+0x5a0>)
 8007630:	f007 ff92 	bl	800f558 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4a3f      	ldr	r2, [pc, #252]	@ (8007738 <tcp_slowtmr+0x594>)
 800763a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800763c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007640:	2b00      	cmp	r3, #0
 8007642:	d013      	beq.n	800766c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800764c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007650:	3304      	adds	r3, #4
 8007652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007654:	8ad2      	ldrh	r2, [r2, #22]
 8007656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007658:	8b09      	ldrh	r1, [r1, #24]
 800765a:	9102      	str	r1, [sp, #8]
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	462b      	mov	r3, r5
 8007662:	4622      	mov	r2, r4
 8007664:	4601      	mov	r1, r0
 8007666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007668:	f004 fe8a 	bl	800c380 <tcp_rst>
      err_arg = pcb->callback_arg;
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007674:	7d1b      	ldrb	r3, [r3, #20]
 8007676:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800767c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007682:	6838      	ldr	r0, [r7, #0]
 8007684:	f7ff f892 	bl	80067ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007688:	4b30      	ldr	r3, [pc, #192]	@ (800774c <tcp_slowtmr+0x5a8>)
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <tcp_slowtmr+0x4fa>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f06f 010c 	mvn.w	r1, #12
 800769a:	68b8      	ldr	r0, [r7, #8]
 800769c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800769e:	4b2b      	ldr	r3, [pc, #172]	@ (800774c <tcp_slowtmr+0x5a8>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d037      	beq.n	8007716 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80076a6:	e590      	b.n	80071ca <tcp_slowtmr+0x26>
      prev = pcb;
 80076a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80076b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b4:	7f1b      	ldrb	r3, [r3, #28]
 80076b6:	3301      	adds	r3, #1
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80076be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c0:	7f1a      	ldrb	r2, [r3, #28]
 80076c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c4:	7f5b      	ldrb	r3, [r3, #29]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d325      	bcc.n	8007716 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80076ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80076d0:	4b1e      	ldr	r3, [pc, #120]	@ (800774c <tcp_slowtmr+0x5a8>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00b      	beq.n	80076f8 <tcp_slowtmr+0x554>
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e8:	6912      	ldr	r2, [r2, #16]
 80076ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80076f6:	e002      	b.n	80076fe <tcp_slowtmr+0x55a>
 80076f8:	2300      	movs	r3, #0
 80076fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80076fe:	4b13      	ldr	r3, [pc, #76]	@ (800774c <tcp_slowtmr+0x5a8>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f47f ad60 	bne.w	80071c8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007708:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8007710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007712:	f004 f881 	bl	800b818 <tcp_output>
  while (pcb != NULL) {
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f ad5c 	bne.w	80071d6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007722:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <tcp_slowtmr+0x5ac>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007728:	e067      	b.n	80077fa <tcp_slowtmr+0x656>
 800772a:	bf00      	nop
 800772c:	20008788 	.word	0x20008788
 8007730:	10624dd3 	.word	0x10624dd3
 8007734:	000124f8 	.word	0x000124f8
 8007738:	20008794 	.word	0x20008794
 800773c:	08011250 	.word	0x08011250
 8007740:	08011688 	.word	0x08011688
 8007744:	08011294 	.word	0x08011294
 8007748:	080116b4 	.word	0x080116b4
 800774c:	2000879c 	.word	0x2000879c
 8007750:	20008798 	.word	0x20008798
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007756:	7d1b      	ldrb	r3, [r3, #20]
 8007758:	2b0a      	cmp	r3, #10
 800775a:	d006      	beq.n	800776a <tcp_slowtmr+0x5c6>
 800775c:	4b2b      	ldr	r3, [pc, #172]	@ (800780c <tcp_slowtmr+0x668>)
 800775e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007762:	492b      	ldr	r1, [pc, #172]	@ (8007810 <tcp_slowtmr+0x66c>)
 8007764:	482b      	ldr	r0, [pc, #172]	@ (8007814 <tcp_slowtmr+0x670>)
 8007766:	f007 fef7 	bl	800f558 <iprintf>
    pcb_remove = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007770:	4b29      	ldr	r3, [pc, #164]	@ (8007818 <tcp_slowtmr+0x674>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2bf0      	cmp	r3, #240	@ 0xf0
 800777c:	d904      	bls.n	8007788 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800777e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007782:	3301      	adds	r3, #1
 8007784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800778c:	2b00      	cmp	r3, #0
 800778e:	d02f      	beq.n	80077f0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007790:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007792:	f000 fbdb 	bl	8007f4c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800779c:	4b1f      	ldr	r3, [pc, #124]	@ (800781c <tcp_slowtmr+0x678>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d106      	bne.n	80077b4 <tcp_slowtmr+0x610>
 80077a6:	4b19      	ldr	r3, [pc, #100]	@ (800780c <tcp_slowtmr+0x668>)
 80077a8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80077ac:	491c      	ldr	r1, [pc, #112]	@ (8007820 <tcp_slowtmr+0x67c>)
 80077ae:	4819      	ldr	r0, [pc, #100]	@ (8007814 <tcp_slowtmr+0x670>)
 80077b0:	f007 fed2 	bl	800f558 <iprintf>
        prev->next = pcb->next;
 80077b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ba:	60da      	str	r2, [r3, #12]
 80077bc:	e00f      	b.n	80077de <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80077be:	4b17      	ldr	r3, [pc, #92]	@ (800781c <tcp_slowtmr+0x678>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d006      	beq.n	80077d6 <tcp_slowtmr+0x632>
 80077c8:	4b10      	ldr	r3, [pc, #64]	@ (800780c <tcp_slowtmr+0x668>)
 80077ca:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80077ce:	4915      	ldr	r1, [pc, #84]	@ (8007824 <tcp_slowtmr+0x680>)
 80077d0:	4810      	ldr	r0, [pc, #64]	@ (8007814 <tcp_slowtmr+0x670>)
 80077d2:	f007 fec1 	bl	800f558 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80077d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	4a10      	ldr	r2, [pc, #64]	@ (800781c <tcp_slowtmr+0x678>)
 80077dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80077e8:	69f8      	ldr	r0, [r7, #28]
 80077ea:	f7fe ffdf 	bl	80067ac <tcp_free>
 80077ee:	e004      	b.n	80077fa <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80077f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80077fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1a9      	bne.n	8007754 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3730      	adds	r7, #48	@ 0x30
 8007806:	46bd      	mov	sp, r7
 8007808:	bdb0      	pop	{r4, r5, r7, pc}
 800780a:	bf00      	nop
 800780c:	08011250 	.word	0x08011250
 8007810:	080116e0 	.word	0x080116e0
 8007814:	08011294 	.word	0x08011294
 8007818:	20008788 	.word	0x20008788
 800781c:	20008798 	.word	0x20008798
 8007820:	08011710 	.word	0x08011710
 8007824:	08011738 	.word	0x08011738

08007828 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800782e:	4b2d      	ldr	r3, [pc, #180]	@ (80078e4 <tcp_fasttmr+0xbc>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	4b2b      	ldr	r3, [pc, #172]	@ (80078e4 <tcp_fasttmr+0xbc>)
 8007838:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800783a:	4b2b      	ldr	r3, [pc, #172]	@ (80078e8 <tcp_fasttmr+0xc0>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007840:	e048      	b.n	80078d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7f9a      	ldrb	r2, [r3, #30]
 8007846:	4b27      	ldr	r3, [pc, #156]	@ (80078e4 <tcp_fasttmr+0xbc>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d03f      	beq.n	80078ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800784e:	4b25      	ldr	r3, [pc, #148]	@ (80078e4 <tcp_fasttmr+0xbc>)
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8b5b      	ldrh	r3, [r3, #26]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d010      	beq.n	8007884 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8b5b      	ldrh	r3, [r3, #26]
 8007866:	f043 0302 	orr.w	r3, r3, #2
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f003 ffd1 	bl	800b818 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	8b5b      	ldrh	r3, [r3, #26]
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8b5b      	ldrh	r3, [r3, #26]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8b5b      	ldrh	r3, [r3, #26]
 8007894:	f023 0308 	bic.w	r3, r3, #8
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff f918 	bl	8006ad4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80078b2:	4b0e      	ldr	r3, [pc, #56]	@ (80078ec <tcp_fasttmr+0xc4>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f819 	bl	80078f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80078be:	4b0b      	ldr	r3, [pc, #44]	@ (80078ec <tcp_fasttmr+0xc4>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d000      	beq.n	80078c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80078c6:	e7b8      	b.n	800783a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	607b      	str	r3, [r7, #4]
 80078cc:	e002      	b.n	80078d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1b3      	bne.n	8007842 <tcp_fasttmr+0x1a>
    }
  }
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	2000879e 	.word	0x2000879e
 80078e8:	20008794 	.word	0x20008794
 80078ec:	2000879c 	.word	0x2000879c

080078f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d109      	bne.n	8007912 <tcp_process_refused_data+0x22>
 80078fe:	4b37      	ldr	r3, [pc, #220]	@ (80079dc <tcp_process_refused_data+0xec>)
 8007900:	f240 6209 	movw	r2, #1545	@ 0x609
 8007904:	4936      	ldr	r1, [pc, #216]	@ (80079e0 <tcp_process_refused_data+0xf0>)
 8007906:	4837      	ldr	r0, [pc, #220]	@ (80079e4 <tcp_process_refused_data+0xf4>)
 8007908:	f007 fe26 	bl	800f558 <iprintf>
 800790c:	f06f 030f 	mvn.w	r3, #15
 8007910:	e060      	b.n	80079d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007916:	7b5b      	ldrb	r3, [r3, #13]
 8007918:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800791e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <tcp_process_refused_data+0x58>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6918      	ldr	r0, [r3, #16]
 800793a:	2300      	movs	r3, #0
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	47a0      	blx	r4
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
 8007946:	e007      	b.n	8007958 <tcp_process_refused_data+0x68>
 8007948:	2300      	movs	r3, #0
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	2000      	movs	r0, #0
 8007950:	f000 f8a4 	bl	8007a9c <tcp_recv_null>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d12a      	bne.n	80079b6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d033      	beq.n	80079d2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800796e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007972:	d005      	beq.n	8007980 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007978:	3301      	adds	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00b      	beq.n	80079a2 <tcp_process_refused_data+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6918      	ldr	r0, [r3, #16]
 8007994:	2300      	movs	r3, #0
 8007996:	2200      	movs	r2, #0
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	47a0      	blx	r4
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	e001      	b.n	80079a6 <tcp_process_refused_data+0xb6>
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80079a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079aa:	f113 0f0d 	cmn.w	r3, #13
 80079ae:	d110      	bne.n	80079d2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80079b0:	f06f 030c 	mvn.w	r3, #12
 80079b4:	e00e      	b.n	80079d4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80079b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ba:	f113 0f0d 	cmn.w	r3, #13
 80079be:	d102      	bne.n	80079c6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80079c0:	f06f 030c 	mvn.w	r3, #12
 80079c4:	e006      	b.n	80079d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80079cc:	f06f 0304 	mvn.w	r3, #4
 80079d0:	e000      	b.n	80079d4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd90      	pop	{r4, r7, pc}
 80079dc:	08011250 	.word	0x08011250
 80079e0:	08011760 	.word	0x08011760
 80079e4:	08011294 	.word	0x08011294

080079e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80079f0:	e007      	b.n	8007a02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f80a 	bl	8007a12 <tcp_seg_free>
    seg = next;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f4      	bne.n	80079f2 <tcp_segs_free+0xa>
  }
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fb8b 	bl	8006148 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	2003      	movs	r0, #3
 8007a36:	f7fd fda7 	bl	8005588 <memp_free>
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <tcp_seg_copy+0x1c>
 8007a52:	4b0f      	ldr	r3, [pc, #60]	@ (8007a90 <tcp_seg_copy+0x4c>)
 8007a54:	f240 6282 	movw	r2, #1666	@ 0x682
 8007a58:	490e      	ldr	r1, [pc, #56]	@ (8007a94 <tcp_seg_copy+0x50>)
 8007a5a:	480f      	ldr	r0, [pc, #60]	@ (8007a98 <tcp_seg_copy+0x54>)
 8007a5c:	f007 fd7c 	bl	800f558 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007a60:	2003      	movs	r0, #3
 8007a62:	f7fd fd21 	bl	80054a8 <memp_malloc>
 8007a66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <tcp_seg_copy+0x2e>
    return NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e00a      	b.n	8007a88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007a72:	2210      	movs	r2, #16
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f007 fe83 	bl	800f782 <memcpy>
  pbuf_ref(cseg->p);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe fc01 	bl	8006288 <pbuf_ref>
  return cseg;
 8007a86:	68fb      	ldr	r3, [r7, #12]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	08011250 	.word	0x08011250
 8007a94:	080117a4 	.word	0x080117a4
 8007a98:	08011294 	.word	0x08011294

08007a9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <tcp_recv_null+0x28>
 8007ab0:	4b12      	ldr	r3, [pc, #72]	@ (8007afc <tcp_recv_null+0x60>)
 8007ab2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8007ab6:	4912      	ldr	r1, [pc, #72]	@ (8007b00 <tcp_recv_null+0x64>)
 8007ab8:	4812      	ldr	r0, [pc, #72]	@ (8007b04 <tcp_recv_null+0x68>)
 8007aba:	f007 fd4d 	bl	800f558 <iprintf>
 8007abe:	f06f 030f 	mvn.w	r3, #15
 8007ac2:	e016      	b.n	8007af2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	891b      	ldrh	r3, [r3, #8]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	68b8      	ldr	r0, [r7, #8]
 8007ad2:	f7ff f9b9 	bl	8006e48 <tcp_recved>
    pbuf_free(p);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7fe fb36 	bl	8006148 <pbuf_free>
 8007adc:	e008      	b.n	8007af0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007ae6:	68b8      	ldr	r0, [r7, #8]
 8007ae8:	f7ff f85e 	bl	8006ba8 <tcp_close>
 8007aec:	4603      	mov	r3, r0
 8007aee:	e000      	b.n	8007af2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	08011250 	.word	0x08011250
 8007b00:	080117c0 	.word	0x080117c0
 8007b04:	08011294 	.word	0x08011294

08007b08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	db01      	blt.n	8007b1e <tcp_kill_prio+0x16>
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	e000      	b.n	8007b20 <tcp_kill_prio+0x18>
 8007b1e:	237f      	movs	r3, #127	@ 0x7f
 8007b20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d034      	beq.n	8007b92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b36:	4b19      	ldr	r3, [pc, #100]	@ (8007b9c <tcp_kill_prio+0x94>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e01f      	b.n	8007b7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	7d5b      	ldrb	r3, [r3, #21]
 8007b42:	7afa      	ldrb	r2, [r7, #11]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d80c      	bhi.n	8007b62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007b4c:	7afa      	ldrb	r2, [r7, #11]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d112      	bne.n	8007b78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007b52:	4b13      	ldr	r3, [pc, #76]	@ (8007ba0 <tcp_kill_prio+0x98>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d80a      	bhi.n	8007b78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007b62:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba0 <tcp_kill_prio+0x98>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	7d5b      	ldrb	r3, [r3, #21]
 8007b76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1dc      	bne.n	8007b3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007b8a:	6938      	ldr	r0, [r7, #16]
 8007b8c:	f7ff f8f6 	bl	8006d7c <tcp_abort>
 8007b90:	e000      	b.n	8007b94 <tcp_kill_prio+0x8c>
    return;
 8007b92:	bf00      	nop
  }
}
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20008794 	.word	0x20008794
 8007ba0:	20008788 	.word	0x20008788

08007ba4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d009      	beq.n	8007bc8 <tcp_kill_state+0x24>
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d006      	beq.n	8007bc8 <tcp_kill_state+0x24>
 8007bba:	4b1a      	ldr	r3, [pc, #104]	@ (8007c24 <tcp_kill_state+0x80>)
 8007bbc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007bc0:	4919      	ldr	r1, [pc, #100]	@ (8007c28 <tcp_kill_state+0x84>)
 8007bc2:	481a      	ldr	r0, [pc, #104]	@ (8007c2c <tcp_kill_state+0x88>)
 8007bc4:	f007 fcc8 	bl	800f558 <iprintf>

  inactivity = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bd0:	4b17      	ldr	r3, [pc, #92]	@ (8007c30 <tcp_kill_state+0x8c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e017      	b.n	8007c08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	7d1b      	ldrb	r3, [r3, #20]
 8007bdc:	79fa      	ldrb	r2, [r7, #7]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d10f      	bne.n	8007c02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007be2:	4b14      	ldr	r3, [pc, #80]	@ (8007c34 <tcp_kill_state+0x90>)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d807      	bhi.n	8007c02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007bf2:	4b10      	ldr	r3, [pc, #64]	@ (8007c34 <tcp_kill_state+0x90>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e4      	bne.n	8007bd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007c14:	2100      	movs	r1, #0
 8007c16:	6938      	ldr	r0, [r7, #16]
 8007c18:	f7fe fff2 	bl	8006c00 <tcp_abandon>
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	08011250 	.word	0x08011250
 8007c28:	080117dc 	.word	0x080117dc
 8007c2c:	08011294 	.word	0x08011294
 8007c30:	20008794 	.word	0x20008794
 8007c34:	20008788 	.word	0x20008788

08007c38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c46:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <tcp_kill_timewait+0x58>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e012      	b.n	8007c74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007c4e:	4b11      	ldr	r3, [pc, #68]	@ (8007c94 <tcp_kill_timewait+0x5c>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d807      	bhi.n	8007c6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <tcp_kill_timewait+0x5c>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e9      	bne.n	8007c4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007c80:	68b8      	ldr	r0, [r7, #8]
 8007c82:	f7ff f87b 	bl	8006d7c <tcp_abort>
  }
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20008798 	.word	0x20008798
 8007c94:	20008788 	.word	0x20008788

08007c98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007c9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ce0 <tcp_handle_closepend+0x48>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ca4:	e014      	b.n	8007cd0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	8b5b      	ldrh	r3, [r3, #26]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	8b5b      	ldrh	r3, [r3, #26]
 8007cbc:	f023 0308 	bic.w	r3, r3, #8
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fe ff04 	bl	8006ad4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e7      	bne.n	8007ca6 <tcp_handle_closepend+0xe>
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20008794 	.word	0x20008794

08007ce4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007cee:	2001      	movs	r0, #1
 8007cf0:	f7fd fbda 	bl	80054a8 <memp_malloc>
 8007cf4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d126      	bne.n	8007d4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007cfc:	f7ff ffcc 	bl	8007c98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007d00:	f7ff ff9a 	bl	8007c38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d04:	2001      	movs	r0, #1
 8007d06:	f7fd fbcf 	bl	80054a8 <memp_malloc>
 8007d0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d11b      	bne.n	8007d4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007d12:	2009      	movs	r0, #9
 8007d14:	f7ff ff46 	bl	8007ba4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d18:	2001      	movs	r0, #1
 8007d1a:	f7fd fbc5 	bl	80054a8 <memp_malloc>
 8007d1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d111      	bne.n	8007d4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007d26:	2008      	movs	r0, #8
 8007d28:	f7ff ff3c 	bl	8007ba4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f7fd fbbb 	bl	80054a8 <memp_malloc>
 8007d32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d107      	bne.n	8007d4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff fee3 	bl	8007b08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d42:	2001      	movs	r0, #1
 8007d44:	f7fd fbb0 	bl	80054a8 <memp_malloc>
 8007d48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d03f      	beq.n	8007dd0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007d50:	229c      	movs	r2, #156	@ 0x9c
 8007d52:	2100      	movs	r1, #0
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f007 fc9e 	bl	800f696 <memset>
    pcb->prio = prio;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	79fa      	ldrb	r2, [r7, #7]
 8007d5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007d66:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	22ff      	movs	r2, #255	@ 0xff
 8007d7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007d86:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2206      	movs	r2, #6
 8007d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2206      	movs	r2, #6
 8007d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d9c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8007da6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <tcp_alloc+0xf8>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007dae:	4b0c      	ldr	r3, [pc, #48]	@ (8007de0 <tcp_alloc+0xfc>)
 8007db0:	781a      	ldrb	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007dbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4a08      	ldr	r2, [pc, #32]	@ (8007de4 <tcp_alloc+0x100>)
 8007dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4a07      	ldr	r2, [pc, #28]	@ (8007de8 <tcp_alloc+0x104>)
 8007dcc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20008788 	.word	0x20008788
 8007de0:	2000879e 	.word	0x2000879e
 8007de4:	08007a9d 	.word	0x08007a9d
 8007de8:	006ddd00 	.word	0x006ddd00

08007dec <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007df0:	2040      	movs	r0, #64	@ 0x40
 8007df2:	f7ff ff77 	bl	8007ce4 <tcp_alloc>
 8007df6:	4603      	mov	r3, r0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	611a      	str	r2, [r3, #16]
  }
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
	...

08007e20 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00e      	beq.n	8007e4e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7d1b      	ldrb	r3, [r3, #20]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d106      	bne.n	8007e46 <tcp_recv+0x26>
 8007e38:	4b07      	ldr	r3, [pc, #28]	@ (8007e58 <tcp_recv+0x38>)
 8007e3a:	f240 72df 	movw	r2, #2015	@ 0x7df
 8007e3e:	4907      	ldr	r1, [pc, #28]	@ (8007e5c <tcp_recv+0x3c>)
 8007e40:	4807      	ldr	r0, [pc, #28]	@ (8007e60 <tcp_recv+0x40>)
 8007e42:	f007 fb89 	bl	800f558 <iprintf>
    pcb->recv = recv;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08011250 	.word	0x08011250
 8007e5c:	080117ec 	.word	0x080117ec
 8007e60:	08011294 	.word	0x08011294

08007e64 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00e      	beq.n	8007e92 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7d1b      	ldrb	r3, [r3, #20]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d106      	bne.n	8007e8a <tcp_sent+0x26>
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <tcp_sent+0x38>)
 8007e7e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8007e82:	4907      	ldr	r1, [pc, #28]	@ (8007ea0 <tcp_sent+0x3c>)
 8007e84:	4807      	ldr	r0, [pc, #28]	@ (8007ea4 <tcp_sent+0x40>)
 8007e86:	f007 fb67 	bl	800f558 <iprintf>
    pcb->sent = sent;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	08011250 	.word	0x08011250
 8007ea0:	08011814 	.word	0x08011814
 8007ea4:	08011294 	.word	0x08011294

08007ea8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	7d1b      	ldrb	r3, [r3, #20]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d106      	bne.n	8007ece <tcp_err+0x26>
 8007ec0:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <tcp_err+0x38>)
 8007ec2:	f640 020d 	movw	r2, #2061	@ 0x80d
 8007ec6:	4907      	ldr	r1, [pc, #28]	@ (8007ee4 <tcp_err+0x3c>)
 8007ec8:	4807      	ldr	r0, [pc, #28]	@ (8007ee8 <tcp_err+0x40>)
 8007eca:	f007 fb45 	bl	800f558 <iprintf>
    pcb->errf = err;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	08011250 	.word	0x08011250
 8007ee4:	0801183c 	.word	0x0801183c
 8007ee8:	08011294 	.word	0x08011294

08007eec <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d107      	bne.n	8007f10 <tcp_poll+0x24>
 8007f00:	4b0e      	ldr	r3, [pc, #56]	@ (8007f3c <tcp_poll+0x50>)
 8007f02:	f640 023d 	movw	r2, #2109	@ 0x83d
 8007f06:	490e      	ldr	r1, [pc, #56]	@ (8007f40 <tcp_poll+0x54>)
 8007f08:	480e      	ldr	r0, [pc, #56]	@ (8007f44 <tcp_poll+0x58>)
 8007f0a:	f007 fb25 	bl	800f558 <iprintf>
 8007f0e:	e011      	b.n	8007f34 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	7d1b      	ldrb	r3, [r3, #20]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d106      	bne.n	8007f26 <tcp_poll+0x3a>
 8007f18:	4b08      	ldr	r3, [pc, #32]	@ (8007f3c <tcp_poll+0x50>)
 8007f1a:	f640 023e 	movw	r2, #2110	@ 0x83e
 8007f1e:	490a      	ldr	r1, [pc, #40]	@ (8007f48 <tcp_poll+0x5c>)
 8007f20:	4808      	ldr	r0, [pc, #32]	@ (8007f44 <tcp_poll+0x58>)
 8007f22:	f007 fb19 	bl	800f558 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	79fa      	ldrb	r2, [r7, #7]
 8007f32:	775a      	strb	r2, [r3, #29]
}
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	08011250 	.word	0x08011250
 8007f40:	08011864 	.word	0x08011864
 8007f44:	08011294 	.word	0x08011294
 8007f48:	0801187c 	.word	0x0801187c

08007f4c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d107      	bne.n	8007f6a <tcp_pcb_purge+0x1e>
 8007f5a:	4b21      	ldr	r3, [pc, #132]	@ (8007fe0 <tcp_pcb_purge+0x94>)
 8007f5c:	f640 0251 	movw	r2, #2129	@ 0x851
 8007f60:	4920      	ldr	r1, [pc, #128]	@ (8007fe4 <tcp_pcb_purge+0x98>)
 8007f62:	4821      	ldr	r0, [pc, #132]	@ (8007fe8 <tcp_pcb_purge+0x9c>)
 8007f64:	f007 faf8 	bl	800f558 <iprintf>
 8007f68:	e037      	b.n	8007fda <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7d1b      	ldrb	r3, [r3, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d033      	beq.n	8007fda <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007f76:	2b0a      	cmp	r3, #10
 8007f78:	d02f      	beq.n	8007fda <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d02b      	beq.n	8007fda <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d007      	beq.n	8007f9a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe f8da 	bl	8006148 <pbuf_free>
      pcb->refused_data = NULL;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f986 	bl	80082b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fae:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fd17 	bl	80079e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fd12 	bl	80079e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08011250 	.word	0x08011250
 8007fe4:	0801189c 	.word	0x0801189c
 8007fe8:	08011294 	.word	0x08011294

08007fec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <tcp_pcb_remove+0x1e>
 8007ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80080f8 <tcp_pcb_remove+0x10c>)
 8007ffe:	f640 0283 	movw	r2, #2179	@ 0x883
 8008002:	493e      	ldr	r1, [pc, #248]	@ (80080fc <tcp_pcb_remove+0x110>)
 8008004:	483e      	ldr	r0, [pc, #248]	@ (8008100 <tcp_pcb_remove+0x114>)
 8008006:	f007 faa7 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d106      	bne.n	800801e <tcp_pcb_remove+0x32>
 8008010:	4b39      	ldr	r3, [pc, #228]	@ (80080f8 <tcp_pcb_remove+0x10c>)
 8008012:	f640 0284 	movw	r2, #2180	@ 0x884
 8008016:	493b      	ldr	r1, [pc, #236]	@ (8008104 <tcp_pcb_remove+0x118>)
 8008018:	4839      	ldr	r0, [pc, #228]	@ (8008100 <tcp_pcb_remove+0x114>)
 800801a:	f007 fa9d 	bl	800f558 <iprintf>

  TCP_RMV(pcblist, pcb);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d105      	bne.n	8008034 <tcp_pcb_remove+0x48>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e013      	b.n	800805c <tcp_pcb_remove+0x70>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e00c      	b.n	8008056 <tcp_pcb_remove+0x6a>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d104      	bne.n	8008050 <tcp_pcb_remove+0x64>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	60da      	str	r2, [r3, #12]
 800804e:	e005      	b.n	800805c <tcp_pcb_remove+0x70>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1ef      	bne.n	800803c <tcp_pcb_remove+0x50>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008062:	6838      	ldr	r0, [r7, #0]
 8008064:	f7ff ff72 	bl	8007f4c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	7d1b      	ldrb	r3, [r3, #20]
 800806c:	2b0a      	cmp	r3, #10
 800806e:	d013      	beq.n	8008098 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008074:	2b01      	cmp	r3, #1
 8008076:	d00f      	beq.n	8008098 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	8b5b      	ldrh	r3, [r3, #26]
 800807c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	8b5b      	ldrh	r3, [r3, #26]
 8008088:	f043 0302 	orr.w	r3, r3, #2
 800808c:	b29a      	uxth	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008092:	6838      	ldr	r0, [r7, #0]
 8008094:	f003 fbc0 	bl	800b818 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	7d1b      	ldrb	r3, [r3, #20]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d020      	beq.n	80080e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d006      	beq.n	80080b6 <tcp_pcb_remove+0xca>
 80080a8:	4b13      	ldr	r3, [pc, #76]	@ (80080f8 <tcp_pcb_remove+0x10c>)
 80080aa:	f640 0293 	movw	r2, #2195	@ 0x893
 80080ae:	4916      	ldr	r1, [pc, #88]	@ (8008108 <tcp_pcb_remove+0x11c>)
 80080b0:	4813      	ldr	r0, [pc, #76]	@ (8008100 <tcp_pcb_remove+0x114>)
 80080b2:	f007 fa51 	bl	800f558 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d006      	beq.n	80080cc <tcp_pcb_remove+0xe0>
 80080be:	4b0e      	ldr	r3, [pc, #56]	@ (80080f8 <tcp_pcb_remove+0x10c>)
 80080c0:	f640 0294 	movw	r2, #2196	@ 0x894
 80080c4:	4911      	ldr	r1, [pc, #68]	@ (800810c <tcp_pcb_remove+0x120>)
 80080c6:	480e      	ldr	r0, [pc, #56]	@ (8008100 <tcp_pcb_remove+0x114>)
 80080c8:	f007 fa46 	bl	800f558 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d006      	beq.n	80080e2 <tcp_pcb_remove+0xf6>
 80080d4:	4b08      	ldr	r3, [pc, #32]	@ (80080f8 <tcp_pcb_remove+0x10c>)
 80080d6:	f640 0296 	movw	r2, #2198	@ 0x896
 80080da:	490d      	ldr	r1, [pc, #52]	@ (8008110 <tcp_pcb_remove+0x124>)
 80080dc:	4808      	ldr	r0, [pc, #32]	@ (8008100 <tcp_pcb_remove+0x114>)
 80080de:	f007 fa3b 	bl	800f558 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2200      	movs	r2, #0
 80080e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	08011250 	.word	0x08011250
 80080fc:	080118b8 	.word	0x080118b8
 8008100:	08011294 	.word	0x08011294
 8008104:	080118d4 	.word	0x080118d4
 8008108:	080118f4 	.word	0x080118f4
 800810c:	0801190c 	.word	0x0801190c
 8008110:	08011928 	.word	0x08011928

08008114 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <tcp_next_iss+0x1c>
 8008122:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <tcp_next_iss+0x38>)
 8008124:	f640 02af 	movw	r2, #2223	@ 0x8af
 8008128:	4909      	ldr	r1, [pc, #36]	@ (8008150 <tcp_next_iss+0x3c>)
 800812a:	480a      	ldr	r0, [pc, #40]	@ (8008154 <tcp_next_iss+0x40>)
 800812c:	f007 fa14 	bl	800f558 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008130:	4b09      	ldr	r3, [pc, #36]	@ (8008158 <tcp_next_iss+0x44>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	4b09      	ldr	r3, [pc, #36]	@ (800815c <tcp_next_iss+0x48>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4413      	add	r3, r2
 800813a:	4a07      	ldr	r2, [pc, #28]	@ (8008158 <tcp_next_iss+0x44>)
 800813c:	6013      	str	r3, [r2, #0]
  return iss;
 800813e:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <tcp_next_iss+0x44>)
 8008140:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	08011250 	.word	0x08011250
 8008150:	08011940 	.word	0x08011940
 8008154:	08011294 	.word	0x08011294
 8008158:	2000000c 	.word	0x2000000c
 800815c:	20008788 	.word	0x20008788

08008160 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <tcp_eff_send_mss_netif+0x22>
 8008174:	4b14      	ldr	r3, [pc, #80]	@ (80081c8 <tcp_eff_send_mss_netif+0x68>)
 8008176:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800817a:	4914      	ldr	r1, [pc, #80]	@ (80081cc <tcp_eff_send_mss_netif+0x6c>)
 800817c:	4814      	ldr	r0, [pc, #80]	@ (80081d0 <tcp_eff_send_mss_netif+0x70>)
 800817e:	f007 f9eb 	bl	800f558 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008188:	89fb      	ldrh	r3, [r7, #14]
 800818a:	e019      	b.n	80081c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008190:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008192:	8afb      	ldrh	r3, [r7, #22]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d012      	beq.n	80081be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008198:	2328      	movs	r3, #40	@ 0x28
 800819a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800819c:	8afa      	ldrh	r2, [r7, #22]
 800819e:	8abb      	ldrh	r3, [r7, #20]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d904      	bls.n	80081ae <tcp_eff_send_mss_netif+0x4e>
 80081a4:	8afa      	ldrh	r2, [r7, #22]
 80081a6:	8abb      	ldrh	r3, [r7, #20]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	e000      	b.n	80081b0 <tcp_eff_send_mss_netif+0x50>
 80081ae:	2300      	movs	r3, #0
 80081b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80081b2:	8a7a      	ldrh	r2, [r7, #18]
 80081b4:	89fb      	ldrh	r3, [r7, #14]
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bf28      	it	cs
 80081ba:	4613      	movcs	r3, r2
 80081bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80081be:	89fb      	ldrh	r3, [r7, #14]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	08011250 	.word	0x08011250
 80081cc:	0801195c 	.word	0x0801195c
 80081d0:	08011294 	.word	0x08011294

080081d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d119      	bne.n	800821c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80081e8:	4b10      	ldr	r3, [pc, #64]	@ (800822c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80081ea:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80081ee:	4910      	ldr	r1, [pc, #64]	@ (8008230 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80081f0:	4810      	ldr	r0, [pc, #64]	@ (8008234 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80081f2:	f007 f9b1 	bl	800f558 <iprintf>

  while (pcb != NULL) {
 80081f6:	e011      	b.n	800821c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d108      	bne.n	8008216 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7fe fdb6 	bl	8006d7c <tcp_abort>
      pcb = next;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e002      	b.n	800821c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1ea      	bne.n	80081f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	08011250 	.word	0x08011250
 8008230:	08011984 	.word	0x08011984
 8008234:	08011294 	.word	0x08011294

08008238 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02a      	beq.n	800829e <tcp_netif_ip_addr_changed+0x66>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d026      	beq.n	800829e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008250:	4b15      	ldr	r3, [pc, #84]	@ (80082a8 <tcp_netif_ip_addr_changed+0x70>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff ffbc 	bl	80081d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800825c:	4b13      	ldr	r3, [pc, #76]	@ (80082ac <tcp_netif_ip_addr_changed+0x74>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff ffb6 	bl	80081d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d017      	beq.n	800829e <tcp_netif_ip_addr_changed+0x66>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008276:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <tcp_netif_ip_addr_changed+0x78>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e00c      	b.n	8008298 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	429a      	cmp	r2, r3
 8008288:	d103      	bne.n	8008292 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1ef      	bne.n	800827e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20008794 	.word	0x20008794
 80082ac:	2000878c 	.word	0x2000878c
 80082b0:	20008790 	.word	0x20008790

080082b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff fb8d 	bl	80079e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b08d      	sub	sp, #52	@ 0x34
 80082e0:	af04      	add	r7, sp, #16
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d105      	bne.n	80082f8 <tcp_input+0x1c>
 80082ec:	4b9b      	ldr	r3, [pc, #620]	@ (800855c <tcp_input+0x280>)
 80082ee:	2283      	movs	r2, #131	@ 0x83
 80082f0:	499b      	ldr	r1, [pc, #620]	@ (8008560 <tcp_input+0x284>)
 80082f2:	489c      	ldr	r0, [pc, #624]	@ (8008564 <tcp_input+0x288>)
 80082f4:	f007 f930 	bl	800f558 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	4a9a      	ldr	r2, [pc, #616]	@ (8008568 <tcp_input+0x28c>)
 80082fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	895b      	ldrh	r3, [r3, #10]
 8008304:	2b13      	cmp	r3, #19
 8008306:	f240 83d1 	bls.w	8008aac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800830a:	4b98      	ldr	r3, [pc, #608]	@ (800856c <tcp_input+0x290>)
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	4a97      	ldr	r2, [pc, #604]	@ (800856c <tcp_input+0x290>)
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	4611      	mov	r1, r2
 8008314:	4618      	mov	r0, r3
 8008316:	f006 f839 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 83c7 	bne.w	8008ab0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008322:	4b92      	ldr	r3, [pc, #584]	@ (800856c <tcp_input+0x290>)
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800832a:	2be0      	cmp	r3, #224	@ 0xe0
 800832c:	f000 83c0 	beq.w	8008ab0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008330:	4b8d      	ldr	r3, [pc, #564]	@ (8008568 <tcp_input+0x28c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	899b      	ldrh	r3, [r3, #12]
 8008336:	b29b      	uxth	r3, r3
 8008338:	4618      	mov	r0, r3
 800833a:	f7fc fc3d 	bl	8004bb8 <lwip_htons>
 800833e:	4603      	mov	r3, r0
 8008340:	0b1b      	lsrs	r3, r3, #12
 8008342:	b29b      	uxth	r3, r3
 8008344:	b2db      	uxtb	r3, r3
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800834a:	7cbb      	ldrb	r3, [r7, #18]
 800834c:	2b13      	cmp	r3, #19
 800834e:	f240 83b1 	bls.w	8008ab4 <tcp_input+0x7d8>
 8008352:	7cbb      	ldrb	r3, [r7, #18]
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	891b      	ldrh	r3, [r3, #8]
 800835a:	429a      	cmp	r2, r3
 800835c:	f200 83aa 	bhi.w	8008ab4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008360:	7cbb      	ldrb	r3, [r7, #18]
 8008362:	b29b      	uxth	r3, r3
 8008364:	3b14      	subs	r3, #20
 8008366:	b29a      	uxth	r2, r3
 8008368:	4b81      	ldr	r3, [pc, #516]	@ (8008570 <tcp_input+0x294>)
 800836a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800836c:	4b81      	ldr	r3, [pc, #516]	@ (8008574 <tcp_input+0x298>)
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	895a      	ldrh	r2, [r3, #10]
 8008376:	7cbb      	ldrb	r3, [r7, #18]
 8008378:	b29b      	uxth	r3, r3
 800837a:	429a      	cmp	r2, r3
 800837c:	d309      	bcc.n	8008392 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800837e:	4b7c      	ldr	r3, [pc, #496]	@ (8008570 <tcp_input+0x294>)
 8008380:	881a      	ldrh	r2, [r3, #0]
 8008382:	4b7d      	ldr	r3, [pc, #500]	@ (8008578 <tcp_input+0x29c>)
 8008384:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008386:	7cbb      	ldrb	r3, [r7, #18]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fd fe56 	bl	800603c <pbuf_remove_header>
 8008390:	e04e      	b.n	8008430 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d105      	bne.n	80083a6 <tcp_input+0xca>
 800839a:	4b70      	ldr	r3, [pc, #448]	@ (800855c <tcp_input+0x280>)
 800839c:	22c2      	movs	r2, #194	@ 0xc2
 800839e:	4977      	ldr	r1, [pc, #476]	@ (800857c <tcp_input+0x2a0>)
 80083a0:	4870      	ldr	r0, [pc, #448]	@ (8008564 <tcp_input+0x288>)
 80083a2:	f007 f8d9 	bl	800f558 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80083a6:	2114      	movs	r1, #20
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fd fe47 	bl	800603c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	895a      	ldrh	r2, [r3, #10]
 80083b2:	4b71      	ldr	r3, [pc, #452]	@ (8008578 <tcp_input+0x29c>)
 80083b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80083b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008570 <tcp_input+0x294>)
 80083b8:	881a      	ldrh	r2, [r3, #0]
 80083ba:	4b6f      	ldr	r3, [pc, #444]	@ (8008578 <tcp_input+0x29c>)
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80083c2:	4b6d      	ldr	r3, [pc, #436]	@ (8008578 <tcp_input+0x29c>)
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7fd fe37 	bl	800603c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	895b      	ldrh	r3, [r3, #10]
 80083d4:	8a3a      	ldrh	r2, [r7, #16]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f200 836e 	bhi.w	8008ab8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	4a64      	ldr	r2, [pc, #400]	@ (8008574 <tcp_input+0x298>)
 80083e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	8a3a      	ldrh	r2, [r7, #16]
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fd fe24 	bl	800603c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	891a      	ldrh	r2, [r3, #8]
 80083f8:	8a3b      	ldrh	r3, [r7, #16]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	895b      	ldrh	r3, [r3, #10]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <tcp_input+0x13a>
 800840a:	4b54      	ldr	r3, [pc, #336]	@ (800855c <tcp_input+0x280>)
 800840c:	22df      	movs	r2, #223	@ 0xdf
 800840e:	495c      	ldr	r1, [pc, #368]	@ (8008580 <tcp_input+0x2a4>)
 8008410:	4854      	ldr	r0, [pc, #336]	@ (8008564 <tcp_input+0x288>)
 8008412:	f007 f8a1 	bl	800f558 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	891a      	ldrh	r2, [r3, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	891b      	ldrh	r3, [r3, #8]
 8008420:	429a      	cmp	r2, r3
 8008422:	d005      	beq.n	8008430 <tcp_input+0x154>
 8008424:	4b4d      	ldr	r3, [pc, #308]	@ (800855c <tcp_input+0x280>)
 8008426:	22e0      	movs	r2, #224	@ 0xe0
 8008428:	4956      	ldr	r1, [pc, #344]	@ (8008584 <tcp_input+0x2a8>)
 800842a:	484e      	ldr	r0, [pc, #312]	@ (8008564 <tcp_input+0x288>)
 800842c:	f007 f894 	bl	800f558 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008430:	4b4d      	ldr	r3, [pc, #308]	@ (8008568 <tcp_input+0x28c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	4a4b      	ldr	r2, [pc, #300]	@ (8008568 <tcp_input+0x28c>)
 800843a:	6814      	ldr	r4, [r2, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	f7fc fbbb 	bl	8004bb8 <lwip_htons>
 8008442:	4603      	mov	r3, r0
 8008444:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008446:	4b48      	ldr	r3, [pc, #288]	@ (8008568 <tcp_input+0x28c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	885b      	ldrh	r3, [r3, #2]
 800844c:	b29b      	uxth	r3, r3
 800844e:	4a46      	ldr	r2, [pc, #280]	@ (8008568 <tcp_input+0x28c>)
 8008450:	6814      	ldr	r4, [r2, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f7fc fbb0 	bl	8004bb8 <lwip_htons>
 8008458:	4603      	mov	r3, r0
 800845a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800845c:	4b42      	ldr	r3, [pc, #264]	@ (8008568 <tcp_input+0x28c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	4a41      	ldr	r2, [pc, #260]	@ (8008568 <tcp_input+0x28c>)
 8008464:	6814      	ldr	r4, [r2, #0]
 8008466:	4618      	mov	r0, r3
 8008468:	f7fc fbbb 	bl	8004be2 <lwip_htonl>
 800846c:	4603      	mov	r3, r0
 800846e:	6063      	str	r3, [r4, #4]
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	4a45      	ldr	r2, [pc, #276]	@ (8008588 <tcp_input+0x2ac>)
 8008474:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008476:	4b3c      	ldr	r3, [pc, #240]	@ (8008568 <tcp_input+0x28c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	4a3a      	ldr	r2, [pc, #232]	@ (8008568 <tcp_input+0x28c>)
 800847e:	6814      	ldr	r4, [r2, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f7fc fbae 	bl	8004be2 <lwip_htonl>
 8008486:	4603      	mov	r3, r0
 8008488:	60a3      	str	r3, [r4, #8]
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	4a3f      	ldr	r2, [pc, #252]	@ (800858c <tcp_input+0x2b0>)
 800848e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008490:	4b35      	ldr	r3, [pc, #212]	@ (8008568 <tcp_input+0x28c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	89db      	ldrh	r3, [r3, #14]
 8008496:	b29b      	uxth	r3, r3
 8008498:	4a33      	ldr	r2, [pc, #204]	@ (8008568 <tcp_input+0x28c>)
 800849a:	6814      	ldr	r4, [r2, #0]
 800849c:	4618      	mov	r0, r3
 800849e:	f7fc fb8b 	bl	8004bb8 <lwip_htons>
 80084a2:	4603      	mov	r3, r0
 80084a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80084a6:	4b30      	ldr	r3, [pc, #192]	@ (8008568 <tcp_input+0x28c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	899b      	ldrh	r3, [r3, #12]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fc fb82 	bl	8004bb8 <lwip_htons>
 80084b4:	4603      	mov	r3, r0
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	4b34      	ldr	r3, [pc, #208]	@ (8008590 <tcp_input+0x2b4>)
 80084c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	891a      	ldrh	r2, [r3, #8]
 80084c6:	4b33      	ldr	r3, [pc, #204]	@ (8008594 <tcp_input+0x2b8>)
 80084c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80084ca:	4b31      	ldr	r3, [pc, #196]	@ (8008590 <tcp_input+0x2b4>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00c      	beq.n	80084f0 <tcp_input+0x214>
    tcplen++;
 80084d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008594 <tcp_input+0x2b8>)
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	3301      	adds	r3, #1
 80084dc:	b29a      	uxth	r2, r3
 80084de:	4b2d      	ldr	r3, [pc, #180]	@ (8008594 <tcp_input+0x2b8>)
 80084e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	891a      	ldrh	r2, [r3, #8]
 80084e6:	4b2b      	ldr	r3, [pc, #172]	@ (8008594 <tcp_input+0x2b8>)
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	f200 82e6 	bhi.w	8008abc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084f4:	4b28      	ldr	r3, [pc, #160]	@ (8008598 <tcp_input+0x2bc>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	e09d      	b.n	8008638 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	7d1b      	ldrb	r3, [r3, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d105      	bne.n	8008510 <tcp_input+0x234>
 8008504:	4b15      	ldr	r3, [pc, #84]	@ (800855c <tcp_input+0x280>)
 8008506:	22fb      	movs	r2, #251	@ 0xfb
 8008508:	4924      	ldr	r1, [pc, #144]	@ (800859c <tcp_input+0x2c0>)
 800850a:	4816      	ldr	r0, [pc, #88]	@ (8008564 <tcp_input+0x288>)
 800850c:	f007 f824 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	7d1b      	ldrb	r3, [r3, #20]
 8008514:	2b0a      	cmp	r3, #10
 8008516:	d105      	bne.n	8008524 <tcp_input+0x248>
 8008518:	4b10      	ldr	r3, [pc, #64]	@ (800855c <tcp_input+0x280>)
 800851a:	22fc      	movs	r2, #252	@ 0xfc
 800851c:	4920      	ldr	r1, [pc, #128]	@ (80085a0 <tcp_input+0x2c4>)
 800851e:	4811      	ldr	r0, [pc, #68]	@ (8008564 <tcp_input+0x288>)
 8008520:	f007 f81a 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	7d1b      	ldrb	r3, [r3, #20]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d105      	bne.n	8008538 <tcp_input+0x25c>
 800852c:	4b0b      	ldr	r3, [pc, #44]	@ (800855c <tcp_input+0x280>)
 800852e:	22fd      	movs	r2, #253	@ 0xfd
 8008530:	491c      	ldr	r1, [pc, #112]	@ (80085a4 <tcp_input+0x2c8>)
 8008532:	480c      	ldr	r0, [pc, #48]	@ (8008564 <tcp_input+0x288>)
 8008534:	f007 f810 	bl	800f558 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	7a1b      	ldrb	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d033      	beq.n	80085a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	7a1a      	ldrb	r2, [r3, #8]
 8008544:	4b09      	ldr	r3, [pc, #36]	@ (800856c <tcp_input+0x290>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800854c:	3301      	adds	r3, #1
 800854e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008550:	429a      	cmp	r2, r3
 8008552:	d029      	beq.n	80085a8 <tcp_input+0x2cc>
      prev = pcb;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	61bb      	str	r3, [r7, #24]
      continue;
 8008558:	e06b      	b.n	8008632 <tcp_input+0x356>
 800855a:	bf00      	nop
 800855c:	080119b8 	.word	0x080119b8
 8008560:	080119ec 	.word	0x080119ec
 8008564:	08011a04 	.word	0x08011a04
 8008568:	200087b0 	.word	0x200087b0
 800856c:	20005218 	.word	0x20005218
 8008570:	200087b4 	.word	0x200087b4
 8008574:	200087b8 	.word	0x200087b8
 8008578:	200087b6 	.word	0x200087b6
 800857c:	08011a2c 	.word	0x08011a2c
 8008580:	08011a3c 	.word	0x08011a3c
 8008584:	08011a48 	.word	0x08011a48
 8008588:	200087c0 	.word	0x200087c0
 800858c:	200087c4 	.word	0x200087c4
 8008590:	200087cc 	.word	0x200087cc
 8008594:	200087ca 	.word	0x200087ca
 8008598:	20008794 	.word	0x20008794
 800859c:	08011a68 	.word	0x08011a68
 80085a0:	08011a90 	.word	0x08011a90
 80085a4:	08011abc 	.word	0x08011abc
    }

    if (pcb->remote_port == tcphdr->src &&
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	8b1a      	ldrh	r2, [r3, #24]
 80085ac:	4b72      	ldr	r3, [pc, #456]	@ (8008778 <tcp_input+0x49c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d13a      	bne.n	800862e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	8ada      	ldrh	r2, [r3, #22]
 80085bc:	4b6e      	ldr	r3, [pc, #440]	@ (8008778 <tcp_input+0x49c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	885b      	ldrh	r3, [r3, #2]
 80085c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d132      	bne.n	800862e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b6b      	ldr	r3, [pc, #428]	@ (800877c <tcp_input+0x4a0>)
 80085ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d12c      	bne.n	800862e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b68      	ldr	r3, [pc, #416]	@ (800877c <tcp_input+0x4a0>)
 80085da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085dc:	429a      	cmp	r2, r3
 80085de:	d126      	bne.n	800862e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d106      	bne.n	80085f8 <tcp_input+0x31c>
 80085ea:	4b65      	ldr	r3, [pc, #404]	@ (8008780 <tcp_input+0x4a4>)
 80085ec:	f240 120d 	movw	r2, #269	@ 0x10d
 80085f0:	4964      	ldr	r1, [pc, #400]	@ (8008784 <tcp_input+0x4a8>)
 80085f2:	4865      	ldr	r0, [pc, #404]	@ (8008788 <tcp_input+0x4ac>)
 80085f4:	f006 ffb0 	bl	800f558 <iprintf>
      if (prev != NULL) {
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <tcp_input+0x338>
        prev->next = pcb->next;
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008606:	4b61      	ldr	r3, [pc, #388]	@ (800878c <tcp_input+0x4b0>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800860e:	4a5f      	ldr	r2, [pc, #380]	@ (800878c <tcp_input+0x4b0>)
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	429a      	cmp	r2, r3
 800861c:	d111      	bne.n	8008642 <tcp_input+0x366>
 800861e:	4b58      	ldr	r3, [pc, #352]	@ (8008780 <tcp_input+0x4a4>)
 8008620:	f240 1215 	movw	r2, #277	@ 0x115
 8008624:	495a      	ldr	r1, [pc, #360]	@ (8008790 <tcp_input+0x4b4>)
 8008626:	4858      	ldr	r0, [pc, #352]	@ (8008788 <tcp_input+0x4ac>)
 8008628:	f006 ff96 	bl	800f558 <iprintf>
      break;
 800862c:	e009      	b.n	8008642 <tcp_input+0x366>
    }
    prev = pcb;
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f47f af5e 	bne.w	80084fc <tcp_input+0x220>
 8008640:	e000      	b.n	8008644 <tcp_input+0x368>
      break;
 8008642:	bf00      	nop
  }

  if (pcb == NULL) {
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 80aa 	bne.w	80087a0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800864c:	4b51      	ldr	r3, [pc, #324]	@ (8008794 <tcp_input+0x4b8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	e03f      	b.n	80086d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	7d1b      	ldrb	r3, [r3, #20]
 8008658:	2b0a      	cmp	r3, #10
 800865a:	d006      	beq.n	800866a <tcp_input+0x38e>
 800865c:	4b48      	ldr	r3, [pc, #288]	@ (8008780 <tcp_input+0x4a4>)
 800865e:	f240 121f 	movw	r2, #287	@ 0x11f
 8008662:	494d      	ldr	r1, [pc, #308]	@ (8008798 <tcp_input+0x4bc>)
 8008664:	4848      	ldr	r0, [pc, #288]	@ (8008788 <tcp_input+0x4ac>)
 8008666:	f006 ff77 	bl	800f558 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	7a1b      	ldrb	r3, [r3, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	7a1a      	ldrb	r2, [r3, #8]
 8008676:	4b41      	ldr	r3, [pc, #260]	@ (800877c <tcp_input+0x4a0>)
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800867e:	3301      	adds	r3, #1
 8008680:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008682:	429a      	cmp	r2, r3
 8008684:	d122      	bne.n	80086cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	8b1a      	ldrh	r2, [r3, #24]
 800868a:	4b3b      	ldr	r3, [pc, #236]	@ (8008778 <tcp_input+0x49c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	429a      	cmp	r2, r3
 8008694:	d11b      	bne.n	80086ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	8ada      	ldrh	r2, [r3, #22]
 800869a:	4b37      	ldr	r3, [pc, #220]	@ (8008778 <tcp_input+0x49c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	885b      	ldrh	r3, [r3, #2]
 80086a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d113      	bne.n	80086ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	4b34      	ldr	r3, [pc, #208]	@ (800877c <tcp_input+0x4a0>)
 80086ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d10d      	bne.n	80086ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4b31      	ldr	r3, [pc, #196]	@ (800877c <tcp_input+0x4a0>)
 80086b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d107      	bne.n	80086ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80086be:	69f8      	ldr	r0, [r7, #28]
 80086c0:	f000 fb56 	bl	8008d70 <tcp_timewait_input>
        }
        pbuf_free(p);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7fd fd3f 	bl	8006148 <pbuf_free>
        return;
 80086ca:	e1fd      	b.n	8008ac8 <tcp_input+0x7ec>
        continue;
 80086cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	61fb      	str	r3, [r7, #28]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1bc      	bne.n	8008654 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80086da:	2300      	movs	r3, #0
 80086dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086de:	4b2f      	ldr	r3, [pc, #188]	@ (800879c <tcp_input+0x4c0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e02a      	b.n	800873c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	7a1b      	ldrb	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	7a1a      	ldrb	r2, [r3, #8]
 80086f2:	4b22      	ldr	r3, [pc, #136]	@ (800877c <tcp_input+0x4a0>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086fa:	3301      	adds	r3, #1
 80086fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80086fe:	429a      	cmp	r2, r3
 8008700:	d002      	beq.n	8008708 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	61bb      	str	r3, [r7, #24]
        continue;
 8008706:	e016      	b.n	8008736 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	8ada      	ldrh	r2, [r3, #22]
 800870c:	4b1a      	ldr	r3, [pc, #104]	@ (8008778 <tcp_input+0x49c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	885b      	ldrh	r3, [r3, #2]
 8008712:	b29b      	uxth	r3, r3
 8008714:	429a      	cmp	r2, r3
 8008716:	d10c      	bne.n	8008732 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	4b17      	ldr	r3, [pc, #92]	@ (800877c <tcp_input+0x4a0>)
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	429a      	cmp	r2, r3
 8008722:	d00f      	beq.n	8008744 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <tcp_input+0x46a>
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d009      	beq.n	8008746 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1d1      	bne.n	80086e6 <tcp_input+0x40a>
 8008742:	e000      	b.n	8008746 <tcp_input+0x46a>
            break;
 8008744:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d029      	beq.n	80087a0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800875a:	4b10      	ldr	r3, [pc, #64]	@ (800879c <tcp_input+0x4c0>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008762:	4a0e      	ldr	r2, [pc, #56]	@ (800879c <tcp_input+0x4c0>)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008768:	6978      	ldr	r0, [r7, #20]
 800876a:	f000 fa03 	bl	8008b74 <tcp_listen_input>
      }
      pbuf_free(p);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fd fcea 	bl	8006148 <pbuf_free>
      return;
 8008774:	e1a8      	b.n	8008ac8 <tcp_input+0x7ec>
 8008776:	bf00      	nop
 8008778:	200087b0 	.word	0x200087b0
 800877c:	20005218 	.word	0x20005218
 8008780:	080119b8 	.word	0x080119b8
 8008784:	08011ae4 	.word	0x08011ae4
 8008788:	08011a04 	.word	0x08011a04
 800878c:	20008794 	.word	0x20008794
 8008790:	08011b10 	.word	0x08011b10
 8008794:	20008798 	.word	0x20008798
 8008798:	08011b3c 	.word	0x08011b3c
 800879c:	20008790 	.word	0x20008790
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8158 	beq.w	8008a58 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80087a8:	4b95      	ldr	r3, [pc, #596]	@ (8008a00 <tcp_input+0x724>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	891a      	ldrh	r2, [r3, #8]
 80087b2:	4b93      	ldr	r3, [pc, #588]	@ (8008a00 <tcp_input+0x724>)
 80087b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80087b6:	4a92      	ldr	r2, [pc, #584]	@ (8008a00 <tcp_input+0x724>)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80087bc:	4b91      	ldr	r3, [pc, #580]	@ (8008a04 <tcp_input+0x728>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a8f      	ldr	r2, [pc, #572]	@ (8008a00 <tcp_input+0x724>)
 80087c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80087c4:	4b90      	ldr	r3, [pc, #576]	@ (8008a08 <tcp_input+0x72c>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80087ca:	4b90      	ldr	r3, [pc, #576]	@ (8008a0c <tcp_input+0x730>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80087d0:	4b8f      	ldr	r3, [pc, #572]	@ (8008a10 <tcp_input+0x734>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80087d6:	4b8f      	ldr	r3, [pc, #572]	@ (8008a14 <tcp_input+0x738>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d006      	beq.n	80087f0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7b5b      	ldrb	r3, [r3, #13]
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d017      	beq.n	8008828 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80087f8:	69f8      	ldr	r0, [r7, #28]
 80087fa:	f7ff f879 	bl	80078f0 <tcp_process_refused_data>
 80087fe:	4603      	mov	r3, r0
 8008800:	f113 0f0d 	cmn.w	r3, #13
 8008804:	d007      	beq.n	8008816 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800880e:	4b82      	ldr	r3, [pc, #520]	@ (8008a18 <tcp_input+0x73c>)
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800881a:	2b00      	cmp	r3, #0
 800881c:	f040 80e3 	bne.w	80089e6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008820:	69f8      	ldr	r0, [r7, #28]
 8008822:	f003 fdff 	bl	800c424 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008826:	e0de      	b.n	80089e6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008828:	4a7c      	ldr	r2, [pc, #496]	@ (8008a1c <tcp_input+0x740>)
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800882e:	69f8      	ldr	r0, [r7, #28]
 8008830:	f000 fb18 	bl	8008e64 <tcp_process>
 8008834:	4603      	mov	r3, r0
 8008836:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008838:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800883c:	f113 0f0d 	cmn.w	r3, #13
 8008840:	f000 80d3 	beq.w	80089ea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008844:	4b71      	ldr	r3, [pc, #452]	@ (8008a0c <tcp_input+0x730>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	f003 0308 	and.w	r3, r3, #8
 800884c:	2b00      	cmp	r3, #0
 800884e:	d015      	beq.n	800887c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008856:	2b00      	cmp	r3, #0
 8008858:	d008      	beq.n	800886c <tcp_input+0x590>
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	6912      	ldr	r2, [r2, #16]
 8008864:	f06f 010d 	mvn.w	r1, #13
 8008868:	4610      	mov	r0, r2
 800886a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800886c:	69f9      	ldr	r1, [r7, #28]
 800886e:	486c      	ldr	r0, [pc, #432]	@ (8008a20 <tcp_input+0x744>)
 8008870:	f7ff fbbc 	bl	8007fec <tcp_pcb_remove>
        tcp_free(pcb);
 8008874:	69f8      	ldr	r0, [r7, #28]
 8008876:	f7fd ff99 	bl	80067ac <tcp_free>
 800887a:	e0da      	b.n	8008a32 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008880:	4b63      	ldr	r3, [pc, #396]	@ (8008a10 <tcp_input+0x734>)
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01d      	beq.n	80088c4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008888:	4b61      	ldr	r3, [pc, #388]	@ (8008a10 <tcp_input+0x734>)
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <tcp_input+0x5d2>
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	6910      	ldr	r0, [r2, #16]
 80088a2:	89fa      	ldrh	r2, [r7, #14]
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	4798      	blx	r3
 80088a8:	4603      	mov	r3, r0
 80088aa:	74fb      	strb	r3, [r7, #19]
 80088ac:	e001      	b.n	80088b2 <tcp_input+0x5d6>
 80088ae:	2300      	movs	r3, #0
 80088b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80088b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088b6:	f113 0f0d 	cmn.w	r3, #13
 80088ba:	f000 8098 	beq.w	80089ee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80088be:	4b54      	ldr	r3, [pc, #336]	@ (8008a10 <tcp_input+0x734>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80088c4:	69f8      	ldr	r0, [r7, #28]
 80088c6:	f000 f915 	bl	8008af4 <tcp_input_delayed_close>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f040 8090 	bne.w	80089f2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80088d2:	4b4d      	ldr	r3, [pc, #308]	@ (8008a08 <tcp_input+0x72c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d041      	beq.n	800895e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d006      	beq.n	80088f0 <tcp_input+0x614>
 80088e2:	4b50      	ldr	r3, [pc, #320]	@ (8008a24 <tcp_input+0x748>)
 80088e4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80088e8:	494f      	ldr	r1, [pc, #316]	@ (8008a28 <tcp_input+0x74c>)
 80088ea:	4850      	ldr	r0, [pc, #320]	@ (8008a2c <tcp_input+0x750>)
 80088ec:	f006 fe34 	bl	800f558 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	8b5b      	ldrh	r3, [r3, #26]
 80088f4:	f003 0310 	and.w	r3, r3, #16
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d008      	beq.n	800890e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80088fc:	4b42      	ldr	r3, [pc, #264]	@ (8008a08 <tcp_input+0x72c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	f7fd fc21 	bl	8006148 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008906:	69f8      	ldr	r0, [r7, #28]
 8008908:	f7fe fa38 	bl	8006d7c <tcp_abort>
            goto aborted;
 800890c:	e091      	b.n	8008a32 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <tcp_input+0x656>
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	6918      	ldr	r0, [r3, #16]
 8008922:	4b39      	ldr	r3, [pc, #228]	@ (8008a08 <tcp_input+0x72c>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	2300      	movs	r3, #0
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	47a0      	blx	r4
 800892c:	4603      	mov	r3, r0
 800892e:	74fb      	strb	r3, [r7, #19]
 8008930:	e008      	b.n	8008944 <tcp_input+0x668>
 8008932:	4b35      	ldr	r3, [pc, #212]	@ (8008a08 <tcp_input+0x72c>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	69f9      	ldr	r1, [r7, #28]
 800893a:	2000      	movs	r0, #0
 800893c:	f7ff f8ae 	bl	8007a9c <tcp_recv_null>
 8008940:	4603      	mov	r3, r0
 8008942:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008944:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008948:	f113 0f0d 	cmn.w	r3, #13
 800894c:	d053      	beq.n	80089f6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800894e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008956:	4b2c      	ldr	r3, [pc, #176]	@ (8008a08 <tcp_input+0x72c>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800895e:	4b2b      	ldr	r3, [pc, #172]	@ (8008a0c <tcp_input+0x730>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d030      	beq.n	80089cc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008976:	7b5a      	ldrb	r2, [r3, #13]
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800897c:	f042 0220 	orr.w	r2, r2, #32
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	735a      	strb	r2, [r3, #13]
 8008984:	e022      	b.n	80089cc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800898a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800898e:	d005      	beq.n	800899c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008994:	3301      	adds	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <tcp_input+0x6e2>
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	6918      	ldr	r0, [r3, #16]
 80089b0:	2300      	movs	r3, #0
 80089b2:	2200      	movs	r2, #0
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	47a0      	blx	r4
 80089b8:	4603      	mov	r3, r0
 80089ba:	74fb      	strb	r3, [r7, #19]
 80089bc:	e001      	b.n	80089c2 <tcp_input+0x6e6>
 80089be:	2300      	movs	r3, #0
 80089c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80089c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089c6:	f113 0f0d 	cmn.w	r3, #13
 80089ca:	d016      	beq.n	80089fa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80089cc:	4b13      	ldr	r3, [pc, #76]	@ (8008a1c <tcp_input+0x740>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80089d2:	69f8      	ldr	r0, [r7, #28]
 80089d4:	f000 f88e 	bl	8008af4 <tcp_input_delayed_close>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d128      	bne.n	8008a30 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80089de:	69f8      	ldr	r0, [r7, #28]
 80089e0:	f002 ff1a 	bl	800b818 <tcp_output>
 80089e4:	e025      	b.n	8008a32 <tcp_input+0x756>
        goto aborted;
 80089e6:	bf00      	nop
 80089e8:	e023      	b.n	8008a32 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80089ea:	bf00      	nop
 80089ec:	e021      	b.n	8008a32 <tcp_input+0x756>
              goto aborted;
 80089ee:	bf00      	nop
 80089f0:	e01f      	b.n	8008a32 <tcp_input+0x756>
          goto aborted;
 80089f2:	bf00      	nop
 80089f4:	e01d      	b.n	8008a32 <tcp_input+0x756>
            goto aborted;
 80089f6:	bf00      	nop
 80089f8:	e01b      	b.n	8008a32 <tcp_input+0x756>
              goto aborted;
 80089fa:	bf00      	nop
 80089fc:	e019      	b.n	8008a32 <tcp_input+0x756>
 80089fe:	bf00      	nop
 8008a00:	200087a0 	.word	0x200087a0
 8008a04:	200087b0 	.word	0x200087b0
 8008a08:	200087d0 	.word	0x200087d0
 8008a0c:	200087cd 	.word	0x200087cd
 8008a10:	200087c8 	.word	0x200087c8
 8008a14:	200087cc 	.word	0x200087cc
 8008a18:	200087ca 	.word	0x200087ca
 8008a1c:	200087d4 	.word	0x200087d4
 8008a20:	20008794 	.word	0x20008794
 8008a24:	080119b8 	.word	0x080119b8
 8008a28:	08011b6c 	.word	0x08011b6c
 8008a2c:	08011a04 	.word	0x08011a04
          goto aborted;
 8008a30:	bf00      	nop
    tcp_input_pcb = NULL;
 8008a32:	4b27      	ldr	r3, [pc, #156]	@ (8008ad0 <tcp_input+0x7f4>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008a38:	4b26      	ldr	r3, [pc, #152]	@ (8008ad4 <tcp_input+0x7f8>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008a3e:	4b26      	ldr	r3, [pc, #152]	@ (8008ad8 <tcp_input+0x7fc>)
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d03f      	beq.n	8008ac6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008a46:	4b24      	ldr	r3, [pc, #144]	@ (8008ad8 <tcp_input+0x7fc>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fd fb7c 	bl	8006148 <pbuf_free>
      inseg.p = NULL;
 8008a50:	4b21      	ldr	r3, [pc, #132]	@ (8008ad8 <tcp_input+0x7fc>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008a56:	e036      	b.n	8008ac6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008a58:	4b20      	ldr	r3, [pc, #128]	@ (8008adc <tcp_input+0x800>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	899b      	ldrh	r3, [r3, #12]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fc f8a9 	bl	8004bb8 <lwip_htons>
 8008a66:	4603      	mov	r3, r0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0304 	and.w	r3, r3, #4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d118      	bne.n	8008aa4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a72:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae0 <tcp_input+0x804>)
 8008a74:	6819      	ldr	r1, [r3, #0]
 8008a76:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae4 <tcp_input+0x808>)
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <tcp_input+0x80c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a82:	4b16      	ldr	r3, [pc, #88]	@ (8008adc <tcp_input+0x800>)
 8008a84:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a86:	885b      	ldrh	r3, [r3, #2]
 8008a88:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a8a:	4a14      	ldr	r2, [pc, #80]	@ (8008adc <tcp_input+0x800>)
 8008a8c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a8e:	8812      	ldrh	r2, [r2, #0]
 8008a90:	b292      	uxth	r2, r2
 8008a92:	9202      	str	r2, [sp, #8]
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	4b15      	ldr	r3, [pc, #84]	@ (8008aec <tcp_input+0x810>)
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	4b15      	ldr	r3, [pc, #84]	@ (8008af0 <tcp_input+0x814>)
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	f003 fc6e 	bl	800c380 <tcp_rst>
    pbuf_free(p);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fd fb4f 	bl	8006148 <pbuf_free>
  return;
 8008aaa:	e00c      	b.n	8008ac6 <tcp_input+0x7ea>
    goto dropped;
 8008aac:	bf00      	nop
 8008aae:	e006      	b.n	8008abe <tcp_input+0x7e2>
    goto dropped;
 8008ab0:	bf00      	nop
 8008ab2:	e004      	b.n	8008abe <tcp_input+0x7e2>
    goto dropped;
 8008ab4:	bf00      	nop
 8008ab6:	e002      	b.n	8008abe <tcp_input+0x7e2>
      goto dropped;
 8008ab8:	bf00      	nop
 8008aba:	e000      	b.n	8008abe <tcp_input+0x7e2>
      goto dropped;
 8008abc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fd fb42 	bl	8006148 <pbuf_free>
 8008ac4:	e000      	b.n	8008ac8 <tcp_input+0x7ec>
  return;
 8008ac6:	bf00      	nop
}
 8008ac8:	3724      	adds	r7, #36	@ 0x24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd90      	pop	{r4, r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200087d4 	.word	0x200087d4
 8008ad4:	200087d0 	.word	0x200087d0
 8008ad8:	200087a0 	.word	0x200087a0
 8008adc:	200087b0 	.word	0x200087b0
 8008ae0:	200087c4 	.word	0x200087c4
 8008ae4:	200087ca 	.word	0x200087ca
 8008ae8:	200087c0 	.word	0x200087c0
 8008aec:	20005228 	.word	0x20005228
 8008af0:	2000522c 	.word	0x2000522c

08008af4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <tcp_input_delayed_close+0x1c>
 8008b02:	4b17      	ldr	r3, [pc, #92]	@ (8008b60 <tcp_input_delayed_close+0x6c>)
 8008b04:	f240 225a 	movw	r2, #602	@ 0x25a
 8008b08:	4916      	ldr	r1, [pc, #88]	@ (8008b64 <tcp_input_delayed_close+0x70>)
 8008b0a:	4817      	ldr	r0, [pc, #92]	@ (8008b68 <tcp_input_delayed_close+0x74>)
 8008b0c:	f006 fd24 	bl	800f558 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008b10:	4b16      	ldr	r3, [pc, #88]	@ (8008b6c <tcp_input_delayed_close+0x78>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01c      	beq.n	8008b56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8b5b      	ldrh	r3, [r3, #26]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10d      	bne.n	8008b44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d008      	beq.n	8008b44 <tcp_input_delayed_close+0x50>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6912      	ldr	r2, [r2, #16]
 8008b3c:	f06f 010e 	mvn.w	r1, #14
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	480a      	ldr	r0, [pc, #40]	@ (8008b70 <tcp_input_delayed_close+0x7c>)
 8008b48:	f7ff fa50 	bl	8007fec <tcp_pcb_remove>
    tcp_free(pcb);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fd fe2d 	bl	80067ac <tcp_free>
    return 1;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e000      	b.n	8008b58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	080119b8 	.word	0x080119b8
 8008b64:	08011b88 	.word	0x08011b88
 8008b68:	08011a04 	.word	0x08011a04
 8008b6c:	200087cd 	.word	0x200087cd
 8008b70:	20008794 	.word	0x20008794

08008b74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b08b      	sub	sp, #44	@ 0x2c
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d3c <tcp_listen_input+0x1c8>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f040 80d2 	bne.w	8008d2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <tcp_listen_input+0x2a>
 8008b90:	4b6b      	ldr	r3, [pc, #428]	@ (8008d40 <tcp_listen_input+0x1cc>)
 8008b92:	f240 2281 	movw	r2, #641	@ 0x281
 8008b96:	496b      	ldr	r1, [pc, #428]	@ (8008d44 <tcp_listen_input+0x1d0>)
 8008b98:	486b      	ldr	r0, [pc, #428]	@ (8008d48 <tcp_listen_input+0x1d4>)
 8008b9a:	f006 fcdd 	bl	800f558 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008b9e:	4b67      	ldr	r3, [pc, #412]	@ (8008d3c <tcp_listen_input+0x1c8>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d019      	beq.n	8008bde <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008baa:	4b68      	ldr	r3, [pc, #416]	@ (8008d4c <tcp_listen_input+0x1d8>)
 8008bac:	6819      	ldr	r1, [r3, #0]
 8008bae:	4b68      	ldr	r3, [pc, #416]	@ (8008d50 <tcp_listen_input+0x1dc>)
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4b67      	ldr	r3, [pc, #412]	@ (8008d54 <tcp_listen_input+0x1e0>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bba:	4b67      	ldr	r3, [pc, #412]	@ (8008d58 <tcp_listen_input+0x1e4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bc2:	4a65      	ldr	r2, [pc, #404]	@ (8008d58 <tcp_listen_input+0x1e4>)
 8008bc4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bc6:	8812      	ldrh	r2, [r2, #0]
 8008bc8:	b292      	uxth	r2, r2
 8008bca:	9202      	str	r2, [sp, #8]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	4b63      	ldr	r3, [pc, #396]	@ (8008d5c <tcp_listen_input+0x1e8>)
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	4b63      	ldr	r3, [pc, #396]	@ (8008d60 <tcp_listen_input+0x1ec>)
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f003 fbd2 	bl	800c380 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008bdc:	e0a9      	b.n	8008d32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008bde:	4b57      	ldr	r3, [pc, #348]	@ (8008d3c <tcp_listen_input+0x1c8>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 80a3 	beq.w	8008d32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	7d5b      	ldrb	r3, [r3, #21]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff f877 	bl	8007ce4 <tcp_alloc>
 8008bf6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d111      	bne.n	8008c22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <tcp_listen_input+0xa8>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6910      	ldr	r0, [r2, #16]
 8008c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c12:	2100      	movs	r1, #0
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	73bb      	strb	r3, [r7, #14]
      return;
 8008c1a:	e08b      	b.n	8008d34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c1c:	23f0      	movs	r3, #240	@ 0xf0
 8008c1e:	73bb      	strb	r3, [r7, #14]
      return;
 8008c20:	e088      	b.n	8008d34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008c22:	4b50      	ldr	r3, [pc, #320]	@ (8008d64 <tcp_listen_input+0x1f0>)
 8008c24:	695a      	ldr	r2, [r3, #20]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8008d64 <tcp_listen_input+0x1f0>)
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	8ada      	ldrh	r2, [r3, #22]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008c3a:	4b47      	ldr	r3, [pc, #284]	@ (8008d58 <tcp_listen_input+0x1e4>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2203      	movs	r2, #3
 8008c4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008c4c:	4b41      	ldr	r3, [pc, #260]	@ (8008d54 <tcp_listen_input+0x1e0>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008c5e:	6978      	ldr	r0, [r7, #20]
 8008c60:	f7ff fa58 	bl	8008114 <tcp_next_iss>
 8008c64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008c7e:	4b35      	ldr	r3, [pc, #212]	@ (8008d54 <tcp_listen_input+0x1e0>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	1e5a      	subs	r2, r3, #1
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691a      	ldr	r2, [r3, #16]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	7a5b      	ldrb	r3, [r3, #9]
 8008c9a:	f003 030c 	and.w	r3, r3, #12
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7a1a      	ldrb	r2, [r3, #8]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008cac:	4b2e      	ldr	r3, [pc, #184]	@ (8008d68 <tcp_listen_input+0x1f4>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	60da      	str	r2, [r3, #12]
 8008cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8008d68 <tcp_listen_input+0x1f4>)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	f003 fd23 	bl	800c704 <tcp_timer_needed>
 8008cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8008d6c <tcp_listen_input+0x1f8>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008cc4:	6978      	ldr	r0, [r7, #20]
 8008cc6:	f001 fd8b 	bl	800a7e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008cca:	4b23      	ldr	r3, [pc, #140]	@ (8008d58 <tcp_listen_input+0x1e4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	89db      	ldrh	r3, [r3, #14]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f005 f8b7 	bl	800de60 <ip4_route>
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7ff fa30 	bl	8008160 <tcp_eff_send_mss_netif>
 8008d00:	4603      	mov	r3, r0
 8008d02:	461a      	mov	r2, r3
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008d08:	2112      	movs	r1, #18
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f002 fc96 	bl	800b63c <tcp_enqueue_flags>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6978      	ldr	r0, [r7, #20]
 8008d20:	f7fd ff6e 	bl	8006c00 <tcp_abandon>
      return;
 8008d24:	e006      	b.n	8008d34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008d26:	6978      	ldr	r0, [r7, #20]
 8008d28:	f002 fd76 	bl	800b818 <tcp_output>
  return;
 8008d2c:	e001      	b.n	8008d32 <tcp_listen_input+0x1be>
    return;
 8008d2e:	bf00      	nop
 8008d30:	e000      	b.n	8008d34 <tcp_listen_input+0x1c0>
  return;
 8008d32:	bf00      	nop
}
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	200087cc 	.word	0x200087cc
 8008d40:	080119b8 	.word	0x080119b8
 8008d44:	08011bb0 	.word	0x08011bb0
 8008d48:	08011a04 	.word	0x08011a04
 8008d4c:	200087c4 	.word	0x200087c4
 8008d50:	200087ca 	.word	0x200087ca
 8008d54:	200087c0 	.word	0x200087c0
 8008d58:	200087b0 	.word	0x200087b0
 8008d5c:	20005228 	.word	0x20005228
 8008d60:	2000522c 	.word	0x2000522c
 8008d64:	20005218 	.word	0x20005218
 8008d68:	20008794 	.word	0x20008794
 8008d6c:	2000879c 	.word	0x2000879c

08008d70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af04      	add	r7, sp, #16
 8008d76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008d78:	4b2f      	ldr	r3, [pc, #188]	@ (8008e38 <tcp_timewait_input+0xc8>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d153      	bne.n	8008e2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d106      	bne.n	8008d98 <tcp_timewait_input+0x28>
 8008d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8008e3c <tcp_timewait_input+0xcc>)
 8008d8c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008d90:	492b      	ldr	r1, [pc, #172]	@ (8008e40 <tcp_timewait_input+0xd0>)
 8008d92:	482c      	ldr	r0, [pc, #176]	@ (8008e44 <tcp_timewait_input+0xd4>)
 8008d94:	f006 fbe0 	bl	800f558 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008d98:	4b27      	ldr	r3, [pc, #156]	@ (8008e38 <tcp_timewait_input+0xc8>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d02a      	beq.n	8008dfa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008da4:	4b28      	ldr	r3, [pc, #160]	@ (8008e48 <tcp_timewait_input+0xd8>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	db2d      	blt.n	8008e0e <tcp_timewait_input+0x9e>
 8008db2:	4b25      	ldr	r3, [pc, #148]	@ (8008e48 <tcp_timewait_input+0xd8>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008dbe:	440b      	add	r3, r1
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dc23      	bgt.n	8008e0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dc6:	4b21      	ldr	r3, [pc, #132]	@ (8008e4c <tcp_timewait_input+0xdc>)
 8008dc8:	6819      	ldr	r1, [r3, #0]
 8008dca:	4b21      	ldr	r3, [pc, #132]	@ (8008e50 <tcp_timewait_input+0xe0>)
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e48 <tcp_timewait_input+0xd8>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e54 <tcp_timewait_input+0xe4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dda:	885b      	ldrh	r3, [r3, #2]
 8008ddc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dde:	4a1d      	ldr	r2, [pc, #116]	@ (8008e54 <tcp_timewait_input+0xe4>)
 8008de0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008de2:	8812      	ldrh	r2, [r2, #0]
 8008de4:	b292      	uxth	r2, r2
 8008de6:	9202      	str	r2, [sp, #8]
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	4b1b      	ldr	r3, [pc, #108]	@ (8008e58 <tcp_timewait_input+0xe8>)
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4b1b      	ldr	r3, [pc, #108]	@ (8008e5c <tcp_timewait_input+0xec>)
 8008df0:	4602      	mov	r2, r0
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f003 fac4 	bl	800c380 <tcp_rst>
      return;
 8008df8:	e01b      	b.n	8008e32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8008e38 <tcp_timewait_input+0xc8>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008e06:	4b16      	ldr	r3, [pc, #88]	@ (8008e60 <tcp_timewait_input+0xf0>)
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008e0e:	4b10      	ldr	r3, [pc, #64]	@ (8008e50 <tcp_timewait_input+0xe0>)
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00c      	beq.n	8008e30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	8b5b      	ldrh	r3, [r3, #26]
 8008e1a:	f043 0302 	orr.w	r3, r3, #2
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f002 fcf7 	bl	800b818 <tcp_output>
  }
  return;
 8008e2a:	e001      	b.n	8008e30 <tcp_timewait_input+0xc0>
    return;
 8008e2c:	bf00      	nop
 8008e2e:	e000      	b.n	8008e32 <tcp_timewait_input+0xc2>
  return;
 8008e30:	bf00      	nop
}
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	200087cc 	.word	0x200087cc
 8008e3c:	080119b8 	.word	0x080119b8
 8008e40:	08011bd0 	.word	0x08011bd0
 8008e44:	08011a04 	.word	0x08011a04
 8008e48:	200087c0 	.word	0x200087c0
 8008e4c:	200087c4 	.word	0x200087c4
 8008e50:	200087ca 	.word	0x200087ca
 8008e54:	200087b0 	.word	0x200087b0
 8008e58:	20005228 	.word	0x20005228
 8008e5c:	2000522c 	.word	0x2000522c
 8008e60:	20008788 	.word	0x20008788

08008e64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008e64:	b590      	push	{r4, r7, lr}
 8008e66:	b08d      	sub	sp, #52	@ 0x34
 8008e68:	af04      	add	r7, sp, #16
 8008e6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <tcp_process+0x24>
 8008e7a:	4b9d      	ldr	r3, [pc, #628]	@ (80090f0 <tcp_process+0x28c>)
 8008e7c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008e80:	499c      	ldr	r1, [pc, #624]	@ (80090f4 <tcp_process+0x290>)
 8008e82:	489d      	ldr	r0, [pc, #628]	@ (80090f8 <tcp_process+0x294>)
 8008e84:	f006 fb68 	bl	800f558 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008e88:	4b9c      	ldr	r3, [pc, #624]	@ (80090fc <tcp_process+0x298>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d04e      	beq.n	8008f32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7d1b      	ldrb	r3, [r3, #20]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d108      	bne.n	8008eae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ea0:	4b97      	ldr	r3, [pc, #604]	@ (8009100 <tcp_process+0x29c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d123      	bne.n	8008ef0 <tcp_process+0x8c>
        acceptable = 1;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	76fb      	strb	r3, [r7, #27]
 8008eac:	e020      	b.n	8008ef0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008eb2:	4b94      	ldr	r3, [pc, #592]	@ (8009104 <tcp_process+0x2a0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d102      	bne.n	8008ec0 <tcp_process+0x5c>
        acceptable = 1;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	76fb      	strb	r3, [r7, #27]
 8008ebe:	e017      	b.n	8008ef0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ec0:	4b90      	ldr	r3, [pc, #576]	@ (8009104 <tcp_process+0x2a0>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	db10      	blt.n	8008ef0 <tcp_process+0x8c>
 8008ece:	4b8d      	ldr	r3, [pc, #564]	@ (8009104 <tcp_process+0x2a0>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008eda:	440b      	add	r3, r1
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dc06      	bgt.n	8008ef0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8b5b      	ldrh	r3, [r3, #26]
 8008ee6:	f043 0302 	orr.w	r3, r3, #2
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008ef0:	7efb      	ldrb	r3, [r7, #27]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d01b      	beq.n	8008f2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7d1b      	ldrb	r3, [r3, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <tcp_process+0xa8>
 8008efe:	4b7c      	ldr	r3, [pc, #496]	@ (80090f0 <tcp_process+0x28c>)
 8008f00:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008f04:	4980      	ldr	r1, [pc, #512]	@ (8009108 <tcp_process+0x2a4>)
 8008f06:	487c      	ldr	r0, [pc, #496]	@ (80090f8 <tcp_process+0x294>)
 8008f08:	f006 fb26 	bl	800f558 <iprintf>
      recv_flags |= TF_RESET;
 8008f0c:	4b7f      	ldr	r3, [pc, #508]	@ (800910c <tcp_process+0x2a8>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f043 0308 	orr.w	r3, r3, #8
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	4b7d      	ldr	r3, [pc, #500]	@ (800910c <tcp_process+0x2a8>)
 8008f18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	8b5b      	ldrh	r3, [r3, #26]
 8008f1e:	f023 0301 	bic.w	r3, r3, #1
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008f28:	f06f 030d 	mvn.w	r3, #13
 8008f2c:	e37a      	b.n	8009624 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	e378      	b.n	8009624 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008f32:	4b72      	ldr	r3, [pc, #456]	@ (80090fc <tcp_process+0x298>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d010      	beq.n	8008f60 <tcp_process+0xfc>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	7d1b      	ldrb	r3, [r3, #20]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d00c      	beq.n	8008f60 <tcp_process+0xfc>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7d1b      	ldrb	r3, [r3, #20]
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d008      	beq.n	8008f60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8b5b      	ldrh	r3, [r3, #26]
 8008f52:	f043 0302 	orr.w	r3, r3, #2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e361      	b.n	8009624 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	8b5b      	ldrh	r3, [r3, #26]
 8008f64:	f003 0310 	and.w	r3, r3, #16
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008f6c:	4b68      	ldr	r3, [pc, #416]	@ (8009110 <tcp_process+0x2ac>)
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 fc2b 	bl	800a7e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	7d1b      	ldrb	r3, [r3, #20]
 8008f8e:	3b02      	subs	r3, #2
 8008f90:	2b07      	cmp	r3, #7
 8008f92:	f200 8337 	bhi.w	8009604 <tcp_process+0x7a0>
 8008f96:	a201      	add	r2, pc, #4	@ (adr r2, 8008f9c <tcp_process+0x138>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fbd 	.word	0x08008fbd
 8008fa0:	080091ed 	.word	0x080091ed
 8008fa4:	08009365 	.word	0x08009365
 8008fa8:	0800938f 	.word	0x0800938f
 8008fac:	080094b3 	.word	0x080094b3
 8008fb0:	08009365 	.word	0x08009365
 8008fb4:	0800953f 	.word	0x0800953f
 8008fb8:	080095cf 	.word	0x080095cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80090fc <tcp_process+0x298>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 0310 	and.w	r3, r3, #16
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 80e4 	beq.w	8009192 <tcp_process+0x32e>
 8008fca:	4b4c      	ldr	r3, [pc, #304]	@ (80090fc <tcp_process+0x298>)
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80dd 	beq.w	8009192 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	4b48      	ldr	r3, [pc, #288]	@ (8009100 <tcp_process+0x29c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	f040 80d5 	bne.w	8009192 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008fe8:	4b46      	ldr	r3, [pc, #280]	@ (8009104 <tcp_process+0x2a0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008ffa:	4b41      	ldr	r3, [pc, #260]	@ (8009100 <tcp_process+0x29c>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009002:	4b44      	ldr	r3, [pc, #272]	@ (8009114 <tcp_process+0x2b0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	89db      	ldrh	r3, [r3, #14]
 8009008:	b29a      	uxth	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800901c:	4b39      	ldr	r3, [pc, #228]	@ (8009104 <tcp_process+0x2a0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	1e5a      	subs	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2204      	movs	r2, #4
 800902a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3304      	adds	r3, #4
 8009034:	4618      	mov	r0, r3
 8009036:	f004 ff13 	bl	800de60 <ip4_route>
 800903a:	4601      	mov	r1, r0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3304      	adds	r3, #4
 8009040:	461a      	mov	r2, r3
 8009042:	4620      	mov	r0, r4
 8009044:	f7ff f88c 	bl	8008160 <tcp_eff_send_mss_netif>
 8009048:	4603      	mov	r3, r0
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009054:	009a      	lsls	r2, r3, #2
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009060:	428b      	cmp	r3, r1
 8009062:	bf38      	it	cc
 8009064:	460b      	movcc	r3, r1
 8009066:	429a      	cmp	r2, r3
 8009068:	d204      	bcs.n	8009074 <tcp_process+0x210>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	b29b      	uxth	r3, r3
 8009072:	e00d      	b.n	8009090 <tcp_process+0x22c>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800907e:	4293      	cmp	r3, r2
 8009080:	d904      	bls.n	800908c <tcp_process+0x228>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	b29b      	uxth	r3, r3
 800908a:	e001      	b.n	8009090 <tcp_process+0x22c>
 800908c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <tcp_process+0x24a>
 80090a0:	4b13      	ldr	r3, [pc, #76]	@ (80090f0 <tcp_process+0x28c>)
 80090a2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80090a6:	491c      	ldr	r1, [pc, #112]	@ (8009118 <tcp_process+0x2b4>)
 80090a8:	4813      	ldr	r0, [pc, #76]	@ (80090f8 <tcp_process+0x294>)
 80090aa:	f006 fa55 	bl	800f558 <iprintf>
        --pcb->snd_queuelen;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d12a      	bne.n	8009120 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <tcp_process+0x280>
 80090d6:	4b06      	ldr	r3, [pc, #24]	@ (80090f0 <tcp_process+0x28c>)
 80090d8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80090dc:	490f      	ldr	r1, [pc, #60]	@ (800911c <tcp_process+0x2b8>)
 80090de:	4806      	ldr	r0, [pc, #24]	@ (80090f8 <tcp_process+0x294>)
 80090e0:	f006 fa3a 	bl	800f558 <iprintf>
          pcb->unsent = rseg->next;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 80090ec:	e01c      	b.n	8009128 <tcp_process+0x2c4>
 80090ee:	bf00      	nop
 80090f0:	080119b8 	.word	0x080119b8
 80090f4:	08011bf0 	.word	0x08011bf0
 80090f8:	08011a04 	.word	0x08011a04
 80090fc:	200087cc 	.word	0x200087cc
 8009100:	200087c4 	.word	0x200087c4
 8009104:	200087c0 	.word	0x200087c0
 8009108:	08011c0c 	.word	0x08011c0c
 800910c:	200087cd 	.word	0x200087cd
 8009110:	20008788 	.word	0x20008788
 8009114:	200087b0 	.word	0x200087b0
 8009118:	08011c2c 	.word	0x08011c2c
 800911c:	08011c44 	.word	0x08011c44
        } else {
          pcb->unacked = rseg->next;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8009128:	69f8      	ldr	r0, [r7, #28]
 800912a:	f7fe fc72 	bl	8007a12 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009132:	2b00      	cmp	r3, #0
 8009134:	d104      	bne.n	8009140 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800913c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800913e:	e006      	b.n	800914e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <tcp_process+0x30a>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	6910      	ldr	r0, [r2, #16]
 8009162:	2200      	movs	r2, #0
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	4798      	blx	r3
 8009168:	4603      	mov	r3, r0
 800916a:	76bb      	strb	r3, [r7, #26]
 800916c:	e001      	b.n	8009172 <tcp_process+0x30e>
 800916e:	2300      	movs	r3, #0
 8009170:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009172:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009176:	f113 0f0d 	cmn.w	r3, #13
 800917a:	d102      	bne.n	8009182 <tcp_process+0x31e>
          return ERR_ABRT;
 800917c:	f06f 030c 	mvn.w	r3, #12
 8009180:	e250      	b.n	8009624 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	8b5b      	ldrh	r3, [r3, #26]
 8009186:	f043 0302 	orr.w	r3, r3, #2
 800918a:	b29a      	uxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009190:	e23a      	b.n	8009608 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009192:	4b98      	ldr	r3, [pc, #608]	@ (80093f4 <tcp_process+0x590>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 8234 	beq.w	8009608 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091a0:	4b95      	ldr	r3, [pc, #596]	@ (80093f8 <tcp_process+0x594>)
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	4b95      	ldr	r3, [pc, #596]	@ (80093fc <tcp_process+0x598>)
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	4b95      	ldr	r3, [pc, #596]	@ (8009400 <tcp_process+0x59c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091b0:	4b94      	ldr	r3, [pc, #592]	@ (8009404 <tcp_process+0x5a0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091b8:	4a92      	ldr	r2, [pc, #584]	@ (8009404 <tcp_process+0x5a0>)
 80091ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091bc:	8812      	ldrh	r2, [r2, #0]
 80091be:	b292      	uxth	r2, r2
 80091c0:	9202      	str	r2, [sp, #8]
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	4b90      	ldr	r3, [pc, #576]	@ (8009408 <tcp_process+0x5a4>)
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	4b90      	ldr	r3, [pc, #576]	@ (800940c <tcp_process+0x5a8>)
 80091ca:	4602      	mov	r2, r0
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f003 f8d7 	bl	800c380 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091d8:	2b05      	cmp	r3, #5
 80091da:	f200 8215 	bhi.w	8009608 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f002 fea3 	bl	800bf30 <tcp_rexmit_rto>
      break;
 80091ea:	e20d      	b.n	8009608 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80091ec:	4b81      	ldr	r3, [pc, #516]	@ (80093f4 <tcp_process+0x590>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 0310 	and.w	r3, r3, #16
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80a1 	beq.w	800933c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80091fa:	4b7f      	ldr	r3, [pc, #508]	@ (80093f8 <tcp_process+0x594>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	db7e      	blt.n	8009308 <tcp_process+0x4a4>
 800920a:	4b7b      	ldr	r3, [pc, #492]	@ (80093f8 <tcp_process+0x594>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	dc77      	bgt.n	8009308 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2204      	movs	r2, #4
 800921c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d102      	bne.n	800922c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009226:	23fa      	movs	r3, #250	@ 0xfa
 8009228:	76bb      	strb	r3, [r7, #26]
 800922a:	e01d      	b.n	8009268 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <tcp_process+0x3e0>
 8009236:	4b76      	ldr	r3, [pc, #472]	@ (8009410 <tcp_process+0x5ac>)
 8009238:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800923c:	4975      	ldr	r1, [pc, #468]	@ (8009414 <tcp_process+0x5b0>)
 800923e:	4876      	ldr	r0, [pc, #472]	@ (8009418 <tcp_process+0x5b4>)
 8009240:	f006 f98a 	bl	800f558 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <tcp_process+0x400>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6910      	ldr	r0, [r2, #16]
 8009258:	2200      	movs	r2, #0
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	4798      	blx	r3
 800925e:	4603      	mov	r3, r0
 8009260:	76bb      	strb	r3, [r7, #26]
 8009262:	e001      	b.n	8009268 <tcp_process+0x404>
 8009264:	23f0      	movs	r3, #240	@ 0xf0
 8009266:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009268:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009270:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009274:	f113 0f0d 	cmn.w	r3, #13
 8009278:	d002      	beq.n	8009280 <tcp_process+0x41c>
              tcp_abort(pcb);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7fd fd7e 	bl	8006d7c <tcp_abort>
            }
            return ERR_ABRT;
 8009280:	f06f 030c 	mvn.w	r3, #12
 8009284:	e1ce      	b.n	8009624 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fae0 	bl	800984c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800928c:	4b63      	ldr	r3, [pc, #396]	@ (800941c <tcp_process+0x5b8>)
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <tcp_process+0x43c>
            recv_acked--;
 8009294:	4b61      	ldr	r3, [pc, #388]	@ (800941c <tcp_process+0x5b8>)
 8009296:	881b      	ldrh	r3, [r3, #0]
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	4b5f      	ldr	r3, [pc, #380]	@ (800941c <tcp_process+0x5b8>)
 800929e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092a4:	009a      	lsls	r2, r3, #2
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	f241 111c 	movw	r1, #4380	@ 0x111c
 80092b0:	428b      	cmp	r3, r1
 80092b2:	bf38      	it	cc
 80092b4:	460b      	movcc	r3, r1
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d204      	bcs.n	80092c4 <tcp_process+0x460>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	e00d      	b.n	80092e0 <tcp_process+0x47c>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	f241 121c 	movw	r2, #4380	@ 0x111c
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d904      	bls.n	80092dc <tcp_process+0x478>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	b29b      	uxth	r3, r3
 80092da:	e001      	b.n	80092e0 <tcp_process+0x47c>
 80092dc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80092e6:	4b4e      	ldr	r3, [pc, #312]	@ (8009420 <tcp_process+0x5bc>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d037      	beq.n	8009362 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8b5b      	ldrh	r3, [r3, #26]
 80092f6:	f043 0302 	orr.w	r3, r3, #2
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2207      	movs	r2, #7
 8009304:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009306:	e02c      	b.n	8009362 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009308:	4b3b      	ldr	r3, [pc, #236]	@ (80093f8 <tcp_process+0x594>)
 800930a:	6819      	ldr	r1, [r3, #0]
 800930c:	4b3b      	ldr	r3, [pc, #236]	@ (80093fc <tcp_process+0x598>)
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	4b3b      	ldr	r3, [pc, #236]	@ (8009400 <tcp_process+0x59c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009318:	4b3a      	ldr	r3, [pc, #232]	@ (8009404 <tcp_process+0x5a0>)
 800931a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009320:	4a38      	ldr	r2, [pc, #224]	@ (8009404 <tcp_process+0x5a0>)
 8009322:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009324:	8812      	ldrh	r2, [r2, #0]
 8009326:	b292      	uxth	r2, r2
 8009328:	9202      	str	r2, [sp, #8]
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	4b36      	ldr	r3, [pc, #216]	@ (8009408 <tcp_process+0x5a4>)
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	4b36      	ldr	r3, [pc, #216]	@ (800940c <tcp_process+0x5a8>)
 8009332:	4602      	mov	r2, r0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f003 f823 	bl	800c380 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800933a:	e167      	b.n	800960c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800933c:	4b2d      	ldr	r3, [pc, #180]	@ (80093f4 <tcp_process+0x590>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 8161 	beq.w	800960c <tcp_process+0x7a8>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934e:	1e5a      	subs	r2, r3, #1
 8009350:	4b2b      	ldr	r3, [pc, #172]	@ (8009400 <tcp_process+0x59c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	f040 8159 	bne.w	800960c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f002 fe0a 	bl	800bf74 <tcp_rexmit>
      break;
 8009360:	e154      	b.n	800960c <tcp_process+0x7a8>
 8009362:	e153      	b.n	800960c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fa71 	bl	800984c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800936a:	4b2d      	ldr	r3, [pc, #180]	@ (8009420 <tcp_process+0x5bc>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 814c 	beq.w	8009610 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	8b5b      	ldrh	r3, [r3, #26]
 800937c:	f043 0302 	orr.w	r3, r3, #2
 8009380:	b29a      	uxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2207      	movs	r2, #7
 800938a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800938c:	e140      	b.n	8009610 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa5c 	bl	800984c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009394:	4b22      	ldr	r3, [pc, #136]	@ (8009420 <tcp_process+0x5bc>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d071      	beq.n	8009484 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093a0:	4b14      	ldr	r3, [pc, #80]	@ (80093f4 <tcp_process+0x590>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d060      	beq.n	800946e <tcp_process+0x60a>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80093b0:	4b11      	ldr	r3, [pc, #68]	@ (80093f8 <tcp_process+0x594>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d15a      	bne.n	800946e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d156      	bne.n	800946e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	8b5b      	ldrh	r3, [r3, #26]
 80093c4:	f043 0302 	orr.w	r3, r3, #2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7fe fdbc 	bl	8007f4c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80093d4:	4b13      	ldr	r3, [pc, #76]	@ (8009424 <tcp_process+0x5c0>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d105      	bne.n	80093ea <tcp_process+0x586>
 80093de:	4b11      	ldr	r3, [pc, #68]	@ (8009424 <tcp_process+0x5c0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	4a0f      	ldr	r2, [pc, #60]	@ (8009424 <tcp_process+0x5c0>)
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	e02e      	b.n	8009448 <tcp_process+0x5e4>
 80093ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009424 <tcp_process+0x5c0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e027      	b.n	8009442 <tcp_process+0x5de>
 80093f2:	bf00      	nop
 80093f4:	200087cc 	.word	0x200087cc
 80093f8:	200087c4 	.word	0x200087c4
 80093fc:	200087ca 	.word	0x200087ca
 8009400:	200087c0 	.word	0x200087c0
 8009404:	200087b0 	.word	0x200087b0
 8009408:	20005228 	.word	0x20005228
 800940c:	2000522c 	.word	0x2000522c
 8009410:	080119b8 	.word	0x080119b8
 8009414:	08011c58 	.word	0x08011c58
 8009418:	08011a04 	.word	0x08011a04
 800941c:	200087c8 	.word	0x200087c8
 8009420:	200087cd 	.word	0x200087cd
 8009424:	20008794 	.word	0x20008794
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	429a      	cmp	r2, r3
 8009430:	d104      	bne.n	800943c <tcp_process+0x5d8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	60da      	str	r2, [r3, #12]
 800943a:	e005      	b.n	8009448 <tcp_process+0x5e4>
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1ef      	bne.n	8009428 <tcp_process+0x5c4>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	60da      	str	r2, [r3, #12]
 800944e:	4b77      	ldr	r3, [pc, #476]	@ (800962c <tcp_process+0x7c8>)
 8009450:	2201      	movs	r2, #1
 8009452:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	220a      	movs	r2, #10
 8009458:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800945a:	4b75      	ldr	r3, [pc, #468]	@ (8009630 <tcp_process+0x7cc>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	60da      	str	r2, [r3, #12]
 8009462:	4a73      	ldr	r2, [pc, #460]	@ (8009630 <tcp_process+0x7cc>)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	f003 f94c 	bl	800c704 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800946c:	e0d2      	b.n	8009614 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8b5b      	ldrh	r3, [r3, #26]
 8009472:	f043 0302 	orr.w	r3, r3, #2
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2208      	movs	r2, #8
 8009480:	751a      	strb	r2, [r3, #20]
      break;
 8009482:	e0c7      	b.n	8009614 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009484:	4b6b      	ldr	r3, [pc, #428]	@ (8009634 <tcp_process+0x7d0>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 80c1 	beq.w	8009614 <tcp_process+0x7b0>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009496:	4b68      	ldr	r3, [pc, #416]	@ (8009638 <tcp_process+0x7d4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	f040 80ba 	bne.w	8009614 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f040 80b5 	bne.w	8009614 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2206      	movs	r2, #6
 80094ae:	751a      	strb	r2, [r3, #20]
      break;
 80094b0:	e0b0      	b.n	8009614 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f9ca 	bl	800984c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80094b8:	4b60      	ldr	r3, [pc, #384]	@ (800963c <tcp_process+0x7d8>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 80a9 	beq.w	8009618 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	8b5b      	ldrh	r3, [r3, #26]
 80094ca:	f043 0302 	orr.w	r3, r3, #2
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7fe fd39 	bl	8007f4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80094da:	4b59      	ldr	r3, [pc, #356]	@ (8009640 <tcp_process+0x7dc>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d105      	bne.n	80094f0 <tcp_process+0x68c>
 80094e4:	4b56      	ldr	r3, [pc, #344]	@ (8009640 <tcp_process+0x7dc>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	4a55      	ldr	r2, [pc, #340]	@ (8009640 <tcp_process+0x7dc>)
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	e013      	b.n	8009518 <tcp_process+0x6b4>
 80094f0:	4b53      	ldr	r3, [pc, #332]	@ (8009640 <tcp_process+0x7dc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	613b      	str	r3, [r7, #16]
 80094f6:	e00c      	b.n	8009512 <tcp_process+0x6ae>
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d104      	bne.n	800950c <tcp_process+0x6a8>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	60da      	str	r2, [r3, #12]
 800950a:	e005      	b.n	8009518 <tcp_process+0x6b4>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1ef      	bne.n	80094f8 <tcp_process+0x694>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	60da      	str	r2, [r3, #12]
 800951e:	4b43      	ldr	r3, [pc, #268]	@ (800962c <tcp_process+0x7c8>)
 8009520:	2201      	movs	r2, #1
 8009522:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	220a      	movs	r2, #10
 8009528:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800952a:	4b41      	ldr	r3, [pc, #260]	@ (8009630 <tcp_process+0x7cc>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60da      	str	r2, [r3, #12]
 8009532:	4a3f      	ldr	r2, [pc, #252]	@ (8009630 <tcp_process+0x7cc>)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	f003 f8e4 	bl	800c704 <tcp_timer_needed>
      }
      break;
 800953c:	e06c      	b.n	8009618 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f984 	bl	800984c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009544:	4b3b      	ldr	r3, [pc, #236]	@ (8009634 <tcp_process+0x7d0>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	f003 0310 	and.w	r3, r3, #16
 800954c:	2b00      	cmp	r3, #0
 800954e:	d065      	beq.n	800961c <tcp_process+0x7b8>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009554:	4b38      	ldr	r3, [pc, #224]	@ (8009638 <tcp_process+0x7d4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d15f      	bne.n	800961c <tcp_process+0x7b8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d15b      	bne.n	800961c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fe fcf1 	bl	8007f4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800956a:	4b35      	ldr	r3, [pc, #212]	@ (8009640 <tcp_process+0x7dc>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	429a      	cmp	r2, r3
 8009572:	d105      	bne.n	8009580 <tcp_process+0x71c>
 8009574:	4b32      	ldr	r3, [pc, #200]	@ (8009640 <tcp_process+0x7dc>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	4a31      	ldr	r2, [pc, #196]	@ (8009640 <tcp_process+0x7dc>)
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	e013      	b.n	80095a8 <tcp_process+0x744>
 8009580:	4b2f      	ldr	r3, [pc, #188]	@ (8009640 <tcp_process+0x7dc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	e00c      	b.n	80095a2 <tcp_process+0x73e>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d104      	bne.n	800959c <tcp_process+0x738>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	60da      	str	r2, [r3, #12]
 800959a:	e005      	b.n	80095a8 <tcp_process+0x744>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1ef      	bne.n	8009588 <tcp_process+0x724>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	60da      	str	r2, [r3, #12]
 80095ae:	4b1f      	ldr	r3, [pc, #124]	@ (800962c <tcp_process+0x7c8>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	220a      	movs	r2, #10
 80095b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80095ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009630 <tcp_process+0x7cc>)
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60da      	str	r2, [r3, #12]
 80095c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009630 <tcp_process+0x7cc>)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	f003 f89c 	bl	800c704 <tcp_timer_needed>
      }
      break;
 80095cc:	e026      	b.n	800961c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f93c 	bl	800984c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80095d4:	4b17      	ldr	r3, [pc, #92]	@ (8009634 <tcp_process+0x7d0>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01f      	beq.n	8009620 <tcp_process+0x7bc>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095e4:	4b14      	ldr	r3, [pc, #80]	@ (8009638 <tcp_process+0x7d4>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d119      	bne.n	8009620 <tcp_process+0x7bc>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d115      	bne.n	8009620 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80095f4:	4b11      	ldr	r3, [pc, #68]	@ (800963c <tcp_process+0x7d8>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f043 0310 	orr.w	r3, r3, #16
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	4b0f      	ldr	r3, [pc, #60]	@ (800963c <tcp_process+0x7d8>)
 8009600:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009602:	e00d      	b.n	8009620 <tcp_process+0x7bc>
    default:
      break;
 8009604:	bf00      	nop
 8009606:	e00c      	b.n	8009622 <tcp_process+0x7be>
      break;
 8009608:	bf00      	nop
 800960a:	e00a      	b.n	8009622 <tcp_process+0x7be>
      break;
 800960c:	bf00      	nop
 800960e:	e008      	b.n	8009622 <tcp_process+0x7be>
      break;
 8009610:	bf00      	nop
 8009612:	e006      	b.n	8009622 <tcp_process+0x7be>
      break;
 8009614:	bf00      	nop
 8009616:	e004      	b.n	8009622 <tcp_process+0x7be>
      break;
 8009618:	bf00      	nop
 800961a:	e002      	b.n	8009622 <tcp_process+0x7be>
      break;
 800961c:	bf00      	nop
 800961e:	e000      	b.n	8009622 <tcp_process+0x7be>
      break;
 8009620:	bf00      	nop
  }
  return ERR_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3724      	adds	r7, #36	@ 0x24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd90      	pop	{r4, r7, pc}
 800962c:	2000879c 	.word	0x2000879c
 8009630:	20008798 	.word	0x20008798
 8009634:	200087cc 	.word	0x200087cc
 8009638:	200087c4 	.word	0x200087c4
 800963c:	200087cd 	.word	0x200087cd
 8009640:	20008794 	.word	0x20008794

08009644 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <tcp_oos_insert_segment+0x1e>
 8009654:	4b3b      	ldr	r3, [pc, #236]	@ (8009744 <tcp_oos_insert_segment+0x100>)
 8009656:	f240 421f 	movw	r2, #1055	@ 0x41f
 800965a:	493b      	ldr	r1, [pc, #236]	@ (8009748 <tcp_oos_insert_segment+0x104>)
 800965c:	483b      	ldr	r0, [pc, #236]	@ (800974c <tcp_oos_insert_segment+0x108>)
 800965e:	f005 ff7b 	bl	800f558 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	899b      	ldrh	r3, [r3, #12]
 8009668:	b29b      	uxth	r3, r3
 800966a:	4618      	mov	r0, r3
 800966c:	f7fb faa4 	bl	8004bb8 <lwip_htons>
 8009670:	4603      	mov	r3, r0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d028      	beq.n	80096ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800967c:	6838      	ldr	r0, [r7, #0]
 800967e:	f7fe f9b3 	bl	80079e8 <tcp_segs_free>
    next = NULL;
 8009682:	2300      	movs	r3, #0
 8009684:	603b      	str	r3, [r7, #0]
 8009686:	e056      	b.n	8009736 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	899b      	ldrh	r3, [r3, #12]
 800968e:	b29b      	uxth	r3, r3
 8009690:	4618      	mov	r0, r3
 8009692:	f7fb fa91 	bl	8004bb8 <lwip_htons>
 8009696:	4603      	mov	r3, r0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00d      	beq.n	80096be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	b29c      	uxth	r4, r3
 80096aa:	2001      	movs	r0, #1
 80096ac:	f7fb fa84 	bl	8004bb8 <lwip_htons>
 80096b0:	4603      	mov	r3, r0
 80096b2:	461a      	mov	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	4322      	orrs	r2, r4
 80096ba:	b292      	uxth	r2, r2
 80096bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f7fe f9a2 	bl	8007a12 <tcp_seg_free>
    while (next &&
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00e      	beq.n	80096f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	891b      	ldrh	r3, [r3, #8]
 80096d8:	461a      	mov	r2, r3
 80096da:	4b1d      	ldr	r3, [pc, #116]	@ (8009750 <tcp_oos_insert_segment+0x10c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	441a      	add	r2, r3
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	8909      	ldrh	r1, [r1, #8]
 80096ea:	440b      	add	r3, r1
 80096ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	daca      	bge.n	8009688 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d01e      	beq.n	8009736 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	891b      	ldrh	r3, [r3, #8]
 80096fc:	461a      	mov	r2, r3
 80096fe:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <tcp_oos_insert_segment+0x10c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	441a      	add	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800970c:	2b00      	cmp	r3, #0
 800970e:	dd12      	ble.n	8009736 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	b29a      	uxth	r2, r3
 8009718:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <tcp_oos_insert_segment+0x10c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	891b      	ldrh	r3, [r3, #8]
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7fc fb83 	bl	8005e3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	601a      	str	r2, [r3, #0]
}
 800973c:	bf00      	nop
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	bd90      	pop	{r4, r7, pc}
 8009744:	080119b8 	.word	0x080119b8
 8009748:	08011c78 	.word	0x08011c78
 800974c:	08011a04 	.word	0x08011a04
 8009750:	200087c0 	.word	0x200087c0

08009754 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009754:	b5b0      	push	{r4, r5, r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009762:	e03e      	b.n	80097e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	f7fc fd70 	bl	8006258 <pbuf_clen>
 8009778:	4603      	mov	r3, r0
 800977a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009782:	8a7a      	ldrh	r2, [r7, #18]
 8009784:	429a      	cmp	r2, r3
 8009786:	d906      	bls.n	8009796 <tcp_free_acked_segments+0x42>
 8009788:	4b2a      	ldr	r3, [pc, #168]	@ (8009834 <tcp_free_acked_segments+0xe0>)
 800978a:	f240 4257 	movw	r2, #1111	@ 0x457
 800978e:	492a      	ldr	r1, [pc, #168]	@ (8009838 <tcp_free_acked_segments+0xe4>)
 8009790:	482a      	ldr	r0, [pc, #168]	@ (800983c <tcp_free_acked_segments+0xe8>)
 8009792:	f005 fee1 	bl	800f558 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800979c:	8a7b      	ldrh	r3, [r7, #18]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	891a      	ldrh	r2, [r3, #8]
 80097ac:	4b24      	ldr	r3, [pc, #144]	@ (8009840 <tcp_free_acked_segments+0xec>)
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	4413      	add	r3, r2
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	4b22      	ldr	r3, [pc, #136]	@ (8009840 <tcp_free_acked_segments+0xec>)
 80097b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80097b8:	6978      	ldr	r0, [r7, #20]
 80097ba:	f7fe f92a 	bl	8007a12 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00c      	beq.n	80097e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <tcp_free_acked_segments+0x8e>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <tcp_free_acked_segments+0x8e>
 80097d4:	4b17      	ldr	r3, [pc, #92]	@ (8009834 <tcp_free_acked_segments+0xe0>)
 80097d6:	f240 4261 	movw	r2, #1121	@ 0x461
 80097da:	491a      	ldr	r1, [pc, #104]	@ (8009844 <tcp_free_acked_segments+0xf0>)
 80097dc:	4817      	ldr	r0, [pc, #92]	@ (800983c <tcp_free_acked_segments+0xe8>)
 80097de:	f005 febb 	bl	800f558 <iprintf>
  while (seg_list != NULL &&
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d020      	beq.n	800982a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fb f9f7 	bl	8004be2 <lwip_htonl>
 80097f4:	4604      	mov	r4, r0
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	891b      	ldrh	r3, [r3, #8]
 80097fa:	461d      	mov	r5, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	899b      	ldrh	r3, [r3, #12]
 8009802:	b29b      	uxth	r3, r3
 8009804:	4618      	mov	r0, r3
 8009806:	f7fb f9d7 	bl	8004bb8 <lwip_htons>
 800980a:	4603      	mov	r3, r0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <tcp_free_acked_segments+0xc6>
 8009816:	2301      	movs	r3, #1
 8009818:	e000      	b.n	800981c <tcp_free_acked_segments+0xc8>
 800981a:	2300      	movs	r3, #0
 800981c:	442b      	add	r3, r5
 800981e:	18e2      	adds	r2, r4, r3
 8009820:	4b09      	ldr	r3, [pc, #36]	@ (8009848 <tcp_free_acked_segments+0xf4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009826:	2b00      	cmp	r3, #0
 8009828:	dd9c      	ble.n	8009764 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800982a:	68bb      	ldr	r3, [r7, #8]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bdb0      	pop	{r4, r5, r7, pc}
 8009834:	080119b8 	.word	0x080119b8
 8009838:	08011ca0 	.word	0x08011ca0
 800983c:	08011a04 	.word	0x08011a04
 8009840:	200087c8 	.word	0x200087c8
 8009844:	08011cc8 	.word	0x08011cc8
 8009848:	200087c4 	.word	0x200087c4

0800984c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800984c:	b5b0      	push	{r4, r5, r7, lr}
 800984e:	b094      	sub	sp, #80	@ 0x50
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <tcp_receive+0x20>
 800985e:	4b91      	ldr	r3, [pc, #580]	@ (8009aa4 <tcp_receive+0x258>)
 8009860:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009864:	4990      	ldr	r1, [pc, #576]	@ (8009aa8 <tcp_receive+0x25c>)
 8009866:	4891      	ldr	r0, [pc, #580]	@ (8009aac <tcp_receive+0x260>)
 8009868:	f005 fe76 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7d1b      	ldrb	r3, [r3, #20]
 8009870:	2b03      	cmp	r3, #3
 8009872:	d806      	bhi.n	8009882 <tcp_receive+0x36>
 8009874:	4b8b      	ldr	r3, [pc, #556]	@ (8009aa4 <tcp_receive+0x258>)
 8009876:	f240 427c 	movw	r2, #1148	@ 0x47c
 800987a:	498d      	ldr	r1, [pc, #564]	@ (8009ab0 <tcp_receive+0x264>)
 800987c:	488b      	ldr	r0, [pc, #556]	@ (8009aac <tcp_receive+0x260>)
 800987e:	f005 fe6b 	bl	800f558 <iprintf>

  if (flags & TCP_ACK) {
 8009882:	4b8c      	ldr	r3, [pc, #560]	@ (8009ab4 <tcp_receive+0x268>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	f003 0310 	and.w	r3, r3, #16
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 8264 	beq.w	8009d58 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009896:	461a      	mov	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800989c:	4413      	add	r3, r2
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098a4:	4b84      	ldr	r3, [pc, #528]	@ (8009ab8 <tcp_receive+0x26c>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	db1b      	blt.n	80098e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098b2:	4b81      	ldr	r3, [pc, #516]	@ (8009ab8 <tcp_receive+0x26c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d106      	bne.n	80098c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80098be:	4b7f      	ldr	r3, [pc, #508]	@ (8009abc <tcp_receive+0x270>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	db0e      	blt.n	80098e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80098cc:	4b7b      	ldr	r3, [pc, #492]	@ (8009abc <tcp_receive+0x270>)
 80098ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d125      	bne.n	8009920 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80098d4:	4b7a      	ldr	r3, [pc, #488]	@ (8009ac0 <tcp_receive+0x274>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	89db      	ldrh	r3, [r3, #14]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d91c      	bls.n	8009920 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80098e6:	4b76      	ldr	r3, [pc, #472]	@ (8009ac0 <tcp_receive+0x274>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	89db      	ldrh	r3, [r3, #14]
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009900:	429a      	cmp	r2, r3
 8009902:	d205      	bcs.n	8009910 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009910:	4b69      	ldr	r3, [pc, #420]	@ (8009ab8 <tcp_receive+0x26c>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009918:	4b68      	ldr	r3, [pc, #416]	@ (8009abc <tcp_receive+0x270>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009920:	4b66      	ldr	r3, [pc, #408]	@ (8009abc <tcp_receive+0x270>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	dc58      	bgt.n	80099e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800992e:	4b65      	ldr	r3, [pc, #404]	@ (8009ac4 <tcp_receive+0x278>)
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d14b      	bne.n	80099ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009940:	4413      	add	r3, r2
 8009942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009944:	429a      	cmp	r2, r3
 8009946:	d142      	bne.n	80099ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800994e:	2b00      	cmp	r3, #0
 8009950:	db3d      	blt.n	80099ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009956:	4b59      	ldr	r3, [pc, #356]	@ (8009abc <tcp_receive+0x270>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d137      	bne.n	80099ce <tcp_receive+0x182>
              found_dupack = 1;
 800995e:	2301      	movs	r3, #1
 8009960:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009968:	2bff      	cmp	r3, #255	@ 0xff
 800996a:	d007      	beq.n	800997c <tcp_receive+0x130>
                ++pcb->dupacks;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009972:	3301      	adds	r3, #1
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009982:	2b03      	cmp	r3, #3
 8009984:	d91b      	bls.n	80099be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009990:	4413      	add	r3, r2
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800999a:	429a      	cmp	r2, r3
 800999c:	d30a      	bcc.n	80099b4 <tcp_receive+0x168>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099a8:	4413      	add	r3, r2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80099b2:	e004      	b.n	80099be <tcp_receive+0x172>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d902      	bls.n	80099ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f002 fb3f 	bl	800c04c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80099ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f040 8161 	bne.w	8009c98 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099de:	e15b      	b.n	8009c98 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099e0:	4b36      	ldr	r3, [pc, #216]	@ (8009abc <tcp_receive+0x270>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f2c0 814e 	blt.w	8009c8e <tcp_receive+0x442>
 80099f2:	4b32      	ldr	r3, [pc, #200]	@ (8009abc <tcp_receive+0x270>)
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f300 8146 	bgt.w	8009c8e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	8b5b      	ldrh	r3, [r3, #26]
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d010      	beq.n	8009a30 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8b5b      	ldrh	r3, [r3, #26]
 8009a12:	f023 0304 	bic.w	r3, r3, #4
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009a3e:	10db      	asrs	r3, r3, #3
 8009a40:	b21b      	sxth	r3, r3
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	b21a      	sxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009a58:	4b18      	ldr	r3, [pc, #96]	@ (8009abc <tcp_receive+0x270>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009a70:	4b12      	ldr	r3, [pc, #72]	@ (8009abc <tcp_receive+0x270>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7d1b      	ldrb	r3, [r3, #20]
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	f240 8097 	bls.w	8009bb0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d245      	bcs.n	8009b1e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	8b5b      	ldrh	r3, [r3, #26]
 8009a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d014      	beq.n	8009ac8 <tcp_receive+0x27c>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e013      	b.n	8009aca <tcp_receive+0x27e>
 8009aa2:	bf00      	nop
 8009aa4:	080119b8 	.word	0x080119b8
 8009aa8:	08011ce8 	.word	0x08011ce8
 8009aac:	08011a04 	.word	0x08011a04
 8009ab0:	08011d04 	.word	0x08011d04
 8009ab4:	200087cc 	.word	0x200087cc
 8009ab8:	200087c0 	.word	0x200087c0
 8009abc:	200087c4 	.word	0x200087c4
 8009ac0:	200087b0 	.word	0x200087b0
 8009ac4:	200087ca 	.word	0x200087ca
 8009ac8:	2302      	movs	r3, #2
 8009aca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009ace:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009ad8:	fb12 f303 	smulbb	r3, r2, r3
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	bf28      	it	cs
 8009ae4:	4613      	movcs	r3, r2
 8009ae6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009aee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009af0:	4413      	add	r3, r2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d309      	bcc.n	8009b12 <tcp_receive+0x2c6>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009b06:	4413      	add	r3, r2
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009b10:	e04e      	b.n	8009bb0 <tcp_receive+0x364>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009b1c:	e048      	b.n	8009bb0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009b24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009b26:	4413      	add	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d309      	bcc.n	8009b48 <tcp_receive+0x2fc>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009b3a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009b3c:	4413      	add	r3, r2
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009b46:	e004      	b.n	8009b52 <tcp_receive+0x306>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d326      	bcc.n	8009bb0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b82:	4413      	add	r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d30a      	bcc.n	8009ba6 <tcp_receive+0x35a>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b9a:	4413      	add	r3, r2
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009ba4:	e004      	b.n	8009bb0 <tcp_receive+0x364>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bb8:	4a98      	ldr	r2, [pc, #608]	@ (8009e1c <tcp_receive+0x5d0>)
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fdca 	bl	8009754 <tcp_free_acked_segments>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bce:	4a94      	ldr	r2, [pc, #592]	@ (8009e20 <tcp_receive+0x5d4>)
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fdbf 	bl	8009754 <tcp_free_acked_segments>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d104      	bne.n	8009bee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bea:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009bec:	e002      	b.n	8009bf4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009c10:	4b84      	ldr	r3, [pc, #528]	@ (8009e24 <tcp_receive+0x5d8>)
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	4413      	add	r3, r2
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	8b5b      	ldrh	r3, [r3, #26]
 8009c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d035      	beq.n	8009c96 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d118      	bne.n	8009c64 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00c      	beq.n	8009c54 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fa ffcb 	bl	8004be2 <lwip_htonl>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dc20      	bgt.n	8009c96 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8b5b      	ldrh	r3, [r3, #26]
 8009c58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c62:	e018      	b.n	8009c96 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fa ffb6 	bl	8004be2 <lwip_htonl>
 8009c76:	4603      	mov	r3, r0
 8009c78:	1ae3      	subs	r3, r4, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dc0b      	bgt.n	8009c96 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	8b5b      	ldrh	r3, [r3, #26]
 8009c82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c8c:	e003      	b.n	8009c96 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f002 fbc8 	bl	800c424 <tcp_send_empty_ack>
 8009c94:	e000      	b.n	8009c98 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c96:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d05b      	beq.n	8009d58 <tcp_receive+0x50c>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ca4:	4b60      	ldr	r3, [pc, #384]	@ (8009e28 <tcp_receive+0x5dc>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	da54      	bge.n	8009d58 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009cae:	4b5f      	ldr	r3, [pc, #380]	@ (8009e2c <tcp_receive+0x5e0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009cc2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009ccc:	10db      	asrs	r3, r3, #3
 8009cce:	b21b      	sxth	r3, r3
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009ce6:	4413      	add	r3, r2
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	b21a      	sxth	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009cf0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	da05      	bge.n	8009d04 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009cf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009cfc:	425b      	negs	r3, r3
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009d04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009d0e:	109b      	asrs	r3, r3, #2
 8009d10:	b21b      	sxth	r3, r3
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009d28:	4413      	add	r3, r2
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	b21a      	sxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009d38:	10db      	asrs	r3, r3, #3
 8009d3a:	b21b      	sxth	r3, r3
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4413      	add	r3, r2
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	b21a      	sxth	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009d58:	4b35      	ldr	r3, [pc, #212]	@ (8009e30 <tcp_receive+0x5e4>)
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 84df 	beq.w	800a720 <tcp_receive+0xed4>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	7d1b      	ldrb	r3, [r3, #20]
 8009d66:	2b06      	cmp	r3, #6
 8009d68:	f200 84da 	bhi.w	800a720 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d70:	4b30      	ldr	r3, [pc, #192]	@ (8009e34 <tcp_receive+0x5e8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	3b01      	subs	r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f2c0 808f 	blt.w	8009e9c <tcp_receive+0x650>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d82:	4b2b      	ldr	r3, [pc, #172]	@ (8009e30 <tcp_receive+0x5e4>)
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	4619      	mov	r1, r3
 8009d88:	4b2a      	ldr	r3, [pc, #168]	@ (8009e34 <tcp_receive+0x5e8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	440b      	add	r3, r1
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	3301      	adds	r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f300 8082 	bgt.w	8009e9c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009d98:	4b27      	ldr	r3, [pc, #156]	@ (8009e38 <tcp_receive+0x5ec>)
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009da2:	4b24      	ldr	r3, [pc, #144]	@ (8009e34 <tcp_receive+0x5e8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009daa:	4b23      	ldr	r3, [pc, #140]	@ (8009e38 <tcp_receive+0x5ec>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <tcp_receive+0x574>
 8009db2:	4b22      	ldr	r3, [pc, #136]	@ (8009e3c <tcp_receive+0x5f0>)
 8009db4:	f240 5294 	movw	r2, #1428	@ 0x594
 8009db8:	4921      	ldr	r1, [pc, #132]	@ (8009e40 <tcp_receive+0x5f4>)
 8009dba:	4822      	ldr	r0, [pc, #136]	@ (8009e44 <tcp_receive+0x5f8>)
 8009dbc:	f005 fbcc 	bl	800f558 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d906      	bls.n	8009dd8 <tcp_receive+0x58c>
 8009dca:	4b1c      	ldr	r3, [pc, #112]	@ (8009e3c <tcp_receive+0x5f0>)
 8009dcc:	f240 5295 	movw	r2, #1429	@ 0x595
 8009dd0:	491d      	ldr	r1, [pc, #116]	@ (8009e48 <tcp_receive+0x5fc>)
 8009dd2:	481c      	ldr	r0, [pc, #112]	@ (8009e44 <tcp_receive+0x5f8>)
 8009dd4:	f005 fbc0 	bl	800f558 <iprintf>
      off = (u16_t)off32;
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009dde:	4b16      	ldr	r3, [pc, #88]	@ (8009e38 <tcp_receive+0x5ec>)
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	891b      	ldrh	r3, [r3, #8]
 8009de4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d906      	bls.n	8009dfa <tcp_receive+0x5ae>
 8009dec:	4b13      	ldr	r3, [pc, #76]	@ (8009e3c <tcp_receive+0x5f0>)
 8009dee:	f240 5297 	movw	r2, #1431	@ 0x597
 8009df2:	4916      	ldr	r1, [pc, #88]	@ (8009e4c <tcp_receive+0x600>)
 8009df4:	4813      	ldr	r0, [pc, #76]	@ (8009e44 <tcp_receive+0x5f8>)
 8009df6:	f005 fbaf 	bl	800f558 <iprintf>
      inseg.len -= off;
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8009e38 <tcp_receive+0x5ec>)
 8009dfc:	891a      	ldrh	r2, [r3, #8]
 8009dfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	4b0c      	ldr	r3, [pc, #48]	@ (8009e38 <tcp_receive+0x5ec>)
 8009e08:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009e38 <tcp_receive+0x5ec>)
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	891a      	ldrh	r2, [r3, #8]
 8009e10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009e18:	e02a      	b.n	8009e70 <tcp_receive+0x624>
 8009e1a:	bf00      	nop
 8009e1c:	08011d20 	.word	0x08011d20
 8009e20:	08011d28 	.word	0x08011d28
 8009e24:	200087c8 	.word	0x200087c8
 8009e28:	200087c4 	.word	0x200087c4
 8009e2c:	20008788 	.word	0x20008788
 8009e30:	200087ca 	.word	0x200087ca
 8009e34:	200087c0 	.word	0x200087c0
 8009e38:	200087a0 	.word	0x200087a0
 8009e3c:	080119b8 	.word	0x080119b8
 8009e40:	08011d30 	.word	0x08011d30
 8009e44:	08011a04 	.word	0x08011a04
 8009e48:	08011d40 	.word	0x08011d40
 8009e4c:	08011d50 	.word	0x08011d50
        off -= p->len;
 8009e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e52:	895b      	ldrh	r3, [r3, #10]
 8009e54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e60:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009e62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e66:	2200      	movs	r2, #0
 8009e68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e72:	895b      	ldrh	r3, [r3, #10]
 8009e74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d8e9      	bhi.n	8009e50 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009e7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009e80:	4619      	mov	r1, r3
 8009e82:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009e84:	f7fc f8da 	bl	800603c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8c:	4a90      	ldr	r2, [pc, #576]	@ (800a0d0 <tcp_receive+0x884>)
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	4b90      	ldr	r3, [pc, #576]	@ (800a0d4 <tcp_receive+0x888>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	4a8e      	ldr	r2, [pc, #568]	@ (800a0d0 <tcp_receive+0x884>)
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e9a:	e00d      	b.n	8009eb8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009e9c:	4b8c      	ldr	r3, [pc, #560]	@ (800a0d0 <tcp_receive+0x884>)
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	da06      	bge.n	8009eb8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	8b5b      	ldrh	r3, [r3, #26]
 8009eae:	f043 0302 	orr.w	r3, r3, #2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009eb8:	4b85      	ldr	r3, [pc, #532]	@ (800a0d0 <tcp_receive+0x884>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f2c0 8427 	blt.w	800a716 <tcp_receive+0xeca>
 8009ec8:	4b81      	ldr	r3, [pc, #516]	@ (800a0d0 <tcp_receive+0x884>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009ed4:	440b      	add	r3, r1
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	3301      	adds	r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f300 841b 	bgt.w	800a716 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ee4:	4b7a      	ldr	r3, [pc, #488]	@ (800a0d0 <tcp_receive+0x884>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	f040 8298 	bne.w	800a41e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009eee:	4b79      	ldr	r3, [pc, #484]	@ (800a0d4 <tcp_receive+0x888>)
 8009ef0:	891c      	ldrh	r4, [r3, #8]
 8009ef2:	4b78      	ldr	r3, [pc, #480]	@ (800a0d4 <tcp_receive+0x888>)
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	899b      	ldrh	r3, [r3, #12]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fa fe5c 	bl	8004bb8 <lwip_htons>
 8009f00:	4603      	mov	r3, r0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	f003 0303 	and.w	r3, r3, #3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <tcp_receive+0x6c4>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <tcp_receive+0x6c6>
 8009f10:	2300      	movs	r3, #0
 8009f12:	4423      	add	r3, r4
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	4b70      	ldr	r3, [pc, #448]	@ (800a0d8 <tcp_receive+0x88c>)
 8009f18:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009f1e:	4b6e      	ldr	r3, [pc, #440]	@ (800a0d8 <tcp_receive+0x88c>)
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d274      	bcs.n	800a010 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f26:	4b6b      	ldr	r3, [pc, #428]	@ (800a0d4 <tcp_receive+0x888>)
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	899b      	ldrh	r3, [r3, #12]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fa fe42 	bl	8004bb8 <lwip_htons>
 8009f34:	4603      	mov	r3, r0
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01e      	beq.n	8009f7e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f40:	4b64      	ldr	r3, [pc, #400]	@ (800a0d4 <tcp_receive+0x888>)
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	899b      	ldrh	r3, [r3, #12]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	b21b      	sxth	r3, r3
 8009f4a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009f4e:	b21c      	sxth	r4, r3
 8009f50:	4b60      	ldr	r3, [pc, #384]	@ (800a0d4 <tcp_receive+0x888>)
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	899b      	ldrh	r3, [r3, #12]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fa fe2d 	bl	8004bb8 <lwip_htons>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7fa fe25 	bl	8004bb8 <lwip_htons>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	b21b      	sxth	r3, r3
 8009f72:	4323      	orrs	r3, r4
 8009f74:	b21a      	sxth	r2, r3
 8009f76:	4b57      	ldr	r3, [pc, #348]	@ (800a0d4 <tcp_receive+0x888>)
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	b292      	uxth	r2, r2
 8009f7c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009f82:	4b54      	ldr	r3, [pc, #336]	@ (800a0d4 <tcp_receive+0x888>)
 8009f84:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f86:	4b53      	ldr	r3, [pc, #332]	@ (800a0d4 <tcp_receive+0x888>)
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	899b      	ldrh	r3, [r3, #12]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fa fe12 	bl	8004bb8 <lwip_htons>
 8009f94:	4603      	mov	r3, r0
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d005      	beq.n	8009fac <tcp_receive+0x760>
            inseg.len -= 1;
 8009fa0:	4b4c      	ldr	r3, [pc, #304]	@ (800a0d4 <tcp_receive+0x888>)
 8009fa2:	891b      	ldrh	r3, [r3, #8]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	4b4a      	ldr	r3, [pc, #296]	@ (800a0d4 <tcp_receive+0x888>)
 8009faa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009fac:	4b49      	ldr	r3, [pc, #292]	@ (800a0d4 <tcp_receive+0x888>)
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4a48      	ldr	r2, [pc, #288]	@ (800a0d4 <tcp_receive+0x888>)
 8009fb2:	8912      	ldrh	r2, [r2, #8]
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fb ff40 	bl	8005e3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009fbc:	4b45      	ldr	r3, [pc, #276]	@ (800a0d4 <tcp_receive+0x888>)
 8009fbe:	891c      	ldrh	r4, [r3, #8]
 8009fc0:	4b44      	ldr	r3, [pc, #272]	@ (800a0d4 <tcp_receive+0x888>)
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	899b      	ldrh	r3, [r3, #12]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fa fdf5 	bl	8004bb8 <lwip_htons>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	f003 0303 	and.w	r3, r3, #3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <tcp_receive+0x792>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <tcp_receive+0x794>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	4423      	add	r3, r4
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	4b3c      	ldr	r3, [pc, #240]	@ (800a0d8 <tcp_receive+0x88c>)
 8009fe6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fe8:	4b3b      	ldr	r3, [pc, #236]	@ (800a0d8 <tcp_receive+0x88c>)
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
 8009fee:	4b38      	ldr	r3, [pc, #224]	@ (800a0d0 <tcp_receive+0x884>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	441a      	add	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009ffc:	440b      	add	r3, r1
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d006      	beq.n	800a010 <tcp_receive+0x7c4>
 800a002:	4b36      	ldr	r3, [pc, #216]	@ (800a0dc <tcp_receive+0x890>)
 800a004:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a008:	4935      	ldr	r1, [pc, #212]	@ (800a0e0 <tcp_receive+0x894>)
 800a00a:	4836      	ldr	r0, [pc, #216]	@ (800a0e4 <tcp_receive+0x898>)
 800a00c:	f005 faa4 	bl	800f558 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 80e6 	beq.w	800a1e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a01a:	4b2e      	ldr	r3, [pc, #184]	@ (800a0d4 <tcp_receive+0x888>)
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	899b      	ldrh	r3, [r3, #12]
 800a020:	b29b      	uxth	r3, r3
 800a022:	4618      	mov	r0, r3
 800a024:	f7fa fdc8 	bl	8004bb8 <lwip_htons>
 800a028:	4603      	mov	r3, r0
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d010      	beq.n	800a056 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a034:	e00a      	b.n	800a04c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a03a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7fd fce3 	bl	8007a12 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1f0      	bne.n	800a036 <tcp_receive+0x7ea>
 800a054:	e0c7      	b.n	800a1e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a05c:	e051      	b.n	800a102 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	899b      	ldrh	r3, [r3, #12]
 800a064:	b29b      	uxth	r3, r3
 800a066:	4618      	mov	r0, r3
 800a068:	f7fa fda6 	bl	8004bb8 <lwip_htons>
 800a06c:	4603      	mov	r3, r0
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b00      	cmp	r3, #0
 800a076:	d03c      	beq.n	800a0f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a078:	4b16      	ldr	r3, [pc, #88]	@ (800a0d4 <tcp_receive+0x888>)
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	899b      	ldrh	r3, [r3, #12]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4618      	mov	r0, r3
 800a082:	f7fa fd99 	bl	8004bb8 <lwip_htons>
 800a086:	4603      	mov	r3, r0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d12f      	bne.n	800a0f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a092:	4b10      	ldr	r3, [pc, #64]	@ (800a0d4 <tcp_receive+0x888>)
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	899b      	ldrh	r3, [r3, #12]
 800a098:	b29c      	uxth	r4, r3
 800a09a:	2001      	movs	r0, #1
 800a09c:	f7fa fd8c 	bl	8004bb8 <lwip_htons>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <tcp_receive+0x888>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	4322      	orrs	r2, r4
 800a0aa:	b292      	uxth	r2, r2
 800a0ac:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a0ae:	4b09      	ldr	r3, [pc, #36]	@ (800a0d4 <tcp_receive+0x888>)
 800a0b0:	891c      	ldrh	r4, [r3, #8]
 800a0b2:	4b08      	ldr	r3, [pc, #32]	@ (800a0d4 <tcp_receive+0x888>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	899b      	ldrh	r3, [r3, #12]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fa fd7c 	bl	8004bb8 <lwip_htons>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00d      	beq.n	800a0e8 <tcp_receive+0x89c>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e00c      	b.n	800a0ea <tcp_receive+0x89e>
 800a0d0:	200087c0 	.word	0x200087c0
 800a0d4:	200087a0 	.word	0x200087a0
 800a0d8:	200087ca 	.word	0x200087ca
 800a0dc:	080119b8 	.word	0x080119b8
 800a0e0:	08011d60 	.word	0x08011d60
 800a0e4:	08011a04 	.word	0x08011a04
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4423      	add	r3, r4
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	4b98      	ldr	r3, [pc, #608]	@ (800a350 <tcp_receive+0xb04>)
 800a0f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a0f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a0fc:	6938      	ldr	r0, [r7, #16]
 800a0fe:	f7fd fc88 	bl	8007a12 <tcp_seg_free>
            while (next &&
 800a102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00e      	beq.n	800a126 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a108:	4b91      	ldr	r3, [pc, #580]	@ (800a350 <tcp_receive+0xb04>)
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	4b91      	ldr	r3, [pc, #580]	@ (800a354 <tcp_receive+0xb08>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	441a      	add	r2, r3
 800a114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a11c:	8909      	ldrh	r1, [r1, #8]
 800a11e:	440b      	add	r3, r1
 800a120:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a122:	2b00      	cmp	r3, #0
 800a124:	da9b      	bge.n	800a05e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d059      	beq.n	800a1e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a12c:	4b88      	ldr	r3, [pc, #544]	@ (800a350 <tcp_receive+0xb04>)
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	4b88      	ldr	r3, [pc, #544]	@ (800a354 <tcp_receive+0xb08>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	441a      	add	r2, r3
 800a138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a140:	2b00      	cmp	r3, #0
 800a142:	dd4d      	ble.n	800a1e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	4b81      	ldr	r3, [pc, #516]	@ (800a354 <tcp_receive+0xb08>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	b29a      	uxth	r2, r3
 800a156:	4b80      	ldr	r3, [pc, #512]	@ (800a358 <tcp_receive+0xb0c>)
 800a158:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a15a:	4b7f      	ldr	r3, [pc, #508]	@ (800a358 <tcp_receive+0xb0c>)
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	899b      	ldrh	r3, [r3, #12]
 800a160:	b29b      	uxth	r3, r3
 800a162:	4618      	mov	r0, r3
 800a164:	f7fa fd28 	bl	8004bb8 <lwip_htons>
 800a168:	4603      	mov	r3, r0
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f003 0302 	and.w	r3, r3, #2
 800a170:	2b00      	cmp	r3, #0
 800a172:	d005      	beq.n	800a180 <tcp_receive+0x934>
                inseg.len -= 1;
 800a174:	4b78      	ldr	r3, [pc, #480]	@ (800a358 <tcp_receive+0xb0c>)
 800a176:	891b      	ldrh	r3, [r3, #8]
 800a178:	3b01      	subs	r3, #1
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	4b76      	ldr	r3, [pc, #472]	@ (800a358 <tcp_receive+0xb0c>)
 800a17e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a180:	4b75      	ldr	r3, [pc, #468]	@ (800a358 <tcp_receive+0xb0c>)
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	4a74      	ldr	r2, [pc, #464]	@ (800a358 <tcp_receive+0xb0c>)
 800a186:	8912      	ldrh	r2, [r2, #8]
 800a188:	4611      	mov	r1, r2
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fb fe56 	bl	8005e3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a190:	4b71      	ldr	r3, [pc, #452]	@ (800a358 <tcp_receive+0xb0c>)
 800a192:	891c      	ldrh	r4, [r3, #8]
 800a194:	4b70      	ldr	r3, [pc, #448]	@ (800a358 <tcp_receive+0xb0c>)
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	899b      	ldrh	r3, [r3, #12]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fa fd0b 	bl	8004bb8 <lwip_htons>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <tcp_receive+0x966>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e000      	b.n	800a1b4 <tcp_receive+0x968>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4423      	add	r3, r4
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	4b65      	ldr	r3, [pc, #404]	@ (800a350 <tcp_receive+0xb04>)
 800a1ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a1bc:	4b64      	ldr	r3, [pc, #400]	@ (800a350 <tcp_receive+0xb04>)
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4b64      	ldr	r3, [pc, #400]	@ (800a354 <tcp_receive+0xb08>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	441a      	add	r2, r3
 800a1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d006      	beq.n	800a1e0 <tcp_receive+0x994>
 800a1d2:	4b62      	ldr	r3, [pc, #392]	@ (800a35c <tcp_receive+0xb10>)
 800a1d4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a1d8:	4961      	ldr	r1, [pc, #388]	@ (800a360 <tcp_receive+0xb14>)
 800a1da:	4862      	ldr	r0, [pc, #392]	@ (800a364 <tcp_receive+0xb18>)
 800a1dc:	f005 f9bc 	bl	800f558 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a1e4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a1e6:	4b5a      	ldr	r3, [pc, #360]	@ (800a350 <tcp_receive+0xb04>)
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4b59      	ldr	r3, [pc, #356]	@ (800a354 <tcp_receive+0xb08>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	441a      	add	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a1fa:	4b55      	ldr	r3, [pc, #340]	@ (800a350 <tcp_receive+0xb04>)
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d206      	bcs.n	800a210 <tcp_receive+0x9c4>
 800a202:	4b56      	ldr	r3, [pc, #344]	@ (800a35c <tcp_receive+0xb10>)
 800a204:	f240 6207 	movw	r2, #1543	@ 0x607
 800a208:	4957      	ldr	r1, [pc, #348]	@ (800a368 <tcp_receive+0xb1c>)
 800a20a:	4856      	ldr	r0, [pc, #344]	@ (800a364 <tcp_receive+0xb18>)
 800a20c:	f005 f9a4 	bl	800f558 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a214:	4b4e      	ldr	r3, [pc, #312]	@ (800a350 <tcp_receive+0xb04>)
 800a216:	881b      	ldrh	r3, [r3, #0]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7fc fdb7 	bl	8006d94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a226:	4b4c      	ldr	r3, [pc, #304]	@ (800a358 <tcp_receive+0xb0c>)
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	891b      	ldrh	r3, [r3, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d006      	beq.n	800a23e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a230:	4b49      	ldr	r3, [pc, #292]	@ (800a358 <tcp_receive+0xb0c>)
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	4a4d      	ldr	r2, [pc, #308]	@ (800a36c <tcp_receive+0xb20>)
 800a236:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a238:	4b47      	ldr	r3, [pc, #284]	@ (800a358 <tcp_receive+0xb0c>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a23e:	4b46      	ldr	r3, [pc, #280]	@ (800a358 <tcp_receive+0xb0c>)
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	899b      	ldrh	r3, [r3, #12]
 800a244:	b29b      	uxth	r3, r3
 800a246:	4618      	mov	r0, r3
 800a248:	f7fa fcb6 	bl	8004bb8 <lwip_htons>
 800a24c:	4603      	mov	r3, r0
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 80b8 	beq.w	800a3ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a25a:	4b45      	ldr	r3, [pc, #276]	@ (800a370 <tcp_receive+0xb24>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f043 0320 	orr.w	r3, r3, #32
 800a262:	b2da      	uxtb	r2, r3
 800a264:	4b42      	ldr	r3, [pc, #264]	@ (800a370 <tcp_receive+0xb24>)
 800a266:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a268:	e0af      	b.n	800a3ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a26e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	4a36      	ldr	r2, [pc, #216]	@ (800a354 <tcp_receive+0xb08>)
 800a27a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	891b      	ldrh	r3, [r3, #8]
 800a280:	461c      	mov	r4, r3
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	899b      	ldrh	r3, [r3, #12]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fa fc94 	bl	8004bb8 <lwip_htons>
 800a290:	4603      	mov	r3, r0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f003 0303 	and.w	r3, r3, #3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <tcp_receive+0xa54>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <tcp_receive+0xa56>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	191a      	adds	r2, r3, r4
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a8:	441a      	add	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2b2:	461c      	mov	r4, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	891b      	ldrh	r3, [r3, #8]
 800a2b8:	461d      	mov	r5, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	899b      	ldrh	r3, [r3, #12]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fa fc78 	bl	8004bb8 <lwip_htons>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <tcp_receive+0xa8c>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e000      	b.n	800a2da <tcp_receive+0xa8e>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	442b      	add	r3, r5
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d206      	bcs.n	800a2ee <tcp_receive+0xaa2>
 800a2e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a35c <tcp_receive+0xb10>)
 800a2e2:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a2e6:	4923      	ldr	r1, [pc, #140]	@ (800a374 <tcp_receive+0xb28>)
 800a2e8:	481e      	ldr	r0, [pc, #120]	@ (800a364 <tcp_receive+0xb18>)
 800a2ea:	f005 f935 	bl	800f558 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	891b      	ldrh	r3, [r3, #8]
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	899b      	ldrh	r3, [r3, #12]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fa fc5b 	bl	8004bb8 <lwip_htons>
 800a302:	4603      	mov	r3, r0
 800a304:	b2db      	uxtb	r3, r3
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <tcp_receive+0xac6>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <tcp_receive+0xac8>
 800a312:	2300      	movs	r3, #0
 800a314:	1919      	adds	r1, r3, r4
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a31a:	b28b      	uxth	r3, r1
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	b29a      	uxth	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7fc fd35 	bl	8006d94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	891b      	ldrh	r3, [r3, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d028      	beq.n	800a386 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a334:	4b0d      	ldr	r3, [pc, #52]	@ (800a36c <tcp_receive+0xb20>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d01d      	beq.n	800a378 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a33c:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <tcp_receive+0xb20>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	4619      	mov	r1, r3
 800a346:	4610      	mov	r0, r2
 800a348:	f7fb ffc0 	bl	80062cc <pbuf_cat>
 800a34c:	e018      	b.n	800a380 <tcp_receive+0xb34>
 800a34e:	bf00      	nop
 800a350:	200087ca 	.word	0x200087ca
 800a354:	200087c0 	.word	0x200087c0
 800a358:	200087a0 	.word	0x200087a0
 800a35c:	080119b8 	.word	0x080119b8
 800a360:	08011d98 	.word	0x08011d98
 800a364:	08011a04 	.word	0x08011a04
 800a368:	08011dd4 	.word	0x08011dd4
 800a36c:	200087d0 	.word	0x200087d0
 800a370:	200087cd 	.word	0x200087cd
 800a374:	08011df4 	.word	0x08011df4
            } else {
              recv_data = cseg->p;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	4a70      	ldr	r2, [pc, #448]	@ (800a540 <tcp_receive+0xcf4>)
 800a37e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	899b      	ldrh	r3, [r3, #12]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fa fc12 	bl	8004bb8 <lwip_htons>
 800a394:	4603      	mov	r3, r0
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00d      	beq.n	800a3bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a3a0:	4b68      	ldr	r3, [pc, #416]	@ (800a544 <tcp_receive+0xcf8>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f043 0320 	orr.w	r3, r3, #32
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	4b66      	ldr	r3, [pc, #408]	@ (800a544 <tcp_receive+0xcf8>)
 800a3ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	7d1b      	ldrb	r3, [r3, #20]
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d102      	bne.n	800a3bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2207      	movs	r2, #7
 800a3ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a3c4:	68b8      	ldr	r0, [r7, #8]
 800a3c6:	f7fd fb24 	bl	8007a12 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d008      	beq.n	800a3e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	f43f af43 	beq.w	800a26a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	8b5b      	ldrh	r3, [r3, #26]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00e      	beq.n	800a40e <tcp_receive+0xbc2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	8b5b      	ldrh	r3, [r3, #26]
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	835a      	strh	r2, [r3, #26]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	8b5b      	ldrh	r3, [r3, #26]
 800a402:	f043 0302 	orr.w	r3, r3, #2
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a40c:	e187      	b.n	800a71e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	8b5b      	ldrh	r3, [r3, #26]
 800a412:	f043 0301 	orr.w	r3, r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a41c:	e17f      	b.n	800a71e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a426:	4848      	ldr	r0, [pc, #288]	@ (800a548 <tcp_receive+0xcfc>)
 800a428:	f7fd fb0c 	bl	8007a44 <tcp_seg_copy>
 800a42c:	4602      	mov	r2, r0
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	675a      	str	r2, [r3, #116]	@ 0x74
 800a432:	e16c      	b.n	800a70e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a434:	2300      	movs	r3, #0
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a43c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a43e:	e156      	b.n	800a6ee <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	4b41      	ldr	r3, [pc, #260]	@ (800a54c <tcp_receive+0xd00>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d11d      	bne.n	800a48a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a44e:	4b3e      	ldr	r3, [pc, #248]	@ (800a548 <tcp_receive+0xcfc>)
 800a450:	891a      	ldrh	r2, [r3, #8]
 800a452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a454:	891b      	ldrh	r3, [r3, #8]
 800a456:	429a      	cmp	r2, r3
 800a458:	f240 814e 	bls.w	800a6f8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a45c:	483a      	ldr	r0, [pc, #232]	@ (800a548 <tcp_receive+0xcfc>)
 800a45e:	f7fd faf1 	bl	8007a44 <tcp_seg_copy>
 800a462:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8148 	beq.w	800a6fc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	601a      	str	r2, [r3, #0]
 800a478:	e002      	b.n	800a480 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a480:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a482:	6978      	ldr	r0, [r7, #20]
 800a484:	f7ff f8de 	bl	8009644 <tcp_oos_insert_segment>
                }
                break;
 800a488:	e138      	b.n	800a6fc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d117      	bne.n	800a4c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a490:	4b2e      	ldr	r3, [pc, #184]	@ (800a54c <tcp_receive+0xd00>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	da57      	bge.n	800a550 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4a0:	4829      	ldr	r0, [pc, #164]	@ (800a548 <tcp_receive+0xcfc>)
 800a4a2:	f7fd facf 	bl	8007a44 <tcp_seg_copy>
 800a4a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 8128 	beq.w	800a700 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a4b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a4b8:	69b8      	ldr	r0, [r7, #24]
 800a4ba:	f7ff f8c3 	bl	8009644 <tcp_oos_insert_segment>
                  }
                  break;
 800a4be:	e11f      	b.n	800a700 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a4c0:	4b22      	ldr	r3, [pc, #136]	@ (800a54c <tcp_receive+0xd00>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	db3e      	blt.n	800a550 <tcp_receive+0xd04>
 800a4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a54c <tcp_receive+0xd00>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	3301      	adds	r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dc35      	bgt.n	800a550 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4e4:	4818      	ldr	r0, [pc, #96]	@ (800a548 <tcp_receive+0xcfc>)
 800a4e6:	f7fd faad 	bl	8007a44 <tcp_seg_copy>
 800a4ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f000 8108 	beq.w	800a704 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4fc:	8912      	ldrh	r2, [r2, #8]
 800a4fe:	441a      	add	r2, r3
 800a500:	4b12      	ldr	r3, [pc, #72]	@ (800a54c <tcp_receive+0xd00>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	dd12      	ble.n	800a530 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a50a:	4b10      	ldr	r3, [pc, #64]	@ (800a54c <tcp_receive+0xd00>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	b29a      	uxth	r2, r3
 800a510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	b29b      	uxth	r3, r3
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a526:	891b      	ldrh	r3, [r3, #8]
 800a528:	4619      	mov	r1, r3
 800a52a:	4610      	mov	r0, r2
 800a52c:	f7fb fc86 	bl	8005e3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a532:	69fa      	ldr	r2, [r7, #28]
 800a534:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a536:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a538:	69f8      	ldr	r0, [r7, #28]
 800a53a:	f7ff f883 	bl	8009644 <tcp_oos_insert_segment>
                  }
                  break;
 800a53e:	e0e1      	b.n	800a704 <tcp_receive+0xeb8>
 800a540:	200087d0 	.word	0x200087d0
 800a544:	200087cd 	.word	0x200087cd
 800a548:	200087a0 	.word	0x200087a0
 800a54c:	200087c0 	.word	0x200087c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f040 80c5 	bne.w	800a6e8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a55e:	4b7f      	ldr	r3, [pc, #508]	@ (800a75c <tcp_receive+0xf10>)
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f340 80bc 	ble.w	800a6e8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	899b      	ldrh	r3, [r3, #12]
 800a576:	b29b      	uxth	r3, r3
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fa fb1d 	bl	8004bb8 <lwip_htons>
 800a57e:	4603      	mov	r3, r0
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	f040 80be 	bne.w	800a708 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a58c:	4874      	ldr	r0, [pc, #464]	@ (800a760 <tcp_receive+0xf14>)
 800a58e:	f7fd fa59 	bl	8007a44 <tcp_seg_copy>
 800a592:	4602      	mov	r2, r0
 800a594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a596:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 80b5 	beq.w	800a70c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5aa:	8912      	ldrh	r2, [r2, #8]
 800a5ac:	441a      	add	r2, r3
 800a5ae:	4b6b      	ldr	r3, [pc, #428]	@ (800a75c <tcp_receive+0xf10>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dd12      	ble.n	800a5de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a5b8:	4b68      	ldr	r3, [pc, #416]	@ (800a75c <tcp_receive+0xf10>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d4:	891b      	ldrh	r3, [r3, #8]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7fb fc2f 	bl	8005e3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a5de:	4b61      	ldr	r3, [pc, #388]	@ (800a764 <tcp_receive+0xf18>)
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	4b5d      	ldr	r3, [pc, #372]	@ (800a75c <tcp_receive+0xf10>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	441a      	add	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a5f2:	440b      	add	r3, r1
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f340 8088 	ble.w	800a70c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	899b      	ldrh	r3, [r3, #12]
 800a604:	b29b      	uxth	r3, r3
 800a606:	4618      	mov	r0, r3
 800a608:	f7fa fad6 	bl	8004bb8 <lwip_htons>
 800a60c:	4603      	mov	r3, r0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d021      	beq.n	800a65c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	899b      	ldrh	r3, [r3, #12]
 800a620:	b29b      	uxth	r3, r3
 800a622:	b21b      	sxth	r3, r3
 800a624:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a628:	b21c      	sxth	r4, r3
 800a62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	899b      	ldrh	r3, [r3, #12]
 800a632:	b29b      	uxth	r3, r3
 800a634:	4618      	mov	r0, r3
 800a636:	f7fa fabf 	bl	8004bb8 <lwip_htons>
 800a63a:	4603      	mov	r3, r0
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a642:	b29b      	uxth	r3, r3
 800a644:	4618      	mov	r0, r3
 800a646:	f7fa fab7 	bl	8004bb8 <lwip_htons>
 800a64a:	4603      	mov	r3, r0
 800a64c:	b21b      	sxth	r3, r3
 800a64e:	4323      	orrs	r3, r4
 800a650:	b21a      	sxth	r2, r3
 800a652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	b292      	uxth	r2, r2
 800a65a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a660:	b29a      	uxth	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a666:	4413      	add	r3, r2
 800a668:	b299      	uxth	r1, r3
 800a66a:	4b3c      	ldr	r3, [pc, #240]	@ (800a75c <tcp_receive+0xf10>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	b29a      	uxth	r2, r3
 800a670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	1a8a      	subs	r2, r1, r2
 800a676:	b292      	uxth	r2, r2
 800a678:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	891b      	ldrh	r3, [r3, #8]
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7fb fbd7 	bl	8005e3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	891c      	ldrh	r4, [r3, #8]
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	899b      	ldrh	r3, [r3, #12]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fa fa8a 	bl	8004bb8 <lwip_htons>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	f003 0303 	and.w	r3, r3, #3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <tcp_receive+0xe68>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e000      	b.n	800a6b6 <tcp_receive+0xe6a>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4423      	add	r3, r4
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a764 <tcp_receive+0xf18>)
 800a6bc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6be:	4b29      	ldr	r3, [pc, #164]	@ (800a764 <tcp_receive+0xf18>)
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4b25      	ldr	r3, [pc, #148]	@ (800a75c <tcp_receive+0xf10>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	441a      	add	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a6d2:	440b      	add	r3, r1
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d019      	beq.n	800a70c <tcp_receive+0xec0>
 800a6d8:	4b23      	ldr	r3, [pc, #140]	@ (800a768 <tcp_receive+0xf1c>)
 800a6da:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a6de:	4923      	ldr	r1, [pc, #140]	@ (800a76c <tcp_receive+0xf20>)
 800a6e0:	4823      	ldr	r0, [pc, #140]	@ (800a770 <tcp_receive+0xf24>)
 800a6e2:	f004 ff39 	bl	800f558 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a6e6:	e011      	b.n	800a70c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f47f aea5 	bne.w	800a440 <tcp_receive+0xbf4>
 800a6f6:	e00a      	b.n	800a70e <tcp_receive+0xec2>
                break;
 800a6f8:	bf00      	nop
 800a6fa:	e008      	b.n	800a70e <tcp_receive+0xec2>
                break;
 800a6fc:	bf00      	nop
 800a6fe:	e006      	b.n	800a70e <tcp_receive+0xec2>
                  break;
 800a700:	bf00      	nop
 800a702:	e004      	b.n	800a70e <tcp_receive+0xec2>
                  break;
 800a704:	bf00      	nop
 800a706:	e002      	b.n	800a70e <tcp_receive+0xec2>
                  break;
 800a708:	bf00      	nop
 800a70a:	e000      	b.n	800a70e <tcp_receive+0xec2>
                break;
 800a70c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 fe88 	bl	800c424 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a714:	e003      	b.n	800a71e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f001 fe84 	bl	800c424 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a71c:	e01a      	b.n	800a754 <tcp_receive+0xf08>
 800a71e:	e019      	b.n	800a754 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a720:	4b0e      	ldr	r3, [pc, #56]	@ (800a75c <tcp_receive+0xf10>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	db0a      	blt.n	800a744 <tcp_receive+0xef8>
 800a72e:	4b0b      	ldr	r3, [pc, #44]	@ (800a75c <tcp_receive+0xf10>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a73a:	440b      	add	r3, r1
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	3301      	adds	r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	dd07      	ble.n	800a754 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	8b5b      	ldrh	r3, [r3, #26]
 800a748:	f043 0302 	orr.w	r3, r3, #2
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a752:	e7ff      	b.n	800a754 <tcp_receive+0xf08>
 800a754:	bf00      	nop
 800a756:	3750      	adds	r7, #80	@ 0x50
 800a758:	46bd      	mov	sp, r7
 800a75a:	bdb0      	pop	{r4, r5, r7, pc}
 800a75c:	200087c0 	.word	0x200087c0
 800a760:	200087a0 	.word	0x200087a0
 800a764:	200087ca 	.word	0x200087ca
 800a768:	080119b8 	.word	0x080119b8
 800a76c:	08011d60 	.word	0x08011d60
 800a770:	08011a04 	.word	0x08011a04

0800a774 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a77a:	4b15      	ldr	r3, [pc, #84]	@ (800a7d0 <tcp_get_next_optbyte+0x5c>)
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	b291      	uxth	r1, r2
 800a782:	4a13      	ldr	r2, [pc, #76]	@ (800a7d0 <tcp_get_next_optbyte+0x5c>)
 800a784:	8011      	strh	r1, [r2, #0]
 800a786:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a788:	4b12      	ldr	r3, [pc, #72]	@ (800a7d4 <tcp_get_next_optbyte+0x60>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d004      	beq.n	800a79a <tcp_get_next_optbyte+0x26>
 800a790:	4b11      	ldr	r3, [pc, #68]	@ (800a7d8 <tcp_get_next_optbyte+0x64>)
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	88fa      	ldrh	r2, [r7, #6]
 800a796:	429a      	cmp	r2, r3
 800a798:	d208      	bcs.n	800a7ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a79a:	4b10      	ldr	r3, [pc, #64]	@ (800a7dc <tcp_get_next_optbyte+0x68>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3314      	adds	r3, #20
 800a7a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	e00b      	b.n	800a7c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a7ac:	88fb      	ldrh	r3, [r7, #6]
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	4b09      	ldr	r3, [pc, #36]	@ (800a7d8 <tcp_get_next_optbyte+0x64>)
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a7ba:	4b06      	ldr	r3, [pc, #24]	@ (800a7d4 <tcp_get_next_optbyte+0x60>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	797b      	ldrb	r3, [r7, #5]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	200087bc 	.word	0x200087bc
 800a7d4:	200087b8 	.word	0x200087b8
 800a7d8:	200087b6 	.word	0x200087b6
 800a7dc:	200087b0 	.word	0x200087b0

0800a7e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <tcp_parseopt+0x1c>
 800a7ee:	4b32      	ldr	r3, [pc, #200]	@ (800a8b8 <tcp_parseopt+0xd8>)
 800a7f0:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a7f4:	4931      	ldr	r1, [pc, #196]	@ (800a8bc <tcp_parseopt+0xdc>)
 800a7f6:	4832      	ldr	r0, [pc, #200]	@ (800a8c0 <tcp_parseopt+0xe0>)
 800a7f8:	f004 feae 	bl	800f558 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a7fc:	4b31      	ldr	r3, [pc, #196]	@ (800a8c4 <tcp_parseopt+0xe4>)
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d056      	beq.n	800a8b2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a804:	4b30      	ldr	r3, [pc, #192]	@ (800a8c8 <tcp_parseopt+0xe8>)
 800a806:	2200      	movs	r2, #0
 800a808:	801a      	strh	r2, [r3, #0]
 800a80a:	e046      	b.n	800a89a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a80c:	f7ff ffb2 	bl	800a774 <tcp_get_next_optbyte>
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d006      	beq.n	800a828 <tcp_parseopt+0x48>
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	dc2a      	bgt.n	800a874 <tcp_parseopt+0x94>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d042      	beq.n	800a8a8 <tcp_parseopt+0xc8>
 800a822:	2b01      	cmp	r3, #1
 800a824:	d038      	beq.n	800a898 <tcp_parseopt+0xb8>
 800a826:	e025      	b.n	800a874 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a828:	f7ff ffa4 	bl	800a774 <tcp_get_next_optbyte>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d13c      	bne.n	800a8ac <tcp_parseopt+0xcc>
 800a832:	4b25      	ldr	r3, [pc, #148]	@ (800a8c8 <tcp_parseopt+0xe8>)
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	3301      	adds	r3, #1
 800a838:	4a22      	ldr	r2, [pc, #136]	@ (800a8c4 <tcp_parseopt+0xe4>)
 800a83a:	8812      	ldrh	r2, [r2, #0]
 800a83c:	4293      	cmp	r3, r2
 800a83e:	da35      	bge.n	800a8ac <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a840:	f7ff ff98 	bl	800a774 <tcp_get_next_optbyte>
 800a844:	4603      	mov	r3, r0
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a84a:	f7ff ff93 	bl	800a774 <tcp_get_next_optbyte>
 800a84e:	4603      	mov	r3, r0
 800a850:	461a      	mov	r2, r3
 800a852:	89bb      	ldrh	r3, [r7, #12]
 800a854:	4313      	orrs	r3, r2
 800a856:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a858:	89bb      	ldrh	r3, [r7, #12]
 800a85a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a85e:	d804      	bhi.n	800a86a <tcp_parseopt+0x8a>
 800a860:	89bb      	ldrh	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <tcp_parseopt+0x8a>
 800a866:	89ba      	ldrh	r2, [r7, #12]
 800a868:	e001      	b.n	800a86e <tcp_parseopt+0x8e>
 800a86a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800a872:	e012      	b.n	800a89a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a874:	f7ff ff7e 	bl	800a774 <tcp_get_next_optbyte>
 800a878:	4603      	mov	r3, r0
 800a87a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a87c:	7afb      	ldrb	r3, [r7, #11]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d916      	bls.n	800a8b0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a882:	7afb      	ldrb	r3, [r7, #11]
 800a884:	b29a      	uxth	r2, r3
 800a886:	4b10      	ldr	r3, [pc, #64]	@ (800a8c8 <tcp_parseopt+0xe8>)
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	4413      	add	r3, r2
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	3b02      	subs	r3, #2
 800a890:	b29a      	uxth	r2, r3
 800a892:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c8 <tcp_parseopt+0xe8>)
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	e000      	b.n	800a89a <tcp_parseopt+0xba>
          break;
 800a898:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a89a:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c8 <tcp_parseopt+0xe8>)
 800a89c:	881a      	ldrh	r2, [r3, #0]
 800a89e:	4b09      	ldr	r3, [pc, #36]	@ (800a8c4 <tcp_parseopt+0xe4>)
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d3b2      	bcc.n	800a80c <tcp_parseopt+0x2c>
 800a8a6:	e004      	b.n	800a8b2 <tcp_parseopt+0xd2>
          return;
 800a8a8:	bf00      	nop
 800a8aa:	e002      	b.n	800a8b2 <tcp_parseopt+0xd2>
            return;
 800a8ac:	bf00      	nop
 800a8ae:	e000      	b.n	800a8b2 <tcp_parseopt+0xd2>
            return;
 800a8b0:	bf00      	nop
      }
    }
  }
}
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	080119b8 	.word	0x080119b8
 800a8bc:	08011e1c 	.word	0x08011e1c
 800a8c0:	08011a04 	.word	0x08011a04
 800a8c4:	200087b4 	.word	0x200087b4
 800a8c8:	200087bc 	.word	0x200087bc

0800a8cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a8d0:	4b05      	ldr	r3, [pc, #20]	@ (800a8e8 <tcp_trigger_input_pcb_close+0x1c>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f043 0310 	orr.w	r3, r3, #16
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	4b03      	ldr	r3, [pc, #12]	@ (800a8e8 <tcp_trigger_input_pcb_close+0x1c>)
 800a8dc:	701a      	strb	r2, [r3, #0]
}
 800a8de:	bf00      	nop
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	200087cd 	.word	0x200087cd

0800a8ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <tcp_route+0x28>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	7a1b      	ldrb	r3, [r3, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d006      	beq.n	800a914 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	7a1b      	ldrb	r3, [r3, #8]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fb f8bc 	bl	8005a88 <netif_get_by_index>
 800a910:	4603      	mov	r3, r0
 800a912:	e003      	b.n	800a91c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f003 faa3 	bl	800de60 <ip4_route>
 800a91a:	4603      	mov	r3, r0
  }
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a924:	b590      	push	{r4, r7, lr}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	603b      	str	r3, [r7, #0]
 800a930:	4613      	mov	r3, r2
 800a932:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d105      	bne.n	800a946 <tcp_create_segment+0x22>
 800a93a:	4b43      	ldr	r3, [pc, #268]	@ (800aa48 <tcp_create_segment+0x124>)
 800a93c:	22a3      	movs	r2, #163	@ 0xa3
 800a93e:	4943      	ldr	r1, [pc, #268]	@ (800aa4c <tcp_create_segment+0x128>)
 800a940:	4843      	ldr	r0, [pc, #268]	@ (800aa50 <tcp_create_segment+0x12c>)
 800a942:	f004 fe09 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d105      	bne.n	800a958 <tcp_create_segment+0x34>
 800a94c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa48 <tcp_create_segment+0x124>)
 800a94e:	22a4      	movs	r2, #164	@ 0xa4
 800a950:	4940      	ldr	r1, [pc, #256]	@ (800aa54 <tcp_create_segment+0x130>)
 800a952:	483f      	ldr	r0, [pc, #252]	@ (800aa50 <tcp_create_segment+0x12c>)
 800a954:	f004 fe00 	bl	800f558 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a958:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a966:	2003      	movs	r0, #3
 800a968:	f7fa fd9e 	bl	80054a8 <memp_malloc>
 800a96c:	6138      	str	r0, [r7, #16]
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a974:	68b8      	ldr	r0, [r7, #8]
 800a976:	f7fb fbe7 	bl	8006148 <pbuf_free>
    return NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e060      	b.n	800aa40 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a984:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	891a      	ldrh	r2, [r3, #8]
 800a996:	7dfb      	ldrb	r3, [r7, #23]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d205      	bcs.n	800a9aa <tcp_create_segment+0x86>
 800a99e:	4b2a      	ldr	r3, [pc, #168]	@ (800aa48 <tcp_create_segment+0x124>)
 800a9a0:	22b0      	movs	r2, #176	@ 0xb0
 800a9a2:	492d      	ldr	r1, [pc, #180]	@ (800aa58 <tcp_create_segment+0x134>)
 800a9a4:	482a      	ldr	r0, [pc, #168]	@ (800aa50 <tcp_create_segment+0x12c>)
 800a9a6:	f004 fdd7 	bl	800f558 <iprintf>
  seg->len = p->tot_len - optlen;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	891a      	ldrh	r2, [r3, #8]
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a9ba:	2114      	movs	r1, #20
 800a9bc:	68b8      	ldr	r0, [r7, #8]
 800a9be:	f7fb fb2d 	bl	800601c <pbuf_add_header>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a9c8:	6938      	ldr	r0, [r7, #16]
 800a9ca:	f7fd f822 	bl	8007a12 <tcp_seg_free>
    return NULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e036      	b.n	800aa40 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	8ada      	ldrh	r2, [r3, #22]
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	68dc      	ldr	r4, [r3, #12]
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	f7fa f8e7 	bl	8004bb8 <lwip_htons>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	8b1a      	ldrh	r2, [r3, #24]
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	68dc      	ldr	r4, [r3, #12]
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f7fa f8de 	bl	8004bb8 <lwip_htons>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	68dc      	ldr	r4, [r3, #12]
 800aa04:	6838      	ldr	r0, [r7, #0]
 800aa06:	f7fa f8ec 	bl	8004be2 <lwip_htonl>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	089b      	lsrs	r3, r3, #2
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	3305      	adds	r3, #5
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	031b      	lsls	r3, r3, #12
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	4313      	orrs	r3, r2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	68dc      	ldr	r4, [r3, #12]
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f7fa f8c5 	bl	8004bb8 <lwip_htons>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	749a      	strb	r2, [r3, #18]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	74da      	strb	r2, [r3, #19]
  return seg;
 800aa3e:	693b      	ldr	r3, [r7, #16]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	371c      	adds	r7, #28
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd90      	pop	{r4, r7, pc}
 800aa48:	08011e38 	.word	0x08011e38
 800aa4c:	08011e6c 	.word	0x08011e6c
 800aa50:	08011e8c 	.word	0x08011e8c
 800aa54:	08011eb4 	.word	0x08011eb4
 800aa58:	08011ed8 	.word	0x08011ed8

0800aa5c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	81bb      	strh	r3, [r7, #12]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800aa70:	89bb      	ldrh	r3, [r7, #12]
 800aa72:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d105      	bne.n	800aa86 <tcp_pbuf_prealloc+0x2a>
 800aa7a:	4b30      	ldr	r3, [pc, #192]	@ (800ab3c <tcp_pbuf_prealloc+0xe0>)
 800aa7c:	22e8      	movs	r2, #232	@ 0xe8
 800aa7e:	4930      	ldr	r1, [pc, #192]	@ (800ab40 <tcp_pbuf_prealloc+0xe4>)
 800aa80:	4830      	ldr	r0, [pc, #192]	@ (800ab44 <tcp_pbuf_prealloc+0xe8>)
 800aa82:	f004 fd69 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <tcp_pbuf_prealloc+0x3c>
 800aa8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab3c <tcp_pbuf_prealloc+0xe0>)
 800aa8e:	22e9      	movs	r2, #233	@ 0xe9
 800aa90:	492d      	ldr	r1, [pc, #180]	@ (800ab48 <tcp_pbuf_prealloc+0xec>)
 800aa92:	482c      	ldr	r0, [pc, #176]	@ (800ab44 <tcp_pbuf_prealloc+0xe8>)
 800aa94:	f004 fd60 	bl	800f558 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800aa98:	89ba      	ldrh	r2, [r7, #12]
 800aa9a:	897b      	ldrh	r3, [r7, #10]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d221      	bcs.n	800aae4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aaa0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d111      	bne.n	800aad0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	8b5b      	ldrh	r3, [r3, #26]
 800aab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d115      	bne.n	800aae4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800aab8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d009      	beq.n	800aae4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aad0:	89bb      	ldrh	r3, [r7, #12]
 800aad2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800aad6:	f023 0203 	bic.w	r2, r3, #3
 800aada:	897b      	ldrh	r3, [r7, #10]
 800aadc:	4293      	cmp	r3, r2
 800aade:	bf28      	it	cs
 800aae0:	4613      	movcs	r3, r2
 800aae2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800aae4:	8af9      	ldrh	r1, [r7, #22]
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fb f847 	bl	8005b80 <pbuf_alloc>
 800aaf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e019      	b.n	800ab32 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d006      	beq.n	800ab14 <tcp_pbuf_prealloc+0xb8>
 800ab06:	4b0d      	ldr	r3, [pc, #52]	@ (800ab3c <tcp_pbuf_prealloc+0xe0>)
 800ab08:	f240 120b 	movw	r2, #267	@ 0x10b
 800ab0c:	490f      	ldr	r1, [pc, #60]	@ (800ab4c <tcp_pbuf_prealloc+0xf0>)
 800ab0e:	480d      	ldr	r0, [pc, #52]	@ (800ab44 <tcp_pbuf_prealloc+0xe8>)
 800ab10:	f004 fd22 	bl	800f558 <iprintf>
  *oversize = p->len - length;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	895a      	ldrh	r2, [r3, #10]
 800ab18:	89bb      	ldrh	r3, [r7, #12]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	89ba      	ldrh	r2, [r7, #12]
 800ab26:	811a      	strh	r2, [r3, #8]
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	891a      	ldrh	r2, [r3, #8]
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	815a      	strh	r2, [r3, #10]
  return p;
 800ab30:	693b      	ldr	r3, [r7, #16]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	08011e38 	.word	0x08011e38
 800ab40:	08011ef0 	.word	0x08011ef0
 800ab44:	08011e8c 	.word	0x08011e8c
 800ab48:	08011f14 	.word	0x08011f14
 800ab4c:	08011f34 	.word	0x08011f34

0800ab50 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <tcp_write_checks+0x20>
 800ab62:	4b33      	ldr	r3, [pc, #204]	@ (800ac30 <tcp_write_checks+0xe0>)
 800ab64:	f240 1233 	movw	r2, #307	@ 0x133
 800ab68:	4932      	ldr	r1, [pc, #200]	@ (800ac34 <tcp_write_checks+0xe4>)
 800ab6a:	4833      	ldr	r0, [pc, #204]	@ (800ac38 <tcp_write_checks+0xe8>)
 800ab6c:	f004 fcf4 	bl	800f558 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	7d1b      	ldrb	r3, [r3, #20]
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	d00e      	beq.n	800ab96 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ab7c:	2b07      	cmp	r3, #7
 800ab7e:	d00a      	beq.n	800ab96 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d006      	beq.n	800ab96 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d002      	beq.n	800ab96 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ab90:	f06f 030a 	mvn.w	r3, #10
 800ab94:	e048      	b.n	800ac28 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ab96:	887b      	ldrh	r3, [r7, #2]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <tcp_write_checks+0x50>
    return ERR_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	e043      	b.n	800ac28 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800aba6:	887a      	ldrh	r2, [r7, #2]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d909      	bls.n	800abc0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8b5b      	ldrh	r3, [r3, #26]
 800abb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800abba:	f04f 33ff 	mov.w	r3, #4294967295
 800abbe:	e033      	b.n	800ac28 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	d909      	bls.n	800abde <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	8b5b      	ldrh	r3, [r3, #26]
 800abce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800abd8:	f04f 33ff 	mov.w	r3, #4294967295
 800abdc:	e024      	b.n	800ac28 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00f      	beq.n	800ac08 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abec:	2b00      	cmp	r3, #0
 800abee:	d11a      	bne.n	800ac26 <tcp_write_checks+0xd6>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d116      	bne.n	800ac26 <tcp_write_checks+0xd6>
 800abf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac30 <tcp_write_checks+0xe0>)
 800abfa:	f240 1255 	movw	r2, #341	@ 0x155
 800abfe:	490f      	ldr	r1, [pc, #60]	@ (800ac3c <tcp_write_checks+0xec>)
 800ac00:	480d      	ldr	r0, [pc, #52]	@ (800ac38 <tcp_write_checks+0xe8>)
 800ac02:	f004 fca9 	bl	800f558 <iprintf>
 800ac06:	e00e      	b.n	800ac26 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d103      	bne.n	800ac18 <tcp_write_checks+0xc8>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d006      	beq.n	800ac26 <tcp_write_checks+0xd6>
 800ac18:	4b05      	ldr	r3, [pc, #20]	@ (800ac30 <tcp_write_checks+0xe0>)
 800ac1a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800ac1e:	4908      	ldr	r1, [pc, #32]	@ (800ac40 <tcp_write_checks+0xf0>)
 800ac20:	4805      	ldr	r0, [pc, #20]	@ (800ac38 <tcp_write_checks+0xe8>)
 800ac22:	f004 fc99 	bl	800f558 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	08011e38 	.word	0x08011e38
 800ac34:	08011f48 	.word	0x08011f48
 800ac38:	08011e8c 	.word	0x08011e8c
 800ac3c:	08011f68 	.word	0x08011f68
 800ac40:	08011fa4 	.word	0x08011fa4

0800ac44 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ac44:	b590      	push	{r4, r7, lr}
 800ac46:	b09b      	sub	sp, #108	@ 0x6c
 800ac48:	af04      	add	r7, sp, #16
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	4611      	mov	r1, r2
 800ac50:	461a      	mov	r2, r3
 800ac52:	460b      	mov	r3, r1
 800ac54:	80fb      	strh	r3, [r7, #6]
 800ac56:	4613      	mov	r3, r2
 800ac58:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac62:	2300      	movs	r3, #0
 800ac64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac66:	2300      	movs	r3, #0
 800ac68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d109      	bne.n	800aca0 <tcp_write+0x5c>
 800ac8c:	4ba4      	ldr	r3, [pc, #656]	@ (800af20 <tcp_write+0x2dc>)
 800ac8e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800ac92:	49a4      	ldr	r1, [pc, #656]	@ (800af24 <tcp_write+0x2e0>)
 800ac94:	48a4      	ldr	r0, [pc, #656]	@ (800af28 <tcp_write+0x2e4>)
 800ac96:	f004 fc5f 	bl	800f558 <iprintf>
 800ac9a:	f06f 030f 	mvn.w	r3, #15
 800ac9e:	e32a      	b.n	800b2f6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aca6:	085b      	lsrs	r3, r3, #1
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800acae:	4293      	cmp	r3, r2
 800acb0:	bf28      	it	cs
 800acb2:	4613      	movcs	r3, r2
 800acb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800acb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <tcp_write+0x7e>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800acc0:	e000      	b.n	800acc4 <tcp_write+0x80>
 800acc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d109      	bne.n	800ace0 <tcp_write+0x9c>
 800accc:	4b94      	ldr	r3, [pc, #592]	@ (800af20 <tcp_write+0x2dc>)
 800acce:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800acd2:	4996      	ldr	r1, [pc, #600]	@ (800af2c <tcp_write+0x2e8>)
 800acd4:	4894      	ldr	r0, [pc, #592]	@ (800af28 <tcp_write+0x2e4>)
 800acd6:	f004 fc3f 	bl	800f558 <iprintf>
 800acda:	f06f 030f 	mvn.w	r3, #15
 800acde:	e30a      	b.n	800b2f6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ace0:	88fb      	ldrh	r3, [r7, #6]
 800ace2:	4619      	mov	r1, r3
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7ff ff33 	bl	800ab50 <tcp_write_checks>
 800acea:	4603      	mov	r3, r0
 800acec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800acf0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <tcp_write+0xba>
    return err;
 800acf8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800acfc:	e2fb      	b.n	800b2f6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad04:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 80f6 	beq.w	800af04 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad1e:	e002      	b.n	800ad26 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ad20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ad26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f8      	bne.n	800ad20 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ad2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad30:	7a9b      	ldrb	r3, [r3, #10]
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ad3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad40:	891b      	ldrh	r3, [r3, #8]
 800ad42:	4619      	mov	r1, r3
 800ad44:	8c3b      	ldrh	r3, [r7, #32]
 800ad46:	440b      	add	r3, r1
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	da06      	bge.n	800ad5a <tcp_write+0x116>
 800ad4c:	4b74      	ldr	r3, [pc, #464]	@ (800af20 <tcp_write+0x2dc>)
 800ad4e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ad52:	4977      	ldr	r1, [pc, #476]	@ (800af30 <tcp_write+0x2ec>)
 800ad54:	4874      	ldr	r0, [pc, #464]	@ (800af28 <tcp_write+0x2e4>)
 800ad56:	f004 fbff 	bl	800f558 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ad5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad5c:	891a      	ldrh	r2, [r3, #8]
 800ad5e:	8c3b      	ldrh	r3, [r7, #32]
 800ad60:	4413      	add	r3, r2
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad70:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ad72:	8a7b      	ldrh	r3, [r7, #18]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d026      	beq.n	800adc6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ad78:	8a7b      	ldrh	r3, [r7, #18]
 800ad7a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d206      	bcs.n	800ad8e <tcp_write+0x14a>
 800ad80:	4b67      	ldr	r3, [pc, #412]	@ (800af20 <tcp_write+0x2dc>)
 800ad82:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800ad86:	496b      	ldr	r1, [pc, #428]	@ (800af34 <tcp_write+0x2f0>)
 800ad88:	4867      	ldr	r0, [pc, #412]	@ (800af28 <tcp_write+0x2e4>)
 800ad8a:	f004 fbe5 	bl	800f558 <iprintf>
      seg = last_unsent;
 800ad8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad90:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ad92:	8a7b      	ldrh	r3, [r7, #18]
 800ad94:	88fa      	ldrh	r2, [r7, #6]
 800ad96:	4293      	cmp	r3, r2
 800ad98:	bf28      	it	cs
 800ad9a:	4613      	movcs	r3, r2
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ada0:	4293      	cmp	r3, r2
 800ada2:	bf28      	it	cs
 800ada4:	4613      	movcs	r3, r2
 800ada6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800ada8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800adac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800adae:	4413      	add	r3, r2
 800adb0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800adb4:	8a7a      	ldrh	r2, [r7, #18]
 800adb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	b29b      	uxth	r3, r3
 800adbc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800adbe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800adc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800adc6:	8a7b      	ldrh	r3, [r7, #18]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00b      	beq.n	800ade4 <tcp_write+0x1a0>
 800adcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800add0:	88fb      	ldrh	r3, [r7, #6]
 800add2:	429a      	cmp	r2, r3
 800add4:	d006      	beq.n	800ade4 <tcp_write+0x1a0>
 800add6:	4b52      	ldr	r3, [pc, #328]	@ (800af20 <tcp_write+0x2dc>)
 800add8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800addc:	4956      	ldr	r1, [pc, #344]	@ (800af38 <tcp_write+0x2f4>)
 800adde:	4852      	ldr	r0, [pc, #328]	@ (800af28 <tcp_write+0x2e4>)
 800ade0:	f004 fbba 	bl	800f558 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ade4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	429a      	cmp	r2, r3
 800adec:	f080 8167 	bcs.w	800b0be <tcp_write+0x47a>
 800adf0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 8163 	beq.w	800b0be <tcp_write+0x47a>
 800adf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adfa:	891b      	ldrh	r3, [r3, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 815e 	beq.w	800b0be <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ae02:	88fa      	ldrh	r2, [r7, #6]
 800ae04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae08:	1ad2      	subs	r2, r2, r3
 800ae0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	bfa8      	it	ge
 800ae10:	4613      	movge	r3, r2
 800ae12:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ae14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae16:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ae18:	797b      	ldrb	r3, [r7, #5]
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d027      	beq.n	800ae72 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ae22:	f107 0012 	add.w	r0, r7, #18
 800ae26:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ae28:	8bf9      	ldrh	r1, [r7, #30]
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	9302      	str	r3, [sp, #8]
 800ae2e:	797b      	ldrb	r3, [r7, #5]
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	4603      	mov	r3, r0
 800ae38:	2000      	movs	r0, #0
 800ae3a:	f7ff fe0f 	bl	800aa5c <tcp_pbuf_prealloc>
 800ae3e:	6578      	str	r0, [r7, #84]	@ 0x54
 800ae40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 8225 	beq.w	800b292 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ae48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae4a:	6858      	ldr	r0, [r3, #4]
 800ae4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	4413      	add	r3, r2
 800ae54:	8bfa      	ldrh	r2, [r7, #30]
 800ae56:	4619      	mov	r1, r3
 800ae58:	f004 fc93 	bl	800f782 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ae5c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ae5e:	f7fb f9fb 	bl	8006258 <pbuf_clen>
 800ae62:	4603      	mov	r3, r0
 800ae64:	461a      	mov	r2, r3
 800ae66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800ae70:	e041      	b.n	800aef6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ae72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae78:	e002      	b.n	800ae80 <tcp_write+0x23c>
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1f8      	bne.n	800ae7a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae8a:	7b1b      	ldrb	r3, [r3, #12]
 800ae8c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d115      	bne.n	800aec0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ae94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae9a:	8952      	ldrh	r2, [r2, #10]
 800ae9c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d10d      	bne.n	800aec0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800aea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d006      	beq.n	800aeba <tcp_write+0x276>
 800aeac:	4b1c      	ldr	r3, [pc, #112]	@ (800af20 <tcp_write+0x2dc>)
 800aeae:	f240 2231 	movw	r2, #561	@ 0x231
 800aeb2:	4922      	ldr	r1, [pc, #136]	@ (800af3c <tcp_write+0x2f8>)
 800aeb4:	481c      	ldr	r0, [pc, #112]	@ (800af28 <tcp_write+0x2e4>)
 800aeb6:	f004 fb4f 	bl	800f558 <iprintf>
          extendlen = seglen;
 800aeba:	8bfb      	ldrh	r3, [r7, #30]
 800aebc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800aebe:	e01a      	b.n	800aef6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800aec0:	8bfb      	ldrh	r3, [r7, #30]
 800aec2:	2201      	movs	r2, #1
 800aec4:	4619      	mov	r1, r3
 800aec6:	2000      	movs	r0, #0
 800aec8:	f7fa fe5a 	bl	8005b80 <pbuf_alloc>
 800aecc:	6578      	str	r0, [r7, #84]	@ 0x54
 800aece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 81e0 	beq.w	800b296 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800aed6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	441a      	add	r2, r3
 800aede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800aee2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800aee4:	f7fb f9b8 	bl	8006258 <pbuf_clen>
 800aee8:	4603      	mov	r3, r0
 800aeea:	461a      	mov	r2, r3
 800aeec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800aef0:	4413      	add	r3, r2
 800aef2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800aef6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aefa:	8bfb      	ldrh	r3, [r7, #30]
 800aefc:	4413      	add	r3, r2
 800aefe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800af02:	e0dc      	b.n	800b0be <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 80d7 	beq.w	800b0be <tcp_write+0x47a>
 800af10:	4b03      	ldr	r3, [pc, #12]	@ (800af20 <tcp_write+0x2dc>)
 800af12:	f240 224a 	movw	r2, #586	@ 0x24a
 800af16:	490a      	ldr	r1, [pc, #40]	@ (800af40 <tcp_write+0x2fc>)
 800af18:	4803      	ldr	r0, [pc, #12]	@ (800af28 <tcp_write+0x2e4>)
 800af1a:	f004 fb1d 	bl	800f558 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800af1e:	e0ce      	b.n	800b0be <tcp_write+0x47a>
 800af20:	08011e38 	.word	0x08011e38
 800af24:	08011fd8 	.word	0x08011fd8
 800af28:	08011e8c 	.word	0x08011e8c
 800af2c:	08011ff0 	.word	0x08011ff0
 800af30:	08012024 	.word	0x08012024
 800af34:	0801203c 	.word	0x0801203c
 800af38:	0801205c 	.word	0x0801205c
 800af3c:	0801207c 	.word	0x0801207c
 800af40:	080120a8 	.word	0x080120a8
    struct pbuf *p;
    u16_t left = len - pos;
 800af44:	88fa      	ldrh	r2, [r7, #6]
 800af46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800af4e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800af52:	b29b      	uxth	r3, r3
 800af54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800af5a:	8b7a      	ldrh	r2, [r7, #26]
 800af5c:	8bbb      	ldrh	r3, [r7, #28]
 800af5e:	4293      	cmp	r3, r2
 800af60:	bf28      	it	cs
 800af62:	4613      	movcs	r3, r2
 800af64:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800af66:	797b      	ldrb	r3, [r7, #5]
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d036      	beq.n	800afde <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800af70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800af74:	b29a      	uxth	r2, r3
 800af76:	8b3b      	ldrh	r3, [r7, #24]
 800af78:	4413      	add	r3, r2
 800af7a:	b299      	uxth	r1, r3
 800af7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bf0c      	ite	eq
 800af82:	2301      	moveq	r3, #1
 800af84:	2300      	movne	r3, #0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	f107 0012 	add.w	r0, r7, #18
 800af8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800af8e:	9302      	str	r3, [sp, #8]
 800af90:	797b      	ldrb	r3, [r7, #5]
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	4603      	mov	r3, r0
 800af9a:	2036      	movs	r0, #54	@ 0x36
 800af9c:	f7ff fd5e 	bl	800aa5c <tcp_pbuf_prealloc>
 800afa0:	6338      	str	r0, [r7, #48]	@ 0x30
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8178 	beq.w	800b29a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	895b      	ldrh	r3, [r3, #10]
 800afae:	8b3a      	ldrh	r2, [r7, #24]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d906      	bls.n	800afc2 <tcp_write+0x37e>
 800afb4:	4b8c      	ldr	r3, [pc, #560]	@ (800b1e8 <tcp_write+0x5a4>)
 800afb6:	f240 2266 	movw	r2, #614	@ 0x266
 800afba:	498c      	ldr	r1, [pc, #560]	@ (800b1ec <tcp_write+0x5a8>)
 800afbc:	488c      	ldr	r0, [pc, #560]	@ (800b1f0 <tcp_write+0x5ac>)
 800afbe:	f004 facb 	bl	800f558 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800afc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800afca:	18d0      	adds	r0, r2, r3
 800afcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	4413      	add	r3, r2
 800afd4:	8b3a      	ldrh	r2, [r7, #24]
 800afd6:	4619      	mov	r1, r3
 800afd8:	f004 fbd3 	bl	800f782 <memcpy>
 800afdc:	e02f      	b.n	800b03e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800afde:	8a7b      	ldrh	r3, [r7, #18]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d006      	beq.n	800aff2 <tcp_write+0x3ae>
 800afe4:	4b80      	ldr	r3, [pc, #512]	@ (800b1e8 <tcp_write+0x5a4>)
 800afe6:	f240 2271 	movw	r2, #625	@ 0x271
 800afea:	4982      	ldr	r1, [pc, #520]	@ (800b1f4 <tcp_write+0x5b0>)
 800afec:	4880      	ldr	r0, [pc, #512]	@ (800b1f0 <tcp_write+0x5ac>)
 800afee:	f004 fab3 	bl	800f558 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800aff2:	8b3b      	ldrh	r3, [r7, #24]
 800aff4:	2201      	movs	r2, #1
 800aff6:	4619      	mov	r1, r3
 800aff8:	2036      	movs	r0, #54	@ 0x36
 800affa:	f7fa fdc1 	bl	8005b80 <pbuf_alloc>
 800affe:	6178      	str	r0, [r7, #20]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 814b 	beq.w	800b29e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b008:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	441a      	add	r2, r3
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b014:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b018:	b29b      	uxth	r3, r3
 800b01a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b01e:	4619      	mov	r1, r3
 800b020:	2036      	movs	r0, #54	@ 0x36
 800b022:	f7fa fdad 	bl	8005b80 <pbuf_alloc>
 800b026:	6338      	str	r0, [r7, #48]	@ 0x30
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d103      	bne.n	800b036 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b02e:	6978      	ldr	r0, [r7, #20]
 800b030:	f7fb f88a 	bl	8006148 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b034:	e136      	b.n	800b2a4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b036:	6979      	ldr	r1, [r7, #20]
 800b038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b03a:	f7fb f947 	bl	80062cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b03e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b040:	f7fb f90a 	bl	8006258 <pbuf_clen>
 800b044:	4603      	mov	r3, r0
 800b046:	461a      	mov	r2, r3
 800b048:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b04c:	4413      	add	r3, r2
 800b04e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b052:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b056:	2b09      	cmp	r3, #9
 800b058:	d903      	bls.n	800b062 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b05a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b05c:	f7fb f874 	bl	8006148 <pbuf_free>
      goto memerr;
 800b060:	e120      	b.n	800b2a4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b06a:	441a      	add	r2, r3
 800b06c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4613      	mov	r3, r2
 800b074:	2200      	movs	r2, #0
 800b076:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f7ff fc53 	bl	800a924 <tcp_create_segment>
 800b07e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800b080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 810d 	beq.w	800b2a2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <tcp_write+0x450>
      queue = seg;
 800b08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b090:	647b      	str	r3, [r7, #68]	@ 0x44
 800b092:	e00c      	b.n	800b0ae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <tcp_write+0x464>
 800b09a:	4b53      	ldr	r3, [pc, #332]	@ (800b1e8 <tcp_write+0x5a4>)
 800b09c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800b0a0:	4955      	ldr	r1, [pc, #340]	@ (800b1f8 <tcp_write+0x5b4>)
 800b0a2:	4853      	ldr	r0, [pc, #332]	@ (800b1f0 <tcp_write+0x5ac>)
 800b0a4:	f004 fa58 	bl	800f558 <iprintf>
      prev_seg->next = seg;
 800b0a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0ac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b0ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b0:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b0b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b0b6:	8b3b      	ldrh	r3, [r7, #24]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800b0be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	f4ff af3d 	bcc.w	800af44 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b0ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d02c      	beq.n	800b12a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b0d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0d6:	e01e      	b.n	800b116 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0da:	891a      	ldrh	r2, [r3, #8]
 800b0dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b0de:	4413      	add	r3, r2
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d110      	bne.n	800b110 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0f4:	8952      	ldrh	r2, [r2, #10]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f004 fb40 	bl	800f782 <memcpy>
        p->len += oversize_used;
 800b102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b104:	895a      	ldrh	r2, [r3, #10]
 800b106:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b108:	4413      	add	r3, r2
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1dd      	bne.n	800b0d8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b11c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b11e:	891a      	ldrh	r2, [r3, #8]
 800b120:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b122:	4413      	add	r3, r2
 800b124:	b29a      	uxth	r2, r3
 800b126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b128:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b12a:	8a7a      	ldrh	r2, [r7, #18]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b134:	2b00      	cmp	r3, #0
 800b136:	d018      	beq.n	800b16a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <tcp_write+0x508>
 800b13e:	4b2a      	ldr	r3, [pc, #168]	@ (800b1e8 <tcp_write+0x5a4>)
 800b140:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800b144:	492d      	ldr	r1, [pc, #180]	@ (800b1fc <tcp_write+0x5b8>)
 800b146:	482a      	ldr	r0, [pc, #168]	@ (800b1f0 <tcp_write+0x5ac>)
 800b148:	f004 fa06 	bl	800f558 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b14c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b152:	4618      	mov	r0, r3
 800b154:	f7fb f8ba 	bl	80062cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b15a:	891a      	ldrh	r2, [r3, #8]
 800b15c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b15e:	891b      	ldrh	r3, [r3, #8]
 800b160:	4413      	add	r3, r2
 800b162:	b29a      	uxth	r2, r3
 800b164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b166:	811a      	strh	r2, [r3, #8]
 800b168:	e037      	b.n	800b1da <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b16a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d034      	beq.n	800b1da <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <tcp_write+0x53a>
 800b176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <tcp_write+0x548>
 800b17e:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e8 <tcp_write+0x5a4>)
 800b180:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800b184:	491e      	ldr	r1, [pc, #120]	@ (800b200 <tcp_write+0x5bc>)
 800b186:	481a      	ldr	r0, [pc, #104]	@ (800b1f0 <tcp_write+0x5ac>)
 800b188:	f004 f9e6 	bl	800f558 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b18c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b192:	e009      	b.n	800b1a8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	891a      	ldrh	r2, [r3, #8]
 800b198:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b19a:	4413      	add	r3, r2
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1f1      	bne.n	800b194 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b2:	891a      	ldrh	r2, [r3, #8]
 800b1b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b1b6:	4413      	add	r3, r2
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1bc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c0:	895a      	ldrh	r2, [r3, #10]
 800b1c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b1c4:	4413      	add	r3, r2
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1ce:	891a      	ldrh	r2, [r3, #8]
 800b1d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b1d2:	4413      	add	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1d8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b1da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d111      	bne.n	800b204 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b1e6:	e010      	b.n	800b20a <tcp_write+0x5c6>
 800b1e8:	08011e38 	.word	0x08011e38
 800b1ec:	080120d8 	.word	0x080120d8
 800b1f0:	08011e8c 	.word	0x08011e8c
 800b1f4:	08012118 	.word	0x08012118
 800b1f8:	08012128 	.word	0x08012128
 800b1fc:	0801213c 	.word	0x0801213c
 800b200:	08012174 	.word	0x08012174
  } else {
    last_unsent->next = queue;
 800b204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b208:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b20e:	88fb      	ldrh	r3, [r7, #6]
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b21c:	88fb      	ldrh	r3, [r7, #6]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	b29a      	uxth	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b22e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00e      	beq.n	800b25a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <tcp_write+0x616>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d106      	bne.n	800b25a <tcp_write+0x616>
 800b24c:	4b2c      	ldr	r3, [pc, #176]	@ (800b300 <tcp_write+0x6bc>)
 800b24e:	f240 3212 	movw	r2, #786	@ 0x312
 800b252:	492c      	ldr	r1, [pc, #176]	@ (800b304 <tcp_write+0x6c0>)
 800b254:	482c      	ldr	r0, [pc, #176]	@ (800b308 <tcp_write+0x6c4>)
 800b256:	f004 f97f 	bl	800f558 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d016      	beq.n	800b28e <tcp_write+0x64a>
 800b260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d012      	beq.n	800b28e <tcp_write+0x64a>
 800b268:	797b      	ldrb	r3, [r7, #5]
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10d      	bne.n	800b28e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	899b      	ldrh	r3, [r3, #12]
 800b278:	b29c      	uxth	r4, r3
 800b27a:	2008      	movs	r0, #8
 800b27c:	f7f9 fc9c 	bl	8004bb8 <lwip_htons>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	4322      	orrs	r2, r4
 800b28a:	b292      	uxth	r2, r2
 800b28c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	e031      	b.n	800b2f6 <tcp_write+0x6b2>
          goto memerr;
 800b292:	bf00      	nop
 800b294:	e006      	b.n	800b2a4 <tcp_write+0x660>
            goto memerr;
 800b296:	bf00      	nop
 800b298:	e004      	b.n	800b2a4 <tcp_write+0x660>
        goto memerr;
 800b29a:	bf00      	nop
 800b29c:	e002      	b.n	800b2a4 <tcp_write+0x660>
        goto memerr;
 800b29e:	bf00      	nop
 800b2a0:	e000      	b.n	800b2a4 <tcp_write+0x660>
      goto memerr;
 800b2a2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8b5b      	ldrh	r3, [r3, #26]
 800b2a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b2b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b2ba:	f7fa ff45 	bl	8006148 <pbuf_free>
  }
  if (queue != NULL) {
 800b2be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <tcp_write+0x686>
    tcp_segs_free(queue);
 800b2c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b2c6:	f7fc fb8f 	bl	80079e8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00e      	beq.n	800b2f2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <tcp_write+0x6ae>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <tcp_write+0x6ae>
 800b2e4:	4b06      	ldr	r3, [pc, #24]	@ (800b300 <tcp_write+0x6bc>)
 800b2e6:	f240 3227 	movw	r2, #807	@ 0x327
 800b2ea:	4906      	ldr	r1, [pc, #24]	@ (800b304 <tcp_write+0x6c0>)
 800b2ec:	4806      	ldr	r0, [pc, #24]	@ (800b308 <tcp_write+0x6c4>)
 800b2ee:	f004 f933 	bl	800f558 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b2f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	375c      	adds	r7, #92	@ 0x5c
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd90      	pop	{r4, r7, pc}
 800b2fe:	bf00      	nop
 800b300:	08011e38 	.word	0x08011e38
 800b304:	080121ac 	.word	0x080121ac
 800b308:	08011e8c 	.word	0x08011e8c

0800b30c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b30c:	b590      	push	{r4, r7, lr}
 800b30e:	b08b      	sub	sp, #44	@ 0x2c
 800b310:	af02      	add	r7, sp, #8
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b318:	2300      	movs	r3, #0
 800b31a:	61fb      	str	r3, [r7, #28]
 800b31c:	2300      	movs	r3, #0
 800b31e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <tcp_split_unsent_seg+0x2c>
 800b32a:	4b95      	ldr	r3, [pc, #596]	@ (800b580 <tcp_split_unsent_seg+0x274>)
 800b32c:	f240 324b 	movw	r2, #843	@ 0x34b
 800b330:	4994      	ldr	r1, [pc, #592]	@ (800b584 <tcp_split_unsent_seg+0x278>)
 800b332:	4895      	ldr	r0, [pc, #596]	@ (800b588 <tcp_split_unsent_seg+0x27c>)
 800b334:	f004 f910 	bl	800f558 <iprintf>

  useg = pcb->unsent;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b33c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d102      	bne.n	800b34a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b344:	f04f 33ff 	mov.w	r3, #4294967295
 800b348:	e116      	b.n	800b578 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b34a:	887b      	ldrh	r3, [r7, #2]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d109      	bne.n	800b364 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b350:	4b8b      	ldr	r3, [pc, #556]	@ (800b580 <tcp_split_unsent_seg+0x274>)
 800b352:	f240 3253 	movw	r2, #851	@ 0x353
 800b356:	498d      	ldr	r1, [pc, #564]	@ (800b58c <tcp_split_unsent_seg+0x280>)
 800b358:	488b      	ldr	r0, [pc, #556]	@ (800b588 <tcp_split_unsent_seg+0x27c>)
 800b35a:	f004 f8fd 	bl	800f558 <iprintf>
    return ERR_VAL;
 800b35e:	f06f 0305 	mvn.w	r3, #5
 800b362:	e109      	b.n	800b578 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	891b      	ldrh	r3, [r3, #8]
 800b368:	887a      	ldrh	r2, [r7, #2]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d301      	bcc.n	800b372 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	e102      	b.n	800b578 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b376:	887a      	ldrh	r2, [r7, #2]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d906      	bls.n	800b38a <tcp_split_unsent_seg+0x7e>
 800b37c:	4b80      	ldr	r3, [pc, #512]	@ (800b580 <tcp_split_unsent_seg+0x274>)
 800b37e:	f240 325b 	movw	r2, #859	@ 0x35b
 800b382:	4983      	ldr	r1, [pc, #524]	@ (800b590 <tcp_split_unsent_seg+0x284>)
 800b384:	4880      	ldr	r0, [pc, #512]	@ (800b588 <tcp_split_unsent_seg+0x27c>)
 800b386:	f004 f8e7 	bl	800f558 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	891b      	ldrh	r3, [r3, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <tcp_split_unsent_seg+0x94>
 800b392:	4b7b      	ldr	r3, [pc, #492]	@ (800b580 <tcp_split_unsent_seg+0x274>)
 800b394:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b398:	497e      	ldr	r1, [pc, #504]	@ (800b594 <tcp_split_unsent_seg+0x288>)
 800b39a:	487b      	ldr	r0, [pc, #492]	@ (800b588 <tcp_split_unsent_seg+0x27c>)
 800b39c:	f004 f8dc 	bl	800f558 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	7a9b      	ldrb	r3, [r3, #10]
 800b3a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	891a      	ldrh	r2, [r3, #8]
 800b3b6:	887b      	ldrh	r3, [r7, #2]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	89bb      	ldrh	r3, [r7, #12]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	2036      	movs	r0, #54	@ 0x36
 800b3ce:	f7fa fbd7 	bl	8005b80 <pbuf_alloc>
 800b3d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f000 80b7 	beq.w	800b54a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	891a      	ldrh	r2, [r3, #8]
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	891b      	ldrh	r3, [r3, #8]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	887b      	ldrh	r3, [r7, #2]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	6858      	ldr	r0, [r3, #4]
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	7bbb      	ldrb	r3, [r7, #14]
 800b3fa:	18d1      	adds	r1, r2, r3
 800b3fc:	897b      	ldrh	r3, [r7, #10]
 800b3fe:	89ba      	ldrh	r2, [r7, #12]
 800b400:	f7fb f88c 	bl	800651c <pbuf_copy_partial>
 800b404:	4603      	mov	r3, r0
 800b406:	461a      	mov	r2, r3
 800b408:	89bb      	ldrh	r3, [r7, #12]
 800b40a:	4293      	cmp	r3, r2
 800b40c:	f040 809f 	bne.w	800b54e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	899b      	ldrh	r3, [r3, #12]
 800b416:	b29b      	uxth	r3, r3
 800b418:	4618      	mov	r0, r3
 800b41a:	f7f9 fbcd 	bl	8004bb8 <lwip_htons>
 800b41e:	4603      	mov	r3, r0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b426:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b428:	2300      	movs	r3, #0
 800b42a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b42c:	7efb      	ldrb	r3, [r7, #27]
 800b42e:	f003 0308 	and.w	r3, r3, #8
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b436:	7efb      	ldrb	r3, [r7, #27]
 800b438:	f023 0308 	bic.w	r3, r3, #8
 800b43c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b43e:	7ebb      	ldrb	r3, [r7, #26]
 800b440:	f043 0308 	orr.w	r3, r3, #8
 800b444:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b446:	7efb      	ldrb	r3, [r7, #27]
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d007      	beq.n	800b460 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b450:	7efb      	ldrb	r3, [r7, #27]
 800b452:	f023 0301 	bic.w	r3, r3, #1
 800b456:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b458:	7ebb      	ldrb	r3, [r7, #26]
 800b45a:	f043 0301 	orr.w	r3, r3, #1
 800b45e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	f7f9 fbbb 	bl	8004be2 <lwip_htonl>
 800b46c:	4602      	mov	r2, r0
 800b46e:	887b      	ldrh	r3, [r7, #2]
 800b470:	18d1      	adds	r1, r2, r3
 800b472:	7eba      	ldrb	r2, [r7, #26]
 800b474:	7bfb      	ldrb	r3, [r7, #15]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	460b      	mov	r3, r1
 800b47a:	6939      	ldr	r1, [r7, #16]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff fa51 	bl	800a924 <tcp_create_segment>
 800b482:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d063      	beq.n	800b552 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fa fee2 	bl	8006258 <pbuf_clen>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b49e:	1a9b      	subs	r3, r3, r2
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	6858      	ldr	r0, [r3, #4]
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	891a      	ldrh	r2, [r3, #8]
 800b4b2:	89bb      	ldrh	r3, [r7, #12]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	f7fa fcbf 	bl	8005e3c <pbuf_realloc>
  useg->len -= remainder;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	891a      	ldrh	r2, [r3, #8]
 800b4c2:	89bb      	ldrh	r3, [r7, #12]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	899b      	ldrh	r3, [r3, #12]
 800b4d2:	b29c      	uxth	r4, r3
 800b4d4:	7efb      	ldrb	r3, [r7, #27]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7f9 fb6d 	bl	8004bb8 <lwip_htons>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	4322      	orrs	r2, r4
 800b4e8:	b292      	uxth	r2, r2
 800b4ea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fa feb1 	bl	8006258 <pbuf_clen>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b500:	4413      	add	r3, r2
 800b502:	b29a      	uxth	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fa fea2 	bl	8006258 <pbuf_clen>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b51e:	4413      	add	r3, r2
 800b520:	b29a      	uxth	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	69fa      	ldr	r2, [r7, #28]
 800b534:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d103      	bne.n	800b546 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	e016      	b.n	800b578 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b552:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d006      	beq.n	800b568 <tcp_split_unsent_seg+0x25c>
 800b55a:	4b09      	ldr	r3, [pc, #36]	@ (800b580 <tcp_split_unsent_seg+0x274>)
 800b55c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b560:	490d      	ldr	r1, [pc, #52]	@ (800b598 <tcp_split_unsent_seg+0x28c>)
 800b562:	4809      	ldr	r0, [pc, #36]	@ (800b588 <tcp_split_unsent_seg+0x27c>)
 800b564:	f003 fff8 	bl	800f558 <iprintf>
  if (p != NULL) {
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b56e:	6938      	ldr	r0, [r7, #16]
 800b570:	f7fa fdea 	bl	8006148 <pbuf_free>
  }

  return ERR_MEM;
 800b574:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3724      	adds	r7, #36	@ 0x24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd90      	pop	{r4, r7, pc}
 800b580:	08011e38 	.word	0x08011e38
 800b584:	080121cc 	.word	0x080121cc
 800b588:	08011e8c 	.word	0x08011e8c
 800b58c:	080121f0 	.word	0x080121f0
 800b590:	08012214 	.word	0x08012214
 800b594:	08012224 	.word	0x08012224
 800b598:	08012234 	.word	0x08012234

0800b59c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <tcp_send_fin+0x1c>
 800b5aa:	4b21      	ldr	r3, [pc, #132]	@ (800b630 <tcp_send_fin+0x94>)
 800b5ac:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b5b0:	4920      	ldr	r1, [pc, #128]	@ (800b634 <tcp_send_fin+0x98>)
 800b5b2:	4821      	ldr	r0, [pc, #132]	@ (800b638 <tcp_send_fin+0x9c>)
 800b5b4:	f003 ffd0 	bl	800f558 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d02e      	beq.n	800b61e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	e002      	b.n	800b5ce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1f8      	bne.n	800b5c8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	899b      	ldrh	r3, [r3, #12]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f9 faea 	bl	8004bb8 <lwip_htons>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d116      	bne.n	800b61e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	899b      	ldrh	r3, [r3, #12]
 800b5f6:	b29c      	uxth	r4, r3
 800b5f8:	2001      	movs	r0, #1
 800b5fa:	f7f9 fadd 	bl	8004bb8 <lwip_htons>
 800b5fe:	4603      	mov	r3, r0
 800b600:	461a      	mov	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	4322      	orrs	r2, r4
 800b608:	b292      	uxth	r2, r2
 800b60a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8b5b      	ldrh	r3, [r3, #26]
 800b610:	f043 0320 	orr.w	r3, r3, #32
 800b614:	b29a      	uxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	e004      	b.n	800b628 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b61e:	2101      	movs	r1, #1
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f80b 	bl	800b63c <tcp_enqueue_flags>
 800b626:	4603      	mov	r3, r0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd90      	pop	{r4, r7, pc}
 800b630:	08011e38 	.word	0x08011e38
 800b634:	08012240 	.word	0x08012240
 800b638:	08011e8c 	.word	0x08011e8c

0800b63c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b08a      	sub	sp, #40	@ 0x28
 800b640:	af02      	add	r7, sp, #8
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b650:	78fb      	ldrb	r3, [r7, #3]
 800b652:	f003 0303 	and.w	r3, r3, #3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <tcp_enqueue_flags+0x2c>
 800b65a:	4b67      	ldr	r3, [pc, #412]	@ (800b7f8 <tcp_enqueue_flags+0x1bc>)
 800b65c:	f240 4211 	movw	r2, #1041	@ 0x411
 800b660:	4966      	ldr	r1, [pc, #408]	@ (800b7fc <tcp_enqueue_flags+0x1c0>)
 800b662:	4867      	ldr	r0, [pc, #412]	@ (800b800 <tcp_enqueue_flags+0x1c4>)
 800b664:	f003 ff78 	bl	800f558 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <tcp_enqueue_flags+0x40>
 800b66e:	4b62      	ldr	r3, [pc, #392]	@ (800b7f8 <tcp_enqueue_flags+0x1bc>)
 800b670:	f240 4213 	movw	r2, #1043	@ 0x413
 800b674:	4963      	ldr	r1, [pc, #396]	@ (800b804 <tcp_enqueue_flags+0x1c8>)
 800b676:	4862      	ldr	r0, [pc, #392]	@ (800b800 <tcp_enqueue_flags+0x1c4>)
 800b678:	f003 ff6e 	bl	800f558 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b67c:	78fb      	ldrb	r3, [r7, #3]
 800b67e:	f003 0302 	and.w	r3, r3, #2
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b686:	2301      	movs	r3, #1
 800b688:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b68a:	7ffb      	ldrb	r3, [r7, #31]
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 0304 	and.w	r3, r3, #4
 800b694:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b69e:	4619      	mov	r1, r3
 800b6a0:	2036      	movs	r0, #54	@ 0x36
 800b6a2:	f7fa fa6d 	bl	8005b80 <pbuf_alloc>
 800b6a6:	6138      	str	r0, [r7, #16]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d109      	bne.n	800b6c2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	8b5b      	ldrh	r3, [r3, #26]
 800b6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c0:	e095      	b.n	800b7ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	895a      	ldrh	r2, [r3, #10]
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d206      	bcs.n	800b6dc <tcp_enqueue_flags+0xa0>
 800b6ce:	4b4a      	ldr	r3, [pc, #296]	@ (800b7f8 <tcp_enqueue_flags+0x1bc>)
 800b6d0:	f240 4239 	movw	r2, #1081	@ 0x439
 800b6d4:	494c      	ldr	r1, [pc, #304]	@ (800b808 <tcp_enqueue_flags+0x1cc>)
 800b6d6:	484a      	ldr	r0, [pc, #296]	@ (800b800 <tcp_enqueue_flags+0x1c4>)
 800b6d8:	f003 ff3e 	bl	800f558 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b6e0:	78fa      	ldrb	r2, [r7, #3]
 800b6e2:	7ffb      	ldrb	r3, [r7, #31]
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	6939      	ldr	r1, [r7, #16]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff f91a 	bl	800a924 <tcp_create_segment>
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d109      	bne.n	800b70c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	8b5b      	ldrh	r3, [r3, #26]
 800b6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b700:	b29a      	uxth	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b706:	f04f 33ff 	mov.w	r3, #4294967295
 800b70a:	e070      	b.n	800b7ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	f003 0303 	and.w	r3, r3, #3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d006      	beq.n	800b726 <tcp_enqueue_flags+0xea>
 800b718:	4b37      	ldr	r3, [pc, #220]	@ (800b7f8 <tcp_enqueue_flags+0x1bc>)
 800b71a:	f240 4242 	movw	r2, #1090	@ 0x442
 800b71e:	493b      	ldr	r1, [pc, #236]	@ (800b80c <tcp_enqueue_flags+0x1d0>)
 800b720:	4837      	ldr	r0, [pc, #220]	@ (800b800 <tcp_enqueue_flags+0x1c4>)
 800b722:	f003 ff19 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	891b      	ldrh	r3, [r3, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d006      	beq.n	800b73c <tcp_enqueue_flags+0x100>
 800b72e:	4b32      	ldr	r3, [pc, #200]	@ (800b7f8 <tcp_enqueue_flags+0x1bc>)
 800b730:	f240 4243 	movw	r2, #1091	@ 0x443
 800b734:	4936      	ldr	r1, [pc, #216]	@ (800b810 <tcp_enqueue_flags+0x1d4>)
 800b736:	4832      	ldr	r0, [pc, #200]	@ (800b800 <tcp_enqueue_flags+0x1c4>)
 800b738:	f003 ff0e 	bl	800f558 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b74a:	e00d      	b.n	800b768 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b750:	61bb      	str	r3, [r7, #24]
 800b752:	e002      	b.n	800b75a <tcp_enqueue_flags+0x11e>
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	61bb      	str	r3, [r7, #24]
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1f8      	bne.n	800b754 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b770:	78fb      	ldrb	r3, [r7, #3]
 800b772:	f003 0302 	and.w	r3, r3, #2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d104      	bne.n	800b784 <tcp_enqueue_flags+0x148>
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d004      	beq.n	800b78e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b78e:	78fb      	ldrb	r3, [r7, #3]
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	2b00      	cmp	r3, #0
 800b796:	d006      	beq.n	800b7a6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	8b5b      	ldrh	r3, [r3, #26]
 800b79c:	f043 0320 	orr.w	r3, r3, #32
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fa fd54 	bl	8006258 <pbuf_clen>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b7ba:	4413      	add	r3, r2
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00e      	beq.n	800b7ec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <tcp_enqueue_flags+0x1b0>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <tcp_enqueue_flags+0x1b0>
 800b7de:	4b06      	ldr	r3, [pc, #24]	@ (800b7f8 <tcp_enqueue_flags+0x1bc>)
 800b7e0:	f240 4265 	movw	r2, #1125	@ 0x465
 800b7e4:	490b      	ldr	r1, [pc, #44]	@ (800b814 <tcp_enqueue_flags+0x1d8>)
 800b7e6:	4806      	ldr	r0, [pc, #24]	@ (800b800 <tcp_enqueue_flags+0x1c4>)
 800b7e8:	f003 feb6 	bl	800f558 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	08011e38 	.word	0x08011e38
 800b7fc:	0801225c 	.word	0x0801225c
 800b800:	08011e8c 	.word	0x08011e8c
 800b804:	080122b4 	.word	0x080122b4
 800b808:	080122d4 	.word	0x080122d4
 800b80c:	08012310 	.word	0x08012310
 800b810:	08012328 	.word	0x08012328
 800b814:	08012354 	.word	0x08012354

0800b818 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b818:	b5b0      	push	{r4, r5, r7, lr}
 800b81a:	b08a      	sub	sp, #40	@ 0x28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d106      	bne.n	800b834 <tcp_output+0x1c>
 800b826:	4b8a      	ldr	r3, [pc, #552]	@ (800ba50 <tcp_output+0x238>)
 800b828:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b82c:	4989      	ldr	r1, [pc, #548]	@ (800ba54 <tcp_output+0x23c>)
 800b82e:	488a      	ldr	r0, [pc, #552]	@ (800ba58 <tcp_output+0x240>)
 800b830:	f003 fe92 	bl	800f558 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	7d1b      	ldrb	r3, [r3, #20]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d106      	bne.n	800b84a <tcp_output+0x32>
 800b83c:	4b84      	ldr	r3, [pc, #528]	@ (800ba50 <tcp_output+0x238>)
 800b83e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b842:	4986      	ldr	r1, [pc, #536]	@ (800ba5c <tcp_output+0x244>)
 800b844:	4884      	ldr	r0, [pc, #528]	@ (800ba58 <tcp_output+0x240>)
 800b846:	f003 fe87 	bl	800f558 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b84a:	4b85      	ldr	r3, [pc, #532]	@ (800ba60 <tcp_output+0x248>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d101      	bne.n	800b858 <tcp_output+0x40>
    return ERR_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	e1ce      	b.n	800bbf6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b864:	4293      	cmp	r3, r2
 800b866:	bf28      	it	cs
 800b868:	4613      	movcs	r3, r2
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b872:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10b      	bne.n	800b892 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	8b5b      	ldrh	r3, [r3, #26]
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 81aa 	beq.w	800bbdc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fdcb 	bl	800c424 <tcp_send_empty_ack>
 800b88e:	4603      	mov	r3, r0
 800b890:	e1b1      	b.n	800bbf6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3304      	adds	r3, #4
 800b898:	461a      	mov	r2, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7ff f826 	bl	800a8ec <tcp_route>
 800b8a0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <tcp_output+0x96>
    return ERR_RTE;
 800b8a8:	f06f 0303 	mvn.w	r3, #3
 800b8ac:	e1a3      	b.n	800bbf6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <tcp_output+0xa4>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d111      	bne.n	800b8e0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d002      	beq.n	800b8c8 <tcp_output+0xb0>
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	e000      	b.n	800b8ca <tcp_output+0xb2>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d102      	bne.n	800b8d8 <tcp_output+0xc0>
      return ERR_RTE;
 800b8d2:	f06f 0303 	mvn.w	r3, #3
 800b8d6:	e18e      	b.n	800bbf6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7f9 f97b 	bl	8004be2 <lwip_htonl>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8f6:	8912      	ldrh	r2, [r2, #8]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d227      	bcs.n	800b950 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b906:	461a      	mov	r2, r3
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d114      	bne.n	800b938 <tcp_output+0x120>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b912:	2b00      	cmp	r3, #0
 800b914:	d110      	bne.n	800b938 <tcp_output+0x120>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10b      	bne.n	800b938 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	8b5b      	ldrh	r3, [r3, #26]
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 814d 	beq.w	800bbe0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fd6c 	bl	800c424 <tcp_send_empty_ack>
 800b94c:	4603      	mov	r3, r0
 800b94e:	e152      	b.n	800bbf6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b95c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 811c 	beq.w	800bb9e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b966:	e002      	b.n	800b96e <tcp_output+0x156>
 800b968:	6a3b      	ldr	r3, [r7, #32]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	623b      	str	r3, [r7, #32]
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1f8      	bne.n	800b968 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b976:	e112      	b.n	800bb9e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	899b      	ldrh	r3, [r3, #12]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	4618      	mov	r0, r3
 800b982:	f7f9 f919 	bl	8004bb8 <lwip_htons>
 800b986:	4603      	mov	r3, r0
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	f003 0304 	and.w	r3, r3, #4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d006      	beq.n	800b9a0 <tcp_output+0x188>
 800b992:	4b2f      	ldr	r3, [pc, #188]	@ (800ba50 <tcp_output+0x238>)
 800b994:	f240 5236 	movw	r2, #1334	@ 0x536
 800b998:	4932      	ldr	r1, [pc, #200]	@ (800ba64 <tcp_output+0x24c>)
 800b99a:	482f      	ldr	r0, [pc, #188]	@ (800ba58 <tcp_output+0x240>)
 800b99c:	f003 fddc 	bl	800f558 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01f      	beq.n	800b9e8 <tcp_output+0x1d0>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	8b5b      	ldrh	r3, [r3, #26]
 800b9ac:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d119      	bne.n	800b9e8 <tcp_output+0x1d0>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00b      	beq.n	800b9d4 <tcp_output+0x1bc>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d110      	bne.n	800b9e8 <tcp_output+0x1d0>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9ca:	891a      	ldrh	r2, [r3, #8]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d209      	bcs.n	800b9e8 <tcp_output+0x1d0>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d004      	beq.n	800b9e8 <tcp_output+0x1d0>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b9e4:	2b08      	cmp	r3, #8
 800b9e6:	d901      	bls.n	800b9ec <tcp_output+0x1d4>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e000      	b.n	800b9ee <tcp_output+0x1d6>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	8b5b      	ldrh	r3, [r3, #26]
 800b9f6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 80e4 	beq.w	800bbc8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	7d1b      	ldrb	r3, [r3, #20]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d00d      	beq.n	800ba24 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ba08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	899b      	ldrh	r3, [r3, #12]
 800ba0e:	b29c      	uxth	r4, r3
 800ba10:	2010      	movs	r0, #16
 800ba12:	f7f9 f8d1 	bl	8004bb8 <lwip_htons>
 800ba16:	4603      	mov	r3, r0
 800ba18:	461a      	mov	r2, r3
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	4322      	orrs	r2, r4
 800ba20:	b292      	uxth	r2, r2
 800ba22:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba2a:	f000 f909 	bl	800bc40 <tcp_output_segment>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ba32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d016      	beq.n	800ba68 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	8b5b      	ldrh	r3, [r3, #26]
 800ba3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	835a      	strh	r2, [r3, #26]
      return err;
 800ba48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba4c:	e0d3      	b.n	800bbf6 <tcp_output+0x3de>
 800ba4e:	bf00      	nop
 800ba50:	08011e38 	.word	0x08011e38
 800ba54:	0801237c 	.word	0x0801237c
 800ba58:	08011e8c 	.word	0x08011e8c
 800ba5c:	08012394 	.word	0x08012394
 800ba60:	200087d4 	.word	0x200087d4
 800ba64:	080123bc 	.word	0x080123bc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	7d1b      	ldrb	r3, [r3, #20]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d006      	beq.n	800ba86 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8b5b      	ldrh	r3, [r3, #26]
 800ba7c:	f023 0303 	bic.w	r3, r3, #3
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7f9 f8a8 	bl	8004be2 <lwip_htonl>
 800ba92:	4604      	mov	r4, r0
 800ba94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba96:	891b      	ldrh	r3, [r3, #8]
 800ba98:	461d      	mov	r5, r3
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	899b      	ldrh	r3, [r3, #12]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f9 f888 	bl	8004bb8 <lwip_htons>
 800baa8:	4603      	mov	r3, r0
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <tcp_output+0x2a0>
 800bab4:	2301      	movs	r3, #1
 800bab6:	e000      	b.n	800baba <tcp_output+0x2a2>
 800bab8:	2300      	movs	r3, #0
 800baba:	442b      	add	r3, r5
 800babc:	4423      	add	r3, r4
 800babe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da02      	bge.n	800bad2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad4:	891b      	ldrh	r3, [r3, #8]
 800bad6:	461c      	mov	r4, r3
 800bad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	899b      	ldrh	r3, [r3, #12]
 800bade:	b29b      	uxth	r3, r3
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7f9 f869 	bl	8004bb8 <lwip_htons>
 800bae6:	4603      	mov	r3, r0
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <tcp_output+0x2de>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e000      	b.n	800baf8 <tcp_output+0x2e0>
 800baf6:	2300      	movs	r3, #0
 800baf8:	4423      	add	r3, r4
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d049      	beq.n	800bb92 <tcp_output+0x37a>
      seg->next = NULL;
 800bafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb00:	2200      	movs	r2, #0
 800bb02:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d105      	bne.n	800bb18 <tcp_output+0x300>
        pcb->unacked = seg;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb10:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800bb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb14:	623b      	str	r3, [r7, #32]
 800bb16:	e03f      	b.n	800bb98 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7f9 f85f 	bl	8004be2 <lwip_htonl>
 800bb24:	4604      	mov	r4, r0
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f9 f858 	bl	8004be2 <lwip_htonl>
 800bb32:	4603      	mov	r3, r0
 800bb34:	1ae3      	subs	r3, r4, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	da24      	bge.n	800bb84 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3370      	adds	r3, #112	@ 0x70
 800bb3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb40:	e002      	b.n	800bb48 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d011      	beq.n	800bb74 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7f9 f842 	bl	8004be2 <lwip_htonl>
 800bb5e:	4604      	mov	r4, r0
 800bb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7f9 f83b 	bl	8004be2 <lwip_htonl>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dbe6      	blt.n	800bb42 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb80:	601a      	str	r2, [r3, #0]
 800bb82:	e009      	b.n	800bb98 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb88:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	623b      	str	r3, [r7, #32]
 800bb90:	e002      	b.n	800bb98 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bb92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb94:	f7fb ff3d 	bl	8007a12 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb9c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d012      	beq.n	800bbca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f9 f819 	bl	8004be2 <lwip_htonl>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbba:	8912      	ldrh	r2, [r2, #8]
 800bbbc:	4413      	add	r3, r2
  while (seg != NULL &&
 800bbbe:	69ba      	ldr	r2, [r7, #24]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	f4bf aed9 	bcs.w	800b978 <tcp_output+0x160>
 800bbc6:	e000      	b.n	800bbca <tcp_output+0x3b2>
      break;
 800bbc8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d108      	bne.n	800bbe4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800bbda:	e004      	b.n	800bbe6 <tcp_output+0x3ce>
    goto output_done;
 800bbdc:	bf00      	nop
 800bbde:	e002      	b.n	800bbe6 <tcp_output+0x3ce>
    goto output_done;
 800bbe0:	bf00      	nop
 800bbe2:	e000      	b.n	800bbe6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bbe4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	8b5b      	ldrh	r3, [r3, #26]
 800bbea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3728      	adds	r7, #40	@ 0x28
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bbfe:	bf00      	nop

0800bc00 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <tcp_output_segment_busy+0x1c>
 800bc0e:	4b09      	ldr	r3, [pc, #36]	@ (800bc34 <tcp_output_segment_busy+0x34>)
 800bc10:	f240 529a 	movw	r2, #1434	@ 0x59a
 800bc14:	4908      	ldr	r1, [pc, #32]	@ (800bc38 <tcp_output_segment_busy+0x38>)
 800bc16:	4809      	ldr	r0, [pc, #36]	@ (800bc3c <tcp_output_segment_busy+0x3c>)
 800bc18:	f003 fc9e 	bl	800f558 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	7b9b      	ldrb	r3, [r3, #14]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d001      	beq.n	800bc2a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e000      	b.n	800bc2c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	08011e38 	.word	0x08011e38
 800bc38:	080123d4 	.word	0x080123d4
 800bc3c:	08011e8c 	.word	0x08011e8c

0800bc40 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bc40:	b5b0      	push	{r4, r5, r7, lr}
 800bc42:	b08c      	sub	sp, #48	@ 0x30
 800bc44:	af04      	add	r7, sp, #16
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d106      	bne.n	800bc60 <tcp_output_segment+0x20>
 800bc52:	4b64      	ldr	r3, [pc, #400]	@ (800bde4 <tcp_output_segment+0x1a4>)
 800bc54:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800bc58:	4963      	ldr	r1, [pc, #396]	@ (800bde8 <tcp_output_segment+0x1a8>)
 800bc5a:	4864      	ldr	r0, [pc, #400]	@ (800bdec <tcp_output_segment+0x1ac>)
 800bc5c:	f003 fc7c 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d106      	bne.n	800bc74 <tcp_output_segment+0x34>
 800bc66:	4b5f      	ldr	r3, [pc, #380]	@ (800bde4 <tcp_output_segment+0x1a4>)
 800bc68:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800bc6c:	4960      	ldr	r1, [pc, #384]	@ (800bdf0 <tcp_output_segment+0x1b0>)
 800bc6e:	485f      	ldr	r0, [pc, #380]	@ (800bdec <tcp_output_segment+0x1ac>)
 800bc70:	f003 fc72 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d106      	bne.n	800bc88 <tcp_output_segment+0x48>
 800bc7a:	4b5a      	ldr	r3, [pc, #360]	@ (800bde4 <tcp_output_segment+0x1a4>)
 800bc7c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800bc80:	495c      	ldr	r1, [pc, #368]	@ (800bdf4 <tcp_output_segment+0x1b4>)
 800bc82:	485a      	ldr	r0, [pc, #360]	@ (800bdec <tcp_output_segment+0x1ac>)
 800bc84:	f003 fc68 	bl	800f558 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f7ff ffb9 	bl	800bc00 <tcp_output_segment_busy>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d001      	beq.n	800bc98 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	e0a1      	b.n	800bddc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	68dc      	ldr	r4, [r3, #12]
 800bca0:	4610      	mov	r0, r2
 800bca2:	f7f8 ff9e 	bl	8004be2 <lwip_htonl>
 800bca6:	4603      	mov	r3, r0
 800bca8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68dc      	ldr	r4, [r3, #12]
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f7f8 ff80 	bl	8004bb8 <lwip_htons>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bcc4:	441a      	add	r2, r3
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	3314      	adds	r3, #20
 800bcd0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	7a9b      	ldrb	r3, [r3, #10]
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d015      	beq.n	800bd0a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	3304      	adds	r3, #4
 800bce2:	461a      	mov	r2, r3
 800bce4:	6879      	ldr	r1, [r7, #4]
 800bce6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800bcea:	f7fc fa39 	bl	8008160 <tcp_eff_send_mss_netif>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bcf2:	8b7b      	ldrh	r3, [r7, #26]
 800bcf4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7f8 ff72 	bl	8004be2 <lwip_htonl>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	3304      	adds	r3, #4
 800bd08:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	da02      	bge.n	800bd1a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2200      	movs	r2, #0
 800bd18:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10c      	bne.n	800bd3c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bd22:	4b35      	ldr	r3, [pc, #212]	@ (800bdf8 <tcp_output_segment+0x1b8>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7f8 ff56 	bl	8004be2 <lwip_htonl>
 800bd36:	4602      	mov	r2, r0
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	68da      	ldr	r2, [r3, #12]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	8959      	ldrh	r1, [r3, #10]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	8b3a      	ldrh	r2, [r7, #24]
 800bd56:	1a8a      	subs	r2, r1, r2
 800bd58:	b292      	uxth	r2, r2
 800bd5a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	8919      	ldrh	r1, [r3, #8]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	8b3a      	ldrh	r2, [r7, #24]
 800bd68:	1a8a      	subs	r2, r1, r2
 800bd6a:	b292      	uxth	r2, r2
 800bd6c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	68d2      	ldr	r2, [r2, #12]
 800bd76:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	741a      	strb	r2, [r3, #16]
 800bd80:	2200      	movs	r2, #0
 800bd82:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	7a9b      	ldrb	r3, [r3, #10]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <tcp_output_segment+0x158>
 800bd94:	2318      	movs	r3, #24
 800bd96:	e000      	b.n	800bd9a <tcp_output_segment+0x15a>
 800bd98:	2314      	movs	r3, #20
 800bd9a:	4413      	add	r3, r2
 800bd9c:	69fa      	ldr	r2, [r7, #28]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d006      	beq.n	800bdb0 <tcp_output_segment+0x170>
 800bda2:	4b10      	ldr	r3, [pc, #64]	@ (800bde4 <tcp_output_segment+0x1a4>)
 800bda4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800bda8:	4914      	ldr	r1, [pc, #80]	@ (800bdfc <tcp_output_segment+0x1bc>)
 800bdaa:	4810      	ldr	r0, [pc, #64]	@ (800bdec <tcp_output_segment+0x1ac>)
 800bdac:	f003 fbd4 	bl	800f558 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6858      	ldr	r0, [r3, #4]
 800bdb4:	68b9      	ldr	r1, [r7, #8]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	1d1c      	adds	r4, r3, #4
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	7add      	ldrb	r5, [r3, #11]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	7a9b      	ldrb	r3, [r3, #10]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	9202      	str	r2, [sp, #8]
 800bdc6:	2206      	movs	r2, #6
 800bdc8:	9201      	str	r2, [sp, #4]
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	462b      	mov	r3, r5
 800bdce:	4622      	mov	r2, r4
 800bdd0:	f002 fa04 	bl	800e1dc <ip4_output_if>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bdd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3720      	adds	r7, #32
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bdb0      	pop	{r4, r5, r7, pc}
 800bde4:	08011e38 	.word	0x08011e38
 800bde8:	080123fc 	.word	0x080123fc
 800bdec:	08011e8c 	.word	0x08011e8c
 800bdf0:	0801241c 	.word	0x0801241c
 800bdf4:	0801243c 	.word	0x0801243c
 800bdf8:	20008788 	.word	0x20008788
 800bdfc:	08012460 	.word	0x08012460

0800be00 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800be00:	b5b0      	push	{r4, r5, r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <tcp_rexmit_rto_prepare+0x1c>
 800be0e:	4b31      	ldr	r3, [pc, #196]	@ (800bed4 <tcp_rexmit_rto_prepare+0xd4>)
 800be10:	f240 6263 	movw	r2, #1635	@ 0x663
 800be14:	4930      	ldr	r1, [pc, #192]	@ (800bed8 <tcp_rexmit_rto_prepare+0xd8>)
 800be16:	4831      	ldr	r0, [pc, #196]	@ (800bedc <tcp_rexmit_rto_prepare+0xdc>)
 800be18:	f003 fb9e 	bl	800f558 <iprintf>

  if (pcb->unacked == NULL) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800be24:	f06f 0305 	mvn.w	r3, #5
 800be28:	e050      	b.n	800becc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	e00b      	b.n	800be4a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f7ff fee4 	bl	800bc00 <tcp_output_segment_busy>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800be3e:	f06f 0305 	mvn.w	r3, #5
 800be42:	e043      	b.n	800becc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1ef      	bne.n	800be32 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f7ff fed4 	bl	800bc00 <tcp_output_segment_busy>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800be5e:	f06f 0305 	mvn.w	r3, #5
 800be62:	e033      	b.n	800becc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	8b5b      	ldrh	r3, [r3, #26]
 800be7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800be82:	b29a      	uxth	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	4618      	mov	r0, r3
 800be90:	f7f8 fea7 	bl	8004be2 <lwip_htonl>
 800be94:	4604      	mov	r4, r0
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	891b      	ldrh	r3, [r3, #8]
 800be9a:	461d      	mov	r5, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	899b      	ldrh	r3, [r3, #12]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7f8 fe87 	bl	8004bb8 <lwip_htons>
 800beaa:	4603      	mov	r3, r0
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f003 0303 	and.w	r3, r3, #3
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d001      	beq.n	800beba <tcp_rexmit_rto_prepare+0xba>
 800beb6:	2301      	movs	r3, #1
 800beb8:	e000      	b.n	800bebc <tcp_rexmit_rto_prepare+0xbc>
 800beba:	2300      	movs	r3, #0
 800bebc:	442b      	add	r3, r5
 800bebe:	18e2      	adds	r2, r4, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bdb0      	pop	{r4, r5, r7, pc}
 800bed4:	08011e38 	.word	0x08011e38
 800bed8:	08012474 	.word	0x08012474
 800bedc:	08011e8c 	.word	0x08011e8c

0800bee0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <tcp_rexmit_rto_commit+0x1c>
 800beee:	4b0d      	ldr	r3, [pc, #52]	@ (800bf24 <tcp_rexmit_rto_commit+0x44>)
 800bef0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bef4:	490c      	ldr	r1, [pc, #48]	@ (800bf28 <tcp_rexmit_rto_commit+0x48>)
 800bef6:	480d      	ldr	r0, [pc, #52]	@ (800bf2c <tcp_rexmit_rto_commit+0x4c>)
 800bef8:	f003 fb2e 	bl	800f558 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf02:	2bff      	cmp	r3, #255	@ 0xff
 800bf04:	d007      	beq.n	800bf16 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fc7e 	bl	800b818 <tcp_output>
}
 800bf1c:	bf00      	nop
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	08011e38 	.word	0x08011e38
 800bf28:	08012498 	.word	0x08012498
 800bf2c:	08011e8c 	.word	0x08011e8c

0800bf30 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d106      	bne.n	800bf4c <tcp_rexmit_rto+0x1c>
 800bf3e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf68 <tcp_rexmit_rto+0x38>)
 800bf40:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bf44:	4909      	ldr	r1, [pc, #36]	@ (800bf6c <tcp_rexmit_rto+0x3c>)
 800bf46:	480a      	ldr	r0, [pc, #40]	@ (800bf70 <tcp_rexmit_rto+0x40>)
 800bf48:	f003 fb06 	bl	800f558 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ff57 	bl	800be00 <tcp_rexmit_rto_prepare>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7ff ffc1 	bl	800bee0 <tcp_rexmit_rto_commit>
  }
}
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	08011e38 	.word	0x08011e38
 800bf6c:	080124bc 	.word	0x080124bc
 800bf70:	08011e8c 	.word	0x08011e8c

0800bf74 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bf74:	b590      	push	{r4, r7, lr}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <tcp_rexmit+0x1c>
 800bf82:	4b2f      	ldr	r3, [pc, #188]	@ (800c040 <tcp_rexmit+0xcc>)
 800bf84:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800bf88:	492e      	ldr	r1, [pc, #184]	@ (800c044 <tcp_rexmit+0xd0>)
 800bf8a:	482f      	ldr	r0, [pc, #188]	@ (800c048 <tcp_rexmit+0xd4>)
 800bf8c:	f003 fae4 	bl	800f558 <iprintf>

  if (pcb->unacked == NULL) {
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d102      	bne.n	800bf9e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bf98:	f06f 0305 	mvn.w	r3, #5
 800bf9c:	e04c      	b.n	800c038 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfa2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bfa4:	68b8      	ldr	r0, [r7, #8]
 800bfa6:	f7ff fe2b 	bl	800bc00 <tcp_output_segment_busy>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bfb0:	f06f 0305 	mvn.w	r3, #5
 800bfb4:	e040      	b.n	800c038 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	336c      	adds	r3, #108	@ 0x6c
 800bfc2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfc4:	e002      	b.n	800bfcc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d011      	beq.n	800bff8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7f8 fe00 	bl	8004be2 <lwip_htonl>
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f8 fdf9 	bl	8004be2 <lwip_htonl>
 800bff0:	4603      	mov	r3, r0
 800bff2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dbe6      	blt.n	800bfc6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d103      	bne.n	800c016 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c01c:	2bff      	cmp	r3, #255	@ 0xff
 800c01e:	d007      	beq.n	800c030 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c026:	3301      	adds	r3, #1
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd90      	pop	{r4, r7, pc}
 800c040:	08011e38 	.word	0x08011e38
 800c044:	080124d8 	.word	0x080124d8
 800c048:	08011e8c 	.word	0x08011e8c

0800c04c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <tcp_rexmit_fast+0x1c>
 800c05a:	4b2a      	ldr	r3, [pc, #168]	@ (800c104 <tcp_rexmit_fast+0xb8>)
 800c05c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800c060:	4929      	ldr	r1, [pc, #164]	@ (800c108 <tcp_rexmit_fast+0xbc>)
 800c062:	482a      	ldr	r0, [pc, #168]	@ (800c10c <tcp_rexmit_fast+0xc0>)
 800c064:	f003 fa78 	bl	800f558 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d044      	beq.n	800c0fa <tcp_rexmit_fast+0xae>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	8b5b      	ldrh	r3, [r3, #26]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d13e      	bne.n	800c0fa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff ff79 	bl	800bf74 <tcp_rexmit>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d138      	bne.n	800c0fa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c094:	4293      	cmp	r3, r2
 800c096:	bf28      	it	cs
 800c098:	4613      	movcs	r3, r2
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	0fda      	lsrs	r2, r3, #31
 800c09e:	4413      	add	r3, r2
 800c0a0:	105b      	asrs	r3, r3, #1
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d206      	bcs.n	800c0ca <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	0049      	lsls	r1, r1, #1
 800c0d8:	440b      	add	r3, r1
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	4413      	add	r3, r2
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	8b5b      	ldrh	r3, [r3, #26]
 800c0ea:	f043 0304 	orr.w	r3, r3, #4
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	08011e38 	.word	0x08011e38
 800c108:	080124f0 	.word	0x080124f0
 800c10c:	08011e8c 	.word	0x08011e8c

0800c110 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	607b      	str	r3, [r7, #4]
 800c11a:	460b      	mov	r3, r1
 800c11c:	817b      	strh	r3, [r7, #10]
 800c11e:	4613      	mov	r3, r2
 800c120:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c122:	897a      	ldrh	r2, [r7, #10]
 800c124:	893b      	ldrh	r3, [r7, #8]
 800c126:	4413      	add	r3, r2
 800c128:	b29b      	uxth	r3, r3
 800c12a:	3314      	adds	r3, #20
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c132:	4619      	mov	r1, r3
 800c134:	2022      	movs	r0, #34	@ 0x22
 800c136:	f7f9 fd23 	bl	8005b80 <pbuf_alloc>
 800c13a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d04d      	beq.n	800c1de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c142:	897b      	ldrh	r3, [r7, #10]
 800c144:	3313      	adds	r3, #19
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	8952      	ldrh	r2, [r2, #10]
 800c14a:	4293      	cmp	r3, r2
 800c14c:	db06      	blt.n	800c15c <tcp_output_alloc_header_common+0x4c>
 800c14e:	4b26      	ldr	r3, [pc, #152]	@ (800c1e8 <tcp_output_alloc_header_common+0xd8>)
 800c150:	f240 7223 	movw	r2, #1827	@ 0x723
 800c154:	4925      	ldr	r1, [pc, #148]	@ (800c1ec <tcp_output_alloc_header_common+0xdc>)
 800c156:	4826      	ldr	r0, [pc, #152]	@ (800c1f0 <tcp_output_alloc_header_common+0xe0>)
 800c158:	f003 f9fe 	bl	800f558 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c162:	8c3b      	ldrh	r3, [r7, #32]
 800c164:	4618      	mov	r0, r3
 800c166:	f7f8 fd27 	bl	8004bb8 <lwip_htons>
 800c16a:	4603      	mov	r3, r0
 800c16c:	461a      	mov	r2, r3
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c174:	4618      	mov	r0, r3
 800c176:	f7f8 fd1f 	bl	8004bb8 <lwip_htons>
 800c17a:	4603      	mov	r3, r0
 800c17c:	461a      	mov	r2, r3
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f7f8 fd2a 	bl	8004be2 <lwip_htonl>
 800c18e:	4602      	mov	r2, r0
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c194:	897b      	ldrh	r3, [r7, #10]
 800c196:	089b      	lsrs	r3, r3, #2
 800c198:	b29b      	uxth	r3, r3
 800c19a:	3305      	adds	r3, #5
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	031b      	lsls	r3, r3, #12
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7f8 fd03 	bl	8004bb8 <lwip_htons>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c1ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7f8 fcfb 	bl	8004bb8 <lwip_htons>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	741a      	strb	r2, [r3, #16]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	749a      	strb	r2, [r3, #18]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c1de:	697b      	ldr	r3, [r7, #20]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	08011e38 	.word	0x08011e38
 800c1ec:	08012510 	.word	0x08012510
 800c1f0:	08011e8c 	.word	0x08011e8c

0800c1f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c1f4:	b5b0      	push	{r4, r5, r7, lr}
 800c1f6:	b08a      	sub	sp, #40	@ 0x28
 800c1f8:	af04      	add	r7, sp, #16
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	607b      	str	r3, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	817b      	strh	r3, [r7, #10]
 800c202:	4613      	mov	r3, r2
 800c204:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d106      	bne.n	800c21a <tcp_output_alloc_header+0x26>
 800c20c:	4b15      	ldr	r3, [pc, #84]	@ (800c264 <tcp_output_alloc_header+0x70>)
 800c20e:	f240 7242 	movw	r2, #1858	@ 0x742
 800c212:	4915      	ldr	r1, [pc, #84]	@ (800c268 <tcp_output_alloc_header+0x74>)
 800c214:	4815      	ldr	r0, [pc, #84]	@ (800c26c <tcp_output_alloc_header+0x78>)
 800c216:	f003 f99f 	bl	800f558 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	8adb      	ldrh	r3, [r3, #22]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	8b12      	ldrh	r2, [r2, #24]
 800c226:	68f9      	ldr	r1, [r7, #12]
 800c228:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800c22a:	893d      	ldrh	r5, [r7, #8]
 800c22c:	897c      	ldrh	r4, [r7, #10]
 800c22e:	9103      	str	r1, [sp, #12]
 800c230:	2110      	movs	r1, #16
 800c232:	9102      	str	r1, [sp, #8]
 800c234:	9201      	str	r2, [sp, #4]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	462a      	mov	r2, r5
 800c23c:	4621      	mov	r1, r4
 800c23e:	f7ff ff67 	bl	800c110 <tcp_output_alloc_header_common>
 800c242:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c252:	441a      	add	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800c258:	697b      	ldr	r3, [r7, #20]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bdb0      	pop	{r4, r5, r7, pc}
 800c262:	bf00      	nop
 800c264:	08011e38 	.word	0x08011e38
 800c268:	08012540 	.word	0x08012540
 800c26c:	08011e8c 	.word	0x08011e8c

0800c270 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	4611      	mov	r1, r2
 800c27c:	461a      	mov	r2, r3
 800c27e:	460b      	mov	r3, r1
 800c280:	71fb      	strb	r3, [r7, #7]
 800c282:	4613      	mov	r3, r2
 800c284:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d106      	bne.n	800c29e <tcp_output_fill_options+0x2e>
 800c290:	4b12      	ldr	r3, [pc, #72]	@ (800c2dc <tcp_output_fill_options+0x6c>)
 800c292:	f240 7256 	movw	r2, #1878	@ 0x756
 800c296:	4912      	ldr	r1, [pc, #72]	@ (800c2e0 <tcp_output_fill_options+0x70>)
 800c298:	4812      	ldr	r0, [pc, #72]	@ (800c2e4 <tcp_output_fill_options+0x74>)
 800c29a:	f003 f95d 	bl	800f558 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	3314      	adds	r3, #20
 800c2a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c2aa:	8bfb      	ldrh	r3, [r7, #30]
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	4413      	add	r3, r2
 800c2ba:	3314      	adds	r3, #20
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	4413      	add	r3, r2
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d006      	beq.n	800c2d4 <tcp_output_fill_options+0x64>
 800c2c6:	4b05      	ldr	r3, [pc, #20]	@ (800c2dc <tcp_output_fill_options+0x6c>)
 800c2c8:	f240 7275 	movw	r2, #1909	@ 0x775
 800c2cc:	4906      	ldr	r1, [pc, #24]	@ (800c2e8 <tcp_output_fill_options+0x78>)
 800c2ce:	4805      	ldr	r0, [pc, #20]	@ (800c2e4 <tcp_output_fill_options+0x74>)
 800c2d0:	f003 f942 	bl	800f558 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c2d4:	bf00      	nop
 800c2d6:	3720      	adds	r7, #32
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	08011e38 	.word	0x08011e38
 800c2e0:	08012568 	.word	0x08012568
 800c2e4:	08011e8c 	.word	0x08011e8c
 800c2e8:	08012460 	.word	0x08012460

0800c2ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08a      	sub	sp, #40	@ 0x28
 800c2f0:	af04      	add	r7, sp, #16
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d106      	bne.n	800c30e <tcp_output_control_segment+0x22>
 800c300:	4b1c      	ldr	r3, [pc, #112]	@ (800c374 <tcp_output_control_segment+0x88>)
 800c302:	f240 7287 	movw	r2, #1927	@ 0x787
 800c306:	491c      	ldr	r1, [pc, #112]	@ (800c378 <tcp_output_control_segment+0x8c>)
 800c308:	481c      	ldr	r0, [pc, #112]	@ (800c37c <tcp_output_control_segment+0x90>)
 800c30a:	f003 f925 	bl	800f558 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f7fe faea 	bl	800a8ec <tcp_route>
 800c318:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d102      	bne.n	800c326 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c320:	23fc      	movs	r3, #252	@ 0xfc
 800c322:	75fb      	strb	r3, [r7, #23]
 800c324:	e01c      	b.n	800c360 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d006      	beq.n	800c33a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	7adb      	ldrb	r3, [r3, #11]
 800c330:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	7a9b      	ldrb	r3, [r3, #10]
 800c336:	757b      	strb	r3, [r7, #21]
 800c338:	e003      	b.n	800c342 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c33a:	23ff      	movs	r3, #255	@ 0xff
 800c33c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c342:	7dba      	ldrb	r2, [r7, #22]
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	9302      	str	r3, [sp, #8]
 800c348:	2306      	movs	r3, #6
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	7d7b      	ldrb	r3, [r7, #21]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	4613      	mov	r3, r2
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	68b8      	ldr	r0, [r7, #8]
 800c358:	f001 ff40 	bl	800e1dc <ip4_output_if>
 800c35c:	4603      	mov	r3, r0
 800c35e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c360:	68b8      	ldr	r0, [r7, #8]
 800c362:	f7f9 fef1 	bl	8006148 <pbuf_free>
  return err;
 800c366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	08011e38 	.word	0x08011e38
 800c378:	08012590 	.word	0x08012590
 800c37c:	08011e8c 	.word	0x08011e8c

0800c380 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b08b      	sub	sp, #44	@ 0x2c
 800c384:	af04      	add	r7, sp, #16
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d106      	bne.n	800c3a2 <tcp_rst+0x22>
 800c394:	4b1f      	ldr	r3, [pc, #124]	@ (800c414 <tcp_rst+0x94>)
 800c396:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c39a:	491f      	ldr	r1, [pc, #124]	@ (800c418 <tcp_rst+0x98>)
 800c39c:	481f      	ldr	r0, [pc, #124]	@ (800c41c <tcp_rst+0x9c>)
 800c39e:	f003 f8db 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <tcp_rst+0x36>
 800c3a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c414 <tcp_rst+0x94>)
 800c3aa:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c3ae:	491c      	ldr	r1, [pc, #112]	@ (800c420 <tcp_rst+0xa0>)
 800c3b0:	481a      	ldr	r0, [pc, #104]	@ (800c41c <tcp_rst+0x9c>)
 800c3b2:	f003 f8d1 	bl	800f558 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c3ba:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c3be:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	b29c      	uxth	r4, r3
 800c3c4:	68b8      	ldr	r0, [r7, #8]
 800c3c6:	f7f8 fc0c 	bl	8004be2 <lwip_htonl>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	8abb      	ldrh	r3, [r7, #20]
 800c3ce:	9303      	str	r3, [sp, #12]
 800c3d0:	2314      	movs	r3, #20
 800c3d2:	9302      	str	r3, [sp, #8]
 800c3d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff fe94 	bl	800c110 <tcp_output_alloc_header_common>
 800c3e8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00c      	beq.n	800c40a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	6939      	ldr	r1, [r7, #16]
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f7ff ff3a 	bl	800c270 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	6939      	ldr	r1, [r7, #16]
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f7ff ff72 	bl	800c2ec <tcp_output_control_segment>
 800c408:	e000      	b.n	800c40c <tcp_rst+0x8c>
    return;
 800c40a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd90      	pop	{r4, r7, pc}
 800c412:	bf00      	nop
 800c414:	08011e38 	.word	0x08011e38
 800c418:	080125bc 	.word	0x080125bc
 800c41c:	08011e8c 	.word	0x08011e8c
 800c420:	080125d8 	.word	0x080125d8

0800c424 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c424:	b590      	push	{r4, r7, lr}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d106      	bne.n	800c448 <tcp_send_empty_ack+0x24>
 800c43a:	4b28      	ldr	r3, [pc, #160]	@ (800c4dc <tcp_send_empty_ack+0xb8>)
 800c43c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c440:	4927      	ldr	r1, [pc, #156]	@ (800c4e0 <tcp_send_empty_ack+0xbc>)
 800c442:	4828      	ldr	r0, [pc, #160]	@ (800c4e4 <tcp_send_empty_ack+0xc0>)
 800c444:	f003 f888 	bl	800f558 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c448:	7dfb      	ldrb	r3, [r7, #23]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	f003 0304 	and.w	r3, r3, #4
 800c452:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c454:	7d7b      	ldrb	r3, [r7, #21]
 800c456:	b29c      	uxth	r4, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f8 fbc0 	bl	8004be2 <lwip_htonl>
 800c462:	4603      	mov	r3, r0
 800c464:	2200      	movs	r2, #0
 800c466:	4621      	mov	r1, r4
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff fec3 	bl	800c1f4 <tcp_output_alloc_header>
 800c46e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	8b5b      	ldrh	r3, [r3, #26]
 800c47a:	f043 0303 	orr.w	r3, r3, #3
 800c47e:	b29a      	uxth	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c484:	f06f 0301 	mvn.w	r3, #1
 800c488:	e023      	b.n	800c4d2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c48a:	7dbb      	ldrb	r3, [r7, #22]
 800c48c:	7dfa      	ldrb	r2, [r7, #23]
 800c48e:	6939      	ldr	r1, [r7, #16]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff feed 	bl	800c270 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3304      	adds	r3, #4
 800c49c:	6939      	ldr	r1, [r7, #16]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7ff ff24 	bl	800c2ec <tcp_output_control_segment>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d007      	beq.n	800c4c0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	8b5b      	ldrh	r3, [r3, #26]
 800c4b4:	f043 0303 	orr.w	r3, r3, #3
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	835a      	strh	r2, [r3, #26]
 800c4be:	e006      	b.n	800c4ce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	8b5b      	ldrh	r3, [r3, #26]
 800c4c4:	f023 0303 	bic.w	r3, r3, #3
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	371c      	adds	r7, #28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd90      	pop	{r4, r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	08011e38 	.word	0x08011e38
 800c4e0:	080125f4 	.word	0x080125f4
 800c4e4:	08011e8c 	.word	0x08011e8c

0800c4e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c4e8:	b590      	push	{r4, r7, lr}
 800c4ea:	b087      	sub	sp, #28
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d106      	bne.n	800c508 <tcp_keepalive+0x20>
 800c4fa:	4b18      	ldr	r3, [pc, #96]	@ (800c55c <tcp_keepalive+0x74>)
 800c4fc:	f640 0224 	movw	r2, #2084	@ 0x824
 800c500:	4917      	ldr	r1, [pc, #92]	@ (800c560 <tcp_keepalive+0x78>)
 800c502:	4818      	ldr	r0, [pc, #96]	@ (800c564 <tcp_keepalive+0x7c>)
 800c504:	f003 f828 	bl	800f558 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c508:	7dfb      	ldrb	r3, [r7, #23]
 800c50a:	b29c      	uxth	r4, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c510:	3b01      	subs	r3, #1
 800c512:	4618      	mov	r0, r3
 800c514:	f7f8 fb65 	bl	8004be2 <lwip_htonl>
 800c518:	4603      	mov	r3, r0
 800c51a:	2200      	movs	r2, #0
 800c51c:	4621      	mov	r1, r4
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7ff fe68 	bl	800c1f4 <tcp_output_alloc_header>
 800c524:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d102      	bne.n	800c532 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295
 800c530:	e010      	b.n	800c554 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	2200      	movs	r2, #0
 800c536:	6939      	ldr	r1, [r7, #16]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff fe99 	bl	800c270 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3304      	adds	r3, #4
 800c544:	6939      	ldr	r1, [r7, #16]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff fed0 	bl	800c2ec <tcp_output_control_segment>
 800c54c:	4603      	mov	r3, r0
 800c54e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c550:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c554:	4618      	mov	r0, r3
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd90      	pop	{r4, r7, pc}
 800c55c:	08011e38 	.word	0x08011e38
 800c560:	08012614 	.word	0x08012614
 800c564:	08011e8c 	.word	0x08011e8c

0800c568 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c568:	b590      	push	{r4, r7, lr}
 800c56a:	b08b      	sub	sp, #44	@ 0x2c
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c570:	2300      	movs	r3, #0
 800c572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d106      	bne.n	800c58a <tcp_zero_window_probe+0x22>
 800c57c:	4b4c      	ldr	r3, [pc, #304]	@ (800c6b0 <tcp_zero_window_probe+0x148>)
 800c57e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c582:	494c      	ldr	r1, [pc, #304]	@ (800c6b4 <tcp_zero_window_probe+0x14c>)
 800c584:	484c      	ldr	r0, [pc, #304]	@ (800c6b8 <tcp_zero_window_probe+0x150>)
 800c586:	f002 ffe7 	bl	800f558 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c58e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c590:	6a3b      	ldr	r3, [r7, #32]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d101      	bne.n	800c59a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	e086      	b.n	800c6a8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c5a0:	2bff      	cmp	r3, #255	@ 0xff
 800c5a2:	d007      	beq.n	800c5b4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	b2da      	uxtb	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	899b      	ldrh	r3, [r3, #12]
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7f8 fafb 	bl	8004bb8 <lwip_htons>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d005      	beq.n	800c5da <tcp_zero_window_probe+0x72>
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	891b      	ldrh	r3, [r3, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <tcp_zero_window_probe+0x72>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <tcp_zero_window_probe+0x74>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c5de:	7ffb      	ldrb	r3, [r7, #31]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	bf0c      	ite	eq
 800c5e4:	2301      	moveq	r3, #1
 800c5e6:	2300      	movne	r3, #0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5f0:	b299      	uxth	r1, r3
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	8bba      	ldrh	r2, [r7, #28]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff fdfa 	bl	800c1f4 <tcp_output_alloc_header>
 800c600:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	e04c      	b.n	800c6a8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c614:	7ffb      	ldrb	r3, [r7, #31]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d011      	beq.n	800c63e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	899b      	ldrh	r3, [r3, #12]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	b21b      	sxth	r3, r3
 800c622:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c626:	b21c      	sxth	r4, r3
 800c628:	2011      	movs	r0, #17
 800c62a:	f7f8 fac5 	bl	8004bb8 <lwip_htons>
 800c62e:	4603      	mov	r3, r0
 800c630:	b21b      	sxth	r3, r3
 800c632:	4323      	orrs	r3, r4
 800c634:	b21b      	sxth	r3, r3
 800c636:	b29a      	uxth	r2, r3
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	819a      	strh	r2, [r3, #12]
 800c63c:	e010      	b.n	800c660 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	3314      	adds	r3, #20
 800c644:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	6858      	ldr	r0, [r3, #4]
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	891a      	ldrh	r2, [r3, #8]
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	891b      	ldrh	r3, [r3, #8]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	b29b      	uxth	r3, r3
 800c658:	2201      	movs	r2, #1
 800c65a:	6939      	ldr	r1, [r7, #16]
 800c65c:	f7f9 ff5e 	bl	800651c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	4618      	mov	r0, r3
 800c668:	f7f8 fabb 	bl	8004be2 <lwip_htonl>
 800c66c:	4603      	mov	r3, r0
 800c66e:	3301      	adds	r3, #1
 800c670:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da02      	bge.n	800c684 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c688:	2200      	movs	r2, #0
 800c68a:	69b9      	ldr	r1, [r7, #24]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff fdef 	bl	800c270 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3304      	adds	r3, #4
 800c698:	69b9      	ldr	r1, [r7, #24]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff fe26 	bl	800c2ec <tcp_output_control_segment>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c6a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	372c      	adds	r7, #44	@ 0x2c
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd90      	pop	{r4, r7, pc}
 800c6b0:	08011e38 	.word	0x08011e38
 800c6b4:	08012630 	.word	0x08012630
 800c6b8:	08011e8c 	.word	0x08011e8c

0800c6bc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c6c4:	f7fa f8aa 	bl	800681c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f4 <tcpip_tcp_timer+0x38>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d103      	bne.n	800c6d8 <tcpip_tcp_timer+0x1c>
 800c6d0:	4b09      	ldr	r3, [pc, #36]	@ (800c6f8 <tcpip_tcp_timer+0x3c>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d005      	beq.n	800c6e4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6d8:	2200      	movs	r2, #0
 800c6da:	4908      	ldr	r1, [pc, #32]	@ (800c6fc <tcpip_tcp_timer+0x40>)
 800c6dc:	20fa      	movs	r0, #250	@ 0xfa
 800c6de:	f000 f8f3 	bl	800c8c8 <sys_timeout>
 800c6e2:	e003      	b.n	800c6ec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c6e4:	4b06      	ldr	r3, [pc, #24]	@ (800c700 <tcpip_tcp_timer+0x44>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
  }
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20008794 	.word	0x20008794
 800c6f8:	20008798 	.word	0x20008798
 800c6fc:	0800c6bd 	.word	0x0800c6bd
 800c700:	200087e0 	.word	0x200087e0

0800c704 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c708:	4b0a      	ldr	r3, [pc, #40]	@ (800c734 <tcp_timer_needed+0x30>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10f      	bne.n	800c730 <tcp_timer_needed+0x2c>
 800c710:	4b09      	ldr	r3, [pc, #36]	@ (800c738 <tcp_timer_needed+0x34>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d103      	bne.n	800c720 <tcp_timer_needed+0x1c>
 800c718:	4b08      	ldr	r3, [pc, #32]	@ (800c73c <tcp_timer_needed+0x38>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c720:	4b04      	ldr	r3, [pc, #16]	@ (800c734 <tcp_timer_needed+0x30>)
 800c722:	2201      	movs	r2, #1
 800c724:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c726:	2200      	movs	r2, #0
 800c728:	4905      	ldr	r1, [pc, #20]	@ (800c740 <tcp_timer_needed+0x3c>)
 800c72a:	20fa      	movs	r0, #250	@ 0xfa
 800c72c:	f000 f8cc 	bl	800c8c8 <sys_timeout>
  }
}
 800c730:	bf00      	nop
 800c732:	bd80      	pop	{r7, pc}
 800c734:	200087e0 	.word	0x200087e0
 800c738:	20008794 	.word	0x20008794
 800c73c:	20008798 	.word	0x20008798
 800c740:	0800c6bd 	.word	0x0800c6bd

0800c744 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c750:	2006      	movs	r0, #6
 800c752:	f7f8 fea9 	bl	80054a8 <memp_malloc>
 800c756:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d109      	bne.n	800c772 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d151      	bne.n	800c808 <sys_timeout_abs+0xc4>
 800c764:	4b2a      	ldr	r3, [pc, #168]	@ (800c810 <sys_timeout_abs+0xcc>)
 800c766:	22be      	movs	r2, #190	@ 0xbe
 800c768:	492a      	ldr	r1, [pc, #168]	@ (800c814 <sys_timeout_abs+0xd0>)
 800c76a:	482b      	ldr	r0, [pc, #172]	@ (800c818 <sys_timeout_abs+0xd4>)
 800c76c:	f002 fef4 	bl	800f558 <iprintf>
    return;
 800c770:	e04a      	b.n	800c808 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2200      	movs	r2, #0
 800c776:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c78a:	4b24      	ldr	r3, [pc, #144]	@ (800c81c <sys_timeout_abs+0xd8>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d103      	bne.n	800c79a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c792:	4a22      	ldr	r2, [pc, #136]	@ (800c81c <sys_timeout_abs+0xd8>)
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	6013      	str	r3, [r2, #0]
    return;
 800c798:	e037      	b.n	800c80a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	4b1f      	ldr	r3, [pc, #124]	@ (800c81c <sys_timeout_abs+0xd8>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	0fdb      	lsrs	r3, r3, #31
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d007      	beq.n	800c7c2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c7b2:	4b1a      	ldr	r3, [pc, #104]	@ (800c81c <sys_timeout_abs+0xd8>)
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c7ba:	4a18      	ldr	r2, [pc, #96]	@ (800c81c <sys_timeout_abs+0xd8>)
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	e023      	b.n	800c80a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7c2:	4b16      	ldr	r3, [pc, #88]	@ (800c81c <sys_timeout_abs+0xd8>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	617b      	str	r3, [r7, #20]
 800c7c8:	e01a      	b.n	800c800 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00b      	beq.n	800c7ea <sys_timeout_abs+0xa6>
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	0fdb      	lsrs	r3, r3, #31
 800c7e0:	f003 0301 	and.w	r3, r3, #1
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d007      	beq.n	800c7fa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	601a      	str	r2, [r3, #0]
        break;
 800c7f8:	e007      	b.n	800c80a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1e1      	bne.n	800c7ca <sys_timeout_abs+0x86>
 800c806:	e000      	b.n	800c80a <sys_timeout_abs+0xc6>
    return;
 800c808:	bf00      	nop
      }
    }
  }
}
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	08012654 	.word	0x08012654
 800c814:	08012688 	.word	0x08012688
 800c818:	080126c8 	.word	0x080126c8
 800c81c:	200087d8 	.word	0x200087d8

0800c820 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	4798      	blx	r3

  now = sys_now();
 800c832:	f7f8 f93f 	bl	8004ab4 <sys_now>
 800c836:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	4b0f      	ldr	r3, [pc, #60]	@ (800c87c <lwip_cyclic_timer+0x5c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4413      	add	r3, r2
 800c842:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	0fdb      	lsrs	r3, r3, #31
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d009      	beq.n	800c86a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	4413      	add	r3, r2
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4907      	ldr	r1, [pc, #28]	@ (800c880 <lwip_cyclic_timer+0x60>)
 800c862:	4618      	mov	r0, r3
 800c864:	f7ff ff6e 	bl	800c744 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c868:	e004      	b.n	800c874 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	4904      	ldr	r1, [pc, #16]	@ (800c880 <lwip_cyclic_timer+0x60>)
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f7ff ff68 	bl	800c744 <sys_timeout_abs>
}
 800c874:	bf00      	nop
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	200087dc 	.word	0x200087dc
 800c880:	0800c821 	.word	0x0800c821

0800c884 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c88a:	2301      	movs	r3, #1
 800c88c:	607b      	str	r3, [r7, #4]
 800c88e:	e00e      	b.n	800c8ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c890:	4a0b      	ldr	r2, [pc, #44]	@ (800c8c0 <sys_timeouts_init+0x3c>)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	4a08      	ldr	r2, [pc, #32]	@ (800c8c0 <sys_timeouts_init+0x3c>)
 800c89e:	4413      	add	r3, r2
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4908      	ldr	r1, [pc, #32]	@ (800c8c4 <sys_timeouts_init+0x40>)
 800c8a4:	f000 f810 	bl	800c8c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	607b      	str	r3, [r7, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d9ed      	bls.n	800c890 <sys_timeouts_init+0xc>
  }
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	08013240 	.word	0x08013240
 800c8c4:	0800c821 	.word	0x0800c821

0800c8c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8da:	d306      	bcc.n	800c8ea <sys_timeout+0x22>
 800c8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c908 <sys_timeout+0x40>)
 800c8de:	f240 1229 	movw	r2, #297	@ 0x129
 800c8e2:	490a      	ldr	r1, [pc, #40]	@ (800c90c <sys_timeout+0x44>)
 800c8e4:	480a      	ldr	r0, [pc, #40]	@ (800c910 <sys_timeout+0x48>)
 800c8e6:	f002 fe37 	bl	800f558 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c8ea:	f7f8 f8e3 	bl	8004ab4 <sys_now>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	68b9      	ldr	r1, [r7, #8]
 800c8fa:	6978      	ldr	r0, [r7, #20]
 800c8fc:	f7ff ff22 	bl	800c744 <sys_timeout_abs>
#endif
}
 800c900:	bf00      	nop
 800c902:	3718      	adds	r7, #24
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	08012654 	.word	0x08012654
 800c90c:	080126f0 	.word	0x080126f0
 800c910:	080126c8 	.word	0x080126c8

0800c914 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c91a:	f7f8 f8cb 	bl	8004ab4 <sys_now>
 800c91e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c920:	4b1a      	ldr	r3, [pc, #104]	@ (800c98c <sys_check_timeouts+0x78>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	b2db      	uxtb	r3, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <sys_check_timeouts+0x1a>
 800c92a:	f7f9 f8d3 	bl	8005ad4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c92e:	4b18      	ldr	r3, [pc, #96]	@ (800c990 <sys_check_timeouts+0x7c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d022      	beq.n	800c980 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	0fdb      	lsrs	r3, r3, #31
 800c944:	f003 0301 	and.w	r3, r3, #1
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d11a      	bne.n	800c984 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a0f      	ldr	r2, [pc, #60]	@ (800c990 <sys_check_timeouts+0x7c>)
 800c954:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	4a0b      	ldr	r2, [pc, #44]	@ (800c994 <sys_check_timeouts+0x80>)
 800c968:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	2006      	movs	r0, #6
 800c96e:	f7f8 fe0b 	bl	8005588 <memp_free>
    if (handler != NULL) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d0d3      	beq.n	800c920 <sys_check_timeouts+0xc>
      handler(arg);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6838      	ldr	r0, [r7, #0]
 800c97c:	4798      	blx	r3
  do {
 800c97e:	e7cf      	b.n	800c920 <sys_check_timeouts+0xc>
      return;
 800c980:	bf00      	nop
 800c982:	e000      	b.n	800c986 <sys_check_timeouts+0x72>
      return;
 800c984:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	20008785 	.word	0x20008785
 800c990:	200087d8 	.word	0x200087d8
 800c994:	200087dc 	.word	0x200087dc

0800c998 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c99c:	f002 fcdc 	bl	800f358 <rand>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	4b01      	ldr	r3, [pc, #4]	@ (800c9b8 <udp_init+0x20>)
 800c9b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c9b4:	bf00      	nop
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20000010 	.word	0x20000010

0800c9bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d105      	bne.n	800c9dc <udp_input_local_match+0x20>
 800c9d0:	4b27      	ldr	r3, [pc, #156]	@ (800ca70 <udp_input_local_match+0xb4>)
 800c9d2:	2287      	movs	r2, #135	@ 0x87
 800c9d4:	4927      	ldr	r1, [pc, #156]	@ (800ca74 <udp_input_local_match+0xb8>)
 800c9d6:	4828      	ldr	r0, [pc, #160]	@ (800ca78 <udp_input_local_match+0xbc>)
 800c9d8:	f002 fdbe 	bl	800f558 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d105      	bne.n	800c9ee <udp_input_local_match+0x32>
 800c9e2:	4b23      	ldr	r3, [pc, #140]	@ (800ca70 <udp_input_local_match+0xb4>)
 800c9e4:	2288      	movs	r2, #136	@ 0x88
 800c9e6:	4925      	ldr	r1, [pc, #148]	@ (800ca7c <udp_input_local_match+0xc0>)
 800c9e8:	4823      	ldr	r0, [pc, #140]	@ (800ca78 <udp_input_local_match+0xbc>)
 800c9ea:	f002 fdb5 	bl	800f558 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	7a1b      	ldrb	r3, [r3, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00b      	beq.n	800ca0e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	7a1a      	ldrb	r2, [r3, #8]
 800c9fa:	4b21      	ldr	r3, [pc, #132]	@ (800ca80 <udp_input_local_match+0xc4>)
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca02:	3301      	adds	r3, #1
 800ca04:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d001      	beq.n	800ca0e <udp_input_local_match+0x52>
    return 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e02b      	b.n	800ca66 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d018      	beq.n	800ca46 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d013      	beq.n	800ca42 <udp_input_local_match+0x86>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00f      	beq.n	800ca42 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca22:	4b17      	ldr	r3, [pc, #92]	@ (800ca80 <udp_input_local_match+0xc4>)
 800ca24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d00a      	beq.n	800ca42 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	4b13      	ldr	r3, [pc, #76]	@ (800ca80 <udp_input_local_match+0xc4>)
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	405a      	eors	r2, r3
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	3308      	adds	r3, #8
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d110      	bne.n	800ca64 <udp_input_local_match+0xa8>
          return 1;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e00f      	b.n	800ca66 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d009      	beq.n	800ca60 <udp_input_local_match+0xa4>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d005      	beq.n	800ca60 <udp_input_local_match+0xa4>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	4b09      	ldr	r3, [pc, #36]	@ (800ca80 <udp_input_local_match+0xc4>)
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d101      	bne.n	800ca64 <udp_input_local_match+0xa8>
        return 1;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e000      	b.n	800ca66 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	0801273c 	.word	0x0801273c
 800ca74:	0801276c 	.word	0x0801276c
 800ca78:	08012790 	.word	0x08012790
 800ca7c:	080127b8 	.word	0x080127b8
 800ca80:	20005218 	.word	0x20005218

0800ca84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ca84:	b590      	push	{r4, r7, lr}
 800ca86:	b08d      	sub	sp, #52	@ 0x34
 800ca88:	af02      	add	r7, sp, #8
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d105      	bne.n	800caa4 <udp_input+0x20>
 800ca98:	4b7c      	ldr	r3, [pc, #496]	@ (800cc8c <udp_input+0x208>)
 800ca9a:	22cf      	movs	r2, #207	@ 0xcf
 800ca9c:	497c      	ldr	r1, [pc, #496]	@ (800cc90 <udp_input+0x20c>)
 800ca9e:	487d      	ldr	r0, [pc, #500]	@ (800cc94 <udp_input+0x210>)
 800caa0:	f002 fd5a 	bl	800f558 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d105      	bne.n	800cab6 <udp_input+0x32>
 800caaa:	4b78      	ldr	r3, [pc, #480]	@ (800cc8c <udp_input+0x208>)
 800caac:	22d0      	movs	r2, #208	@ 0xd0
 800caae:	497a      	ldr	r1, [pc, #488]	@ (800cc98 <udp_input+0x214>)
 800cab0:	4878      	ldr	r0, [pc, #480]	@ (800cc94 <udp_input+0x210>)
 800cab2:	f002 fd51 	bl	800f558 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	895b      	ldrh	r3, [r3, #10]
 800caba:	2b07      	cmp	r3, #7
 800cabc:	d803      	bhi.n	800cac6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7f9 fb42 	bl	8006148 <pbuf_free>
    goto end;
 800cac4:	e0de      	b.n	800cc84 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cacc:	4b73      	ldr	r3, [pc, #460]	@ (800cc9c <udp_input+0x218>)
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	4a72      	ldr	r2, [pc, #456]	@ (800cc9c <udp_input+0x218>)
 800cad2:	6812      	ldr	r2, [r2, #0]
 800cad4:	4611      	mov	r1, r2
 800cad6:	4618      	mov	r0, r3
 800cad8:	f001 fc58 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800cadc:	4603      	mov	r3, r0
 800cade:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7f8 f866 	bl	8004bb8 <lwip_htons>
 800caec:	4603      	mov	r3, r0
 800caee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	885b      	ldrh	r3, [r3, #2]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f8 f85e 	bl	8004bb8 <lwip_htons>
 800cafc:	4603      	mov	r3, r0
 800cafe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb0c:	4b64      	ldr	r3, [pc, #400]	@ (800cca0 <udp_input+0x21c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb12:	e054      	b.n	800cbbe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	8a5b      	ldrh	r3, [r3, #18]
 800cb18:	89fa      	ldrh	r2, [r7, #14]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d14a      	bne.n	800cbb4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cb1e:	7cfb      	ldrb	r3, [r7, #19]
 800cb20:	461a      	mov	r2, r3
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb26:	f7ff ff49 	bl	800c9bc <udp_input_local_match>
 800cb2a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d041      	beq.n	800cbb4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	7c1b      	ldrb	r3, [r3, #16]
 800cb34:	f003 0304 	and.w	r3, r3, #4
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11d      	bne.n	800cb78 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d102      	bne.n	800cb48 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb44:	61fb      	str	r3, [r7, #28]
 800cb46:	e017      	b.n	800cb78 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cb48:	7cfb      	ldrb	r3, [r7, #19]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d014      	beq.n	800cb78 <udp_input+0xf4>
 800cb4e:	4b53      	ldr	r3, [pc, #332]	@ (800cc9c <udp_input+0x218>)
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb56:	d10f      	bne.n	800cb78 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d008      	beq.n	800cb78 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d101      	bne.n	800cb78 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb76:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7a:	8a9b      	ldrh	r3, [r3, #20]
 800cb7c:	8a3a      	ldrh	r2, [r7, #16]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d118      	bne.n	800cbb4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb84:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d005      	beq.n	800cb96 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	4b43      	ldr	r3, [pc, #268]	@ (800cc9c <udp_input+0x218>)
 800cb90:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d10e      	bne.n	800cbb4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d014      	beq.n	800cbc6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9e:	68da      	ldr	r2, [r3, #12]
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cba4:	4b3e      	ldr	r3, [pc, #248]	@ (800cca0 <udp_input+0x21c>)
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cbac:	4a3c      	ldr	r2, [pc, #240]	@ (800cca0 <udp_input+0x21c>)
 800cbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cbb2:	e008      	b.n	800cbc6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1a7      	bne.n	800cb14 <udp_input+0x90>
 800cbc4:	e000      	b.n	800cbc8 <udp_input+0x144>
        break;
 800cbc6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <udp_input+0x15a>
    for_us = 1;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	76fb      	strb	r3, [r7, #27]
 800cbdc:	e00a      	b.n	800cbf4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	4b2d      	ldr	r3, [pc, #180]	@ (800cc9c <udp_input+0x218>)
 800cbe6:	695b      	ldr	r3, [r3, #20]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	bf0c      	ite	eq
 800cbec:	2301      	moveq	r3, #1
 800cbee:	2300      	movne	r3, #0
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cbf4:	7efb      	ldrb	r3, [r7, #27]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d041      	beq.n	800cc7e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cbfa:	2108      	movs	r1, #8
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7f9 fa1d 	bl	800603c <pbuf_remove_header>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00a      	beq.n	800cc1e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cc08:	4b20      	ldr	r3, [pc, #128]	@ (800cc8c <udp_input+0x208>)
 800cc0a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800cc0e:	4925      	ldr	r1, [pc, #148]	@ (800cca4 <udp_input+0x220>)
 800cc10:	4820      	ldr	r0, [pc, #128]	@ (800cc94 <udp_input+0x210>)
 800cc12:	f002 fca1 	bl	800f558 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7f9 fa96 	bl	8006148 <pbuf_free>
      goto end;
 800cc1c:	e032      	b.n	800cc84 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d012      	beq.n	800cc4a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc26:	699b      	ldr	r3, [r3, #24]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2e:	699c      	ldr	r4, [r3, #24]
 800cc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc32:	69d8      	ldr	r0, [r3, #28]
 800cc34:	8a3b      	ldrh	r3, [r7, #16]
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	4b1b      	ldr	r3, [pc, #108]	@ (800cca8 <udp_input+0x224>)
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc3e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cc40:	e021      	b.n	800cc86 <udp_input+0x202>
        pbuf_free(p);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7f9 fa80 	bl	8006148 <pbuf_free>
        goto end;
 800cc48:	e01c      	b.n	800cc84 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cc4a:	7cfb      	ldrb	r3, [r7, #19]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d112      	bne.n	800cc76 <udp_input+0x1f2>
 800cc50:	4b12      	ldr	r3, [pc, #72]	@ (800cc9c <udp_input+0x218>)
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc58:	2be0      	cmp	r3, #224	@ 0xe0
 800cc5a:	d00c      	beq.n	800cc76 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cc5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc9c <udp_input+0x218>)
 800cc5e:	899b      	ldrh	r3, [r3, #12]
 800cc60:	3308      	adds	r3, #8
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	b21b      	sxth	r3, r3
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7f9 fa5a 	bl	8006122 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cc6e:	2103      	movs	r1, #3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 f86b 	bl	800dd4c <icmp_dest_unreach>
      pbuf_free(p);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7f9 fa66 	bl	8006148 <pbuf_free>
  return;
 800cc7c:	e003      	b.n	800cc86 <udp_input+0x202>
    pbuf_free(p);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7f9 fa62 	bl	8006148 <pbuf_free>
  return;
 800cc84:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cc86:	372c      	adds	r7, #44	@ 0x2c
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd90      	pop	{r4, r7, pc}
 800cc8c:	0801273c 	.word	0x0801273c
 800cc90:	080127e0 	.word	0x080127e0
 800cc94:	08012790 	.word	0x08012790
 800cc98:	080127f8 	.word	0x080127f8
 800cc9c:	20005218 	.word	0x20005218
 800cca0:	200087e4 	.word	0x200087e4
 800cca4:	08012814 	.word	0x08012814
 800cca8:	20005228 	.word	0x20005228

0800ccac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01e      	beq.n	800ccfa <udp_netif_ip_addr_changed+0x4e>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d01a      	beq.n	800ccfa <udp_netif_ip_addr_changed+0x4e>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d017      	beq.n	800ccfa <udp_netif_ip_addr_changed+0x4e>
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d013      	beq.n	800ccfa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd08 <udp_netif_ip_addr_changed+0x5c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e00c      	b.n	800ccf4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d103      	bne.n	800ccee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1ef      	bne.n	800ccda <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	200087e4 	.word	0x200087e4

0800cd0c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cd14:	4915      	ldr	r1, [pc, #84]	@ (800cd6c <etharp_free_entry+0x60>)
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d013      	beq.n	800cd50 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cd28:	4910      	ldr	r1, [pc, #64]	@ (800cd6c <etharp_free_entry+0x60>)
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	4413      	add	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	440b      	add	r3, r1
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7f9 fa05 	bl	8006148 <pbuf_free>
    arp_table[i].q = NULL;
 800cd3e:	490b      	ldr	r1, [pc, #44]	@ (800cd6c <etharp_free_entry+0x60>)
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	4613      	mov	r3, r2
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	4413      	add	r3, r2
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	440b      	add	r3, r1
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cd50:	4906      	ldr	r1, [pc, #24]	@ (800cd6c <etharp_free_entry+0x60>)
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	4613      	mov	r3, r2
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	4413      	add	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	440b      	add	r3, r1
 800cd5e:	3314      	adds	r3, #20
 800cd60:	2200      	movs	r2, #0
 800cd62:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	200087e8 	.word	0x200087e8

0800cd70 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd76:	2300      	movs	r3, #0
 800cd78:	607b      	str	r3, [r7, #4]
 800cd7a:	e096      	b.n	800ceaa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cd7c:	494f      	ldr	r1, [pc, #316]	@ (800cebc <etharp_tmr+0x14c>)
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	4613      	mov	r3, r2
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	4413      	add	r3, r2
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	440b      	add	r3, r1
 800cd8a:	3314      	adds	r3, #20
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cd90:	78fb      	ldrb	r3, [r7, #3]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 8086 	beq.w	800cea4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cd98:	4948      	ldr	r1, [pc, #288]	@ (800cebc <etharp_tmr+0x14c>)
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	4413      	add	r3, r2
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	440b      	add	r3, r1
 800cda6:	3312      	adds	r3, #18
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	b298      	uxth	r0, r3
 800cdae:	4943      	ldr	r1, [pc, #268]	@ (800cebc <etharp_tmr+0x14c>)
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	4413      	add	r3, r2
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	440b      	add	r3, r1
 800cdbc:	3312      	adds	r3, #18
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cdc2:	493e      	ldr	r1, [pc, #248]	@ (800cebc <etharp_tmr+0x14c>)
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	4413      	add	r3, r2
 800cdcc:	00db      	lsls	r3, r3, #3
 800cdce:	440b      	add	r3, r1
 800cdd0:	3312      	adds	r3, #18
 800cdd2:	881b      	ldrh	r3, [r3, #0]
 800cdd4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800cdd8:	d215      	bcs.n	800ce06 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cdda:	4938      	ldr	r1, [pc, #224]	@ (800cebc <etharp_tmr+0x14c>)
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4613      	mov	r3, r2
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	4413      	add	r3, r2
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	440b      	add	r3, r1
 800cde8:	3314      	adds	r3, #20
 800cdea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d10e      	bne.n	800ce0e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cdf0:	4932      	ldr	r1, [pc, #200]	@ (800cebc <etharp_tmr+0x14c>)
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3312      	adds	r3, #18
 800ce00:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ce02:	2b04      	cmp	r3, #4
 800ce04:	d903      	bls.n	800ce0e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff ff80 	bl	800cd0c <etharp_free_entry>
 800ce0c:	e04a      	b.n	800cea4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ce0e:	492b      	ldr	r1, [pc, #172]	@ (800cebc <etharp_tmr+0x14c>)
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	4613      	mov	r3, r2
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	4413      	add	r3, r2
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	440b      	add	r3, r1
 800ce1c:	3314      	adds	r3, #20
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d10a      	bne.n	800ce3a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ce24:	4925      	ldr	r1, [pc, #148]	@ (800cebc <etharp_tmr+0x14c>)
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	3314      	adds	r3, #20
 800ce34:	2204      	movs	r2, #4
 800ce36:	701a      	strb	r2, [r3, #0]
 800ce38:	e034      	b.n	800cea4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ce3a:	4920      	ldr	r1, [pc, #128]	@ (800cebc <etharp_tmr+0x14c>)
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	005b      	lsls	r3, r3, #1
 800ce42:	4413      	add	r3, r2
 800ce44:	00db      	lsls	r3, r3, #3
 800ce46:	440b      	add	r3, r1
 800ce48:	3314      	adds	r3, #20
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b04      	cmp	r3, #4
 800ce4e:	d10a      	bne.n	800ce66 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ce50:	491a      	ldr	r1, [pc, #104]	@ (800cebc <etharp_tmr+0x14c>)
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	4613      	mov	r3, r2
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	4413      	add	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	440b      	add	r3, r1
 800ce5e:	3314      	adds	r3, #20
 800ce60:	2202      	movs	r2, #2
 800ce62:	701a      	strb	r2, [r3, #0]
 800ce64:	e01e      	b.n	800cea4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ce66:	4915      	ldr	r1, [pc, #84]	@ (800cebc <etharp_tmr+0x14c>)
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	4413      	add	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	440b      	add	r3, r1
 800ce74:	3314      	adds	r3, #20
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d113      	bne.n	800cea4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ce7c:	490f      	ldr	r1, [pc, #60]	@ (800cebc <etharp_tmr+0x14c>)
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	4613      	mov	r3, r2
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	4413      	add	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	440b      	add	r3, r1
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	4613      	mov	r3, r2
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	4413      	add	r3, r2
 800ce96:	00db      	lsls	r3, r3, #3
 800ce98:	4a08      	ldr	r2, [pc, #32]	@ (800cebc <etharp_tmr+0x14c>)
 800ce9a:	4413      	add	r3, r2
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	4619      	mov	r1, r3
 800cea0:	f000 fe3e 	bl	800db20 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	3301      	adds	r3, #1
 800cea8:	607b      	str	r3, [r7, #4]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b09      	cmp	r3, #9
 800ceae:	f77f af65 	ble.w	800cd7c <etharp_tmr+0xc>
      }
    }
  }
}
 800ceb2:	bf00      	nop
 800ceb4:	bf00      	nop
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	200087e8 	.word	0x200087e8

0800cec0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	@ 0x28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	460b      	mov	r3, r1
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cece:	230a      	movs	r3, #10
 800ced0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ced2:	230a      	movs	r3, #10
 800ced4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ced6:	230a      	movs	r3, #10
 800ced8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cede:	230a      	movs	r3, #10
 800cee0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	83bb      	strh	r3, [r7, #28]
 800cee6:	2300      	movs	r3, #0
 800cee8:	837b      	strh	r3, [r7, #26]
 800ceea:	2300      	movs	r3, #0
 800ceec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ceee:	2300      	movs	r3, #0
 800cef0:	843b      	strh	r3, [r7, #32]
 800cef2:	e0ae      	b.n	800d052 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cef4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cef8:	49a6      	ldr	r1, [pc, #664]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cefa:	4613      	mov	r3, r2
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	4413      	add	r3, r2
 800cf00:	00db      	lsls	r3, r3, #3
 800cf02:	440b      	add	r3, r1
 800cf04:	3314      	adds	r3, #20
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cf0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cf0e:	2b0a      	cmp	r3, #10
 800cf10:	d105      	bne.n	800cf1e <etharp_find_entry+0x5e>
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cf18:	8c3b      	ldrh	r3, [r7, #32]
 800cf1a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cf1c:	e095      	b.n	800d04a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f000 8092 	beq.w	800d04a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d009      	beq.n	800cf40 <etharp_find_entry+0x80>
 800cf2c:	7dfb      	ldrb	r3, [r7, #23]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d806      	bhi.n	800cf40 <etharp_find_entry+0x80>
 800cf32:	4b99      	ldr	r3, [pc, #612]	@ (800d198 <etharp_find_entry+0x2d8>)
 800cf34:	f240 1223 	movw	r2, #291	@ 0x123
 800cf38:	4998      	ldr	r1, [pc, #608]	@ (800d19c <etharp_find_entry+0x2dc>)
 800cf3a:	4899      	ldr	r0, [pc, #612]	@ (800d1a0 <etharp_find_entry+0x2e0>)
 800cf3c:	f002 fb0c 	bl	800f558 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d020      	beq.n	800cf88 <etharp_find_entry+0xc8>
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6819      	ldr	r1, [r3, #0]
 800cf4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf4e:	4891      	ldr	r0, [pc, #580]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	4413      	add	r3, r2
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	4403      	add	r3, r0
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4299      	cmp	r1, r3
 800cf60:	d112      	bne.n	800cf88 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00c      	beq.n	800cf82 <etharp_find_entry+0xc2>
 800cf68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf6c:	4989      	ldr	r1, [pc, #548]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cf6e:	4613      	mov	r3, r2
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	4413      	add	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	440b      	add	r3, r1
 800cf78:	3308      	adds	r3, #8
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d102      	bne.n	800cf88 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cf82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf86:	e100      	b.n	800d18a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d140      	bne.n	800d010 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cf8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf92:	4980      	ldr	r1, [pc, #512]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cf94:	4613      	mov	r3, r2
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	4413      	add	r3, r2
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	440b      	add	r3, r1
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d01a      	beq.n	800cfda <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cfa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfa8:	497a      	ldr	r1, [pc, #488]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cfaa:	4613      	mov	r3, r2
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	4413      	add	r3, r2
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	440b      	add	r3, r1
 800cfb4:	3312      	adds	r3, #18
 800cfb6:	881b      	ldrh	r3, [r3, #0]
 800cfb8:	8bba      	ldrh	r2, [r7, #28]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d845      	bhi.n	800d04a <etharp_find_entry+0x18a>
            old_queue = i;
 800cfbe:	8c3b      	ldrh	r3, [r7, #32]
 800cfc0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cfc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfc6:	4973      	ldr	r1, [pc, #460]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cfc8:	4613      	mov	r3, r2
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	4413      	add	r3, r2
 800cfce:	00db      	lsls	r3, r3, #3
 800cfd0:	440b      	add	r3, r1
 800cfd2:	3312      	adds	r3, #18
 800cfd4:	881b      	ldrh	r3, [r3, #0]
 800cfd6:	83bb      	strh	r3, [r7, #28]
 800cfd8:	e037      	b.n	800d04a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cfda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfde:	496d      	ldr	r1, [pc, #436]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	4413      	add	r3, r2
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	440b      	add	r3, r1
 800cfea:	3312      	adds	r3, #18
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	8b7a      	ldrh	r2, [r7, #26]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d82a      	bhi.n	800d04a <etharp_find_entry+0x18a>
            old_pending = i;
 800cff4:	8c3b      	ldrh	r3, [r7, #32]
 800cff6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800cff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cffc:	4965      	ldr	r1, [pc, #404]	@ (800d194 <etharp_find_entry+0x2d4>)
 800cffe:	4613      	mov	r3, r2
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	4413      	add	r3, r2
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	440b      	add	r3, r1
 800d008:	3312      	adds	r3, #18
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	837b      	strh	r3, [r7, #26]
 800d00e:	e01c      	b.n	800d04a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d010:	7dfb      	ldrb	r3, [r7, #23]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d919      	bls.n	800d04a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d016:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d01a:	495e      	ldr	r1, [pc, #376]	@ (800d194 <etharp_find_entry+0x2d4>)
 800d01c:	4613      	mov	r3, r2
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	4413      	add	r3, r2
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	440b      	add	r3, r1
 800d026:	3312      	adds	r3, #18
 800d028:	881b      	ldrh	r3, [r3, #0]
 800d02a:	8b3a      	ldrh	r2, [r7, #24]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d80c      	bhi.n	800d04a <etharp_find_entry+0x18a>
            old_stable = i;
 800d030:	8c3b      	ldrh	r3, [r7, #32]
 800d032:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800d034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d038:	4956      	ldr	r1, [pc, #344]	@ (800d194 <etharp_find_entry+0x2d4>)
 800d03a:	4613      	mov	r3, r2
 800d03c:	005b      	lsls	r3, r3, #1
 800d03e:	4413      	add	r3, r2
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	440b      	add	r3, r1
 800d044:	3312      	adds	r3, #18
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d04a:	8c3b      	ldrh	r3, [r7, #32]
 800d04c:	3301      	adds	r3, #1
 800d04e:	b29b      	uxth	r3, r3
 800d050:	843b      	strh	r3, [r7, #32]
 800d052:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d056:	2b09      	cmp	r3, #9
 800d058:	f77f af4c 	ble.w	800cef4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d108      	bne.n	800d078 <etharp_find_entry+0x1b8>
 800d066:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d06a:	2b0a      	cmp	r3, #10
 800d06c:	d107      	bne.n	800d07e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d06e:	7afb      	ldrb	r3, [r7, #11]
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	d102      	bne.n	800d07e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d078:	f04f 33ff 	mov.w	r3, #4294967295
 800d07c:	e085      	b.n	800d18a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d07e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d082:	2b09      	cmp	r3, #9
 800d084:	dc02      	bgt.n	800d08c <etharp_find_entry+0x1cc>
    i = empty;
 800d086:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d088:	843b      	strh	r3, [r7, #32]
 800d08a:	e039      	b.n	800d100 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d08c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d090:	2b09      	cmp	r3, #9
 800d092:	dc14      	bgt.n	800d0be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d094:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d096:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d09c:	493d      	ldr	r1, [pc, #244]	@ (800d194 <etharp_find_entry+0x2d4>)
 800d09e:	4613      	mov	r3, r2
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	4413      	add	r3, r2
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	440b      	add	r3, r1
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d018      	beq.n	800d0e0 <etharp_find_entry+0x220>
 800d0ae:	4b3a      	ldr	r3, [pc, #232]	@ (800d198 <etharp_find_entry+0x2d8>)
 800d0b0:	f240 126d 	movw	r2, #365	@ 0x16d
 800d0b4:	493b      	ldr	r1, [pc, #236]	@ (800d1a4 <etharp_find_entry+0x2e4>)
 800d0b6:	483a      	ldr	r0, [pc, #232]	@ (800d1a0 <etharp_find_entry+0x2e0>)
 800d0b8:	f002 fa4e 	bl	800f558 <iprintf>
 800d0bc:	e010      	b.n	800d0e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d0be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d0c2:	2b09      	cmp	r3, #9
 800d0c4:	dc02      	bgt.n	800d0cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d0c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d0c8:	843b      	strh	r3, [r7, #32]
 800d0ca:	e009      	b.n	800d0e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d0cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d0d0:	2b09      	cmp	r3, #9
 800d0d2:	dc02      	bgt.n	800d0da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d0d4:	8bfb      	ldrh	r3, [r7, #30]
 800d0d6:	843b      	strh	r3, [r7, #32]
 800d0d8:	e002      	b.n	800d0e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d0da:	f04f 33ff 	mov.w	r3, #4294967295
 800d0de:	e054      	b.n	800d18a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d0e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0e4:	2b09      	cmp	r3, #9
 800d0e6:	dd06      	ble.n	800d0f6 <etharp_find_entry+0x236>
 800d0e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d198 <etharp_find_entry+0x2d8>)
 800d0ea:	f240 127f 	movw	r2, #383	@ 0x17f
 800d0ee:	492e      	ldr	r1, [pc, #184]	@ (800d1a8 <etharp_find_entry+0x2e8>)
 800d0f0:	482b      	ldr	r0, [pc, #172]	@ (800d1a0 <etharp_find_entry+0x2e0>)
 800d0f2:	f002 fa31 	bl	800f558 <iprintf>
    etharp_free_entry(i);
 800d0f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff fe06 	bl	800cd0c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d100:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d104:	2b09      	cmp	r3, #9
 800d106:	dd06      	ble.n	800d116 <etharp_find_entry+0x256>
 800d108:	4b23      	ldr	r3, [pc, #140]	@ (800d198 <etharp_find_entry+0x2d8>)
 800d10a:	f240 1283 	movw	r2, #387	@ 0x183
 800d10e:	4926      	ldr	r1, [pc, #152]	@ (800d1a8 <etharp_find_entry+0x2e8>)
 800d110:	4823      	ldr	r0, [pc, #140]	@ (800d1a0 <etharp_find_entry+0x2e0>)
 800d112:	f002 fa21 	bl	800f558 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d116:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d11a:	491e      	ldr	r1, [pc, #120]	@ (800d194 <etharp_find_entry+0x2d4>)
 800d11c:	4613      	mov	r3, r2
 800d11e:	005b      	lsls	r3, r3, #1
 800d120:	4413      	add	r3, r2
 800d122:	00db      	lsls	r3, r3, #3
 800d124:	440b      	add	r3, r1
 800d126:	3314      	adds	r3, #20
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d006      	beq.n	800d13c <etharp_find_entry+0x27c>
 800d12e:	4b1a      	ldr	r3, [pc, #104]	@ (800d198 <etharp_find_entry+0x2d8>)
 800d130:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d134:	491d      	ldr	r1, [pc, #116]	@ (800d1ac <etharp_find_entry+0x2ec>)
 800d136:	481a      	ldr	r0, [pc, #104]	@ (800d1a0 <etharp_find_entry+0x2e0>)
 800d138:	f002 fa0e 	bl	800f558 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00b      	beq.n	800d15a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6819      	ldr	r1, [r3, #0]
 800d14a:	4812      	ldr	r0, [pc, #72]	@ (800d194 <etharp_find_entry+0x2d4>)
 800d14c:	4613      	mov	r3, r2
 800d14e:	005b      	lsls	r3, r3, #1
 800d150:	4413      	add	r3, r2
 800d152:	00db      	lsls	r3, r3, #3
 800d154:	4403      	add	r3, r0
 800d156:	3304      	adds	r3, #4
 800d158:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d15a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d15e:	490d      	ldr	r1, [pc, #52]	@ (800d194 <etharp_find_entry+0x2d4>)
 800d160:	4613      	mov	r3, r2
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	4413      	add	r3, r2
 800d166:	00db      	lsls	r3, r3, #3
 800d168:	440b      	add	r3, r1
 800d16a:	3312      	adds	r3, #18
 800d16c:	2200      	movs	r2, #0
 800d16e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d174:	4907      	ldr	r1, [pc, #28]	@ (800d194 <etharp_find_entry+0x2d4>)
 800d176:	4613      	mov	r3, r2
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	4413      	add	r3, r2
 800d17c:	00db      	lsls	r3, r3, #3
 800d17e:	440b      	add	r3, r1
 800d180:	3308      	adds	r3, #8
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d186:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3728      	adds	r7, #40	@ 0x28
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	200087e8 	.word	0x200087e8
 800d198:	08012aa0 	.word	0x08012aa0
 800d19c:	08012ad8 	.word	0x08012ad8
 800d1a0:	08012b18 	.word	0x08012b18
 800d1a4:	08012b40 	.word	0x08012b40
 800d1a8:	08012b58 	.word	0x08012b58
 800d1ac:	08012b6c 	.word	0x08012b6c

0800d1b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
 800d1bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d1c4:	2b06      	cmp	r3, #6
 800d1c6:	d006      	beq.n	800d1d6 <etharp_update_arp_entry+0x26>
 800d1c8:	4b48      	ldr	r3, [pc, #288]	@ (800d2ec <etharp_update_arp_entry+0x13c>)
 800d1ca:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d1ce:	4948      	ldr	r1, [pc, #288]	@ (800d2f0 <etharp_update_arp_entry+0x140>)
 800d1d0:	4848      	ldr	r0, [pc, #288]	@ (800d2f4 <etharp_update_arp_entry+0x144>)
 800d1d2:	f002 f9c1 	bl	800f558 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d012      	beq.n	800d202 <etharp_update_arp_entry+0x52>
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00e      	beq.n	800d202 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	68f9      	ldr	r1, [r7, #12]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f001 f8ce 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800d1f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d105      	bne.n	800d202 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1fe:	2be0      	cmp	r3, #224	@ 0xe0
 800d200:	d102      	bne.n	800d208 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d202:	f06f 030f 	mvn.w	r3, #15
 800d206:	e06c      	b.n	800d2e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d208:	78fb      	ldrb	r3, [r7, #3]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	4619      	mov	r1, r3
 800d20e:	68b8      	ldr	r0, [r7, #8]
 800d210:	f7ff fe56 	bl	800cec0 <etharp_find_entry>
 800d214:	4603      	mov	r3, r0
 800d216:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	da02      	bge.n	800d226 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d220:	8afb      	ldrh	r3, [r7, #22]
 800d222:	b25b      	sxtb	r3, r3
 800d224:	e05d      	b.n	800d2e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d226:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d22a:	4933      	ldr	r1, [pc, #204]	@ (800d2f8 <etharp_update_arp_entry+0x148>)
 800d22c:	4613      	mov	r3, r2
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	4413      	add	r3, r2
 800d232:	00db      	lsls	r3, r3, #3
 800d234:	440b      	add	r3, r1
 800d236:	3314      	adds	r3, #20
 800d238:	2202      	movs	r2, #2
 800d23a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d23c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d240:	492d      	ldr	r1, [pc, #180]	@ (800d2f8 <etharp_update_arp_entry+0x148>)
 800d242:	4613      	mov	r3, r2
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	4413      	add	r3, r2
 800d248:	00db      	lsls	r3, r3, #3
 800d24a:	440b      	add	r3, r1
 800d24c:	3308      	adds	r3, #8
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d252:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d256:	4613      	mov	r3, r2
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	4413      	add	r3, r2
 800d25c:	00db      	lsls	r3, r3, #3
 800d25e:	3308      	adds	r3, #8
 800d260:	4a25      	ldr	r2, [pc, #148]	@ (800d2f8 <etharp_update_arp_entry+0x148>)
 800d262:	4413      	add	r3, r2
 800d264:	3304      	adds	r3, #4
 800d266:	2206      	movs	r2, #6
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f002 fa89 	bl	800f782 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d270:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d274:	4920      	ldr	r1, [pc, #128]	@ (800d2f8 <etharp_update_arp_entry+0x148>)
 800d276:	4613      	mov	r3, r2
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	4413      	add	r3, r2
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	440b      	add	r3, r1
 800d280:	3312      	adds	r3, #18
 800d282:	2200      	movs	r2, #0
 800d284:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d286:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d28a:	491b      	ldr	r1, [pc, #108]	@ (800d2f8 <etharp_update_arp_entry+0x148>)
 800d28c:	4613      	mov	r3, r2
 800d28e:	005b      	lsls	r3, r3, #1
 800d290:	4413      	add	r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	440b      	add	r3, r1
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d021      	beq.n	800d2e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d29c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2a0:	4915      	ldr	r1, [pc, #84]	@ (800d2f8 <etharp_update_arp_entry+0x148>)
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	005b      	lsls	r3, r3, #1
 800d2a6:	4413      	add	r3, r2
 800d2a8:	00db      	lsls	r3, r3, #3
 800d2aa:	440b      	add	r3, r1
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d2b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d2b4:	4910      	ldr	r1, [pc, #64]	@ (800d2f8 <etharp_update_arp_entry+0x148>)
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	4413      	add	r3, r2
 800d2bc:	00db      	lsls	r3, r3, #3
 800d2be:	440b      	add	r3, r1
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d2ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6939      	ldr	r1, [r7, #16]
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f001 fff7 	bl	800f2c8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d2da:	6938      	ldr	r0, [r7, #16]
 800d2dc:	f7f8 ff34 	bl	8006148 <pbuf_free>
  }
  return ERR_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	08012aa0 	.word	0x08012aa0
 800d2f0:	08012b98 	.word	0x08012b98
 800d2f4:	08012b18 	.word	0x08012b18
 800d2f8:	200087e8 	.word	0x200087e8

0800d2fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d2fc:	b5b0      	push	{r4, r5, r7, lr}
 800d2fe:	b08a      	sub	sp, #40	@ 0x28
 800d300:	af04      	add	r7, sp, #16
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d107      	bne.n	800d31c <etharp_input+0x20>
 800d30c:	4b3d      	ldr	r3, [pc, #244]	@ (800d404 <etharp_input+0x108>)
 800d30e:	f240 228a 	movw	r2, #650	@ 0x28a
 800d312:	493d      	ldr	r1, [pc, #244]	@ (800d408 <etharp_input+0x10c>)
 800d314:	483d      	ldr	r0, [pc, #244]	@ (800d40c <etharp_input+0x110>)
 800d316:	f002 f91f 	bl	800f558 <iprintf>
 800d31a:	e06f      	b.n	800d3fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	b29b      	uxth	r3, r3
 800d328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d32c:	d10c      	bne.n	800d348 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d332:	2b06      	cmp	r3, #6
 800d334:	d108      	bne.n	800d348 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	d104      	bne.n	800d348 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	885b      	ldrh	r3, [r3, #2]
 800d342:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d344:	2b08      	cmp	r3, #8
 800d346:	d003      	beq.n	800d350 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7f8 fefd 	bl	8006148 <pbuf_free>
    return;
 800d34e:	e055      	b.n	800d3fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	330e      	adds	r3, #14
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	3318      	adds	r3, #24
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	3304      	adds	r3, #4
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d102      	bne.n	800d370 <etharp_input+0x74>
    for_us = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	75fb      	strb	r3, [r7, #23]
 800d36e:	e009      	b.n	800d384 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	3304      	adds	r3, #4
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	429a      	cmp	r2, r3
 800d37a:	bf0c      	ite	eq
 800d37c:	2301      	moveq	r3, #1
 800d37e:	2300      	movne	r3, #0
 800d380:	b2db      	uxtb	r3, r3
 800d382:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	f103 0208 	add.w	r2, r3, #8
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <etharp_input+0x98>
 800d390:	2301      	movs	r3, #1
 800d392:	e000      	b.n	800d396 <etharp_input+0x9a>
 800d394:	2302      	movs	r3, #2
 800d396:	f107 010c 	add.w	r1, r7, #12
 800d39a:	6838      	ldr	r0, [r7, #0]
 800d39c:	f7ff ff08 	bl	800d1b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	88db      	ldrh	r3, [r3, #6]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3aa:	d003      	beq.n	800d3b4 <etharp_input+0xb8>
 800d3ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3b0:	d01e      	beq.n	800d3f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d3b2:	e020      	b.n	800d3f6 <etharp_input+0xfa>
      if (for_us) {
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d01c      	beq.n	800d3f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d3d0:	693a      	ldr	r2, [r7, #16]
 800d3d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d3d4:	2102      	movs	r1, #2
 800d3d6:	9103      	str	r1, [sp, #12]
 800d3d8:	f107 010c 	add.w	r1, r7, #12
 800d3dc:	9102      	str	r1, [sp, #8]
 800d3de:	9201      	str	r2, [sp, #4]
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	462b      	mov	r3, r5
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	6838      	ldr	r0, [r7, #0]
 800d3ea:	f000 faeb 	bl	800d9c4 <etharp_raw>
      break;
 800d3ee:	e001      	b.n	800d3f4 <etharp_input+0xf8>
      break;
 800d3f0:	bf00      	nop
 800d3f2:	e000      	b.n	800d3f6 <etharp_input+0xfa>
      break;
 800d3f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7f8 fea6 	bl	8006148 <pbuf_free>
}
 800d3fc:	3718      	adds	r7, #24
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bdb0      	pop	{r4, r5, r7, pc}
 800d402:	bf00      	nop
 800d404:	08012aa0 	.word	0x08012aa0
 800d408:	08012bf0 	.word	0x08012bf0
 800d40c:	08012b18 	.word	0x08012b18

0800d410 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af02      	add	r7, sp, #8
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	4613      	mov	r3, r2
 800d41c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d41e:	79fa      	ldrb	r2, [r7, #7]
 800d420:	4944      	ldr	r1, [pc, #272]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d422:	4613      	mov	r3, r2
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	4413      	add	r3, r2
 800d428:	00db      	lsls	r3, r3, #3
 800d42a:	440b      	add	r3, r1
 800d42c:	3314      	adds	r3, #20
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d806      	bhi.n	800d442 <etharp_output_to_arp_index+0x32>
 800d434:	4b40      	ldr	r3, [pc, #256]	@ (800d538 <etharp_output_to_arp_index+0x128>)
 800d436:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d43a:	4940      	ldr	r1, [pc, #256]	@ (800d53c <etharp_output_to_arp_index+0x12c>)
 800d43c:	4840      	ldr	r0, [pc, #256]	@ (800d540 <etharp_output_to_arp_index+0x130>)
 800d43e:	f002 f88b 	bl	800f558 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d442:	79fa      	ldrb	r2, [r7, #7]
 800d444:	493b      	ldr	r1, [pc, #236]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d446:	4613      	mov	r3, r2
 800d448:	005b      	lsls	r3, r3, #1
 800d44a:	4413      	add	r3, r2
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	440b      	add	r3, r1
 800d450:	3314      	adds	r3, #20
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	2b02      	cmp	r3, #2
 800d456:	d153      	bne.n	800d500 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d458:	79fa      	ldrb	r2, [r7, #7]
 800d45a:	4936      	ldr	r1, [pc, #216]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d45c:	4613      	mov	r3, r2
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	4413      	add	r3, r2
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	440b      	add	r3, r1
 800d466:	3312      	adds	r3, #18
 800d468:	881b      	ldrh	r3, [r3, #0]
 800d46a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d46e:	d919      	bls.n	800d4a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d470:	79fa      	ldrb	r2, [r7, #7]
 800d472:	4613      	mov	r3, r2
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	4413      	add	r3, r2
 800d478:	00db      	lsls	r3, r3, #3
 800d47a:	4a2e      	ldr	r2, [pc, #184]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d47c:	4413      	add	r3, r2
 800d47e:	3304      	adds	r3, #4
 800d480:	4619      	mov	r1, r3
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f000 fb4c 	bl	800db20 <etharp_request>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d138      	bne.n	800d500 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d48e:	79fa      	ldrb	r2, [r7, #7]
 800d490:	4928      	ldr	r1, [pc, #160]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d492:	4613      	mov	r3, r2
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	4413      	add	r3, r2
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	440b      	add	r3, r1
 800d49c:	3314      	adds	r3, #20
 800d49e:	2203      	movs	r2, #3
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	e02d      	b.n	800d500 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d4a4:	79fa      	ldrb	r2, [r7, #7]
 800d4a6:	4923      	ldr	r1, [pc, #140]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	4413      	add	r3, r2
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	440b      	add	r3, r1
 800d4b2:	3312      	adds	r3, #18
 800d4b4:	881b      	ldrh	r3, [r3, #0]
 800d4b6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d4ba:	d321      	bcc.n	800d500 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d4bc:	79fa      	ldrb	r2, [r7, #7]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	4413      	add	r3, r2
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	4a1b      	ldr	r2, [pc, #108]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d4c8:	4413      	add	r3, r2
 800d4ca:	1d19      	adds	r1, r3, #4
 800d4cc:	79fa      	ldrb	r2, [r7, #7]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	4413      	add	r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	3308      	adds	r3, #8
 800d4d8:	4a16      	ldr	r2, [pc, #88]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d4da:	4413      	add	r3, r2
 800d4dc:	3304      	adds	r3, #4
 800d4de:	461a      	mov	r2, r3
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 fafb 	bl	800dadc <etharp_request_dst>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d109      	bne.n	800d500 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4ec:	79fa      	ldrb	r2, [r7, #7]
 800d4ee:	4911      	ldr	r1, [pc, #68]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	4413      	add	r3, r2
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	440b      	add	r3, r1
 800d4fa:	3314      	adds	r3, #20
 800d4fc:	2203      	movs	r2, #3
 800d4fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d506:	79fa      	ldrb	r2, [r7, #7]
 800d508:	4613      	mov	r3, r2
 800d50a:	005b      	lsls	r3, r3, #1
 800d50c:	4413      	add	r3, r2
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	3308      	adds	r3, #8
 800d512:	4a08      	ldr	r2, [pc, #32]	@ (800d534 <etharp_output_to_arp_index+0x124>)
 800d514:	4413      	add	r3, r2
 800d516:	3304      	adds	r3, #4
 800d518:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d51c:	9200      	str	r2, [sp, #0]
 800d51e:	460a      	mov	r2, r1
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f001 fed0 	bl	800f2c8 <ethernet_output>
 800d528:	4603      	mov	r3, r0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	200087e8 	.word	0x200087e8
 800d538:	08012aa0 	.word	0x08012aa0
 800d53c:	08012c10 	.word	0x08012c10
 800d540:	08012b18 	.word	0x08012b18

0800d544 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	@ 0x28
 800d548:	af02      	add	r7, sp, #8
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d106      	bne.n	800d568 <etharp_output+0x24>
 800d55a:	4b73      	ldr	r3, [pc, #460]	@ (800d728 <etharp_output+0x1e4>)
 800d55c:	f240 321e 	movw	r2, #798	@ 0x31e
 800d560:	4972      	ldr	r1, [pc, #456]	@ (800d72c <etharp_output+0x1e8>)
 800d562:	4873      	ldr	r0, [pc, #460]	@ (800d730 <etharp_output+0x1ec>)
 800d564:	f001 fff8 	bl	800f558 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <etharp_output+0x38>
 800d56e:	4b6e      	ldr	r3, [pc, #440]	@ (800d728 <etharp_output+0x1e4>)
 800d570:	f240 321f 	movw	r2, #799	@ 0x31f
 800d574:	496f      	ldr	r1, [pc, #444]	@ (800d734 <etharp_output+0x1f0>)
 800d576:	486e      	ldr	r0, [pc, #440]	@ (800d730 <etharp_output+0x1ec>)
 800d578:	f001 ffee 	bl	800f558 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d106      	bne.n	800d590 <etharp_output+0x4c>
 800d582:	4b69      	ldr	r3, [pc, #420]	@ (800d728 <etharp_output+0x1e4>)
 800d584:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d588:	496b      	ldr	r1, [pc, #428]	@ (800d738 <etharp_output+0x1f4>)
 800d58a:	4869      	ldr	r0, [pc, #420]	@ (800d730 <etharp_output+0x1ec>)
 800d58c:	f001 ffe4 	bl	800f558 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68f9      	ldr	r1, [r7, #12]
 800d596:	4618      	mov	r0, r3
 800d598:	f000 fef8 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d5a2:	4b66      	ldr	r3, [pc, #408]	@ (800d73c <etharp_output+0x1f8>)
 800d5a4:	61fb      	str	r3, [r7, #28]
 800d5a6:	e0af      	b.n	800d708 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d5b0:	2be0      	cmp	r3, #224	@ 0xe0
 800d5b2:	d118      	bne.n	800d5e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d5bc:	235e      	movs	r3, #94	@ 0x5e
 800d5be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3302      	adds	r3, #2
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	3303      	adds	r3, #3
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d5de:	f107 0310 	add.w	r3, r7, #16
 800d5e2:	61fb      	str	r3, [r7, #28]
 800d5e4:	e090      	b.n	800d708 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	405a      	eors	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3308      	adds	r3, #8
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d012      	beq.n	800d624 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d604:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d608:	4293      	cmp	r3, r2
 800d60a:	d00b      	beq.n	800d624 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	330c      	adds	r3, #12
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d003      	beq.n	800d61e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	330c      	adds	r3, #12
 800d61a:	61bb      	str	r3, [r7, #24]
 800d61c:	e002      	b.n	800d624 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d61e:	f06f 0303 	mvn.w	r3, #3
 800d622:	e07d      	b.n	800d720 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d624:	4b46      	ldr	r3, [pc, #280]	@ (800d740 <etharp_output+0x1fc>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	4619      	mov	r1, r3
 800d62a:	4a46      	ldr	r2, [pc, #280]	@ (800d744 <etharp_output+0x200>)
 800d62c:	460b      	mov	r3, r1
 800d62e:	005b      	lsls	r3, r3, #1
 800d630:	440b      	add	r3, r1
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	4413      	add	r3, r2
 800d636:	3314      	adds	r3, #20
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d925      	bls.n	800d68a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d63e:	4b40      	ldr	r3, [pc, #256]	@ (800d740 <etharp_output+0x1fc>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	4619      	mov	r1, r3
 800d644:	4a3f      	ldr	r2, [pc, #252]	@ (800d744 <etharp_output+0x200>)
 800d646:	460b      	mov	r3, r1
 800d648:	005b      	lsls	r3, r3, #1
 800d64a:	440b      	add	r3, r1
 800d64c:	00db      	lsls	r3, r3, #3
 800d64e:	4413      	add	r3, r2
 800d650:	3308      	adds	r3, #8
 800d652:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	429a      	cmp	r2, r3
 800d658:	d117      	bne.n	800d68a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	4b38      	ldr	r3, [pc, #224]	@ (800d740 <etharp_output+0x1fc>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	4618      	mov	r0, r3
 800d664:	4937      	ldr	r1, [pc, #220]	@ (800d744 <etharp_output+0x200>)
 800d666:	4603      	mov	r3, r0
 800d668:	005b      	lsls	r3, r3, #1
 800d66a:	4403      	add	r3, r0
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	440b      	add	r3, r1
 800d670:	3304      	adds	r3, #4
 800d672:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d674:	429a      	cmp	r2, r3
 800d676:	d108      	bne.n	800d68a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d678:	4b31      	ldr	r3, [pc, #196]	@ (800d740 <etharp_output+0x1fc>)
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	461a      	mov	r2, r3
 800d67e:	68b9      	ldr	r1, [r7, #8]
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f7ff fec5 	bl	800d410 <etharp_output_to_arp_index>
 800d686:	4603      	mov	r3, r0
 800d688:	e04a      	b.n	800d720 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d68a:	2300      	movs	r3, #0
 800d68c:	75fb      	strb	r3, [r7, #23]
 800d68e:	e031      	b.n	800d6f4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d690:	7dfa      	ldrb	r2, [r7, #23]
 800d692:	492c      	ldr	r1, [pc, #176]	@ (800d744 <etharp_output+0x200>)
 800d694:	4613      	mov	r3, r2
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	4413      	add	r3, r2
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	440b      	add	r3, r1
 800d69e:	3314      	adds	r3, #20
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d923      	bls.n	800d6ee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d6a6:	7dfa      	ldrb	r2, [r7, #23]
 800d6a8:	4926      	ldr	r1, [pc, #152]	@ (800d744 <etharp_output+0x200>)
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	4413      	add	r3, r2
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	440b      	add	r3, r1
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d117      	bne.n	800d6ee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	6819      	ldr	r1, [r3, #0]
 800d6c2:	7dfa      	ldrb	r2, [r7, #23]
 800d6c4:	481f      	ldr	r0, [pc, #124]	@ (800d744 <etharp_output+0x200>)
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4413      	add	r3, r2
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	4403      	add	r3, r0
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d6d4:	4299      	cmp	r1, r3
 800d6d6:	d10a      	bne.n	800d6ee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d6d8:	4a19      	ldr	r2, [pc, #100]	@ (800d740 <etharp_output+0x1fc>)
 800d6da:	7dfb      	ldrb	r3, [r7, #23]
 800d6dc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	68b9      	ldr	r1, [r7, #8]
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f7ff fe93 	bl	800d410 <etharp_output_to_arp_index>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	e018      	b.n	800d720 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	75fb      	strb	r3, [r7, #23]
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	2b09      	cmp	r3, #9
 800d6f8:	d9ca      	bls.n	800d690 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	69b9      	ldr	r1, [r7, #24]
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f000 f822 	bl	800d748 <etharp_query>
 800d704:	4603      	mov	r3, r0
 800d706:	e00b      	b.n	800d720 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d70e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	68b9      	ldr	r1, [r7, #8]
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f001 fdd5 	bl	800f2c8 <ethernet_output>
 800d71e:	4603      	mov	r3, r0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3720      	adds	r7, #32
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	08012aa0 	.word	0x08012aa0
 800d72c:	08012bf0 	.word	0x08012bf0
 800d730:	08012b18 	.word	0x08012b18
 800d734:	08012c40 	.word	0x08012c40
 800d738:	08012be0 	.word	0x08012be0
 800d73c:	0801325c 	.word	0x0801325c
 800d740:	200088d8 	.word	0x200088d8
 800d744:	200087e8 	.word	0x200087e8

0800d748 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b08c      	sub	sp, #48	@ 0x30
 800d74c:	af02      	add	r7, sp, #8
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3326      	adds	r3, #38	@ 0x26
 800d758:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d75a:	23ff      	movs	r3, #255	@ 0xff
 800d75c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68f9      	ldr	r1, [r7, #12]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 fe0e 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10c      	bne.n	800d790 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d77e:	2be0      	cmp	r3, #224	@ 0xe0
 800d780:	d006      	beq.n	800d790 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d003      	beq.n	800d790 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d790:	f06f 030f 	mvn.w	r3, #15
 800d794:	e101      	b.n	800d99a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	2101      	movs	r1, #1
 800d79a:	68b8      	ldr	r0, [r7, #8]
 800d79c:	f7ff fb90 	bl	800cec0 <etharp_find_entry>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d7a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	da02      	bge.n	800d7b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d7ac:	8a7b      	ldrh	r3, [r7, #18]
 800d7ae:	b25b      	sxtb	r3, r3
 800d7b0:	e0f3      	b.n	800d99a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d7b2:	8a7b      	ldrh	r3, [r7, #18]
 800d7b4:	2b7e      	cmp	r3, #126	@ 0x7e
 800d7b6:	d906      	bls.n	800d7c6 <etharp_query+0x7e>
 800d7b8:	4b7a      	ldr	r3, [pc, #488]	@ (800d9a4 <etharp_query+0x25c>)
 800d7ba:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d7be:	497a      	ldr	r1, [pc, #488]	@ (800d9a8 <etharp_query+0x260>)
 800d7c0:	487a      	ldr	r0, [pc, #488]	@ (800d9ac <etharp_query+0x264>)
 800d7c2:	f001 fec9 	bl	800f558 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d7c6:	8a7b      	ldrh	r3, [r7, #18]
 800d7c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d7ca:	7c7a      	ldrb	r2, [r7, #17]
 800d7cc:	4978      	ldr	r1, [pc, #480]	@ (800d9b0 <etharp_query+0x268>)
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	440b      	add	r3, r1
 800d7d8:	3314      	adds	r3, #20
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d115      	bne.n	800d80c <etharp_query+0xc4>
    is_new_entry = 1;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d7e4:	7c7a      	ldrb	r2, [r7, #17]
 800d7e6:	4972      	ldr	r1, [pc, #456]	@ (800d9b0 <etharp_query+0x268>)
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	4413      	add	r3, r2
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	440b      	add	r3, r1
 800d7f2:	3314      	adds	r3, #20
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d7f8:	7c7a      	ldrb	r2, [r7, #17]
 800d7fa:	496d      	ldr	r1, [pc, #436]	@ (800d9b0 <etharp_query+0x268>)
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	4413      	add	r3, r2
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	440b      	add	r3, r1
 800d806:	3308      	adds	r3, #8
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d80c:	7c7a      	ldrb	r2, [r7, #17]
 800d80e:	4968      	ldr	r1, [pc, #416]	@ (800d9b0 <etharp_query+0x268>)
 800d810:	4613      	mov	r3, r2
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	4413      	add	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	440b      	add	r3, r1
 800d81a:	3314      	adds	r3, #20
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d011      	beq.n	800d846 <etharp_query+0xfe>
 800d822:	7c7a      	ldrb	r2, [r7, #17]
 800d824:	4962      	ldr	r1, [pc, #392]	@ (800d9b0 <etharp_query+0x268>)
 800d826:	4613      	mov	r3, r2
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	4413      	add	r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	440b      	add	r3, r1
 800d830:	3314      	adds	r3, #20
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d806      	bhi.n	800d846 <etharp_query+0xfe>
 800d838:	4b5a      	ldr	r3, [pc, #360]	@ (800d9a4 <etharp_query+0x25c>)
 800d83a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d83e:	495d      	ldr	r1, [pc, #372]	@ (800d9b4 <etharp_query+0x26c>)
 800d840:	485a      	ldr	r0, [pc, #360]	@ (800d9ac <etharp_query+0x264>)
 800d842:	f001 fe89 	bl	800f558 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d102      	bne.n	800d852 <etharp_query+0x10a>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10c      	bne.n	800d86c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d852:	68b9      	ldr	r1, [r7, #8]
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f000 f963 	bl	800db20 <etharp_request>
 800d85a:	4603      	mov	r3, r0
 800d85c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d102      	bne.n	800d86c <etharp_query+0x124>
      return result;
 800d866:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d86a:	e096      	b.n	800d99a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <etharp_query+0x138>
 800d872:	4b4c      	ldr	r3, [pc, #304]	@ (800d9a4 <etharp_query+0x25c>)
 800d874:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d878:	494f      	ldr	r1, [pc, #316]	@ (800d9b8 <etharp_query+0x270>)
 800d87a:	484c      	ldr	r0, [pc, #304]	@ (800d9ac <etharp_query+0x264>)
 800d87c:	f001 fe6c 	bl	800f558 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d880:	7c7a      	ldrb	r2, [r7, #17]
 800d882:	494b      	ldr	r1, [pc, #300]	@ (800d9b0 <etharp_query+0x268>)
 800d884:	4613      	mov	r3, r2
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	4413      	add	r3, r2
 800d88a:	00db      	lsls	r3, r3, #3
 800d88c:	440b      	add	r3, r1
 800d88e:	3314      	adds	r3, #20
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d917      	bls.n	800d8c6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d896:	4a49      	ldr	r2, [pc, #292]	@ (800d9bc <etharp_query+0x274>)
 800d898:	7c7b      	ldrb	r3, [r7, #17]
 800d89a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d89c:	7c7a      	ldrb	r2, [r7, #17]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	005b      	lsls	r3, r3, #1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	4a41      	ldr	r2, [pc, #260]	@ (800d9b0 <etharp_query+0x268>)
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d8b2:	9200      	str	r2, [sp, #0]
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	6879      	ldr	r1, [r7, #4]
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f001 fd05 	bl	800f2c8 <ethernet_output>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8c4:	e067      	b.n	800d996 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d8c6:	7c7a      	ldrb	r2, [r7, #17]
 800d8c8:	4939      	ldr	r1, [pc, #228]	@ (800d9b0 <etharp_query+0x268>)
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	005b      	lsls	r3, r3, #1
 800d8ce:	4413      	add	r3, r2
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	440b      	add	r3, r1
 800d8d4:	3314      	adds	r3, #20
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d15c      	bne.n	800d996 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8e4:	e01c      	b.n	800d920 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d8e6:	69fb      	ldr	r3, [r7, #28]
 800d8e8:	895a      	ldrh	r2, [r3, #10]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	891b      	ldrh	r3, [r3, #8]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d10a      	bne.n	800d908 <etharp_query+0x1c0>
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d006      	beq.n	800d908 <etharp_query+0x1c0>
 800d8fa:	4b2a      	ldr	r3, [pc, #168]	@ (800d9a4 <etharp_query+0x25c>)
 800d8fc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d900:	492f      	ldr	r1, [pc, #188]	@ (800d9c0 <etharp_query+0x278>)
 800d902:	482a      	ldr	r0, [pc, #168]	@ (800d9ac <etharp_query+0x264>)
 800d904:	f001 fe28 	bl	800f558 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	7b1b      	ldrb	r3, [r3, #12]
 800d90c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <etharp_query+0x1d2>
        copy_needed = 1;
 800d914:	2301      	movs	r3, #1
 800d916:	61bb      	str	r3, [r7, #24]
        break;
 800d918:	e005      	b.n	800d926 <etharp_query+0x1de>
      }
      p = p->next;
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1df      	bne.n	800d8e6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d007      	beq.n	800d93c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d932:	200e      	movs	r0, #14
 800d934:	f7f8 fef6 	bl	8006724 <pbuf_clone>
 800d938:	61f8      	str	r0, [r7, #28]
 800d93a:	e004      	b.n	800d946 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d940:	69f8      	ldr	r0, [r7, #28]
 800d942:	f7f8 fca1 	bl	8006288 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d021      	beq.n	800d990 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d94c:	7c7a      	ldrb	r2, [r7, #17]
 800d94e:	4918      	ldr	r1, [pc, #96]	@ (800d9b0 <etharp_query+0x268>)
 800d950:	4613      	mov	r3, r2
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	4413      	add	r3, r2
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	440b      	add	r3, r1
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00a      	beq.n	800d976 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d960:	7c7a      	ldrb	r2, [r7, #17]
 800d962:	4913      	ldr	r1, [pc, #76]	@ (800d9b0 <etharp_query+0x268>)
 800d964:	4613      	mov	r3, r2
 800d966:	005b      	lsls	r3, r3, #1
 800d968:	4413      	add	r3, r2
 800d96a:	00db      	lsls	r3, r3, #3
 800d96c:	440b      	add	r3, r1
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4618      	mov	r0, r3
 800d972:	f7f8 fbe9 	bl	8006148 <pbuf_free>
      }
      arp_table[i].q = p;
 800d976:	7c7a      	ldrb	r2, [r7, #17]
 800d978:	490d      	ldr	r1, [pc, #52]	@ (800d9b0 <etharp_query+0x268>)
 800d97a:	4613      	mov	r3, r2
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	4413      	add	r3, r2
 800d980:	00db      	lsls	r3, r3, #3
 800d982:	440b      	add	r3, r1
 800d984:	69fa      	ldr	r2, [r7, #28]
 800d986:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d988:	2300      	movs	r3, #0
 800d98a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d98e:	e002      	b.n	800d996 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d990:	23ff      	movs	r3, #255	@ 0xff
 800d992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d996:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3728      	adds	r7, #40	@ 0x28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	08012aa0 	.word	0x08012aa0
 800d9a8:	08012c4c 	.word	0x08012c4c
 800d9ac:	08012b18 	.word	0x08012b18
 800d9b0:	200087e8 	.word	0x200087e8
 800d9b4:	08012c5c 	.word	0x08012c5c
 800d9b8:	08012c40 	.word	0x08012c40
 800d9bc:	200088d8 	.word	0x200088d8
 800d9c0:	08012c84 	.word	0x08012c84

0800d9c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	@ 0x28
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d106      	bne.n	800d9ea <etharp_raw+0x26>
 800d9dc:	4b3a      	ldr	r3, [pc, #232]	@ (800dac8 <etharp_raw+0x104>)
 800d9de:	f240 4257 	movw	r2, #1111	@ 0x457
 800d9e2:	493a      	ldr	r1, [pc, #232]	@ (800dacc <etharp_raw+0x108>)
 800d9e4:	483a      	ldr	r0, [pc, #232]	@ (800dad0 <etharp_raw+0x10c>)
 800d9e6:	f001 fdb7 	bl	800f558 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d9ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d9ee:	211c      	movs	r1, #28
 800d9f0:	200e      	movs	r0, #14
 800d9f2:	f7f8 f8c5 	bl	8005b80 <pbuf_alloc>
 800d9f6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d102      	bne.n	800da04 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800da02:	e05d      	b.n	800dac0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	895b      	ldrh	r3, [r3, #10]
 800da08:	2b1b      	cmp	r3, #27
 800da0a:	d806      	bhi.n	800da1a <etharp_raw+0x56>
 800da0c:	4b2e      	ldr	r3, [pc, #184]	@ (800dac8 <etharp_raw+0x104>)
 800da0e:	f240 4262 	movw	r2, #1122	@ 0x462
 800da12:	4930      	ldr	r1, [pc, #192]	@ (800dad4 <etharp_raw+0x110>)
 800da14:	482e      	ldr	r0, [pc, #184]	@ (800dad0 <etharp_raw+0x10c>)
 800da16:	f001 fd9f 	bl	800f558 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800da20:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800da22:	4618      	mov	r0, r3
 800da24:	f7f7 f8c8 	bl	8004bb8 <lwip_htons>
 800da28:	4603      	mov	r3, r0
 800da2a:	461a      	mov	r2, r3
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800da36:	2b06      	cmp	r3, #6
 800da38:	d006      	beq.n	800da48 <etharp_raw+0x84>
 800da3a:	4b23      	ldr	r3, [pc, #140]	@ (800dac8 <etharp_raw+0x104>)
 800da3c:	f240 4269 	movw	r2, #1129	@ 0x469
 800da40:	4925      	ldr	r1, [pc, #148]	@ (800dad8 <etharp_raw+0x114>)
 800da42:	4823      	ldr	r0, [pc, #140]	@ (800dad0 <etharp_raw+0x10c>)
 800da44:	f001 fd88 	bl	800f558 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	3308      	adds	r3, #8
 800da4c:	2206      	movs	r2, #6
 800da4e:	6839      	ldr	r1, [r7, #0]
 800da50:	4618      	mov	r0, r3
 800da52:	f001 fe96 	bl	800f782 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	3312      	adds	r3, #18
 800da5a:	2206      	movs	r2, #6
 800da5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da5e:	4618      	mov	r0, r3
 800da60:	f001 fe8f 	bl	800f782 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	330e      	adds	r3, #14
 800da68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da6a:	6812      	ldr	r2, [r2, #0]
 800da6c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	3318      	adds	r3, #24
 800da72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da74:	6812      	ldr	r2, [r2, #0]
 800da76:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2200      	movs	r2, #0
 800da7c:	701a      	strb	r2, [r3, #0]
 800da7e:	2200      	movs	r2, #0
 800da80:	f042 0201 	orr.w	r2, r2, #1
 800da84:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2200      	movs	r2, #0
 800da8a:	f042 0208 	orr.w	r2, r2, #8
 800da8e:	709a      	strb	r2, [r3, #2]
 800da90:	2200      	movs	r2, #0
 800da92:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2206      	movs	r2, #6
 800da98:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2204      	movs	r2, #4
 800da9e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800daa0:	f640 0306 	movw	r3, #2054	@ 0x806
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	69b9      	ldr	r1, [r7, #24]
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f001 fc0b 	bl	800f2c8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800dab2:	69b8      	ldr	r0, [r7, #24]
 800dab4:	f7f8 fb48 	bl	8006148 <pbuf_free>
  p = NULL;
 800dab8:	2300      	movs	r3, #0
 800daba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dabc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	08012aa0 	.word	0x08012aa0
 800dacc:	08012bf0 	.word	0x08012bf0
 800dad0:	08012b18 	.word	0x08012b18
 800dad4:	08012ca0 	.word	0x08012ca0
 800dad8:	08012cd4 	.word	0x08012cd4

0800dadc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800daf8:	2201      	movs	r2, #1
 800dafa:	9203      	str	r2, [sp, #12]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	9202      	str	r2, [sp, #8]
 800db00:	4a06      	ldr	r2, [pc, #24]	@ (800db1c <etharp_request_dst+0x40>)
 800db02:	9201      	str	r2, [sp, #4]
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	4603      	mov	r3, r0
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7ff ff5a 	bl	800d9c4 <etharp_raw>
 800db10:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	08013264 	.word	0x08013264

0800db20 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800db2a:	4a05      	ldr	r2, [pc, #20]	@ (800db40 <etharp_request+0x20>)
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7ff ffd4 	bl	800dadc <etharp_request_dst>
 800db34:	4603      	mov	r3, r0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	0801325c 	.word	0x0801325c

0800db44 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08e      	sub	sp, #56	@ 0x38
 800db48:	af04      	add	r7, sp, #16
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800db4e:	4b79      	ldr	r3, [pc, #484]	@ (800dd34 <icmp_input+0x1f0>)
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800db54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	f003 030f 	and.w	r3, r3, #15
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	b2db      	uxtb	r3, r3
 800db62:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800db64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db66:	2b13      	cmp	r3, #19
 800db68:	f240 80cd 	bls.w	800dd06 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	895b      	ldrh	r3, [r3, #10]
 800db70:	2b03      	cmp	r3, #3
 800db72:	f240 80ca 	bls.w	800dd0a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800db80:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 80b7 	beq.w	800dcf8 <icmp_input+0x1b4>
 800db8a:	2b08      	cmp	r3, #8
 800db8c:	f040 80b7 	bne.w	800dcfe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800db90:	4b69      	ldr	r3, [pc, #420]	@ (800dd38 <icmp_input+0x1f4>)
 800db92:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db94:	4b67      	ldr	r3, [pc, #412]	@ (800dd34 <icmp_input+0x1f0>)
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db9c:	2be0      	cmp	r3, #224	@ 0xe0
 800db9e:	f000 80bb 	beq.w	800dd18 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dba2:	4b64      	ldr	r3, [pc, #400]	@ (800dd34 <icmp_input+0x1f0>)
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	4a63      	ldr	r2, [pc, #396]	@ (800dd34 <icmp_input+0x1f0>)
 800dba8:	6812      	ldr	r2, [r2, #0]
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 fbed 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 80b1 	bne.w	800dd1c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	891b      	ldrh	r3, [r3, #8]
 800dbbe:	2b07      	cmp	r3, #7
 800dbc0:	f240 80a5 	bls.w	800dd0e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dbc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbc6:	330e      	adds	r3, #14
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7f8 fa26 	bl	800601c <pbuf_add_header>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d04b      	beq.n	800dc6e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	891a      	ldrh	r2, [r3, #8]
 800dbda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dbdc:	4413      	add	r3, r2
 800dbde:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	891b      	ldrh	r3, [r3, #8]
 800dbe4:	8b7a      	ldrh	r2, [r7, #26]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	f0c0 809a 	bcc.w	800dd20 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dbec:	8b7b      	ldrh	r3, [r7, #26]
 800dbee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	200e      	movs	r0, #14
 800dbf6:	f7f7 ffc3 	bl	8005b80 <pbuf_alloc>
 800dbfa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f000 8090 	beq.w	800dd24 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	895b      	ldrh	r3, [r3, #10]
 800dc08:	461a      	mov	r2, r3
 800dc0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d203      	bcs.n	800dc1a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dc12:	6978      	ldr	r0, [r7, #20]
 800dc14:	f7f8 fa98 	bl	8006148 <pbuf_free>
          goto icmperr;
 800dc18:	e085      	b.n	800dd26 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dc20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc22:	4618      	mov	r0, r3
 800dc24:	f001 fdad 	bl	800f782 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dc28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6978      	ldr	r0, [r7, #20]
 800dc2e:	f7f8 fa05 	bl	800603c <pbuf_remove_header>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d009      	beq.n	800dc4c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc38:	4b40      	ldr	r3, [pc, #256]	@ (800dd3c <icmp_input+0x1f8>)
 800dc3a:	22b6      	movs	r2, #182	@ 0xb6
 800dc3c:	4940      	ldr	r1, [pc, #256]	@ (800dd40 <icmp_input+0x1fc>)
 800dc3e:	4841      	ldr	r0, [pc, #260]	@ (800dd44 <icmp_input+0x200>)
 800dc40:	f001 fc8a 	bl	800f558 <iprintf>
          pbuf_free(r);
 800dc44:	6978      	ldr	r0, [r7, #20]
 800dc46:	f7f8 fa7f 	bl	8006148 <pbuf_free>
          goto icmperr;
 800dc4a:	e06c      	b.n	800dd26 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	6978      	ldr	r0, [r7, #20]
 800dc50:	f7f8 fb92 	bl	8006378 <pbuf_copy>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dc5a:	6978      	ldr	r0, [r7, #20]
 800dc5c:	f7f8 fa74 	bl	8006148 <pbuf_free>
          goto icmperr;
 800dc60:	e061      	b.n	800dd26 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7f8 fa70 	bl	8006148 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	607b      	str	r3, [r7, #4]
 800dc6c:	e00f      	b.n	800dc8e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc70:	330e      	adds	r3, #14
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7f8 f9e1 	bl	800603c <pbuf_remove_header>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d006      	beq.n	800dc8e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dc80:	4b2e      	ldr	r3, [pc, #184]	@ (800dd3c <icmp_input+0x1f8>)
 800dc82:	22c7      	movs	r2, #199	@ 0xc7
 800dc84:	4930      	ldr	r1, [pc, #192]	@ (800dd48 <icmp_input+0x204>)
 800dc86:	482f      	ldr	r0, [pc, #188]	@ (800dd44 <icmp_input+0x200>)
 800dc88:	f001 fc66 	bl	800f558 <iprintf>
          goto icmperr;
 800dc8c:	e04b      	b.n	800dd26 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dc94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f7f8 f9bf 	bl	800601c <pbuf_add_header>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d12b      	bne.n	800dcfc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dcb2:	4b20      	ldr	r3, [pc, #128]	@ (800dd34 <icmp_input+0x1f0>)
 800dcb4:	691a      	ldr	r2, [r3, #16]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	709a      	strb	r2, [r3, #2]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	22ff      	movs	r2, #255	@ 0xff
 800dcce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	729a      	strb	r2, [r3, #10]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	9302      	str	r3, [sp, #8]
 800dcde:	2301      	movs	r3, #1
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	2300      	movs	r3, #0
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	23ff      	movs	r3, #255	@ 0xff
 800dce8:	2200      	movs	r2, #0
 800dcea:	69f9      	ldr	r1, [r7, #28]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 fa75 	bl	800e1dc <ip4_output_if>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dcf6:	e001      	b.n	800dcfc <icmp_input+0x1b8>
      break;
 800dcf8:	bf00      	nop
 800dcfa:	e000      	b.n	800dcfe <icmp_input+0x1ba>
      break;
 800dcfc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7f8 fa22 	bl	8006148 <pbuf_free>
  return;
 800dd04:	e013      	b.n	800dd2e <icmp_input+0x1ea>
    goto lenerr;
 800dd06:	bf00      	nop
 800dd08:	e002      	b.n	800dd10 <icmp_input+0x1cc>
    goto lenerr;
 800dd0a:	bf00      	nop
 800dd0c:	e000      	b.n	800dd10 <icmp_input+0x1cc>
        goto lenerr;
 800dd0e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7f8 fa19 	bl	8006148 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd16:	e00a      	b.n	800dd2e <icmp_input+0x1ea>
        goto icmperr;
 800dd18:	bf00      	nop
 800dd1a:	e004      	b.n	800dd26 <icmp_input+0x1e2>
        goto icmperr;
 800dd1c:	bf00      	nop
 800dd1e:	e002      	b.n	800dd26 <icmp_input+0x1e2>
          goto icmperr;
 800dd20:	bf00      	nop
 800dd22:	e000      	b.n	800dd26 <icmp_input+0x1e2>
          goto icmperr;
 800dd24:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7f8 fa0e 	bl	8006148 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd2c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dd2e:	3728      	adds	r7, #40	@ 0x28
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	20005218 	.word	0x20005218
 800dd38:	2000522c 	.word	0x2000522c
 800dd3c:	08012d18 	.word	0x08012d18
 800dd40:	08012d50 	.word	0x08012d50
 800dd44:	08012d88 	.word	0x08012d88
 800dd48:	08012db0 	.word	0x08012db0

0800dd4c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dd58:	78fb      	ldrb	r3, [r7, #3]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	2103      	movs	r1, #3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f814 	bl	800dd8c <icmp_send_response>
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	460b      	mov	r3, r1
 800dd76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dd78:	78fb      	ldrb	r3, [r7, #3]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	210b      	movs	r1, #11
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f804 	bl	800dd8c <icmp_send_response>
}
 800dd84:	bf00      	nop
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b08c      	sub	sp, #48	@ 0x30
 800dd90:	af04      	add	r7, sp, #16
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dd9c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dda0:	2124      	movs	r1, #36	@ 0x24
 800dda2:	2022      	movs	r0, #34	@ 0x22
 800dda4:	f7f7 feec 	bl	8005b80 <pbuf_alloc>
 800dda8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d04c      	beq.n	800de4a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	895b      	ldrh	r3, [r3, #10]
 800ddb4:	2b23      	cmp	r3, #35	@ 0x23
 800ddb6:	d806      	bhi.n	800ddc6 <icmp_send_response+0x3a>
 800ddb8:	4b26      	ldr	r3, [pc, #152]	@ (800de54 <icmp_send_response+0xc8>)
 800ddba:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ddbe:	4926      	ldr	r1, [pc, #152]	@ (800de58 <icmp_send_response+0xcc>)
 800ddc0:	4826      	ldr	r0, [pc, #152]	@ (800de5c <icmp_send_response+0xd0>)
 800ddc2:	f001 fbc9 	bl	800f558 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	78fa      	ldrb	r2, [r7, #3]
 800ddd6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	78ba      	ldrb	r2, [r7, #2]
 800dddc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	2200      	movs	r2, #0
 800dde2:	711a      	strb	r2, [r3, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	2200      	movs	r2, #0
 800ddec:	719a      	strb	r2, [r3, #6]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	f103 0008 	add.w	r0, r3, #8
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	221c      	movs	r2, #28
 800de00:	4619      	mov	r1, r3
 800de02:	f001 fcbe 	bl	800f782 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de0c:	f107 030c 	add.w	r3, r7, #12
 800de10:	4618      	mov	r0, r3
 800de12:	f000 f825 	bl	800de60 <ip4_route>
 800de16:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d011      	beq.n	800de42 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	2200      	movs	r2, #0
 800de22:	709a      	strb	r2, [r3, #2]
 800de24:	2200      	movs	r2, #0
 800de26:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de28:	f107 020c 	add.w	r2, r7, #12
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	2301      	movs	r3, #1
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	2300      	movs	r3, #0
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	23ff      	movs	r3, #255	@ 0xff
 800de3a:	2100      	movs	r1, #0
 800de3c:	69f8      	ldr	r0, [r7, #28]
 800de3e:	f000 f9cd 	bl	800e1dc <ip4_output_if>
  }
  pbuf_free(q);
 800de42:	69f8      	ldr	r0, [r7, #28]
 800de44:	f7f8 f980 	bl	8006148 <pbuf_free>
 800de48:	e000      	b.n	800de4c <icmp_send_response+0xc0>
    return;
 800de4a:	bf00      	nop
}
 800de4c:	3720      	adds	r7, #32
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	08012d18 	.word	0x08012d18
 800de58:	08012de4 	.word	0x08012de4
 800de5c:	08012d88 	.word	0x08012d88

0800de60 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800de68:	4b33      	ldr	r3, [pc, #204]	@ (800df38 <ip4_route+0xd8>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	60fb      	str	r3, [r7, #12]
 800de6e:	e036      	b.n	800dede <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de76:	f003 0301 	and.w	r3, r3, #1
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d02b      	beq.n	800ded8 <ip4_route+0x78>
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de86:	089b      	lsrs	r3, r3, #2
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d022      	beq.n	800ded8 <ip4_route+0x78>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	3304      	adds	r3, #4
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d01d      	beq.n	800ded8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3304      	adds	r3, #4
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	405a      	eors	r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	3308      	adds	r3, #8
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4013      	ands	r3, r2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d101      	bne.n	800deb8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	e038      	b.n	800df2a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800debe:	f003 0302 	and.w	r3, r3, #2
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d108      	bne.n	800ded8 <ip4_route+0x78>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	330c      	adds	r3, #12
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d101      	bne.n	800ded8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	e028      	b.n	800df2a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1c5      	bne.n	800de70 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dee4:	4b15      	ldr	r3, [pc, #84]	@ (800df3c <ip4_route+0xdc>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d01a      	beq.n	800df22 <ip4_route+0xc2>
 800deec:	4b13      	ldr	r3, [pc, #76]	@ (800df3c <ip4_route+0xdc>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	2b00      	cmp	r3, #0
 800defa:	d012      	beq.n	800df22 <ip4_route+0xc2>
 800defc:	4b0f      	ldr	r3, [pc, #60]	@ (800df3c <ip4_route+0xdc>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df04:	f003 0304 	and.w	r3, r3, #4
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00a      	beq.n	800df22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df0c:	4b0b      	ldr	r3, [pc, #44]	@ (800df3c <ip4_route+0xdc>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3304      	adds	r3, #4
 800df12:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df14:	2b00      	cmp	r3, #0
 800df16:	d004      	beq.n	800df22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800df20:	d101      	bne.n	800df26 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800df22:	2300      	movs	r3, #0
 800df24:	e001      	b.n	800df2a <ip4_route+0xca>
  }

  return netif_default;
 800df26:	4b05      	ldr	r3, [pc, #20]	@ (800df3c <ip4_route+0xdc>)
 800df28:	681b      	ldr	r3, [r3, #0]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	2000877c 	.word	0x2000877c
 800df3c:	20008780 	.word	0x20008780

0800df40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	d016      	beq.n	800df86 <ip4_input_accept+0x46>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3304      	adds	r3, #4
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d011      	beq.n	800df86 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df62:	4b0b      	ldr	r3, [pc, #44]	@ (800df90 <ip4_input_accept+0x50>)
 800df64:	695a      	ldr	r2, [r3, #20]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	3304      	adds	r3, #4
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d008      	beq.n	800df82 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800df70:	4b07      	ldr	r3, [pc, #28]	@ (800df90 <ip4_input_accept+0x50>)
 800df72:	695b      	ldr	r3, [r3, #20]
 800df74:	6879      	ldr	r1, [r7, #4]
 800df76:	4618      	mov	r0, r3
 800df78:	f000 fa08 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800df7c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800df82:	2301      	movs	r3, #1
 800df84:	e000      	b.n	800df88 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20005218 	.word	0x20005218

0800df94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	091b      	lsrs	r3, r3, #4
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b04      	cmp	r3, #4
 800dfae:	d004      	beq.n	800dfba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7f8 f8c9 	bl	8006148 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e107      	b.n	800e1ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	f003 030f 	and.w	r3, r3, #15
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	885b      	ldrh	r3, [r3, #2]
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7f6 fdf1 	bl	8004bb8 <lwip_htons>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	891b      	ldrh	r3, [r3, #8]
 800dfde:	89ba      	ldrh	r2, [r7, #12]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d204      	bcs.n	800dfee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dfe4:	89bb      	ldrh	r3, [r7, #12]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f7f7 ff27 	bl	8005e3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	895b      	ldrh	r3, [r3, #10]
 800dff2:	89fa      	ldrh	r2, [r7, #14]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d807      	bhi.n	800e008 <ip4_input+0x74>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	891b      	ldrh	r3, [r3, #8]
 800dffc:	89ba      	ldrh	r2, [r7, #12]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d802      	bhi.n	800e008 <ip4_input+0x74>
 800e002:	89fb      	ldrh	r3, [r7, #14]
 800e004:	2b13      	cmp	r3, #19
 800e006:	d804      	bhi.n	800e012 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7f8 f89d 	bl	8006148 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	e0db      	b.n	800e1ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	4a6f      	ldr	r2, [pc, #444]	@ (800e1d4 <ip4_input+0x240>)
 800e018:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	4a6d      	ldr	r2, [pc, #436]	@ (800e1d4 <ip4_input+0x240>)
 800e020:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e022:	4b6c      	ldr	r3, [pc, #432]	@ (800e1d4 <ip4_input+0x240>)
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e02a:	2be0      	cmp	r3, #224	@ 0xe0
 800e02c:	d112      	bne.n	800e054 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e034:	f003 0301 	and.w	r3, r3, #1
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d007      	beq.n	800e04e <ip4_input+0xba>
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	3304      	adds	r3, #4
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <ip4_input+0xba>
      netif = inp;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	613b      	str	r3, [r7, #16]
 800e04c:	e02a      	b.n	800e0a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	613b      	str	r3, [r7, #16]
 800e052:	e027      	b.n	800e0a4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e054:	6838      	ldr	r0, [r7, #0]
 800e056:	f7ff ff73 	bl	800df40 <ip4_input_accept>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <ip4_input+0xd2>
      netif = inp;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	613b      	str	r3, [r7, #16]
 800e064:	e01e      	b.n	800e0a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e066:	2300      	movs	r3, #0
 800e068:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e06a:	4b5a      	ldr	r3, [pc, #360]	@ (800e1d4 <ip4_input+0x240>)
 800e06c:	695b      	ldr	r3, [r3, #20]
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b7f      	cmp	r3, #127	@ 0x7f
 800e072:	d017      	beq.n	800e0a4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e074:	4b58      	ldr	r3, [pc, #352]	@ (800e1d8 <ip4_input+0x244>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	613b      	str	r3, [r7, #16]
 800e07a:	e00e      	b.n	800e09a <ip4_input+0x106>
          if (netif == inp) {
 800e07c:	693a      	ldr	r2, [r7, #16]
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	429a      	cmp	r2, r3
 800e082:	d006      	beq.n	800e092 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e084:	6938      	ldr	r0, [r7, #16]
 800e086:	f7ff ff5b 	bl	800df40 <ip4_input_accept>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d108      	bne.n	800e0a2 <ip4_input+0x10e>
 800e090:	e000      	b.n	800e094 <ip4_input+0x100>
            continue;
 800e092:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	613b      	str	r3, [r7, #16]
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1ed      	bne.n	800e07c <ip4_input+0xe8>
 800e0a0:	e000      	b.n	800e0a4 <ip4_input+0x110>
            break;
 800e0a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0a4:	4b4b      	ldr	r3, [pc, #300]	@ (800e1d4 <ip4_input+0x240>)
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	6839      	ldr	r1, [r7, #0]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 f96e 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d105      	bne.n	800e0c2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e0b6:	4b47      	ldr	r3, [pc, #284]	@ (800e1d4 <ip4_input+0x240>)
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0be:	2be0      	cmp	r3, #224	@ 0xe0
 800e0c0:	d104      	bne.n	800e0cc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7f8 f840 	bl	8006148 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e07e      	b.n	800e1ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d104      	bne.n	800e0dc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7f8 f838 	bl	8006148 <pbuf_free>
    return ERR_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e076      	b.n	800e1ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	88db      	ldrh	r3, [r3, #6]
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00b      	beq.n	800e106 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fd22 	bl	800eb38 <ip4_reass>
 800e0f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d101      	bne.n	800e100 <ip4_input+0x16c>
      return ERR_OK;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	e064      	b.n	800e1ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e106:	4a33      	ldr	r2, [pc, #204]	@ (800e1d4 <ip4_input+0x240>)
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e10c:	4a31      	ldr	r2, [pc, #196]	@ (800e1d4 <ip4_input+0x240>)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e112:	4a30      	ldr	r2, [pc, #192]	@ (800e1d4 <ip4_input+0x240>)
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	f003 030f 	and.w	r3, r3, #15
 800e120:	b2db      	uxtb	r3, r3
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	b2db      	uxtb	r3, r3
 800e126:	461a      	mov	r2, r3
 800e128:	4b2a      	ldr	r3, [pc, #168]	@ (800e1d4 <ip4_input+0x240>)
 800e12a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e12c:	89fb      	ldrh	r3, [r7, #14]
 800e12e:	4619      	mov	r1, r3
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7f7 ff83 	bl	800603c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	7a5b      	ldrb	r3, [r3, #9]
 800e13a:	2b11      	cmp	r3, #17
 800e13c:	d006      	beq.n	800e14c <ip4_input+0x1b8>
 800e13e:	2b11      	cmp	r3, #17
 800e140:	dc13      	bgt.n	800e16a <ip4_input+0x1d6>
 800e142:	2b01      	cmp	r3, #1
 800e144:	d00c      	beq.n	800e160 <ip4_input+0x1cc>
 800e146:	2b06      	cmp	r3, #6
 800e148:	d005      	beq.n	800e156 <ip4_input+0x1c2>
 800e14a:	e00e      	b.n	800e16a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e14c:	6839      	ldr	r1, [r7, #0]
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7fe fc98 	bl	800ca84 <udp_input>
        break;
 800e154:	e026      	b.n	800e1a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7fa f8bf 	bl	80082dc <tcp_input>
        break;
 800e15e:	e021      	b.n	800e1a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7ff fcee 	bl	800db44 <icmp_input>
        break;
 800e168:	e01c      	b.n	800e1a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e16a:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d4 <ip4_input+0x240>)
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	6939      	ldr	r1, [r7, #16]
 800e170:	4618      	mov	r0, r3
 800e172:	f000 f90b 	bl	800e38c <ip4_addr_isbroadcast_u32>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10f      	bne.n	800e19c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e17c:	4b15      	ldr	r3, [pc, #84]	@ (800e1d4 <ip4_input+0x240>)
 800e17e:	695b      	ldr	r3, [r3, #20]
 800e180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e184:	2be0      	cmp	r3, #224	@ 0xe0
 800e186:	d009      	beq.n	800e19c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e188:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7f7 ffc7 	bl	8006122 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e194:	2102      	movs	r1, #2
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7ff fdd8 	bl	800dd4c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7f7 ffd3 	bl	8006148 <pbuf_free>
        break;
 800e1a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e1a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e1d4 <ip4_input+0x240>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d4 <ip4_input+0x240>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e1b0:	4b08      	ldr	r3, [pc, #32]	@ (800e1d4 <ip4_input+0x240>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e1b6:	4b07      	ldr	r3, [pc, #28]	@ (800e1d4 <ip4_input+0x240>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e1bc:	4b05      	ldr	r3, [pc, #20]	@ (800e1d4 <ip4_input+0x240>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e1c2:	4b04      	ldr	r3, [pc, #16]	@ (800e1d4 <ip4_input+0x240>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20005218 	.word	0x20005218
 800e1d8:	2000877c 	.word	0x2000877c

0800e1dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08a      	sub	sp, #40	@ 0x28
 800e1e0:	af04      	add	r7, sp, #16
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d009      	beq.n	800e208 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d003      	beq.n	800e202 <ip4_output_if+0x26>
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d102      	bne.n	800e208 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e204:	3304      	adds	r3, #4
 800e206:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e208:	78fa      	ldrb	r2, [r7, #3]
 800e20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20c:	9302      	str	r3, [sp, #8]
 800e20e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e212:	9301      	str	r3, [sp, #4]
 800e214:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	4613      	mov	r3, r2
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	6979      	ldr	r1, [r7, #20]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 f805 	bl	800e230 <ip4_output_if_src>
 800e226:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3718      	adds	r7, #24
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
 800e23c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	7b9b      	ldrb	r3, [r3, #14]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d006      	beq.n	800e254 <ip4_output_if_src+0x24>
 800e246:	4b4b      	ldr	r3, [pc, #300]	@ (800e374 <ip4_output_if_src+0x144>)
 800e248:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800e24c:	494a      	ldr	r1, [pc, #296]	@ (800e378 <ip4_output_if_src+0x148>)
 800e24e:	484b      	ldr	r0, [pc, #300]	@ (800e37c <ip4_output_if_src+0x14c>)
 800e250:	f001 f982 	bl	800f558 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d060      	beq.n	800e31c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e25a:	2314      	movs	r3, #20
 800e25c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e25e:	2114      	movs	r1, #20
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f7f7 fedb 	bl	800601c <pbuf_add_header>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e26c:	f06f 0301 	mvn.w	r3, #1
 800e270:	e07c      	b.n	800e36c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	895b      	ldrh	r3, [r3, #10]
 800e27c:	2b13      	cmp	r3, #19
 800e27e:	d806      	bhi.n	800e28e <ip4_output_if_src+0x5e>
 800e280:	4b3c      	ldr	r3, [pc, #240]	@ (800e374 <ip4_output_if_src+0x144>)
 800e282:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800e286:	493e      	ldr	r1, [pc, #248]	@ (800e380 <ip4_output_if_src+0x150>)
 800e288:	483c      	ldr	r0, [pc, #240]	@ (800e37c <ip4_output_if_src+0x14c>)
 800e28a:	f001 f965 	bl	800f558 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	78fa      	ldrb	r2, [r7, #3]
 800e292:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800e29a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e2a4:	8b7b      	ldrh	r3, [r7, #26]
 800e2a6:	089b      	lsrs	r3, r3, #2
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e2bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	891b      	ldrh	r3, [r3, #8]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7f6 fc78 	bl	8004bb8 <lwip_htons>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	719a      	strb	r2, [r3, #6]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2da:	4b2a      	ldr	r3, [pc, #168]	@ (800e384 <ip4_output_if_src+0x154>)
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7f6 fc6a 	bl	8004bb8 <lwip_htons>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e2ec:	4b25      	ldr	r3, [pc, #148]	@ (800e384 <ip4_output_if_src+0x154>)
 800e2ee:	881b      	ldrh	r3, [r3, #0]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	4b23      	ldr	r3, [pc, #140]	@ (800e384 <ip4_output_if_src+0x154>)
 800e2f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d104      	bne.n	800e308 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e2fe:	4b22      	ldr	r3, [pc, #136]	@ (800e388 <ip4_output_if_src+0x158>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	60da      	str	r2, [r3, #12]
 800e306:	e003      	b.n	800e310 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2200      	movs	r2, #0
 800e314:	729a      	strb	r2, [r3, #10]
 800e316:	2200      	movs	r2, #0
 800e318:	72da      	strb	r2, [r3, #11]
 800e31a:	e00f      	b.n	800e33c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	895b      	ldrh	r3, [r3, #10]
 800e320:	2b13      	cmp	r3, #19
 800e322:	d802      	bhi.n	800e32a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e324:	f06f 0301 	mvn.w	r3, #1
 800e328:	e020      	b.n	800e36c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e336:	f107 0314 	add.w	r3, r7, #20
 800e33a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00c      	beq.n	800e35e <ip4_output_if_src+0x12e>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	891a      	ldrh	r2, [r3, #8]
 800e348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e34a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d906      	bls.n	800e35e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f000 fde3 	bl	800ef20 <ip4_frag>
 800e35a:	4603      	mov	r3, r0
 800e35c:	e006      	b.n	800e36c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	68f9      	ldr	r1, [r7, #12]
 800e366:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e368:	4798      	blx	r3
 800e36a:	4603      	mov	r3, r0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3720      	adds	r7, #32
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	08012e10 	.word	0x08012e10
 800e378:	08012e44 	.word	0x08012e44
 800e37c:	08012e50 	.word	0x08012e50
 800e380:	08012e78 	.word	0x08012e78
 800e384:	200088da 	.word	0x200088da
 800e388:	08013258 	.word	0x08013258

0800e38c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a0:	d002      	beq.n	800e3a8 <ip4_addr_isbroadcast_u32+0x1c>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d101      	bne.n	800e3ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e02a      	b.n	800e402 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e3b2:	f003 0302 	and.w	r3, r3, #2
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d101      	bne.n	800e3be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	e021      	b.n	800e402 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d101      	bne.n	800e3ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e019      	b.n	800e402 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	405a      	eors	r2, r3
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	3308      	adds	r3, #8
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	4013      	ands	r3, r2
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10d      	bne.n	800e400 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	3308      	adds	r3, #8
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	43da      	mvns	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d101      	bne.n	800e400 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e000      	b.n	800e402 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e400:	2300      	movs	r3, #0
  }
}
 800e402:	4618      	mov	r0, r3
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
	...

0800e410 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800e418:	2210      	movs	r2, #16
 800e41a:	4904      	ldr	r1, [pc, #16]	@ (800e42c <ip4addr_ntoa+0x1c>)
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 f807 	bl	800e430 <ip4addr_ntoa_r>
 800e422:	4603      	mov	r3, r0
}
 800e424:	4618      	mov	r0, r3
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	200088dc 	.word	0x200088dc

0800e430 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800e430:	b480      	push	{r7}
 800e432:	b08d      	sub	sp, #52	@ 0x34
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800e44a:	f107 0318 	add.w	r3, r7, #24
 800e44e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e450:	2300      	movs	r3, #0
 800e452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e456:	e058      	b.n	800e50a <ip4addr_ntoa_r+0xda>
    i = 0;
 800e458:	2300      	movs	r3, #0
 800e45a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800e45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e460:	781a      	ldrb	r2, [r3, #0]
 800e462:	4b32      	ldr	r3, [pc, #200]	@ (800e52c <ip4addr_ntoa_r+0xfc>)
 800e464:	fba3 1302 	umull	r1, r3, r3, r2
 800e468:	08d9      	lsrs	r1, r3, #3
 800e46a:	460b      	mov	r3, r1
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	440b      	add	r3, r1
 800e470:	005b      	lsls	r3, r3, #1
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800e476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	4a2c      	ldr	r2, [pc, #176]	@ (800e52c <ip4addr_ntoa_r+0xfc>)
 800e47c:	fba2 2303 	umull	r2, r3, r2, r3
 800e480:	08db      	lsrs	r3, r3, #3
 800e482:	b2da      	uxtb	r2, r3
 800e484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e486:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800e488:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e492:	4619      	mov	r1, r3
 800e494:	7ffb      	ldrb	r3, [r7, #31]
 800e496:	3330      	adds	r3, #48	@ 0x30
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800e49e:	443b      	add	r3, r7
 800e4a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800e4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1d8      	bne.n	800e45e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800e4ac:	e011      	b.n	800e4d2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	623a      	str	r2, [r7, #32]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	dc01      	bgt.n	800e4be <ip4addr_ntoa_r+0x8e>
        return NULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e030      	b.n	800e520 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800e4be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c4:	1c59      	adds	r1, r3, #1
 800e4c6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800e4c8:	3230      	adds	r2, #48	@ 0x30
 800e4ca:	443a      	add	r2, r7
 800e4cc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800e4d0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800e4d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4d6:	1e5a      	subs	r2, r3, #1
 800e4d8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1e6      	bne.n	800e4ae <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800e4e0:	6a3b      	ldr	r3, [r7, #32]
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	623a      	str	r2, [r7, #32]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	dc01      	bgt.n	800e4f0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	e017      	b.n	800e520 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800e4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e4f6:	222e      	movs	r2, #46	@ 0x2e
 800e4f8:	701a      	strb	r2, [r3, #0]
    ap++;
 800e4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800e500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e504:	3301      	adds	r3, #1
 800e506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e50a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e50e:	2b03      	cmp	r3, #3
 800e510:	d9a2      	bls.n	800e458 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800e512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e514:	3b01      	subs	r3, #1
 800e516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51a:	2200      	movs	r2, #0
 800e51c:	701a      	strb	r2, [r3, #0]
  return buf;
 800e51e:	68bb      	ldr	r3, [r7, #8]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3734      	adds	r7, #52	@ 0x34
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	cccccccd 	.word	0xcccccccd

0800e530 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e536:	2300      	movs	r3, #0
 800e538:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e53a:	4b12      	ldr	r3, [pc, #72]	@ (800e584 <ip_reass_tmr+0x54>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e540:	e018      	b.n	800e574 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	7fdb      	ldrb	r3, [r3, #31]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00b      	beq.n	800e562 <ip_reass_tmr+0x32>
      r->timer--;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	7fdb      	ldrb	r3, [r3, #31]
 800e54e:	3b01      	subs	r3, #1
 800e550:	b2da      	uxtb	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	e008      	b.n	800e574 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e56c:	68b9      	ldr	r1, [r7, #8]
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f80a 	bl	800e588 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1e3      	bne.n	800e542 <ip_reass_tmr+0x12>
    }
  }
}
 800e57a:	bf00      	nop
 800e57c:	bf00      	nop
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	200088ec 	.word	0x200088ec

0800e588 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b088      	sub	sp, #32
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e592:	2300      	movs	r3, #0
 800e594:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d105      	bne.n	800e5aa <ip_reass_free_complete_datagram+0x22>
 800e59e:	4b45      	ldr	r3, [pc, #276]	@ (800e6b4 <ip_reass_free_complete_datagram+0x12c>)
 800e5a0:	22ab      	movs	r2, #171	@ 0xab
 800e5a2:	4945      	ldr	r1, [pc, #276]	@ (800e6b8 <ip_reass_free_complete_datagram+0x130>)
 800e5a4:	4845      	ldr	r0, [pc, #276]	@ (800e6bc <ip_reass_free_complete_datagram+0x134>)
 800e5a6:	f000 ffd7 	bl	800f558 <iprintf>
  if (prev != NULL) {
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00a      	beq.n	800e5c6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d005      	beq.n	800e5c6 <ip_reass_free_complete_datagram+0x3e>
 800e5ba:	4b3e      	ldr	r3, [pc, #248]	@ (800e6b4 <ip_reass_free_complete_datagram+0x12c>)
 800e5bc:	22ad      	movs	r2, #173	@ 0xad
 800e5be:	4940      	ldr	r1, [pc, #256]	@ (800e6c0 <ip_reass_free_complete_datagram+0x138>)
 800e5c0:	483e      	ldr	r0, [pc, #248]	@ (800e6bc <ip_reass_free_complete_datagram+0x134>)
 800e5c2:	f000 ffc9 	bl	800f558 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	889b      	ldrh	r3, [r3, #4]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d12a      	bne.n	800e62e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	6858      	ldr	r0, [r3, #4]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	2214      	movs	r2, #20
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	f001 f8c6 	bl	800f782 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	69b8      	ldr	r0, [r7, #24]
 800e5fa:	f7ff fbb7 	bl	800dd6c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e5fe:	69b8      	ldr	r0, [r7, #24]
 800e600:	f7f7 fe2a 	bl	8006258 <pbuf_clen>
 800e604:	4603      	mov	r3, r0
 800e606:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e608:	8bfa      	ldrh	r2, [r7, #30]
 800e60a:	8a7b      	ldrh	r3, [r7, #18]
 800e60c:	4413      	add	r3, r2
 800e60e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e612:	db05      	blt.n	800e620 <ip_reass_free_complete_datagram+0x98>
 800e614:	4b27      	ldr	r3, [pc, #156]	@ (800e6b4 <ip_reass_free_complete_datagram+0x12c>)
 800e616:	22bc      	movs	r2, #188	@ 0xbc
 800e618:	492a      	ldr	r1, [pc, #168]	@ (800e6c4 <ip_reass_free_complete_datagram+0x13c>)
 800e61a:	4828      	ldr	r0, [pc, #160]	@ (800e6bc <ip_reass_free_complete_datagram+0x134>)
 800e61c:	f000 ff9c 	bl	800f558 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e620:	8bfa      	ldrh	r2, [r7, #30]
 800e622:	8a7b      	ldrh	r3, [r7, #18]
 800e624:	4413      	add	r3, r2
 800e626:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e628:	69b8      	ldr	r0, [r7, #24]
 800e62a:	f7f7 fd8d 	bl	8006148 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e634:	e01f      	b.n	800e676 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f7f7 fe06 	bl	8006258 <pbuf_clen>
 800e64c:	4603      	mov	r3, r0
 800e64e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e650:	8bfa      	ldrh	r2, [r7, #30]
 800e652:	8a7b      	ldrh	r3, [r7, #18]
 800e654:	4413      	add	r3, r2
 800e656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e65a:	db05      	blt.n	800e668 <ip_reass_free_complete_datagram+0xe0>
 800e65c:	4b15      	ldr	r3, [pc, #84]	@ (800e6b4 <ip_reass_free_complete_datagram+0x12c>)
 800e65e:	22cc      	movs	r2, #204	@ 0xcc
 800e660:	4918      	ldr	r1, [pc, #96]	@ (800e6c4 <ip_reass_free_complete_datagram+0x13c>)
 800e662:	4816      	ldr	r0, [pc, #88]	@ (800e6bc <ip_reass_free_complete_datagram+0x134>)
 800e664:	f000 ff78 	bl	800f558 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e668:	8bfa      	ldrh	r2, [r7, #30]
 800e66a:	8a7b      	ldrh	r3, [r7, #18]
 800e66c:	4413      	add	r3, r2
 800e66e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f7f7 fd69 	bl	8006148 <pbuf_free>
  while (p != NULL) {
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1dc      	bne.n	800e636 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f8c2 	bl	800e808 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e684:	4b10      	ldr	r3, [pc, #64]	@ (800e6c8 <ip_reass_free_complete_datagram+0x140>)
 800e686:	881b      	ldrh	r3, [r3, #0]
 800e688:	8bfa      	ldrh	r2, [r7, #30]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d905      	bls.n	800e69a <ip_reass_free_complete_datagram+0x112>
 800e68e:	4b09      	ldr	r3, [pc, #36]	@ (800e6b4 <ip_reass_free_complete_datagram+0x12c>)
 800e690:	22d2      	movs	r2, #210	@ 0xd2
 800e692:	490e      	ldr	r1, [pc, #56]	@ (800e6cc <ip_reass_free_complete_datagram+0x144>)
 800e694:	4809      	ldr	r0, [pc, #36]	@ (800e6bc <ip_reass_free_complete_datagram+0x134>)
 800e696:	f000 ff5f 	bl	800f558 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e69a:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c8 <ip_reass_free_complete_datagram+0x140>)
 800e69c:	881a      	ldrh	r2, [r3, #0]
 800e69e:	8bfb      	ldrh	r3, [r7, #30]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	4b08      	ldr	r3, [pc, #32]	@ (800e6c8 <ip_reass_free_complete_datagram+0x140>)
 800e6a6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e6a8:	8bfb      	ldrh	r3, [r7, #30]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3720      	adds	r7, #32
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	08012ea8 	.word	0x08012ea8
 800e6b8:	08012ee4 	.word	0x08012ee4
 800e6bc:	08012ef0 	.word	0x08012ef0
 800e6c0:	08012f18 	.word	0x08012f18
 800e6c4:	08012f2c 	.word	0x08012f2c
 800e6c8:	200088f0 	.word	0x200088f0
 800e6cc:	08012f4c 	.word	0x08012f4c

0800e6d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b08a      	sub	sp, #40	@ 0x28
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e6ee:	4b28      	ldr	r3, [pc, #160]	@ (800e790 <ip_reass_remove_oldest_datagram+0xc0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e6f4:	e030      	b.n	800e758 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f8:	695a      	ldr	r2, [r3, #20]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d10c      	bne.n	800e71c <ip_reass_remove_oldest_datagram+0x4c>
 800e702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d106      	bne.n	800e71c <ip_reass_remove_oldest_datagram+0x4c>
 800e70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e710:	899a      	ldrh	r2, [r3, #12]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	889b      	ldrh	r3, [r3, #4]
 800e716:	b29b      	uxth	r3, r3
 800e718:	429a      	cmp	r2, r3
 800e71a:	d014      	beq.n	800e746 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	3301      	adds	r3, #1
 800e720:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e722:	6a3b      	ldr	r3, [r7, #32]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d104      	bne.n	800e732 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	61bb      	str	r3, [r7, #24]
 800e730:	e009      	b.n	800e746 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e734:	7fda      	ldrb	r2, [r3, #31]
 800e736:	6a3b      	ldr	r3, [r7, #32]
 800e738:	7fdb      	ldrb	r3, [r3, #31]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d803      	bhi.n	800e746 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e740:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e750:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1cb      	bne.n	800e6f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e75e:	6a3b      	ldr	r3, [r7, #32]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d008      	beq.n	800e776 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e764:	69b9      	ldr	r1, [r7, #24]
 800e766:	6a38      	ldr	r0, [r7, #32]
 800e768:	f7ff ff0e 	bl	800e588 <ip_reass_free_complete_datagram>
 800e76c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4413      	add	r3, r2
 800e774:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	da02      	bge.n	800e784 <ip_reass_remove_oldest_datagram+0xb4>
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	2b01      	cmp	r3, #1
 800e782:	dcac      	bgt.n	800e6de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e784:	697b      	ldr	r3, [r7, #20]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3728      	adds	r7, #40	@ 0x28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	200088ec 	.word	0x200088ec

0800e794 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e79e:	2004      	movs	r0, #4
 800e7a0:	f7f6 fe82 	bl	80054a8 <memp_malloc>
 800e7a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d110      	bne.n	800e7ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7ff ff8e 	bl	800e6d0 <ip_reass_remove_oldest_datagram>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	dc03      	bgt.n	800e7c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e7bc:	2004      	movs	r0, #4
 800e7be:	f7f6 fe73 	bl	80054a8 <memp_malloc>
 800e7c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e016      	b.n	800e7fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 ff5f 	bl	800f696 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	220f      	movs	r2, #15
 800e7dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e7de:	4b09      	ldr	r3, [pc, #36]	@ (800e804 <ip_reass_enqueue_new_datagram+0x70>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e7e6:	4a07      	ldr	r2, [pc, #28]	@ (800e804 <ip_reass_enqueue_new_datagram+0x70>)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	3308      	adds	r3, #8
 800e7f0:	2214      	movs	r2, #20
 800e7f2:	6879      	ldr	r1, [r7, #4]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f000 ffc4 	bl	800f782 <memcpy>
  return ipr;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3710      	adds	r7, #16
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	200088ec 	.word	0x200088ec

0800e808 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e812:	4b10      	ldr	r3, [pc, #64]	@ (800e854 <ip_reass_dequeue_datagram+0x4c>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d104      	bne.n	800e826 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a0c      	ldr	r2, [pc, #48]	@ (800e854 <ip_reass_dequeue_datagram+0x4c>)
 800e822:	6013      	str	r3, [r2, #0]
 800e824:	e00d      	b.n	800e842 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <ip_reass_dequeue_datagram+0x32>
 800e82c:	4b0a      	ldr	r3, [pc, #40]	@ (800e858 <ip_reass_dequeue_datagram+0x50>)
 800e82e:	f240 1245 	movw	r2, #325	@ 0x145
 800e832:	490a      	ldr	r1, [pc, #40]	@ (800e85c <ip_reass_dequeue_datagram+0x54>)
 800e834:	480a      	ldr	r0, [pc, #40]	@ (800e860 <ip_reass_dequeue_datagram+0x58>)
 800e836:	f000 fe8f 	bl	800f558 <iprintf>
    prev->next = ipr->next;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e842:	6879      	ldr	r1, [r7, #4]
 800e844:	2004      	movs	r0, #4
 800e846:	f7f6 fe9f 	bl	8005588 <memp_free>
}
 800e84a:	bf00      	nop
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	200088ec 	.word	0x200088ec
 800e858:	08012ea8 	.word	0x08012ea8
 800e85c:	08012f70 	.word	0x08012f70
 800e860:	08012ef0 	.word	0x08012ef0

0800e864 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b08c      	sub	sp, #48	@ 0x30
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e870:	2300      	movs	r3, #0
 800e872:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e874:	2301      	movs	r3, #1
 800e876:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	885b      	ldrh	r3, [r3, #2]
 800e882:	b29b      	uxth	r3, r3
 800e884:	4618      	mov	r0, r3
 800e886:	f7f6 f997 	bl	8004bb8 <lwip_htons>
 800e88a:	4603      	mov	r3, r0
 800e88c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	f003 030f 	and.w	r3, r3, #15
 800e896:	b2db      	uxtb	r3, r3
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e89c:	7e7b      	ldrb	r3, [r7, #25]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	8b7a      	ldrh	r2, [r7, #26]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d202      	bcs.n	800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8aa:	e135      	b.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e8ac:	7e7b      	ldrb	r3, [r7, #25]
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	8b7a      	ldrh	r2, [r7, #26]
 800e8b2:	1ad3      	subs	r3, r2, r3
 800e8b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	88db      	ldrh	r3, [r3, #6]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7f6 f97b 	bl	8004bb8 <lwip_htons>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	701a      	strb	r2, [r3, #0]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	705a      	strb	r2, [r3, #1]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	709a      	strb	r2, [r3, #2]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e8:	8afa      	ldrh	r2, [r7, #22]
 800e8ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e8ec:	8afa      	ldrh	r2, [r7, #22]
 800e8ee:	8b7b      	ldrh	r3, [r7, #26]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	b29a      	uxth	r2, r3
 800e8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8fa:	88db      	ldrh	r3, [r3, #6]
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	8afa      	ldrh	r2, [r7, #22]
 800e900:	429a      	cmp	r2, r3
 800e902:	d902      	bls.n	800e90a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e904:	f04f 33ff 	mov.w	r3, #4294967295
 800e908:	e106      	b.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e910:	e068      	b.n	800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91a:	889b      	ldrh	r3, [r3, #4]
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	889b      	ldrh	r3, [r3, #4]
 800e922:	b29b      	uxth	r3, r3
 800e924:	429a      	cmp	r2, r3
 800e926:	d235      	bcs.n	800e994 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e92c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e930:	2b00      	cmp	r3, #0
 800e932:	d020      	beq.n	800e976 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e936:	889b      	ldrh	r3, [r3, #4]
 800e938:	b29a      	uxth	r2, r3
 800e93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93c:	88db      	ldrh	r3, [r3, #6]
 800e93e:	b29b      	uxth	r3, r3
 800e940:	429a      	cmp	r2, r3
 800e942:	d307      	bcc.n	800e954 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e946:	88db      	ldrh	r3, [r3, #6]
 800e948:	b29a      	uxth	r2, r3
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	889b      	ldrh	r3, [r3, #4]
 800e94e:	b29b      	uxth	r3, r3
 800e950:	429a      	cmp	r2, r3
 800e952:	d902      	bls.n	800e95a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e954:	f04f 33ff 	mov.w	r3, #4294967295
 800e958:	e0de      	b.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e962:	88db      	ldrh	r3, [r3, #6]
 800e964:	b29a      	uxth	r2, r3
 800e966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e968:	889b      	ldrh	r3, [r3, #4]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d03d      	beq.n	800e9ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e970:	2300      	movs	r3, #0
 800e972:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e974:	e03a      	b.n	800e9ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e978:	88db      	ldrh	r3, [r3, #6]
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	889b      	ldrh	r3, [r3, #4]
 800e980:	b29b      	uxth	r3, r3
 800e982:	429a      	cmp	r2, r3
 800e984:	d902      	bls.n	800e98c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e986:	f04f 33ff 	mov.w	r3, #4294967295
 800e98a:	e0c5      	b.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	68ba      	ldr	r2, [r7, #8]
 800e990:	605a      	str	r2, [r3, #4]
      break;
 800e992:	e02b      	b.n	800e9ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e996:	889b      	ldrh	r3, [r3, #4]
 800e998:	b29a      	uxth	r2, r3
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	889b      	ldrh	r3, [r3, #4]
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d102      	bne.n	800e9aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a8:	e0b6      	b.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ac:	889b      	ldrh	r3, [r3, #4]
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	88db      	ldrh	r3, [r3, #6]
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d202      	bcs.n	800e9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e9be:	e0ab      	b.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d009      	beq.n	800e9da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c8:	88db      	ldrh	r3, [r3, #6]
 800e9ca:	b29a      	uxth	r2, r3
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	889b      	ldrh	r3, [r3, #4]
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d001      	beq.n	800e9da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d193      	bne.n	800e912 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e9ea:	e000      	b.n	800e9ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e9ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d12d      	bne.n	800ea50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d01c      	beq.n	800ea34 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9fc:	88db      	ldrh	r3, [r3, #6]
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea02:	889b      	ldrh	r3, [r3, #4]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d906      	bls.n	800ea18 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ea0a:	4b45      	ldr	r3, [pc, #276]	@ (800eb20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea0c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800ea10:	4944      	ldr	r1, [pc, #272]	@ (800eb24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ea12:	4845      	ldr	r0, [pc, #276]	@ (800eb28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea14:	f000 fda0 	bl	800f558 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ea18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ea1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea20:	88db      	ldrh	r3, [r3, #6]
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea26:	889b      	ldrh	r3, [r3, #4]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d010      	beq.n	800ea50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	623b      	str	r3, [r7, #32]
 800ea32:	e00d      	b.n	800ea50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d006      	beq.n	800ea4a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ea3c:	4b38      	ldr	r3, [pc, #224]	@ (800eb20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ea3e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800ea42:	493a      	ldr	r1, [pc, #232]	@ (800eb2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ea44:	4838      	ldr	r0, [pc, #224]	@ (800eb28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ea46:	f000 fd87 	bl	800f558 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d105      	bne.n	800ea62 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	7f9b      	ldrb	r3, [r3, #30]
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d059      	beq.n	800eb16 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d04f      	beq.n	800eb08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d006      	beq.n	800ea7e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	889b      	ldrh	r3, [r3, #4]
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d002      	beq.n	800ea84 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	623b      	str	r3, [r7, #32]
 800ea82:	e041      	b.n	800eb08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ea84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea86:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800ea88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ea8e:	e012      	b.n	800eab6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	88db      	ldrh	r3, [r3, #6]
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea9e:	889b      	ldrh	r3, [r3, #4]
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d002      	beq.n	800eaac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	623b      	str	r3, [r7, #32]
            break;
 800eaaa:	e007      	b.n	800eabc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800eaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaae:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800eab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800eab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1e9      	bne.n	800ea90 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800eabc:	6a3b      	ldr	r3, [r7, #32]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d022      	beq.n	800eb08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800eaca:	4b15      	ldr	r3, [pc, #84]	@ (800eb20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eacc:	f240 12df 	movw	r2, #479	@ 0x1df
 800ead0:	4917      	ldr	r1, [pc, #92]	@ (800eb30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ead2:	4815      	ldr	r0, [pc, #84]	@ (800eb28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ead4:	f000 fd40 	bl	800f558 <iprintf>
          LWIP_ASSERT("sanity check",
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d106      	bne.n	800eaf2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800eae4:	4b0e      	ldr	r3, [pc, #56]	@ (800eb20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eae6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800eaea:	4911      	ldr	r1, [pc, #68]	@ (800eb30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eaec:	480e      	ldr	r0, [pc, #56]	@ (800eb28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eaee:	f000 fd33 	bl	800f558 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800eaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d006      	beq.n	800eb08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800eafa:	4b09      	ldr	r3, [pc, #36]	@ (800eb20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eafc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800eb00:	490c      	ldr	r1, [pc, #48]	@ (800eb34 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800eb02:	4809      	ldr	r0, [pc, #36]	@ (800eb28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb04:	f000 fd28 	bl	800f558 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	bf14      	ite	ne
 800eb0e:	2301      	movne	r3, #1
 800eb10:	2300      	moveq	r3, #0
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	e000      	b.n	800eb18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3730      	adds	r7, #48	@ 0x30
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	08012ea8 	.word	0x08012ea8
 800eb24:	08012f8c 	.word	0x08012f8c
 800eb28:	08012ef0 	.word	0x08012ef0
 800eb2c:	08012fac 	.word	0x08012fac
 800eb30:	08012fe4 	.word	0x08012fe4
 800eb34:	08012ff4 	.word	0x08012ff4

0800eb38 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08e      	sub	sp, #56	@ 0x38
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800eb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	f003 030f 	and.w	r3, r3, #15
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b14      	cmp	r3, #20
 800eb56:	f040 8171 	bne.w	800ee3c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800eb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5c:	88db      	ldrh	r3, [r3, #6]
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7f6 f829 	bl	8004bb8 <lwip_htons>
 800eb66:	4603      	mov	r3, r0
 800eb68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb74:	885b      	ldrh	r3, [r3, #2]
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7f6 f81d 	bl	8004bb8 <lwip_htons>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800eb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	f003 030f 	and.w	r3, r3, #15
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800eb92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	f0c0 8150 	bcc.w	800ee40 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800eba0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7f7 fb53 	bl	8006258 <pbuf_clen>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ebb6:	4b8c      	ldr	r3, [pc, #560]	@ (800ede8 <ip4_reass+0x2b0>)
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	8c3b      	ldrh	r3, [r7, #32]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	2b0a      	cmp	r3, #10
 800ebc2:	dd10      	ble.n	800ebe6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ebc4:	8c3b      	ldrh	r3, [r7, #32]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebca:	f7ff fd81 	bl	800e6d0 <ip_reass_remove_oldest_datagram>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 8137 	beq.w	800ee44 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ebd6:	4b84      	ldr	r3, [pc, #528]	@ (800ede8 <ip4_reass+0x2b0>)
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	8c3b      	ldrh	r3, [r7, #32]
 800ebde:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ebe0:	2b0a      	cmp	r3, #10
 800ebe2:	f300 812f 	bgt.w	800ee44 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ebe6:	4b81      	ldr	r3, [pc, #516]	@ (800edec <ip4_reass+0x2b4>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebec:	e015      	b.n	800ec1a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ebee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf0:	695a      	ldr	r2, [r3, #20]
 800ebf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d10c      	bne.n	800ec14 <ip4_reass+0xdc>
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfc:	699a      	ldr	r2, [r3, #24]
 800ebfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d106      	bne.n	800ec14 <ip4_reass+0xdc>
 800ec06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec08:	899a      	ldrh	r2, [r3, #12]
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	889b      	ldrh	r3, [r3, #4]
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d006      	beq.n	800ec22 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ec14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1e6      	bne.n	800ebee <ip4_reass+0xb6>
 800ec20:	e000      	b.n	800ec24 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ec22:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ec24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d109      	bne.n	800ec3e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ec2a:	8c3b      	ldrh	r3, [r7, #32]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec30:	f7ff fdb0 	bl	800e794 <ip_reass_enqueue_new_datagram>
 800ec34:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ec36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d11c      	bne.n	800ec76 <ip4_reass+0x13e>
      goto nullreturn;
 800ec3c:	e105      	b.n	800ee4a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ec3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec40:	88db      	ldrh	r3, [r3, #6]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7f5 ffb7 	bl	8004bb8 <lwip_htons>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d110      	bne.n	800ec76 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ec54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec56:	89db      	ldrh	r3, [r3, #14]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7f5 ffad 	bl	8004bb8 <lwip_htons>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d006      	beq.n	800ec76 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ec68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	2214      	movs	r2, #20
 800ec6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec70:	4618      	mov	r0, r3
 800ec72:	f000 fd86 	bl	800f782 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ec76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec78:	88db      	ldrh	r3, [r3, #6]
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	f003 0320 	and.w	r3, r3, #32
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	bf0c      	ite	eq
 800ec84:	2301      	moveq	r3, #1
 800ec86:	2300      	movne	r3, #0
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00e      	beq.n	800ecb0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ec94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec96:	4413      	add	r3, r2
 800ec98:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ec9a:	8b7a      	ldrh	r2, [r7, #26]
 800ec9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	f0c0 80a0 	bcc.w	800ede4 <ip4_reass+0x2ac>
 800eca4:	8b7b      	ldrh	r3, [r7, #26]
 800eca6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	f200 809a 	bhi.w	800ede4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ecb0:	69fa      	ldr	r2, [r7, #28]
 800ecb2:	6879      	ldr	r1, [r7, #4]
 800ecb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ecb6:	f7ff fdd5 	bl	800e864 <ip_reass_chain_frag_into_datagram_and_validate>
 800ecba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc2:	f000 809b 	beq.w	800edfc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ecc6:	4b48      	ldr	r3, [pc, #288]	@ (800ede8 <ip4_reass+0x2b0>)
 800ecc8:	881a      	ldrh	r2, [r3, #0]
 800ecca:	8c3b      	ldrh	r3, [r7, #32]
 800eccc:	4413      	add	r3, r2
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	4b45      	ldr	r3, [pc, #276]	@ (800ede8 <ip4_reass+0x2b0>)
 800ecd2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00d      	beq.n	800ecf6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ecda:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ecdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecde:	4413      	add	r3, r2
 800ece0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ece2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece4:	8a7a      	ldrh	r2, [r7, #18]
 800ece6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ece8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecea:	7f9b      	ldrb	r3, [r3, #30]
 800ecec:	f043 0301 	orr.w	r3, r3, #1
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d171      	bne.n	800ede0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecfe:	8b9b      	ldrh	r3, [r3, #28]
 800ed00:	3314      	adds	r3, #20
 800ed02:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ed04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ed16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed18:	3308      	adds	r3, #8
 800ed1a:	2214      	movs	r2, #20
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed20:	f000 fd2f 	bl	800f782 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ed24:	8a3b      	ldrh	r3, [r7, #16]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7f5 ff46 	bl	8004bb8 <lwip_htons>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed32:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ed34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed36:	2200      	movs	r2, #0
 800ed38:	719a      	strb	r2, [r3, #6]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ed3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed40:	2200      	movs	r2, #0
 800ed42:	729a      	strb	r2, [r3, #10]
 800ed44:	2200      	movs	r2, #0
 800ed46:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ed48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ed4e:	e00d      	b.n	800ed6c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ed50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ed56:	2114      	movs	r1, #20
 800ed58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ed5a:	f7f7 f96f 	bl	800603c <pbuf_remove_header>
      pbuf_cat(p, r);
 800ed5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7f7 fab3 	bl	80062cc <pbuf_cat>
      r = iprh->next_pbuf;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800ed6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1ee      	bne.n	800ed50 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ed72:	4b1e      	ldr	r3, [pc, #120]	@ (800edec <ip4_reass+0x2b4>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d102      	bne.n	800ed82 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed80:	e010      	b.n	800eda4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed82:	4b1a      	ldr	r3, [pc, #104]	@ (800edec <ip4_reass+0x2b4>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed88:	e007      	b.n	800ed9a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d006      	beq.n	800eda2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ed94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1f4      	bne.n	800ed8a <ip4_reass+0x252>
 800eda0:	e000      	b.n	800eda4 <ip4_reass+0x26c>
          break;
 800eda2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eda4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eda6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eda8:	f7ff fd2e 	bl	800e808 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7f7 fa53 	bl	8006258 <pbuf_clen>
 800edb2:	4603      	mov	r3, r0
 800edb4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800edb6:	4b0c      	ldr	r3, [pc, #48]	@ (800ede8 <ip4_reass+0x2b0>)
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	8c3a      	ldrh	r2, [r7, #32]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d906      	bls.n	800edce <ip4_reass+0x296>
 800edc0:	4b0b      	ldr	r3, [pc, #44]	@ (800edf0 <ip4_reass+0x2b8>)
 800edc2:	f240 229b 	movw	r2, #667	@ 0x29b
 800edc6:	490b      	ldr	r1, [pc, #44]	@ (800edf4 <ip4_reass+0x2bc>)
 800edc8:	480b      	ldr	r0, [pc, #44]	@ (800edf8 <ip4_reass+0x2c0>)
 800edca:	f000 fbc5 	bl	800f558 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800edce:	4b06      	ldr	r3, [pc, #24]	@ (800ede8 <ip4_reass+0x2b0>)
 800edd0:	881a      	ldrh	r2, [r3, #0]
 800edd2:	8c3b      	ldrh	r3, [r7, #32]
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	4b03      	ldr	r3, [pc, #12]	@ (800ede8 <ip4_reass+0x2b0>)
 800edda:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	e038      	b.n	800ee52 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ede0:	2300      	movs	r3, #0
 800ede2:	e036      	b.n	800ee52 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ede4:	bf00      	nop
 800ede6:	e00a      	b.n	800edfe <ip4_reass+0x2c6>
 800ede8:	200088f0 	.word	0x200088f0
 800edec:	200088ec 	.word	0x200088ec
 800edf0:	08012ea8 	.word	0x08012ea8
 800edf4:	08013018 	.word	0x08013018
 800edf8:	08012ef0 	.word	0x08012ef0
    goto nullreturn_ipr;
 800edfc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800edfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d106      	bne.n	800ee12 <ip4_reass+0x2da>
 800ee04:	4b15      	ldr	r3, [pc, #84]	@ (800ee5c <ip4_reass+0x324>)
 800ee06:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800ee0a:	4915      	ldr	r1, [pc, #84]	@ (800ee60 <ip4_reass+0x328>)
 800ee0c:	4815      	ldr	r0, [pc, #84]	@ (800ee64 <ip4_reass+0x32c>)
 800ee0e:	f000 fba3 	bl	800f558 <iprintf>
  if (ipr->p == NULL) {
 800ee12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d116      	bne.n	800ee48 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ee1a:	4b13      	ldr	r3, [pc, #76]	@ (800ee68 <ip4_reass+0x330>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d006      	beq.n	800ee32 <ip4_reass+0x2fa>
 800ee24:	4b0d      	ldr	r3, [pc, #52]	@ (800ee5c <ip4_reass+0x324>)
 800ee26:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ee2a:	4910      	ldr	r1, [pc, #64]	@ (800ee6c <ip4_reass+0x334>)
 800ee2c:	480d      	ldr	r0, [pc, #52]	@ (800ee64 <ip4_reass+0x32c>)
 800ee2e:	f000 fb93 	bl	800f558 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ee32:	2100      	movs	r1, #0
 800ee34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee36:	f7ff fce7 	bl	800e808 <ip_reass_dequeue_datagram>
 800ee3a:	e006      	b.n	800ee4a <ip4_reass+0x312>
    goto nullreturn;
 800ee3c:	bf00      	nop
 800ee3e:	e004      	b.n	800ee4a <ip4_reass+0x312>
    goto nullreturn;
 800ee40:	bf00      	nop
 800ee42:	e002      	b.n	800ee4a <ip4_reass+0x312>
      goto nullreturn;
 800ee44:	bf00      	nop
 800ee46:	e000      	b.n	800ee4a <ip4_reass+0x312>
  }

nullreturn:
 800ee48:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7f7 f97c 	bl	8006148 <pbuf_free>
  return NULL;
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3738      	adds	r7, #56	@ 0x38
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	08012ea8 	.word	0x08012ea8
 800ee60:	08013034 	.word	0x08013034
 800ee64:	08012ef0 	.word	0x08012ef0
 800ee68:	200088ec 	.word	0x200088ec
 800ee6c:	08013040 	.word	0x08013040

0800ee70 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ee74:	2005      	movs	r0, #5
 800ee76:	f7f6 fb17 	bl	80054a8 <memp_malloc>
 800ee7a:	4603      	mov	r3, r0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ee8e:	4b07      	ldr	r3, [pc, #28]	@ (800eeac <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ee90:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800ee94:	4906      	ldr	r1, [pc, #24]	@ (800eeb0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ee96:	4807      	ldr	r0, [pc, #28]	@ (800eeb4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ee98:	f000 fb5e 	bl	800f558 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	2005      	movs	r0, #5
 800eea0:	f7f6 fb72 	bl	8005588 <memp_free>
}
 800eea4:	bf00      	nop
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	08012ea8 	.word	0x08012ea8
 800eeb0:	08013060 	.word	0x08013060
 800eeb4:	08012ef0 	.word	0x08012ef0

0800eeb8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <ipfrag_free_pbuf_custom+0x20>
 800eeca:	4b11      	ldr	r3, [pc, #68]	@ (800ef10 <ipfrag_free_pbuf_custom+0x58>)
 800eecc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800eed0:	4910      	ldr	r1, [pc, #64]	@ (800ef14 <ipfrag_free_pbuf_custom+0x5c>)
 800eed2:	4811      	ldr	r0, [pc, #68]	@ (800ef18 <ipfrag_free_pbuf_custom+0x60>)
 800eed4:	f000 fb40 	bl	800f558 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d006      	beq.n	800eeee <ipfrag_free_pbuf_custom+0x36>
 800eee0:	4b0b      	ldr	r3, [pc, #44]	@ (800ef10 <ipfrag_free_pbuf_custom+0x58>)
 800eee2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800eee6:	490d      	ldr	r1, [pc, #52]	@ (800ef1c <ipfrag_free_pbuf_custom+0x64>)
 800eee8:	480b      	ldr	r0, [pc, #44]	@ (800ef18 <ipfrag_free_pbuf_custom+0x60>)
 800eeea:	f000 fb35 	bl	800f558 <iprintf>
  if (pcr->original != NULL) {
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	695b      	ldr	r3, [r3, #20]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d004      	beq.n	800ef00 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	695b      	ldr	r3, [r3, #20]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7f7 f924 	bl	8006148 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7ff ffbd 	bl	800ee80 <ip_frag_free_pbuf_custom_ref>
}
 800ef06:	bf00      	nop
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	08012ea8 	.word	0x08012ea8
 800ef14:	0801306c 	.word	0x0801306c
 800ef18:	08012ef0 	.word	0x08012ef0
 800ef1c:	08013078 	.word	0x08013078

0800ef20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b094      	sub	sp, #80	@ 0x50
 800ef24:	af02      	add	r7, sp, #8
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ef36:	3b14      	subs	r3, #20
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	da00      	bge.n	800ef3e <ip4_frag+0x1e>
 800ef3c:	3307      	adds	r3, #7
 800ef3e:	10db      	asrs	r3, r3, #3
 800ef40:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ef42:	2314      	movs	r3, #20
 800ef44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ef4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef4e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ef50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	f003 030f 	and.w	r3, r3, #15
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	2b14      	cmp	r3, #20
 800ef60:	d002      	beq.n	800ef68 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ef62:	f06f 0305 	mvn.w	r3, #5
 800ef66:	e110      	b.n	800f18a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	895b      	ldrh	r3, [r3, #10]
 800ef6c:	2b13      	cmp	r3, #19
 800ef6e:	d809      	bhi.n	800ef84 <ip4_frag+0x64>
 800ef70:	4b88      	ldr	r3, [pc, #544]	@ (800f194 <ip4_frag+0x274>)
 800ef72:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800ef76:	4988      	ldr	r1, [pc, #544]	@ (800f198 <ip4_frag+0x278>)
 800ef78:	4888      	ldr	r0, [pc, #544]	@ (800f19c <ip4_frag+0x27c>)
 800ef7a:	f000 faed 	bl	800f558 <iprintf>
 800ef7e:	f06f 0305 	mvn.w	r3, #5
 800ef82:	e102      	b.n	800f18a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ef84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef86:	88db      	ldrh	r3, [r3, #6]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7f5 fe14 	bl	8004bb8 <lwip_htons>
 800ef90:	4603      	mov	r3, r0
 800ef92:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800ef94:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ef96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef9a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ef9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800efa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800efa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	891b      	ldrh	r3, [r3, #8]
 800efaa:	3b14      	subs	r3, #20
 800efac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800efb0:	e0e1      	b.n	800f176 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800efb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800efb4:	00db      	lsls	r3, r3, #3
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800efbc:	4293      	cmp	r3, r2
 800efbe:	bf28      	it	cs
 800efc0:	4613      	movcs	r3, r2
 800efc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800efc4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800efc8:	2114      	movs	r1, #20
 800efca:	200e      	movs	r0, #14
 800efcc:	f7f6 fdd8 	bl	8005b80 <pbuf_alloc>
 800efd0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800efd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f000 80d5 	beq.w	800f184 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800efda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efdc:	895b      	ldrh	r3, [r3, #10]
 800efde:	2b13      	cmp	r3, #19
 800efe0:	d806      	bhi.n	800eff0 <ip4_frag+0xd0>
 800efe2:	4b6c      	ldr	r3, [pc, #432]	@ (800f194 <ip4_frag+0x274>)
 800efe4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800efe8:	496d      	ldr	r1, [pc, #436]	@ (800f1a0 <ip4_frag+0x280>)
 800efea:	486c      	ldr	r0, [pc, #432]	@ (800f19c <ip4_frag+0x27c>)
 800efec:	f000 fab4 	bl	800f558 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	2214      	movs	r2, #20
 800eff6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eff8:	4618      	mov	r0, r3
 800effa:	f000 fbc2 	bl	800f782 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800effe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800f004:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f006:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800f00a:	e064      	b.n	800f0d6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	895a      	ldrh	r2, [r3, #10]
 800f010:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	895b      	ldrh	r3, [r3, #10]
 800f01a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d906      	bls.n	800f02e <ip4_frag+0x10e>
 800f020:	4b5c      	ldr	r3, [pc, #368]	@ (800f194 <ip4_frag+0x274>)
 800f022:	f240 322d 	movw	r2, #813	@ 0x32d
 800f026:	495f      	ldr	r1, [pc, #380]	@ (800f1a4 <ip4_frag+0x284>)
 800f028:	485c      	ldr	r0, [pc, #368]	@ (800f19c <ip4_frag+0x27c>)
 800f02a:	f000 fa95 	bl	800f558 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f02e:	8bfa      	ldrh	r2, [r7, #30]
 800f030:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f034:	4293      	cmp	r3, r2
 800f036:	bf28      	it	cs
 800f038:	4613      	movcs	r3, r2
 800f03a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f03e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f042:	2b00      	cmp	r3, #0
 800f044:	d105      	bne.n	800f052 <ip4_frag+0x132>
        poff = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	60fb      	str	r3, [r7, #12]
        continue;
 800f050:	e041      	b.n	800f0d6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f052:	f7ff ff0d 	bl	800ee70 <ip_frag_alloc_pbuf_custom_ref>
 800f056:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d103      	bne.n	800f066 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f05e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f060:	f7f7 f872 	bl	8006148 <pbuf_free>
        goto memerr;
 800f064:	e08f      	b.n	800f186 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f066:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f06c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f06e:	4413      	add	r3, r2
 800f070:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800f074:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f078:	9201      	str	r2, [sp, #4]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	4603      	mov	r3, r0
 800f07e:	2241      	movs	r2, #65	@ 0x41
 800f080:	2000      	movs	r0, #0
 800f082:	f7f6 fea7 	bl	8005dd4 <pbuf_alloced_custom>
 800f086:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d106      	bne.n	800f09c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f08e:	69b8      	ldr	r0, [r7, #24]
 800f090:	f7ff fef6 	bl	800ee80 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f094:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f096:	f7f7 f857 	bl	8006148 <pbuf_free>
        goto memerr;
 800f09a:	e074      	b.n	800f186 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f7f7 f8f3 	bl	8006288 <pbuf_ref>
      pcr->original = p;
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	4a3f      	ldr	r2, [pc, #252]	@ (800f1a8 <ip4_frag+0x288>)
 800f0ac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f0ae:	6979      	ldr	r1, [r7, #20]
 800f0b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0b2:	f7f7 f90b 	bl	80062cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f0b6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f0ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800f0c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d004      	beq.n	800f0d6 <ip4_frag+0x1b6>
        poff = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f0d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d196      	bne.n	800f00c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f0de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f0e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f0e4:	4413      	add	r3, r2
 800f0e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f0ec:	f1a3 0213 	sub.w	r2, r3, #19
 800f0f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	bfcc      	ite	gt
 800f0f8:	2301      	movgt	r3, #1
 800f0fa:	2300      	movle	r3, #0
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f100:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f108:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d002      	beq.n	800f116 <ip4_frag+0x1f6>
 800f110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f112:	2b00      	cmp	r3, #0
 800f114:	d003      	beq.n	800f11e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f116:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f118:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f11c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f11e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f120:	4618      	mov	r0, r3
 800f122:	f7f5 fd49 	bl	8004bb8 <lwip_htons>
 800f126:	4603      	mov	r3, r0
 800f128:	461a      	mov	r2, r3
 800f12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f12e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f130:	3314      	adds	r3, #20
 800f132:	b29b      	uxth	r3, r3
 800f134:	4618      	mov	r0, r3
 800f136:	f7f5 fd3f 	bl	8004bb8 <lwip_htons>
 800f13a:	4603      	mov	r3, r0
 800f13c:	461a      	mov	r2, r3
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f144:	2200      	movs	r2, #0
 800f146:	729a      	strb	r2, [r3, #10]
 800f148:	2200      	movs	r2, #0
 800f14a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	695b      	ldr	r3, [r3, #20]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f154:	68b8      	ldr	r0, [r7, #8]
 800f156:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f15a:	f7f6 fff5 	bl	8006148 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f15e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f162:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800f16a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f16e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f170:	4413      	add	r3, r2
 800f172:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800f176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f47f af19 	bne.w	800efb2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	e002      	b.n	800f18a <ip4_frag+0x26a>
      goto memerr;
 800f184:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3748      	adds	r7, #72	@ 0x48
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	08012ea8 	.word	0x08012ea8
 800f198:	08013084 	.word	0x08013084
 800f19c:	08012ef0 	.word	0x08012ef0
 800f1a0:	080130a0 	.word	0x080130a0
 800f1a4:	080130c0 	.word	0x080130c0
 800f1a8:	0800eeb9 	.word	0x0800eeb9

0800f1ac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f1b6:	230e      	movs	r3, #14
 800f1b8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	895b      	ldrh	r3, [r3, #10]
 800f1be:	2b0e      	cmp	r3, #14
 800f1c0:	d96e      	bls.n	800f2a0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7bdb      	ldrb	r3, [r3, #15]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	b2da      	uxtb	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	7b1a      	ldrb	r2, [r3, #12]
 800f1e2:	7b5b      	ldrb	r3, [r3, #13]
 800f1e4:	021b      	lsls	r3, r3, #8
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	f003 0301 	and.w	r3, r3, #1
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d023      	beq.n	800f23e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d10f      	bne.n	800f21e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	785b      	ldrb	r3, [r3, #1]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d11b      	bne.n	800f23e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f20a:	2b5e      	cmp	r3, #94	@ 0x5e
 800f20c:	d117      	bne.n	800f23e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	7b5b      	ldrb	r3, [r3, #13]
 800f212:	f043 0310 	orr.w	r3, r3, #16
 800f216:	b2da      	uxtb	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	735a      	strb	r2, [r3, #13]
 800f21c:	e00f      	b.n	800f23e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	2206      	movs	r2, #6
 800f222:	4928      	ldr	r1, [pc, #160]	@ (800f2c4 <ethernet_input+0x118>)
 800f224:	4618      	mov	r0, r3
 800f226:	f000 fa0c 	bl	800f642 <memcmp>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d106      	bne.n	800f23e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	7b5b      	ldrb	r3, [r3, #13]
 800f234:	f043 0308 	orr.w	r3, r3, #8
 800f238:	b2da      	uxtb	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f23e:	89fb      	ldrh	r3, [r7, #14]
 800f240:	2b08      	cmp	r3, #8
 800f242:	d003      	beq.n	800f24c <ethernet_input+0xa0>
 800f244:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800f248:	d014      	beq.n	800f274 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f24a:	e032      	b.n	800f2b2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f252:	f003 0308 	and.w	r3, r3, #8
 800f256:	2b00      	cmp	r3, #0
 800f258:	d024      	beq.n	800f2a4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f25a:	8afb      	ldrh	r3, [r7, #22]
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7f6 feec 	bl	800603c <pbuf_remove_header>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d11e      	bne.n	800f2a8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7fe fe91 	bl	800df94 <ip4_input>
      break;
 800f272:	e013      	b.n	800f29c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f27a:	f003 0308 	and.w	r3, r3, #8
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d014      	beq.n	800f2ac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f282:	8afb      	ldrh	r3, [r7, #22]
 800f284:	4619      	mov	r1, r3
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7f6 fed8 	bl	800603c <pbuf_remove_header>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10e      	bne.n	800f2b0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7fe f831 	bl	800d2fc <etharp_input>
      break;
 800f29a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	e00c      	b.n	800f2ba <ethernet_input+0x10e>
    goto free_and_return;
 800f2a0:	bf00      	nop
 800f2a2:	e006      	b.n	800f2b2 <ethernet_input+0x106>
        goto free_and_return;
 800f2a4:	bf00      	nop
 800f2a6:	e004      	b.n	800f2b2 <ethernet_input+0x106>
        goto free_and_return;
 800f2a8:	bf00      	nop
 800f2aa:	e002      	b.n	800f2b2 <ethernet_input+0x106>
        goto free_and_return;
 800f2ac:	bf00      	nop
 800f2ae:	e000      	b.n	800f2b2 <ethernet_input+0x106>
        goto free_and_return;
 800f2b0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7f6 ff48 	bl	8006148 <pbuf_free>
  return ERR_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3718      	adds	r7, #24
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	0801325c 	.word	0x0801325c

0800f2c8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f2d6:	8c3b      	ldrh	r3, [r7, #32]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7f5 fc6d 	bl	8004bb8 <lwip_htons>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f2e2:	210e      	movs	r1, #14
 800f2e4:	68b8      	ldr	r0, [r7, #8]
 800f2e6:	f7f6 fe99 	bl	800601c <pbuf_add_header>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d125      	bne.n	800f33c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	8afa      	ldrh	r2, [r7, #22]
 800f2fa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	2206      	movs	r2, #6
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	4618      	mov	r0, r3
 800f304:	f000 fa3d 	bl	800f782 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	3306      	adds	r3, #6
 800f30c:	2206      	movs	r2, #6
 800f30e:	6879      	ldr	r1, [r7, #4]
 800f310:	4618      	mov	r0, r3
 800f312:	f000 fa36 	bl	800f782 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f31c:	2b06      	cmp	r3, #6
 800f31e:	d006      	beq.n	800f32e <ethernet_output+0x66>
 800f320:	4b0a      	ldr	r3, [pc, #40]	@ (800f34c <ethernet_output+0x84>)
 800f322:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f326:	490a      	ldr	r1, [pc, #40]	@ (800f350 <ethernet_output+0x88>)
 800f328:	480a      	ldr	r0, [pc, #40]	@ (800f354 <ethernet_output+0x8c>)
 800f32a:	f000 f915 	bl	800f558 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	699b      	ldr	r3, [r3, #24]
 800f332:	68b9      	ldr	r1, [r7, #8]
 800f334:	68f8      	ldr	r0, [r7, #12]
 800f336:	4798      	blx	r3
 800f338:	4603      	mov	r3, r0
 800f33a:	e002      	b.n	800f342 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f33c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f33e:	f06f 0301 	mvn.w	r3, #1
}
 800f342:	4618      	mov	r0, r3
 800f344:	3718      	adds	r7, #24
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	080130d0 	.word	0x080130d0
 800f350:	08013108 	.word	0x08013108
 800f354:	0801313c 	.word	0x0801313c

0800f358 <rand>:
 800f358:	4b16      	ldr	r3, [pc, #88]	@ (800f3b4 <rand+0x5c>)
 800f35a:	b510      	push	{r4, lr}
 800f35c:	681c      	ldr	r4, [r3, #0]
 800f35e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f360:	b9b3      	cbnz	r3, 800f390 <rand+0x38>
 800f362:	2018      	movs	r0, #24
 800f364:	f000 fa84 	bl	800f870 <malloc>
 800f368:	4602      	mov	r2, r0
 800f36a:	6320      	str	r0, [r4, #48]	@ 0x30
 800f36c:	b920      	cbnz	r0, 800f378 <rand+0x20>
 800f36e:	4b12      	ldr	r3, [pc, #72]	@ (800f3b8 <rand+0x60>)
 800f370:	4812      	ldr	r0, [pc, #72]	@ (800f3bc <rand+0x64>)
 800f372:	2152      	movs	r1, #82	@ 0x52
 800f374:	f000 fa14 	bl	800f7a0 <__assert_func>
 800f378:	4911      	ldr	r1, [pc, #68]	@ (800f3c0 <rand+0x68>)
 800f37a:	4b12      	ldr	r3, [pc, #72]	@ (800f3c4 <rand+0x6c>)
 800f37c:	e9c0 1300 	strd	r1, r3, [r0]
 800f380:	4b11      	ldr	r3, [pc, #68]	@ (800f3c8 <rand+0x70>)
 800f382:	6083      	str	r3, [r0, #8]
 800f384:	230b      	movs	r3, #11
 800f386:	8183      	strh	r3, [r0, #12]
 800f388:	2100      	movs	r1, #0
 800f38a:	2001      	movs	r0, #1
 800f38c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f390:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f392:	480e      	ldr	r0, [pc, #56]	@ (800f3cc <rand+0x74>)
 800f394:	690b      	ldr	r3, [r1, #16]
 800f396:	694c      	ldr	r4, [r1, #20]
 800f398:	4a0d      	ldr	r2, [pc, #52]	@ (800f3d0 <rand+0x78>)
 800f39a:	4358      	muls	r0, r3
 800f39c:	fb02 0004 	mla	r0, r2, r4, r0
 800f3a0:	fba3 3202 	umull	r3, r2, r3, r2
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	eb40 0002 	adc.w	r0, r0, r2
 800f3aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f3ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f3b2:	bd10      	pop	{r4, pc}
 800f3b4:	20000020 	.word	0x20000020
 800f3b8:	0801326a 	.word	0x0801326a
 800f3bc:	08013281 	.word	0x08013281
 800f3c0:	abcd330e 	.word	0xabcd330e
 800f3c4:	e66d1234 	.word	0xe66d1234
 800f3c8:	0005deec 	.word	0x0005deec
 800f3cc:	5851f42d 	.word	0x5851f42d
 800f3d0:	4c957f2d 	.word	0x4c957f2d

0800f3d4 <std>:
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	b510      	push	{r4, lr}
 800f3d8:	4604      	mov	r4, r0
 800f3da:	e9c0 3300 	strd	r3, r3, [r0]
 800f3de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3e2:	6083      	str	r3, [r0, #8]
 800f3e4:	8181      	strh	r1, [r0, #12]
 800f3e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f3e8:	81c2      	strh	r2, [r0, #14]
 800f3ea:	6183      	str	r3, [r0, #24]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	2208      	movs	r2, #8
 800f3f0:	305c      	adds	r0, #92	@ 0x5c
 800f3f2:	f000 f950 	bl	800f696 <memset>
 800f3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f42c <std+0x58>)
 800f3f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f430 <std+0x5c>)
 800f3fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f434 <std+0x60>)
 800f400:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f402:	4b0d      	ldr	r3, [pc, #52]	@ (800f438 <std+0x64>)
 800f404:	6323      	str	r3, [r4, #48]	@ 0x30
 800f406:	4b0d      	ldr	r3, [pc, #52]	@ (800f43c <std+0x68>)
 800f408:	6224      	str	r4, [r4, #32]
 800f40a:	429c      	cmp	r4, r3
 800f40c:	d006      	beq.n	800f41c <std+0x48>
 800f40e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f412:	4294      	cmp	r4, r2
 800f414:	d002      	beq.n	800f41c <std+0x48>
 800f416:	33d0      	adds	r3, #208	@ 0xd0
 800f418:	429c      	cmp	r4, r3
 800f41a:	d105      	bne.n	800f428 <std+0x54>
 800f41c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f424:	f000 b9aa 	b.w	800f77c <__retarget_lock_init_recursive>
 800f428:	bd10      	pop	{r4, pc}
 800f42a:	bf00      	nop
 800f42c:	0800f5bd 	.word	0x0800f5bd
 800f430:	0800f5df 	.word	0x0800f5df
 800f434:	0800f617 	.word	0x0800f617
 800f438:	0800f63b 	.word	0x0800f63b
 800f43c:	200088f4 	.word	0x200088f4

0800f440 <stdio_exit_handler>:
 800f440:	4a02      	ldr	r2, [pc, #8]	@ (800f44c <stdio_exit_handler+0xc>)
 800f442:	4903      	ldr	r1, [pc, #12]	@ (800f450 <stdio_exit_handler+0x10>)
 800f444:	4803      	ldr	r0, [pc, #12]	@ (800f454 <stdio_exit_handler+0x14>)
 800f446:	f000 b869 	b.w	800f51c <_fwalk_sglue>
 800f44a:	bf00      	nop
 800f44c:	20000014 	.word	0x20000014
 800f450:	08010335 	.word	0x08010335
 800f454:	20000024 	.word	0x20000024

0800f458 <cleanup_stdio>:
 800f458:	6841      	ldr	r1, [r0, #4]
 800f45a:	4b0c      	ldr	r3, [pc, #48]	@ (800f48c <cleanup_stdio+0x34>)
 800f45c:	4299      	cmp	r1, r3
 800f45e:	b510      	push	{r4, lr}
 800f460:	4604      	mov	r4, r0
 800f462:	d001      	beq.n	800f468 <cleanup_stdio+0x10>
 800f464:	f000 ff66 	bl	8010334 <_fflush_r>
 800f468:	68a1      	ldr	r1, [r4, #8]
 800f46a:	4b09      	ldr	r3, [pc, #36]	@ (800f490 <cleanup_stdio+0x38>)
 800f46c:	4299      	cmp	r1, r3
 800f46e:	d002      	beq.n	800f476 <cleanup_stdio+0x1e>
 800f470:	4620      	mov	r0, r4
 800f472:	f000 ff5f 	bl	8010334 <_fflush_r>
 800f476:	68e1      	ldr	r1, [r4, #12]
 800f478:	4b06      	ldr	r3, [pc, #24]	@ (800f494 <cleanup_stdio+0x3c>)
 800f47a:	4299      	cmp	r1, r3
 800f47c:	d004      	beq.n	800f488 <cleanup_stdio+0x30>
 800f47e:	4620      	mov	r0, r4
 800f480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f484:	f000 bf56 	b.w	8010334 <_fflush_r>
 800f488:	bd10      	pop	{r4, pc}
 800f48a:	bf00      	nop
 800f48c:	200088f4 	.word	0x200088f4
 800f490:	2000895c 	.word	0x2000895c
 800f494:	200089c4 	.word	0x200089c4

0800f498 <global_stdio_init.part.0>:
 800f498:	b510      	push	{r4, lr}
 800f49a:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c8 <global_stdio_init.part.0+0x30>)
 800f49c:	4c0b      	ldr	r4, [pc, #44]	@ (800f4cc <global_stdio_init.part.0+0x34>)
 800f49e:	4a0c      	ldr	r2, [pc, #48]	@ (800f4d0 <global_stdio_init.part.0+0x38>)
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	2104      	movs	r1, #4
 800f4a8:	f7ff ff94 	bl	800f3d4 <std>
 800f4ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	2109      	movs	r1, #9
 800f4b4:	f7ff ff8e 	bl	800f3d4 <std>
 800f4b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f4bc:	2202      	movs	r2, #2
 800f4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4c2:	2112      	movs	r1, #18
 800f4c4:	f7ff bf86 	b.w	800f3d4 <std>
 800f4c8:	20008a2c 	.word	0x20008a2c
 800f4cc:	200088f4 	.word	0x200088f4
 800f4d0:	0800f441 	.word	0x0800f441

0800f4d4 <__sfp_lock_acquire>:
 800f4d4:	4801      	ldr	r0, [pc, #4]	@ (800f4dc <__sfp_lock_acquire+0x8>)
 800f4d6:	f000 b952 	b.w	800f77e <__retarget_lock_acquire_recursive>
 800f4da:	bf00      	nop
 800f4dc:	20008a35 	.word	0x20008a35

0800f4e0 <__sfp_lock_release>:
 800f4e0:	4801      	ldr	r0, [pc, #4]	@ (800f4e8 <__sfp_lock_release+0x8>)
 800f4e2:	f000 b94d 	b.w	800f780 <__retarget_lock_release_recursive>
 800f4e6:	bf00      	nop
 800f4e8:	20008a35 	.word	0x20008a35

0800f4ec <__sinit>:
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	f7ff fff0 	bl	800f4d4 <__sfp_lock_acquire>
 800f4f4:	6a23      	ldr	r3, [r4, #32]
 800f4f6:	b11b      	cbz	r3, 800f500 <__sinit+0x14>
 800f4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4fc:	f7ff bff0 	b.w	800f4e0 <__sfp_lock_release>
 800f500:	4b04      	ldr	r3, [pc, #16]	@ (800f514 <__sinit+0x28>)
 800f502:	6223      	str	r3, [r4, #32]
 800f504:	4b04      	ldr	r3, [pc, #16]	@ (800f518 <__sinit+0x2c>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1f5      	bne.n	800f4f8 <__sinit+0xc>
 800f50c:	f7ff ffc4 	bl	800f498 <global_stdio_init.part.0>
 800f510:	e7f2      	b.n	800f4f8 <__sinit+0xc>
 800f512:	bf00      	nop
 800f514:	0800f459 	.word	0x0800f459
 800f518:	20008a2c 	.word	0x20008a2c

0800f51c <_fwalk_sglue>:
 800f51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f520:	4607      	mov	r7, r0
 800f522:	4688      	mov	r8, r1
 800f524:	4614      	mov	r4, r2
 800f526:	2600      	movs	r6, #0
 800f528:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f52c:	f1b9 0901 	subs.w	r9, r9, #1
 800f530:	d505      	bpl.n	800f53e <_fwalk_sglue+0x22>
 800f532:	6824      	ldr	r4, [r4, #0]
 800f534:	2c00      	cmp	r4, #0
 800f536:	d1f7      	bne.n	800f528 <_fwalk_sglue+0xc>
 800f538:	4630      	mov	r0, r6
 800f53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f53e:	89ab      	ldrh	r3, [r5, #12]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d907      	bls.n	800f554 <_fwalk_sglue+0x38>
 800f544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f548:	3301      	adds	r3, #1
 800f54a:	d003      	beq.n	800f554 <_fwalk_sglue+0x38>
 800f54c:	4629      	mov	r1, r5
 800f54e:	4638      	mov	r0, r7
 800f550:	47c0      	blx	r8
 800f552:	4306      	orrs	r6, r0
 800f554:	3568      	adds	r5, #104	@ 0x68
 800f556:	e7e9      	b.n	800f52c <_fwalk_sglue+0x10>

0800f558 <iprintf>:
 800f558:	b40f      	push	{r0, r1, r2, r3}
 800f55a:	b507      	push	{r0, r1, r2, lr}
 800f55c:	4906      	ldr	r1, [pc, #24]	@ (800f578 <iprintf+0x20>)
 800f55e:	ab04      	add	r3, sp, #16
 800f560:	6808      	ldr	r0, [r1, #0]
 800f562:	f853 2b04 	ldr.w	r2, [r3], #4
 800f566:	6881      	ldr	r1, [r0, #8]
 800f568:	9301      	str	r3, [sp, #4]
 800f56a:	f000 fbb9 	bl	800fce0 <_vfiprintf_r>
 800f56e:	b003      	add	sp, #12
 800f570:	f85d eb04 	ldr.w	lr, [sp], #4
 800f574:	b004      	add	sp, #16
 800f576:	4770      	bx	lr
 800f578:	20000020 	.word	0x20000020

0800f57c <siprintf>:
 800f57c:	b40e      	push	{r1, r2, r3}
 800f57e:	b500      	push	{lr}
 800f580:	b09c      	sub	sp, #112	@ 0x70
 800f582:	ab1d      	add	r3, sp, #116	@ 0x74
 800f584:	9002      	str	r0, [sp, #8]
 800f586:	9006      	str	r0, [sp, #24]
 800f588:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f58c:	4809      	ldr	r0, [pc, #36]	@ (800f5b4 <siprintf+0x38>)
 800f58e:	9107      	str	r1, [sp, #28]
 800f590:	9104      	str	r1, [sp, #16]
 800f592:	4909      	ldr	r1, [pc, #36]	@ (800f5b8 <siprintf+0x3c>)
 800f594:	f853 2b04 	ldr.w	r2, [r3], #4
 800f598:	9105      	str	r1, [sp, #20]
 800f59a:	6800      	ldr	r0, [r0, #0]
 800f59c:	9301      	str	r3, [sp, #4]
 800f59e:	a902      	add	r1, sp, #8
 800f5a0:	f000 fa78 	bl	800fa94 <_svfiprintf_r>
 800f5a4:	9b02      	ldr	r3, [sp, #8]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	701a      	strb	r2, [r3, #0]
 800f5aa:	b01c      	add	sp, #112	@ 0x70
 800f5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5b0:	b003      	add	sp, #12
 800f5b2:	4770      	bx	lr
 800f5b4:	20000020 	.word	0x20000020
 800f5b8:	ffff0208 	.word	0xffff0208

0800f5bc <__sread>:
 800f5bc:	b510      	push	{r4, lr}
 800f5be:	460c      	mov	r4, r1
 800f5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c4:	f000 f892 	bl	800f6ec <_read_r>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	bfab      	itete	ge
 800f5cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800f5d0:	181b      	addge	r3, r3, r0
 800f5d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f5d6:	bfac      	ite	ge
 800f5d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f5da:	81a3      	strhlt	r3, [r4, #12]
 800f5dc:	bd10      	pop	{r4, pc}

0800f5de <__swrite>:
 800f5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e2:	461f      	mov	r7, r3
 800f5e4:	898b      	ldrh	r3, [r1, #12]
 800f5e6:	05db      	lsls	r3, r3, #23
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	460c      	mov	r4, r1
 800f5ec:	4616      	mov	r6, r2
 800f5ee:	d505      	bpl.n	800f5fc <__swrite+0x1e>
 800f5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5f4:	2302      	movs	r3, #2
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f000 f866 	bl	800f6c8 <_lseek_r>
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f602:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f606:	81a3      	strh	r3, [r4, #12]
 800f608:	4632      	mov	r2, r6
 800f60a:	463b      	mov	r3, r7
 800f60c:	4628      	mov	r0, r5
 800f60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f612:	f000 b87d 	b.w	800f710 <_write_r>

0800f616 <__sseek>:
 800f616:	b510      	push	{r4, lr}
 800f618:	460c      	mov	r4, r1
 800f61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f61e:	f000 f853 	bl	800f6c8 <_lseek_r>
 800f622:	1c43      	adds	r3, r0, #1
 800f624:	89a3      	ldrh	r3, [r4, #12]
 800f626:	bf15      	itete	ne
 800f628:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f62a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f62e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f632:	81a3      	strheq	r3, [r4, #12]
 800f634:	bf18      	it	ne
 800f636:	81a3      	strhne	r3, [r4, #12]
 800f638:	bd10      	pop	{r4, pc}

0800f63a <__sclose>:
 800f63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f63e:	f000 b833 	b.w	800f6a8 <_close_r>

0800f642 <memcmp>:
 800f642:	b510      	push	{r4, lr}
 800f644:	3901      	subs	r1, #1
 800f646:	4402      	add	r2, r0
 800f648:	4290      	cmp	r0, r2
 800f64a:	d101      	bne.n	800f650 <memcmp+0xe>
 800f64c:	2000      	movs	r0, #0
 800f64e:	e005      	b.n	800f65c <memcmp+0x1a>
 800f650:	7803      	ldrb	r3, [r0, #0]
 800f652:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f656:	42a3      	cmp	r3, r4
 800f658:	d001      	beq.n	800f65e <memcmp+0x1c>
 800f65a:	1b18      	subs	r0, r3, r4
 800f65c:	bd10      	pop	{r4, pc}
 800f65e:	3001      	adds	r0, #1
 800f660:	e7f2      	b.n	800f648 <memcmp+0x6>

0800f662 <memmove>:
 800f662:	4288      	cmp	r0, r1
 800f664:	b510      	push	{r4, lr}
 800f666:	eb01 0402 	add.w	r4, r1, r2
 800f66a:	d902      	bls.n	800f672 <memmove+0x10>
 800f66c:	4284      	cmp	r4, r0
 800f66e:	4623      	mov	r3, r4
 800f670:	d807      	bhi.n	800f682 <memmove+0x20>
 800f672:	1e43      	subs	r3, r0, #1
 800f674:	42a1      	cmp	r1, r4
 800f676:	d008      	beq.n	800f68a <memmove+0x28>
 800f678:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f67c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f680:	e7f8      	b.n	800f674 <memmove+0x12>
 800f682:	4402      	add	r2, r0
 800f684:	4601      	mov	r1, r0
 800f686:	428a      	cmp	r2, r1
 800f688:	d100      	bne.n	800f68c <memmove+0x2a>
 800f68a:	bd10      	pop	{r4, pc}
 800f68c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f690:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f694:	e7f7      	b.n	800f686 <memmove+0x24>

0800f696 <memset>:
 800f696:	4402      	add	r2, r0
 800f698:	4603      	mov	r3, r0
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d100      	bne.n	800f6a0 <memset+0xa>
 800f69e:	4770      	bx	lr
 800f6a0:	f803 1b01 	strb.w	r1, [r3], #1
 800f6a4:	e7f9      	b.n	800f69a <memset+0x4>
	...

0800f6a8 <_close_r>:
 800f6a8:	b538      	push	{r3, r4, r5, lr}
 800f6aa:	4d06      	ldr	r5, [pc, #24]	@ (800f6c4 <_close_r+0x1c>)
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	4608      	mov	r0, r1
 800f6b2:	602b      	str	r3, [r5, #0]
 800f6b4:	f7f1 fad0 	bl	8000c58 <_close>
 800f6b8:	1c43      	adds	r3, r0, #1
 800f6ba:	d102      	bne.n	800f6c2 <_close_r+0x1a>
 800f6bc:	682b      	ldr	r3, [r5, #0]
 800f6be:	b103      	cbz	r3, 800f6c2 <_close_r+0x1a>
 800f6c0:	6023      	str	r3, [r4, #0]
 800f6c2:	bd38      	pop	{r3, r4, r5, pc}
 800f6c4:	20008a30 	.word	0x20008a30

0800f6c8 <_lseek_r>:
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	4d07      	ldr	r5, [pc, #28]	@ (800f6e8 <_lseek_r+0x20>)
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	4608      	mov	r0, r1
 800f6d0:	4611      	mov	r1, r2
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	602a      	str	r2, [r5, #0]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	f7f1 fae5 	bl	8000ca6 <_lseek>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	d102      	bne.n	800f6e6 <_lseek_r+0x1e>
 800f6e0:	682b      	ldr	r3, [r5, #0]
 800f6e2:	b103      	cbz	r3, 800f6e6 <_lseek_r+0x1e>
 800f6e4:	6023      	str	r3, [r4, #0]
 800f6e6:	bd38      	pop	{r3, r4, r5, pc}
 800f6e8:	20008a30 	.word	0x20008a30

0800f6ec <_read_r>:
 800f6ec:	b538      	push	{r3, r4, r5, lr}
 800f6ee:	4d07      	ldr	r5, [pc, #28]	@ (800f70c <_read_r+0x20>)
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	4608      	mov	r0, r1
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	602a      	str	r2, [r5, #0]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	f7f1 fa73 	bl	8000be6 <_read>
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	d102      	bne.n	800f70a <_read_r+0x1e>
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	b103      	cbz	r3, 800f70a <_read_r+0x1e>
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	bd38      	pop	{r3, r4, r5, pc}
 800f70c:	20008a30 	.word	0x20008a30

0800f710 <_write_r>:
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	4d07      	ldr	r5, [pc, #28]	@ (800f730 <_write_r+0x20>)
 800f714:	4604      	mov	r4, r0
 800f716:	4608      	mov	r0, r1
 800f718:	4611      	mov	r1, r2
 800f71a:	2200      	movs	r2, #0
 800f71c:	602a      	str	r2, [r5, #0]
 800f71e:	461a      	mov	r2, r3
 800f720:	f7f1 fa7e 	bl	8000c20 <_write>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d102      	bne.n	800f72e <_write_r+0x1e>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	b103      	cbz	r3, 800f72e <_write_r+0x1e>
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
 800f730:	20008a30 	.word	0x20008a30

0800f734 <__libc_init_array>:
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	4d0d      	ldr	r5, [pc, #52]	@ (800f76c <__libc_init_array+0x38>)
 800f738:	4c0d      	ldr	r4, [pc, #52]	@ (800f770 <__libc_init_array+0x3c>)
 800f73a:	1b64      	subs	r4, r4, r5
 800f73c:	10a4      	asrs	r4, r4, #2
 800f73e:	2600      	movs	r6, #0
 800f740:	42a6      	cmp	r6, r4
 800f742:	d109      	bne.n	800f758 <__libc_init_array+0x24>
 800f744:	4d0b      	ldr	r5, [pc, #44]	@ (800f774 <__libc_init_array+0x40>)
 800f746:	4c0c      	ldr	r4, [pc, #48]	@ (800f778 <__libc_init_array+0x44>)
 800f748:	f000 ffd8 	bl	80106fc <_init>
 800f74c:	1b64      	subs	r4, r4, r5
 800f74e:	10a4      	asrs	r4, r4, #2
 800f750:	2600      	movs	r6, #0
 800f752:	42a6      	cmp	r6, r4
 800f754:	d105      	bne.n	800f762 <__libc_init_array+0x2e>
 800f756:	bd70      	pop	{r4, r5, r6, pc}
 800f758:	f855 3b04 	ldr.w	r3, [r5], #4
 800f75c:	4798      	blx	r3
 800f75e:	3601      	adds	r6, #1
 800f760:	e7ee      	b.n	800f740 <__libc_init_array+0xc>
 800f762:	f855 3b04 	ldr.w	r3, [r5], #4
 800f766:	4798      	blx	r3
 800f768:	3601      	adds	r6, #1
 800f76a:	e7f2      	b.n	800f752 <__libc_init_array+0x1e>
 800f76c:	08013350 	.word	0x08013350
 800f770:	08013350 	.word	0x08013350
 800f774:	08013350 	.word	0x08013350
 800f778:	08013354 	.word	0x08013354

0800f77c <__retarget_lock_init_recursive>:
 800f77c:	4770      	bx	lr

0800f77e <__retarget_lock_acquire_recursive>:
 800f77e:	4770      	bx	lr

0800f780 <__retarget_lock_release_recursive>:
 800f780:	4770      	bx	lr

0800f782 <memcpy>:
 800f782:	440a      	add	r2, r1
 800f784:	4291      	cmp	r1, r2
 800f786:	f100 33ff 	add.w	r3, r0, #4294967295
 800f78a:	d100      	bne.n	800f78e <memcpy+0xc>
 800f78c:	4770      	bx	lr
 800f78e:	b510      	push	{r4, lr}
 800f790:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f794:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f798:	4291      	cmp	r1, r2
 800f79a:	d1f9      	bne.n	800f790 <memcpy+0xe>
 800f79c:	bd10      	pop	{r4, pc}
	...

0800f7a0 <__assert_func>:
 800f7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7a2:	4614      	mov	r4, r2
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	4b09      	ldr	r3, [pc, #36]	@ (800f7cc <__assert_func+0x2c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	68d8      	ldr	r0, [r3, #12]
 800f7ae:	b954      	cbnz	r4, 800f7c6 <__assert_func+0x26>
 800f7b0:	4b07      	ldr	r3, [pc, #28]	@ (800f7d0 <__assert_func+0x30>)
 800f7b2:	461c      	mov	r4, r3
 800f7b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7b8:	9100      	str	r1, [sp, #0]
 800f7ba:	462b      	mov	r3, r5
 800f7bc:	4905      	ldr	r1, [pc, #20]	@ (800f7d4 <__assert_func+0x34>)
 800f7be:	f000 fde1 	bl	8010384 <fiprintf>
 800f7c2:	f000 fe95 	bl	80104f0 <abort>
 800f7c6:	4b04      	ldr	r3, [pc, #16]	@ (800f7d8 <__assert_func+0x38>)
 800f7c8:	e7f4      	b.n	800f7b4 <__assert_func+0x14>
 800f7ca:	bf00      	nop
 800f7cc:	20000020 	.word	0x20000020
 800f7d0:	08013314 	.word	0x08013314
 800f7d4:	080132e6 	.word	0x080132e6
 800f7d8:	080132d9 	.word	0x080132d9

0800f7dc <_free_r>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	4605      	mov	r5, r0
 800f7e0:	2900      	cmp	r1, #0
 800f7e2:	d041      	beq.n	800f868 <_free_r+0x8c>
 800f7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7e8:	1f0c      	subs	r4, r1, #4
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	bfb8      	it	lt
 800f7ee:	18e4      	addlt	r4, r4, r3
 800f7f0:	f000 f8e8 	bl	800f9c4 <__malloc_lock>
 800f7f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f86c <_free_r+0x90>)
 800f7f6:	6813      	ldr	r3, [r2, #0]
 800f7f8:	b933      	cbnz	r3, 800f808 <_free_r+0x2c>
 800f7fa:	6063      	str	r3, [r4, #4]
 800f7fc:	6014      	str	r4, [r2, #0]
 800f7fe:	4628      	mov	r0, r5
 800f800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f804:	f000 b8e4 	b.w	800f9d0 <__malloc_unlock>
 800f808:	42a3      	cmp	r3, r4
 800f80a:	d908      	bls.n	800f81e <_free_r+0x42>
 800f80c:	6820      	ldr	r0, [r4, #0]
 800f80e:	1821      	adds	r1, r4, r0
 800f810:	428b      	cmp	r3, r1
 800f812:	bf01      	itttt	eq
 800f814:	6819      	ldreq	r1, [r3, #0]
 800f816:	685b      	ldreq	r3, [r3, #4]
 800f818:	1809      	addeq	r1, r1, r0
 800f81a:	6021      	streq	r1, [r4, #0]
 800f81c:	e7ed      	b.n	800f7fa <_free_r+0x1e>
 800f81e:	461a      	mov	r2, r3
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	b10b      	cbz	r3, 800f828 <_free_r+0x4c>
 800f824:	42a3      	cmp	r3, r4
 800f826:	d9fa      	bls.n	800f81e <_free_r+0x42>
 800f828:	6811      	ldr	r1, [r2, #0]
 800f82a:	1850      	adds	r0, r2, r1
 800f82c:	42a0      	cmp	r0, r4
 800f82e:	d10b      	bne.n	800f848 <_free_r+0x6c>
 800f830:	6820      	ldr	r0, [r4, #0]
 800f832:	4401      	add	r1, r0
 800f834:	1850      	adds	r0, r2, r1
 800f836:	4283      	cmp	r3, r0
 800f838:	6011      	str	r1, [r2, #0]
 800f83a:	d1e0      	bne.n	800f7fe <_free_r+0x22>
 800f83c:	6818      	ldr	r0, [r3, #0]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	6053      	str	r3, [r2, #4]
 800f842:	4408      	add	r0, r1
 800f844:	6010      	str	r0, [r2, #0]
 800f846:	e7da      	b.n	800f7fe <_free_r+0x22>
 800f848:	d902      	bls.n	800f850 <_free_r+0x74>
 800f84a:	230c      	movs	r3, #12
 800f84c:	602b      	str	r3, [r5, #0]
 800f84e:	e7d6      	b.n	800f7fe <_free_r+0x22>
 800f850:	6820      	ldr	r0, [r4, #0]
 800f852:	1821      	adds	r1, r4, r0
 800f854:	428b      	cmp	r3, r1
 800f856:	bf04      	itt	eq
 800f858:	6819      	ldreq	r1, [r3, #0]
 800f85a:	685b      	ldreq	r3, [r3, #4]
 800f85c:	6063      	str	r3, [r4, #4]
 800f85e:	bf04      	itt	eq
 800f860:	1809      	addeq	r1, r1, r0
 800f862:	6021      	streq	r1, [r4, #0]
 800f864:	6054      	str	r4, [r2, #4]
 800f866:	e7ca      	b.n	800f7fe <_free_r+0x22>
 800f868:	bd38      	pop	{r3, r4, r5, pc}
 800f86a:	bf00      	nop
 800f86c:	20008a3c 	.word	0x20008a3c

0800f870 <malloc>:
 800f870:	4b02      	ldr	r3, [pc, #8]	@ (800f87c <malloc+0xc>)
 800f872:	4601      	mov	r1, r0
 800f874:	6818      	ldr	r0, [r3, #0]
 800f876:	f000 b825 	b.w	800f8c4 <_malloc_r>
 800f87a:	bf00      	nop
 800f87c:	20000020 	.word	0x20000020

0800f880 <sbrk_aligned>:
 800f880:	b570      	push	{r4, r5, r6, lr}
 800f882:	4e0f      	ldr	r6, [pc, #60]	@ (800f8c0 <sbrk_aligned+0x40>)
 800f884:	460c      	mov	r4, r1
 800f886:	6831      	ldr	r1, [r6, #0]
 800f888:	4605      	mov	r5, r0
 800f88a:	b911      	cbnz	r1, 800f892 <sbrk_aligned+0x12>
 800f88c:	f000 fe20 	bl	80104d0 <_sbrk_r>
 800f890:	6030      	str	r0, [r6, #0]
 800f892:	4621      	mov	r1, r4
 800f894:	4628      	mov	r0, r5
 800f896:	f000 fe1b 	bl	80104d0 <_sbrk_r>
 800f89a:	1c43      	adds	r3, r0, #1
 800f89c:	d103      	bne.n	800f8a6 <sbrk_aligned+0x26>
 800f89e:	f04f 34ff 	mov.w	r4, #4294967295
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	bd70      	pop	{r4, r5, r6, pc}
 800f8a6:	1cc4      	adds	r4, r0, #3
 800f8a8:	f024 0403 	bic.w	r4, r4, #3
 800f8ac:	42a0      	cmp	r0, r4
 800f8ae:	d0f8      	beq.n	800f8a2 <sbrk_aligned+0x22>
 800f8b0:	1a21      	subs	r1, r4, r0
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f000 fe0c 	bl	80104d0 <_sbrk_r>
 800f8b8:	3001      	adds	r0, #1
 800f8ba:	d1f2      	bne.n	800f8a2 <sbrk_aligned+0x22>
 800f8bc:	e7ef      	b.n	800f89e <sbrk_aligned+0x1e>
 800f8be:	bf00      	nop
 800f8c0:	20008a38 	.word	0x20008a38

0800f8c4 <_malloc_r>:
 800f8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c8:	1ccd      	adds	r5, r1, #3
 800f8ca:	f025 0503 	bic.w	r5, r5, #3
 800f8ce:	3508      	adds	r5, #8
 800f8d0:	2d0c      	cmp	r5, #12
 800f8d2:	bf38      	it	cc
 800f8d4:	250c      	movcc	r5, #12
 800f8d6:	2d00      	cmp	r5, #0
 800f8d8:	4606      	mov	r6, r0
 800f8da:	db01      	blt.n	800f8e0 <_malloc_r+0x1c>
 800f8dc:	42a9      	cmp	r1, r5
 800f8de:	d904      	bls.n	800f8ea <_malloc_r+0x26>
 800f8e0:	230c      	movs	r3, #12
 800f8e2:	6033      	str	r3, [r6, #0]
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f9c0 <_malloc_r+0xfc>
 800f8ee:	f000 f869 	bl	800f9c4 <__malloc_lock>
 800f8f2:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f6:	461c      	mov	r4, r3
 800f8f8:	bb44      	cbnz	r4, 800f94c <_malloc_r+0x88>
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	f7ff ffbf 	bl	800f880 <sbrk_aligned>
 800f902:	1c43      	adds	r3, r0, #1
 800f904:	4604      	mov	r4, r0
 800f906:	d158      	bne.n	800f9ba <_malloc_r+0xf6>
 800f908:	f8d8 4000 	ldr.w	r4, [r8]
 800f90c:	4627      	mov	r7, r4
 800f90e:	2f00      	cmp	r7, #0
 800f910:	d143      	bne.n	800f99a <_malloc_r+0xd6>
 800f912:	2c00      	cmp	r4, #0
 800f914:	d04b      	beq.n	800f9ae <_malloc_r+0xea>
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	4639      	mov	r1, r7
 800f91a:	4630      	mov	r0, r6
 800f91c:	eb04 0903 	add.w	r9, r4, r3
 800f920:	f000 fdd6 	bl	80104d0 <_sbrk_r>
 800f924:	4581      	cmp	r9, r0
 800f926:	d142      	bne.n	800f9ae <_malloc_r+0xea>
 800f928:	6821      	ldr	r1, [r4, #0]
 800f92a:	1a6d      	subs	r5, r5, r1
 800f92c:	4629      	mov	r1, r5
 800f92e:	4630      	mov	r0, r6
 800f930:	f7ff ffa6 	bl	800f880 <sbrk_aligned>
 800f934:	3001      	adds	r0, #1
 800f936:	d03a      	beq.n	800f9ae <_malloc_r+0xea>
 800f938:	6823      	ldr	r3, [r4, #0]
 800f93a:	442b      	add	r3, r5
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	f8d8 3000 	ldr.w	r3, [r8]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	bb62      	cbnz	r2, 800f9a0 <_malloc_r+0xdc>
 800f946:	f8c8 7000 	str.w	r7, [r8]
 800f94a:	e00f      	b.n	800f96c <_malloc_r+0xa8>
 800f94c:	6822      	ldr	r2, [r4, #0]
 800f94e:	1b52      	subs	r2, r2, r5
 800f950:	d420      	bmi.n	800f994 <_malloc_r+0xd0>
 800f952:	2a0b      	cmp	r2, #11
 800f954:	d917      	bls.n	800f986 <_malloc_r+0xc2>
 800f956:	1961      	adds	r1, r4, r5
 800f958:	42a3      	cmp	r3, r4
 800f95a:	6025      	str	r5, [r4, #0]
 800f95c:	bf18      	it	ne
 800f95e:	6059      	strne	r1, [r3, #4]
 800f960:	6863      	ldr	r3, [r4, #4]
 800f962:	bf08      	it	eq
 800f964:	f8c8 1000 	streq.w	r1, [r8]
 800f968:	5162      	str	r2, [r4, r5]
 800f96a:	604b      	str	r3, [r1, #4]
 800f96c:	4630      	mov	r0, r6
 800f96e:	f000 f82f 	bl	800f9d0 <__malloc_unlock>
 800f972:	f104 000b 	add.w	r0, r4, #11
 800f976:	1d23      	adds	r3, r4, #4
 800f978:	f020 0007 	bic.w	r0, r0, #7
 800f97c:	1ac2      	subs	r2, r0, r3
 800f97e:	bf1c      	itt	ne
 800f980:	1a1b      	subne	r3, r3, r0
 800f982:	50a3      	strne	r3, [r4, r2]
 800f984:	e7af      	b.n	800f8e6 <_malloc_r+0x22>
 800f986:	6862      	ldr	r2, [r4, #4]
 800f988:	42a3      	cmp	r3, r4
 800f98a:	bf0c      	ite	eq
 800f98c:	f8c8 2000 	streq.w	r2, [r8]
 800f990:	605a      	strne	r2, [r3, #4]
 800f992:	e7eb      	b.n	800f96c <_malloc_r+0xa8>
 800f994:	4623      	mov	r3, r4
 800f996:	6864      	ldr	r4, [r4, #4]
 800f998:	e7ae      	b.n	800f8f8 <_malloc_r+0x34>
 800f99a:	463c      	mov	r4, r7
 800f99c:	687f      	ldr	r7, [r7, #4]
 800f99e:	e7b6      	b.n	800f90e <_malloc_r+0x4a>
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	42a3      	cmp	r3, r4
 800f9a6:	d1fb      	bne.n	800f9a0 <_malloc_r+0xdc>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	6053      	str	r3, [r2, #4]
 800f9ac:	e7de      	b.n	800f96c <_malloc_r+0xa8>
 800f9ae:	230c      	movs	r3, #12
 800f9b0:	6033      	str	r3, [r6, #0]
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f000 f80c 	bl	800f9d0 <__malloc_unlock>
 800f9b8:	e794      	b.n	800f8e4 <_malloc_r+0x20>
 800f9ba:	6005      	str	r5, [r0, #0]
 800f9bc:	e7d6      	b.n	800f96c <_malloc_r+0xa8>
 800f9be:	bf00      	nop
 800f9c0:	20008a3c 	.word	0x20008a3c

0800f9c4 <__malloc_lock>:
 800f9c4:	4801      	ldr	r0, [pc, #4]	@ (800f9cc <__malloc_lock+0x8>)
 800f9c6:	f7ff beda 	b.w	800f77e <__retarget_lock_acquire_recursive>
 800f9ca:	bf00      	nop
 800f9cc:	20008a34 	.word	0x20008a34

0800f9d0 <__malloc_unlock>:
 800f9d0:	4801      	ldr	r0, [pc, #4]	@ (800f9d8 <__malloc_unlock+0x8>)
 800f9d2:	f7ff bed5 	b.w	800f780 <__retarget_lock_release_recursive>
 800f9d6:	bf00      	nop
 800f9d8:	20008a34 	.word	0x20008a34

0800f9dc <__ssputs_r>:
 800f9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9e0:	688e      	ldr	r6, [r1, #8]
 800f9e2:	461f      	mov	r7, r3
 800f9e4:	42be      	cmp	r6, r7
 800f9e6:	680b      	ldr	r3, [r1, #0]
 800f9e8:	4682      	mov	sl, r0
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	4690      	mov	r8, r2
 800f9ee:	d82d      	bhi.n	800fa4c <__ssputs_r+0x70>
 800f9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f9f8:	d026      	beq.n	800fa48 <__ssputs_r+0x6c>
 800f9fa:	6965      	ldr	r5, [r4, #20]
 800f9fc:	6909      	ldr	r1, [r1, #16]
 800f9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa02:	eba3 0901 	sub.w	r9, r3, r1
 800fa06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa0a:	1c7b      	adds	r3, r7, #1
 800fa0c:	444b      	add	r3, r9
 800fa0e:	106d      	asrs	r5, r5, #1
 800fa10:	429d      	cmp	r5, r3
 800fa12:	bf38      	it	cc
 800fa14:	461d      	movcc	r5, r3
 800fa16:	0553      	lsls	r3, r2, #21
 800fa18:	d527      	bpl.n	800fa6a <__ssputs_r+0x8e>
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	f7ff ff52 	bl	800f8c4 <_malloc_r>
 800fa20:	4606      	mov	r6, r0
 800fa22:	b360      	cbz	r0, 800fa7e <__ssputs_r+0xa2>
 800fa24:	6921      	ldr	r1, [r4, #16]
 800fa26:	464a      	mov	r2, r9
 800fa28:	f7ff feab 	bl	800f782 <memcpy>
 800fa2c:	89a3      	ldrh	r3, [r4, #12]
 800fa2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fa32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa36:	81a3      	strh	r3, [r4, #12]
 800fa38:	6126      	str	r6, [r4, #16]
 800fa3a:	6165      	str	r5, [r4, #20]
 800fa3c:	444e      	add	r6, r9
 800fa3e:	eba5 0509 	sub.w	r5, r5, r9
 800fa42:	6026      	str	r6, [r4, #0]
 800fa44:	60a5      	str	r5, [r4, #8]
 800fa46:	463e      	mov	r6, r7
 800fa48:	42be      	cmp	r6, r7
 800fa4a:	d900      	bls.n	800fa4e <__ssputs_r+0x72>
 800fa4c:	463e      	mov	r6, r7
 800fa4e:	6820      	ldr	r0, [r4, #0]
 800fa50:	4632      	mov	r2, r6
 800fa52:	4641      	mov	r1, r8
 800fa54:	f7ff fe05 	bl	800f662 <memmove>
 800fa58:	68a3      	ldr	r3, [r4, #8]
 800fa5a:	1b9b      	subs	r3, r3, r6
 800fa5c:	60a3      	str	r3, [r4, #8]
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	4433      	add	r3, r6
 800fa62:	6023      	str	r3, [r4, #0]
 800fa64:	2000      	movs	r0, #0
 800fa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa6a:	462a      	mov	r2, r5
 800fa6c:	f000 fd47 	bl	80104fe <_realloc_r>
 800fa70:	4606      	mov	r6, r0
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d1e0      	bne.n	800fa38 <__ssputs_r+0x5c>
 800fa76:	6921      	ldr	r1, [r4, #16]
 800fa78:	4650      	mov	r0, sl
 800fa7a:	f7ff feaf 	bl	800f7dc <_free_r>
 800fa7e:	230c      	movs	r3, #12
 800fa80:	f8ca 3000 	str.w	r3, [sl]
 800fa84:	89a3      	ldrh	r3, [r4, #12]
 800fa86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa8a:	81a3      	strh	r3, [r4, #12]
 800fa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa90:	e7e9      	b.n	800fa66 <__ssputs_r+0x8a>
	...

0800fa94 <_svfiprintf_r>:
 800fa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa98:	4698      	mov	r8, r3
 800fa9a:	898b      	ldrh	r3, [r1, #12]
 800fa9c:	061b      	lsls	r3, r3, #24
 800fa9e:	b09d      	sub	sp, #116	@ 0x74
 800faa0:	4607      	mov	r7, r0
 800faa2:	460d      	mov	r5, r1
 800faa4:	4614      	mov	r4, r2
 800faa6:	d510      	bpl.n	800faca <_svfiprintf_r+0x36>
 800faa8:	690b      	ldr	r3, [r1, #16]
 800faaa:	b973      	cbnz	r3, 800faca <_svfiprintf_r+0x36>
 800faac:	2140      	movs	r1, #64	@ 0x40
 800faae:	f7ff ff09 	bl	800f8c4 <_malloc_r>
 800fab2:	6028      	str	r0, [r5, #0]
 800fab4:	6128      	str	r0, [r5, #16]
 800fab6:	b930      	cbnz	r0, 800fac6 <_svfiprintf_r+0x32>
 800fab8:	230c      	movs	r3, #12
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	f04f 30ff 	mov.w	r0, #4294967295
 800fac0:	b01d      	add	sp, #116	@ 0x74
 800fac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac6:	2340      	movs	r3, #64	@ 0x40
 800fac8:	616b      	str	r3, [r5, #20]
 800faca:	2300      	movs	r3, #0
 800facc:	9309      	str	r3, [sp, #36]	@ 0x24
 800face:	2320      	movs	r3, #32
 800fad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fad8:	2330      	movs	r3, #48	@ 0x30
 800fada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fc78 <_svfiprintf_r+0x1e4>
 800fade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fae2:	f04f 0901 	mov.w	r9, #1
 800fae6:	4623      	mov	r3, r4
 800fae8:	469a      	mov	sl, r3
 800faea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faee:	b10a      	cbz	r2, 800faf4 <_svfiprintf_r+0x60>
 800faf0:	2a25      	cmp	r2, #37	@ 0x25
 800faf2:	d1f9      	bne.n	800fae8 <_svfiprintf_r+0x54>
 800faf4:	ebba 0b04 	subs.w	fp, sl, r4
 800faf8:	d00b      	beq.n	800fb12 <_svfiprintf_r+0x7e>
 800fafa:	465b      	mov	r3, fp
 800fafc:	4622      	mov	r2, r4
 800fafe:	4629      	mov	r1, r5
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7ff ff6b 	bl	800f9dc <__ssputs_r>
 800fb06:	3001      	adds	r0, #1
 800fb08:	f000 80a7 	beq.w	800fc5a <_svfiprintf_r+0x1c6>
 800fb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb0e:	445a      	add	r2, fp
 800fb10:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb12:	f89a 3000 	ldrb.w	r3, [sl]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f000 809f 	beq.w	800fc5a <_svfiprintf_r+0x1c6>
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb26:	f10a 0a01 	add.w	sl, sl, #1
 800fb2a:	9304      	str	r3, [sp, #16]
 800fb2c:	9307      	str	r3, [sp, #28]
 800fb2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb32:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb34:	4654      	mov	r4, sl
 800fb36:	2205      	movs	r2, #5
 800fb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb3c:	484e      	ldr	r0, [pc, #312]	@ (800fc78 <_svfiprintf_r+0x1e4>)
 800fb3e:	f7f0 fb57 	bl	80001f0 <memchr>
 800fb42:	9a04      	ldr	r2, [sp, #16]
 800fb44:	b9d8      	cbnz	r0, 800fb7e <_svfiprintf_r+0xea>
 800fb46:	06d0      	lsls	r0, r2, #27
 800fb48:	bf44      	itt	mi
 800fb4a:	2320      	movmi	r3, #32
 800fb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb50:	0711      	lsls	r1, r2, #28
 800fb52:	bf44      	itt	mi
 800fb54:	232b      	movmi	r3, #43	@ 0x2b
 800fb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb60:	d015      	beq.n	800fb8e <_svfiprintf_r+0xfa>
 800fb62:	9a07      	ldr	r2, [sp, #28]
 800fb64:	4654      	mov	r4, sl
 800fb66:	2000      	movs	r0, #0
 800fb68:	f04f 0c0a 	mov.w	ip, #10
 800fb6c:	4621      	mov	r1, r4
 800fb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb72:	3b30      	subs	r3, #48	@ 0x30
 800fb74:	2b09      	cmp	r3, #9
 800fb76:	d94b      	bls.n	800fc10 <_svfiprintf_r+0x17c>
 800fb78:	b1b0      	cbz	r0, 800fba8 <_svfiprintf_r+0x114>
 800fb7a:	9207      	str	r2, [sp, #28]
 800fb7c:	e014      	b.n	800fba8 <_svfiprintf_r+0x114>
 800fb7e:	eba0 0308 	sub.w	r3, r0, r8
 800fb82:	fa09 f303 	lsl.w	r3, r9, r3
 800fb86:	4313      	orrs	r3, r2
 800fb88:	9304      	str	r3, [sp, #16]
 800fb8a:	46a2      	mov	sl, r4
 800fb8c:	e7d2      	b.n	800fb34 <_svfiprintf_r+0xa0>
 800fb8e:	9b03      	ldr	r3, [sp, #12]
 800fb90:	1d19      	adds	r1, r3, #4
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	9103      	str	r1, [sp, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	bfbb      	ittet	lt
 800fb9a:	425b      	neglt	r3, r3
 800fb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800fba0:	9307      	strge	r3, [sp, #28]
 800fba2:	9307      	strlt	r3, [sp, #28]
 800fba4:	bfb8      	it	lt
 800fba6:	9204      	strlt	r2, [sp, #16]
 800fba8:	7823      	ldrb	r3, [r4, #0]
 800fbaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800fbac:	d10a      	bne.n	800fbc4 <_svfiprintf_r+0x130>
 800fbae:	7863      	ldrb	r3, [r4, #1]
 800fbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbb2:	d132      	bne.n	800fc1a <_svfiprintf_r+0x186>
 800fbb4:	9b03      	ldr	r3, [sp, #12]
 800fbb6:	1d1a      	adds	r2, r3, #4
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	9203      	str	r2, [sp, #12]
 800fbbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fbc0:	3402      	adds	r4, #2
 800fbc2:	9305      	str	r3, [sp, #20]
 800fbc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fc88 <_svfiprintf_r+0x1f4>
 800fbc8:	7821      	ldrb	r1, [r4, #0]
 800fbca:	2203      	movs	r2, #3
 800fbcc:	4650      	mov	r0, sl
 800fbce:	f7f0 fb0f 	bl	80001f0 <memchr>
 800fbd2:	b138      	cbz	r0, 800fbe4 <_svfiprintf_r+0x150>
 800fbd4:	9b04      	ldr	r3, [sp, #16]
 800fbd6:	eba0 000a 	sub.w	r0, r0, sl
 800fbda:	2240      	movs	r2, #64	@ 0x40
 800fbdc:	4082      	lsls	r2, r0
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	3401      	adds	r4, #1
 800fbe2:	9304      	str	r3, [sp, #16]
 800fbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbe8:	4824      	ldr	r0, [pc, #144]	@ (800fc7c <_svfiprintf_r+0x1e8>)
 800fbea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fbee:	2206      	movs	r2, #6
 800fbf0:	f7f0 fafe 	bl	80001f0 <memchr>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	d036      	beq.n	800fc66 <_svfiprintf_r+0x1d2>
 800fbf8:	4b21      	ldr	r3, [pc, #132]	@ (800fc80 <_svfiprintf_r+0x1ec>)
 800fbfa:	bb1b      	cbnz	r3, 800fc44 <_svfiprintf_r+0x1b0>
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	3307      	adds	r3, #7
 800fc00:	f023 0307 	bic.w	r3, r3, #7
 800fc04:	3308      	adds	r3, #8
 800fc06:	9303      	str	r3, [sp, #12]
 800fc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc0a:	4433      	add	r3, r6
 800fc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc0e:	e76a      	b.n	800fae6 <_svfiprintf_r+0x52>
 800fc10:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc14:	460c      	mov	r4, r1
 800fc16:	2001      	movs	r0, #1
 800fc18:	e7a8      	b.n	800fb6c <_svfiprintf_r+0xd8>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	3401      	adds	r4, #1
 800fc1e:	9305      	str	r3, [sp, #20]
 800fc20:	4619      	mov	r1, r3
 800fc22:	f04f 0c0a 	mov.w	ip, #10
 800fc26:	4620      	mov	r0, r4
 800fc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc2c:	3a30      	subs	r2, #48	@ 0x30
 800fc2e:	2a09      	cmp	r2, #9
 800fc30:	d903      	bls.n	800fc3a <_svfiprintf_r+0x1a6>
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d0c6      	beq.n	800fbc4 <_svfiprintf_r+0x130>
 800fc36:	9105      	str	r1, [sp, #20]
 800fc38:	e7c4      	b.n	800fbc4 <_svfiprintf_r+0x130>
 800fc3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc3e:	4604      	mov	r4, r0
 800fc40:	2301      	movs	r3, #1
 800fc42:	e7f0      	b.n	800fc26 <_svfiprintf_r+0x192>
 800fc44:	ab03      	add	r3, sp, #12
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	462a      	mov	r2, r5
 800fc4a:	4b0e      	ldr	r3, [pc, #56]	@ (800fc84 <_svfiprintf_r+0x1f0>)
 800fc4c:	a904      	add	r1, sp, #16
 800fc4e:	4638      	mov	r0, r7
 800fc50:	f3af 8000 	nop.w
 800fc54:	1c42      	adds	r2, r0, #1
 800fc56:	4606      	mov	r6, r0
 800fc58:	d1d6      	bne.n	800fc08 <_svfiprintf_r+0x174>
 800fc5a:	89ab      	ldrh	r3, [r5, #12]
 800fc5c:	065b      	lsls	r3, r3, #25
 800fc5e:	f53f af2d 	bmi.w	800fabc <_svfiprintf_r+0x28>
 800fc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc64:	e72c      	b.n	800fac0 <_svfiprintf_r+0x2c>
 800fc66:	ab03      	add	r3, sp, #12
 800fc68:	9300      	str	r3, [sp, #0]
 800fc6a:	462a      	mov	r2, r5
 800fc6c:	4b05      	ldr	r3, [pc, #20]	@ (800fc84 <_svfiprintf_r+0x1f0>)
 800fc6e:	a904      	add	r1, sp, #16
 800fc70:	4638      	mov	r0, r7
 800fc72:	f000 f9bb 	bl	800ffec <_printf_i>
 800fc76:	e7ed      	b.n	800fc54 <_svfiprintf_r+0x1c0>
 800fc78:	08013315 	.word	0x08013315
 800fc7c:	0801331f 	.word	0x0801331f
 800fc80:	00000000 	.word	0x00000000
 800fc84:	0800f9dd 	.word	0x0800f9dd
 800fc88:	0801331b 	.word	0x0801331b

0800fc8c <__sfputc_r>:
 800fc8c:	6893      	ldr	r3, [r2, #8]
 800fc8e:	3b01      	subs	r3, #1
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	b410      	push	{r4}
 800fc94:	6093      	str	r3, [r2, #8]
 800fc96:	da08      	bge.n	800fcaa <__sfputc_r+0x1e>
 800fc98:	6994      	ldr	r4, [r2, #24]
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	db01      	blt.n	800fca2 <__sfputc_r+0x16>
 800fc9e:	290a      	cmp	r1, #10
 800fca0:	d103      	bne.n	800fcaa <__sfputc_r+0x1e>
 800fca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fca6:	f000 bb7f 	b.w	80103a8 <__swbuf_r>
 800fcaa:	6813      	ldr	r3, [r2, #0]
 800fcac:	1c58      	adds	r0, r3, #1
 800fcae:	6010      	str	r0, [r2, #0]
 800fcb0:	7019      	strb	r1, [r3, #0]
 800fcb2:	4608      	mov	r0, r1
 800fcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcb8:	4770      	bx	lr

0800fcba <__sfputs_r>:
 800fcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcbc:	4606      	mov	r6, r0
 800fcbe:	460f      	mov	r7, r1
 800fcc0:	4614      	mov	r4, r2
 800fcc2:	18d5      	adds	r5, r2, r3
 800fcc4:	42ac      	cmp	r4, r5
 800fcc6:	d101      	bne.n	800fccc <__sfputs_r+0x12>
 800fcc8:	2000      	movs	r0, #0
 800fcca:	e007      	b.n	800fcdc <__sfputs_r+0x22>
 800fccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd0:	463a      	mov	r2, r7
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f7ff ffda 	bl	800fc8c <__sfputc_r>
 800fcd8:	1c43      	adds	r3, r0, #1
 800fcda:	d1f3      	bne.n	800fcc4 <__sfputs_r+0xa>
 800fcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fce0 <_vfiprintf_r>:
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	460d      	mov	r5, r1
 800fce6:	b09d      	sub	sp, #116	@ 0x74
 800fce8:	4614      	mov	r4, r2
 800fcea:	4698      	mov	r8, r3
 800fcec:	4606      	mov	r6, r0
 800fcee:	b118      	cbz	r0, 800fcf8 <_vfiprintf_r+0x18>
 800fcf0:	6a03      	ldr	r3, [r0, #32]
 800fcf2:	b90b      	cbnz	r3, 800fcf8 <_vfiprintf_r+0x18>
 800fcf4:	f7ff fbfa 	bl	800f4ec <__sinit>
 800fcf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fcfa:	07d9      	lsls	r1, r3, #31
 800fcfc:	d405      	bmi.n	800fd0a <_vfiprintf_r+0x2a>
 800fcfe:	89ab      	ldrh	r3, [r5, #12]
 800fd00:	059a      	lsls	r2, r3, #22
 800fd02:	d402      	bmi.n	800fd0a <_vfiprintf_r+0x2a>
 800fd04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd06:	f7ff fd3a 	bl	800f77e <__retarget_lock_acquire_recursive>
 800fd0a:	89ab      	ldrh	r3, [r5, #12]
 800fd0c:	071b      	lsls	r3, r3, #28
 800fd0e:	d501      	bpl.n	800fd14 <_vfiprintf_r+0x34>
 800fd10:	692b      	ldr	r3, [r5, #16]
 800fd12:	b99b      	cbnz	r3, 800fd3c <_vfiprintf_r+0x5c>
 800fd14:	4629      	mov	r1, r5
 800fd16:	4630      	mov	r0, r6
 800fd18:	f000 fb84 	bl	8010424 <__swsetup_r>
 800fd1c:	b170      	cbz	r0, 800fd3c <_vfiprintf_r+0x5c>
 800fd1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd20:	07dc      	lsls	r4, r3, #31
 800fd22:	d504      	bpl.n	800fd2e <_vfiprintf_r+0x4e>
 800fd24:	f04f 30ff 	mov.w	r0, #4294967295
 800fd28:	b01d      	add	sp, #116	@ 0x74
 800fd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2e:	89ab      	ldrh	r3, [r5, #12]
 800fd30:	0598      	lsls	r0, r3, #22
 800fd32:	d4f7      	bmi.n	800fd24 <_vfiprintf_r+0x44>
 800fd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd36:	f7ff fd23 	bl	800f780 <__retarget_lock_release_recursive>
 800fd3a:	e7f3      	b.n	800fd24 <_vfiprintf_r+0x44>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd40:	2320      	movs	r3, #32
 800fd42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd46:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd4a:	2330      	movs	r3, #48	@ 0x30
 800fd4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fefc <_vfiprintf_r+0x21c>
 800fd50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd54:	f04f 0901 	mov.w	r9, #1
 800fd58:	4623      	mov	r3, r4
 800fd5a:	469a      	mov	sl, r3
 800fd5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd60:	b10a      	cbz	r2, 800fd66 <_vfiprintf_r+0x86>
 800fd62:	2a25      	cmp	r2, #37	@ 0x25
 800fd64:	d1f9      	bne.n	800fd5a <_vfiprintf_r+0x7a>
 800fd66:	ebba 0b04 	subs.w	fp, sl, r4
 800fd6a:	d00b      	beq.n	800fd84 <_vfiprintf_r+0xa4>
 800fd6c:	465b      	mov	r3, fp
 800fd6e:	4622      	mov	r2, r4
 800fd70:	4629      	mov	r1, r5
 800fd72:	4630      	mov	r0, r6
 800fd74:	f7ff ffa1 	bl	800fcba <__sfputs_r>
 800fd78:	3001      	adds	r0, #1
 800fd7a:	f000 80a7 	beq.w	800fecc <_vfiprintf_r+0x1ec>
 800fd7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd80:	445a      	add	r2, fp
 800fd82:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd84:	f89a 3000 	ldrb.w	r3, [sl]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f000 809f 	beq.w	800fecc <_vfiprintf_r+0x1ec>
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f04f 32ff 	mov.w	r2, #4294967295
 800fd94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd98:	f10a 0a01 	add.w	sl, sl, #1
 800fd9c:	9304      	str	r3, [sp, #16]
 800fd9e:	9307      	str	r3, [sp, #28]
 800fda0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fda4:	931a      	str	r3, [sp, #104]	@ 0x68
 800fda6:	4654      	mov	r4, sl
 800fda8:	2205      	movs	r2, #5
 800fdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdae:	4853      	ldr	r0, [pc, #332]	@ (800fefc <_vfiprintf_r+0x21c>)
 800fdb0:	f7f0 fa1e 	bl	80001f0 <memchr>
 800fdb4:	9a04      	ldr	r2, [sp, #16]
 800fdb6:	b9d8      	cbnz	r0, 800fdf0 <_vfiprintf_r+0x110>
 800fdb8:	06d1      	lsls	r1, r2, #27
 800fdba:	bf44      	itt	mi
 800fdbc:	2320      	movmi	r3, #32
 800fdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdc2:	0713      	lsls	r3, r2, #28
 800fdc4:	bf44      	itt	mi
 800fdc6:	232b      	movmi	r3, #43	@ 0x2b
 800fdc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdcc:	f89a 3000 	ldrb.w	r3, [sl]
 800fdd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdd2:	d015      	beq.n	800fe00 <_vfiprintf_r+0x120>
 800fdd4:	9a07      	ldr	r2, [sp, #28]
 800fdd6:	4654      	mov	r4, sl
 800fdd8:	2000      	movs	r0, #0
 800fdda:	f04f 0c0a 	mov.w	ip, #10
 800fdde:	4621      	mov	r1, r4
 800fde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fde4:	3b30      	subs	r3, #48	@ 0x30
 800fde6:	2b09      	cmp	r3, #9
 800fde8:	d94b      	bls.n	800fe82 <_vfiprintf_r+0x1a2>
 800fdea:	b1b0      	cbz	r0, 800fe1a <_vfiprintf_r+0x13a>
 800fdec:	9207      	str	r2, [sp, #28]
 800fdee:	e014      	b.n	800fe1a <_vfiprintf_r+0x13a>
 800fdf0:	eba0 0308 	sub.w	r3, r0, r8
 800fdf4:	fa09 f303 	lsl.w	r3, r9, r3
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	9304      	str	r3, [sp, #16]
 800fdfc:	46a2      	mov	sl, r4
 800fdfe:	e7d2      	b.n	800fda6 <_vfiprintf_r+0xc6>
 800fe00:	9b03      	ldr	r3, [sp, #12]
 800fe02:	1d19      	adds	r1, r3, #4
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	9103      	str	r1, [sp, #12]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	bfbb      	ittet	lt
 800fe0c:	425b      	neglt	r3, r3
 800fe0e:	f042 0202 	orrlt.w	r2, r2, #2
 800fe12:	9307      	strge	r3, [sp, #28]
 800fe14:	9307      	strlt	r3, [sp, #28]
 800fe16:	bfb8      	it	lt
 800fe18:	9204      	strlt	r2, [sp, #16]
 800fe1a:	7823      	ldrb	r3, [r4, #0]
 800fe1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe1e:	d10a      	bne.n	800fe36 <_vfiprintf_r+0x156>
 800fe20:	7863      	ldrb	r3, [r4, #1]
 800fe22:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe24:	d132      	bne.n	800fe8c <_vfiprintf_r+0x1ac>
 800fe26:	9b03      	ldr	r3, [sp, #12]
 800fe28:	1d1a      	adds	r2, r3, #4
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	9203      	str	r2, [sp, #12]
 800fe2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe32:	3402      	adds	r4, #2
 800fe34:	9305      	str	r3, [sp, #20]
 800fe36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ff0c <_vfiprintf_r+0x22c>
 800fe3a:	7821      	ldrb	r1, [r4, #0]
 800fe3c:	2203      	movs	r2, #3
 800fe3e:	4650      	mov	r0, sl
 800fe40:	f7f0 f9d6 	bl	80001f0 <memchr>
 800fe44:	b138      	cbz	r0, 800fe56 <_vfiprintf_r+0x176>
 800fe46:	9b04      	ldr	r3, [sp, #16]
 800fe48:	eba0 000a 	sub.w	r0, r0, sl
 800fe4c:	2240      	movs	r2, #64	@ 0x40
 800fe4e:	4082      	lsls	r2, r0
 800fe50:	4313      	orrs	r3, r2
 800fe52:	3401      	adds	r4, #1
 800fe54:	9304      	str	r3, [sp, #16]
 800fe56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5a:	4829      	ldr	r0, [pc, #164]	@ (800ff00 <_vfiprintf_r+0x220>)
 800fe5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe60:	2206      	movs	r2, #6
 800fe62:	f7f0 f9c5 	bl	80001f0 <memchr>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d03f      	beq.n	800feea <_vfiprintf_r+0x20a>
 800fe6a:	4b26      	ldr	r3, [pc, #152]	@ (800ff04 <_vfiprintf_r+0x224>)
 800fe6c:	bb1b      	cbnz	r3, 800feb6 <_vfiprintf_r+0x1d6>
 800fe6e:	9b03      	ldr	r3, [sp, #12]
 800fe70:	3307      	adds	r3, #7
 800fe72:	f023 0307 	bic.w	r3, r3, #7
 800fe76:	3308      	adds	r3, #8
 800fe78:	9303      	str	r3, [sp, #12]
 800fe7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe7c:	443b      	add	r3, r7
 800fe7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe80:	e76a      	b.n	800fd58 <_vfiprintf_r+0x78>
 800fe82:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe86:	460c      	mov	r4, r1
 800fe88:	2001      	movs	r0, #1
 800fe8a:	e7a8      	b.n	800fdde <_vfiprintf_r+0xfe>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	3401      	adds	r4, #1
 800fe90:	9305      	str	r3, [sp, #20]
 800fe92:	4619      	mov	r1, r3
 800fe94:	f04f 0c0a 	mov.w	ip, #10
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe9e:	3a30      	subs	r2, #48	@ 0x30
 800fea0:	2a09      	cmp	r2, #9
 800fea2:	d903      	bls.n	800feac <_vfiprintf_r+0x1cc>
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d0c6      	beq.n	800fe36 <_vfiprintf_r+0x156>
 800fea8:	9105      	str	r1, [sp, #20]
 800feaa:	e7c4      	b.n	800fe36 <_vfiprintf_r+0x156>
 800feac:	fb0c 2101 	mla	r1, ip, r1, r2
 800feb0:	4604      	mov	r4, r0
 800feb2:	2301      	movs	r3, #1
 800feb4:	e7f0      	b.n	800fe98 <_vfiprintf_r+0x1b8>
 800feb6:	ab03      	add	r3, sp, #12
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	462a      	mov	r2, r5
 800febc:	4b12      	ldr	r3, [pc, #72]	@ (800ff08 <_vfiprintf_r+0x228>)
 800febe:	a904      	add	r1, sp, #16
 800fec0:	4630      	mov	r0, r6
 800fec2:	f3af 8000 	nop.w
 800fec6:	4607      	mov	r7, r0
 800fec8:	1c78      	adds	r0, r7, #1
 800feca:	d1d6      	bne.n	800fe7a <_vfiprintf_r+0x19a>
 800fecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fece:	07d9      	lsls	r1, r3, #31
 800fed0:	d405      	bmi.n	800fede <_vfiprintf_r+0x1fe>
 800fed2:	89ab      	ldrh	r3, [r5, #12]
 800fed4:	059a      	lsls	r2, r3, #22
 800fed6:	d402      	bmi.n	800fede <_vfiprintf_r+0x1fe>
 800fed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800feda:	f7ff fc51 	bl	800f780 <__retarget_lock_release_recursive>
 800fede:	89ab      	ldrh	r3, [r5, #12]
 800fee0:	065b      	lsls	r3, r3, #25
 800fee2:	f53f af1f 	bmi.w	800fd24 <_vfiprintf_r+0x44>
 800fee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fee8:	e71e      	b.n	800fd28 <_vfiprintf_r+0x48>
 800feea:	ab03      	add	r3, sp, #12
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	462a      	mov	r2, r5
 800fef0:	4b05      	ldr	r3, [pc, #20]	@ (800ff08 <_vfiprintf_r+0x228>)
 800fef2:	a904      	add	r1, sp, #16
 800fef4:	4630      	mov	r0, r6
 800fef6:	f000 f879 	bl	800ffec <_printf_i>
 800fefa:	e7e4      	b.n	800fec6 <_vfiprintf_r+0x1e6>
 800fefc:	08013315 	.word	0x08013315
 800ff00:	0801331f 	.word	0x0801331f
 800ff04:	00000000 	.word	0x00000000
 800ff08:	0800fcbb 	.word	0x0800fcbb
 800ff0c:	0801331b 	.word	0x0801331b

0800ff10 <_printf_common>:
 800ff10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff14:	4616      	mov	r6, r2
 800ff16:	4698      	mov	r8, r3
 800ff18:	688a      	ldr	r2, [r1, #8]
 800ff1a:	690b      	ldr	r3, [r1, #16]
 800ff1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff20:	4293      	cmp	r3, r2
 800ff22:	bfb8      	it	lt
 800ff24:	4613      	movlt	r3, r2
 800ff26:	6033      	str	r3, [r6, #0]
 800ff28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff2c:	4607      	mov	r7, r0
 800ff2e:	460c      	mov	r4, r1
 800ff30:	b10a      	cbz	r2, 800ff36 <_printf_common+0x26>
 800ff32:	3301      	adds	r3, #1
 800ff34:	6033      	str	r3, [r6, #0]
 800ff36:	6823      	ldr	r3, [r4, #0]
 800ff38:	0699      	lsls	r1, r3, #26
 800ff3a:	bf42      	ittt	mi
 800ff3c:	6833      	ldrmi	r3, [r6, #0]
 800ff3e:	3302      	addmi	r3, #2
 800ff40:	6033      	strmi	r3, [r6, #0]
 800ff42:	6825      	ldr	r5, [r4, #0]
 800ff44:	f015 0506 	ands.w	r5, r5, #6
 800ff48:	d106      	bne.n	800ff58 <_printf_common+0x48>
 800ff4a:	f104 0a19 	add.w	sl, r4, #25
 800ff4e:	68e3      	ldr	r3, [r4, #12]
 800ff50:	6832      	ldr	r2, [r6, #0]
 800ff52:	1a9b      	subs	r3, r3, r2
 800ff54:	42ab      	cmp	r3, r5
 800ff56:	dc26      	bgt.n	800ffa6 <_printf_common+0x96>
 800ff58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff5c:	6822      	ldr	r2, [r4, #0]
 800ff5e:	3b00      	subs	r3, #0
 800ff60:	bf18      	it	ne
 800ff62:	2301      	movne	r3, #1
 800ff64:	0692      	lsls	r2, r2, #26
 800ff66:	d42b      	bmi.n	800ffc0 <_printf_common+0xb0>
 800ff68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff6c:	4641      	mov	r1, r8
 800ff6e:	4638      	mov	r0, r7
 800ff70:	47c8      	blx	r9
 800ff72:	3001      	adds	r0, #1
 800ff74:	d01e      	beq.n	800ffb4 <_printf_common+0xa4>
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	6922      	ldr	r2, [r4, #16]
 800ff7a:	f003 0306 	and.w	r3, r3, #6
 800ff7e:	2b04      	cmp	r3, #4
 800ff80:	bf02      	ittt	eq
 800ff82:	68e5      	ldreq	r5, [r4, #12]
 800ff84:	6833      	ldreq	r3, [r6, #0]
 800ff86:	1aed      	subeq	r5, r5, r3
 800ff88:	68a3      	ldr	r3, [r4, #8]
 800ff8a:	bf0c      	ite	eq
 800ff8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff90:	2500      	movne	r5, #0
 800ff92:	4293      	cmp	r3, r2
 800ff94:	bfc4      	itt	gt
 800ff96:	1a9b      	subgt	r3, r3, r2
 800ff98:	18ed      	addgt	r5, r5, r3
 800ff9a:	2600      	movs	r6, #0
 800ff9c:	341a      	adds	r4, #26
 800ff9e:	42b5      	cmp	r5, r6
 800ffa0:	d11a      	bne.n	800ffd8 <_printf_common+0xc8>
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	e008      	b.n	800ffb8 <_printf_common+0xa8>
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	4652      	mov	r2, sl
 800ffaa:	4641      	mov	r1, r8
 800ffac:	4638      	mov	r0, r7
 800ffae:	47c8      	blx	r9
 800ffb0:	3001      	adds	r0, #1
 800ffb2:	d103      	bne.n	800ffbc <_printf_common+0xac>
 800ffb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffbc:	3501      	adds	r5, #1
 800ffbe:	e7c6      	b.n	800ff4e <_printf_common+0x3e>
 800ffc0:	18e1      	adds	r1, r4, r3
 800ffc2:	1c5a      	adds	r2, r3, #1
 800ffc4:	2030      	movs	r0, #48	@ 0x30
 800ffc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ffca:	4422      	add	r2, r4
 800ffcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ffd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ffd4:	3302      	adds	r3, #2
 800ffd6:	e7c7      	b.n	800ff68 <_printf_common+0x58>
 800ffd8:	2301      	movs	r3, #1
 800ffda:	4622      	mov	r2, r4
 800ffdc:	4641      	mov	r1, r8
 800ffde:	4638      	mov	r0, r7
 800ffe0:	47c8      	blx	r9
 800ffe2:	3001      	adds	r0, #1
 800ffe4:	d0e6      	beq.n	800ffb4 <_printf_common+0xa4>
 800ffe6:	3601      	adds	r6, #1
 800ffe8:	e7d9      	b.n	800ff9e <_printf_common+0x8e>
	...

0800ffec <_printf_i>:
 800ffec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fff0:	7e0f      	ldrb	r7, [r1, #24]
 800fff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fff4:	2f78      	cmp	r7, #120	@ 0x78
 800fff6:	4691      	mov	r9, r2
 800fff8:	4680      	mov	r8, r0
 800fffa:	460c      	mov	r4, r1
 800fffc:	469a      	mov	sl, r3
 800fffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010002:	d807      	bhi.n	8010014 <_printf_i+0x28>
 8010004:	2f62      	cmp	r7, #98	@ 0x62
 8010006:	d80a      	bhi.n	801001e <_printf_i+0x32>
 8010008:	2f00      	cmp	r7, #0
 801000a:	f000 80d2 	beq.w	80101b2 <_printf_i+0x1c6>
 801000e:	2f58      	cmp	r7, #88	@ 0x58
 8010010:	f000 80b9 	beq.w	8010186 <_printf_i+0x19a>
 8010014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801001c:	e03a      	b.n	8010094 <_printf_i+0xa8>
 801001e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010022:	2b15      	cmp	r3, #21
 8010024:	d8f6      	bhi.n	8010014 <_printf_i+0x28>
 8010026:	a101      	add	r1, pc, #4	@ (adr r1, 801002c <_printf_i+0x40>)
 8010028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801002c:	08010085 	.word	0x08010085
 8010030:	08010099 	.word	0x08010099
 8010034:	08010015 	.word	0x08010015
 8010038:	08010015 	.word	0x08010015
 801003c:	08010015 	.word	0x08010015
 8010040:	08010015 	.word	0x08010015
 8010044:	08010099 	.word	0x08010099
 8010048:	08010015 	.word	0x08010015
 801004c:	08010015 	.word	0x08010015
 8010050:	08010015 	.word	0x08010015
 8010054:	08010015 	.word	0x08010015
 8010058:	08010199 	.word	0x08010199
 801005c:	080100c3 	.word	0x080100c3
 8010060:	08010153 	.word	0x08010153
 8010064:	08010015 	.word	0x08010015
 8010068:	08010015 	.word	0x08010015
 801006c:	080101bb 	.word	0x080101bb
 8010070:	08010015 	.word	0x08010015
 8010074:	080100c3 	.word	0x080100c3
 8010078:	08010015 	.word	0x08010015
 801007c:	08010015 	.word	0x08010015
 8010080:	0801015b 	.word	0x0801015b
 8010084:	6833      	ldr	r3, [r6, #0]
 8010086:	1d1a      	adds	r2, r3, #4
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	6032      	str	r2, [r6, #0]
 801008c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010094:	2301      	movs	r3, #1
 8010096:	e09d      	b.n	80101d4 <_printf_i+0x1e8>
 8010098:	6833      	ldr	r3, [r6, #0]
 801009a:	6820      	ldr	r0, [r4, #0]
 801009c:	1d19      	adds	r1, r3, #4
 801009e:	6031      	str	r1, [r6, #0]
 80100a0:	0606      	lsls	r6, r0, #24
 80100a2:	d501      	bpl.n	80100a8 <_printf_i+0xbc>
 80100a4:	681d      	ldr	r5, [r3, #0]
 80100a6:	e003      	b.n	80100b0 <_printf_i+0xc4>
 80100a8:	0645      	lsls	r5, r0, #25
 80100aa:	d5fb      	bpl.n	80100a4 <_printf_i+0xb8>
 80100ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80100b0:	2d00      	cmp	r5, #0
 80100b2:	da03      	bge.n	80100bc <_printf_i+0xd0>
 80100b4:	232d      	movs	r3, #45	@ 0x2d
 80100b6:	426d      	negs	r5, r5
 80100b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100bc:	4859      	ldr	r0, [pc, #356]	@ (8010224 <_printf_i+0x238>)
 80100be:	230a      	movs	r3, #10
 80100c0:	e011      	b.n	80100e6 <_printf_i+0xfa>
 80100c2:	6821      	ldr	r1, [r4, #0]
 80100c4:	6833      	ldr	r3, [r6, #0]
 80100c6:	0608      	lsls	r0, r1, #24
 80100c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80100cc:	d402      	bmi.n	80100d4 <_printf_i+0xe8>
 80100ce:	0649      	lsls	r1, r1, #25
 80100d0:	bf48      	it	mi
 80100d2:	b2ad      	uxthmi	r5, r5
 80100d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80100d6:	4853      	ldr	r0, [pc, #332]	@ (8010224 <_printf_i+0x238>)
 80100d8:	6033      	str	r3, [r6, #0]
 80100da:	bf14      	ite	ne
 80100dc:	230a      	movne	r3, #10
 80100de:	2308      	moveq	r3, #8
 80100e0:	2100      	movs	r1, #0
 80100e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80100e6:	6866      	ldr	r6, [r4, #4]
 80100e8:	60a6      	str	r6, [r4, #8]
 80100ea:	2e00      	cmp	r6, #0
 80100ec:	bfa2      	ittt	ge
 80100ee:	6821      	ldrge	r1, [r4, #0]
 80100f0:	f021 0104 	bicge.w	r1, r1, #4
 80100f4:	6021      	strge	r1, [r4, #0]
 80100f6:	b90d      	cbnz	r5, 80100fc <_printf_i+0x110>
 80100f8:	2e00      	cmp	r6, #0
 80100fa:	d04b      	beq.n	8010194 <_printf_i+0x1a8>
 80100fc:	4616      	mov	r6, r2
 80100fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010102:	fb03 5711 	mls	r7, r3, r1, r5
 8010106:	5dc7      	ldrb	r7, [r0, r7]
 8010108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801010c:	462f      	mov	r7, r5
 801010e:	42bb      	cmp	r3, r7
 8010110:	460d      	mov	r5, r1
 8010112:	d9f4      	bls.n	80100fe <_printf_i+0x112>
 8010114:	2b08      	cmp	r3, #8
 8010116:	d10b      	bne.n	8010130 <_printf_i+0x144>
 8010118:	6823      	ldr	r3, [r4, #0]
 801011a:	07df      	lsls	r7, r3, #31
 801011c:	d508      	bpl.n	8010130 <_printf_i+0x144>
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	6861      	ldr	r1, [r4, #4]
 8010122:	4299      	cmp	r1, r3
 8010124:	bfde      	ittt	le
 8010126:	2330      	movle	r3, #48	@ 0x30
 8010128:	f806 3c01 	strble.w	r3, [r6, #-1]
 801012c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010130:	1b92      	subs	r2, r2, r6
 8010132:	6122      	str	r2, [r4, #16]
 8010134:	f8cd a000 	str.w	sl, [sp]
 8010138:	464b      	mov	r3, r9
 801013a:	aa03      	add	r2, sp, #12
 801013c:	4621      	mov	r1, r4
 801013e:	4640      	mov	r0, r8
 8010140:	f7ff fee6 	bl	800ff10 <_printf_common>
 8010144:	3001      	adds	r0, #1
 8010146:	d14a      	bne.n	80101de <_printf_i+0x1f2>
 8010148:	f04f 30ff 	mov.w	r0, #4294967295
 801014c:	b004      	add	sp, #16
 801014e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010152:	6823      	ldr	r3, [r4, #0]
 8010154:	f043 0320 	orr.w	r3, r3, #32
 8010158:	6023      	str	r3, [r4, #0]
 801015a:	4833      	ldr	r0, [pc, #204]	@ (8010228 <_printf_i+0x23c>)
 801015c:	2778      	movs	r7, #120	@ 0x78
 801015e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010162:	6823      	ldr	r3, [r4, #0]
 8010164:	6831      	ldr	r1, [r6, #0]
 8010166:	061f      	lsls	r7, r3, #24
 8010168:	f851 5b04 	ldr.w	r5, [r1], #4
 801016c:	d402      	bmi.n	8010174 <_printf_i+0x188>
 801016e:	065f      	lsls	r7, r3, #25
 8010170:	bf48      	it	mi
 8010172:	b2ad      	uxthmi	r5, r5
 8010174:	6031      	str	r1, [r6, #0]
 8010176:	07d9      	lsls	r1, r3, #31
 8010178:	bf44      	itt	mi
 801017a:	f043 0320 	orrmi.w	r3, r3, #32
 801017e:	6023      	strmi	r3, [r4, #0]
 8010180:	b11d      	cbz	r5, 801018a <_printf_i+0x19e>
 8010182:	2310      	movs	r3, #16
 8010184:	e7ac      	b.n	80100e0 <_printf_i+0xf4>
 8010186:	4827      	ldr	r0, [pc, #156]	@ (8010224 <_printf_i+0x238>)
 8010188:	e7e9      	b.n	801015e <_printf_i+0x172>
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	f023 0320 	bic.w	r3, r3, #32
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	e7f6      	b.n	8010182 <_printf_i+0x196>
 8010194:	4616      	mov	r6, r2
 8010196:	e7bd      	b.n	8010114 <_printf_i+0x128>
 8010198:	6833      	ldr	r3, [r6, #0]
 801019a:	6825      	ldr	r5, [r4, #0]
 801019c:	6961      	ldr	r1, [r4, #20]
 801019e:	1d18      	adds	r0, r3, #4
 80101a0:	6030      	str	r0, [r6, #0]
 80101a2:	062e      	lsls	r6, r5, #24
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	d501      	bpl.n	80101ac <_printf_i+0x1c0>
 80101a8:	6019      	str	r1, [r3, #0]
 80101aa:	e002      	b.n	80101b2 <_printf_i+0x1c6>
 80101ac:	0668      	lsls	r0, r5, #25
 80101ae:	d5fb      	bpl.n	80101a8 <_printf_i+0x1bc>
 80101b0:	8019      	strh	r1, [r3, #0]
 80101b2:	2300      	movs	r3, #0
 80101b4:	6123      	str	r3, [r4, #16]
 80101b6:	4616      	mov	r6, r2
 80101b8:	e7bc      	b.n	8010134 <_printf_i+0x148>
 80101ba:	6833      	ldr	r3, [r6, #0]
 80101bc:	1d1a      	adds	r2, r3, #4
 80101be:	6032      	str	r2, [r6, #0]
 80101c0:	681e      	ldr	r6, [r3, #0]
 80101c2:	6862      	ldr	r2, [r4, #4]
 80101c4:	2100      	movs	r1, #0
 80101c6:	4630      	mov	r0, r6
 80101c8:	f7f0 f812 	bl	80001f0 <memchr>
 80101cc:	b108      	cbz	r0, 80101d2 <_printf_i+0x1e6>
 80101ce:	1b80      	subs	r0, r0, r6
 80101d0:	6060      	str	r0, [r4, #4]
 80101d2:	6863      	ldr	r3, [r4, #4]
 80101d4:	6123      	str	r3, [r4, #16]
 80101d6:	2300      	movs	r3, #0
 80101d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101dc:	e7aa      	b.n	8010134 <_printf_i+0x148>
 80101de:	6923      	ldr	r3, [r4, #16]
 80101e0:	4632      	mov	r2, r6
 80101e2:	4649      	mov	r1, r9
 80101e4:	4640      	mov	r0, r8
 80101e6:	47d0      	blx	sl
 80101e8:	3001      	adds	r0, #1
 80101ea:	d0ad      	beq.n	8010148 <_printf_i+0x15c>
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	079b      	lsls	r3, r3, #30
 80101f0:	d413      	bmi.n	801021a <_printf_i+0x22e>
 80101f2:	68e0      	ldr	r0, [r4, #12]
 80101f4:	9b03      	ldr	r3, [sp, #12]
 80101f6:	4298      	cmp	r0, r3
 80101f8:	bfb8      	it	lt
 80101fa:	4618      	movlt	r0, r3
 80101fc:	e7a6      	b.n	801014c <_printf_i+0x160>
 80101fe:	2301      	movs	r3, #1
 8010200:	4632      	mov	r2, r6
 8010202:	4649      	mov	r1, r9
 8010204:	4640      	mov	r0, r8
 8010206:	47d0      	blx	sl
 8010208:	3001      	adds	r0, #1
 801020a:	d09d      	beq.n	8010148 <_printf_i+0x15c>
 801020c:	3501      	adds	r5, #1
 801020e:	68e3      	ldr	r3, [r4, #12]
 8010210:	9903      	ldr	r1, [sp, #12]
 8010212:	1a5b      	subs	r3, r3, r1
 8010214:	42ab      	cmp	r3, r5
 8010216:	dcf2      	bgt.n	80101fe <_printf_i+0x212>
 8010218:	e7eb      	b.n	80101f2 <_printf_i+0x206>
 801021a:	2500      	movs	r5, #0
 801021c:	f104 0619 	add.w	r6, r4, #25
 8010220:	e7f5      	b.n	801020e <_printf_i+0x222>
 8010222:	bf00      	nop
 8010224:	08013326 	.word	0x08013326
 8010228:	08013337 	.word	0x08013337

0801022c <__sflush_r>:
 801022c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010234:	0716      	lsls	r6, r2, #28
 8010236:	4605      	mov	r5, r0
 8010238:	460c      	mov	r4, r1
 801023a:	d454      	bmi.n	80102e6 <__sflush_r+0xba>
 801023c:	684b      	ldr	r3, [r1, #4]
 801023e:	2b00      	cmp	r3, #0
 8010240:	dc02      	bgt.n	8010248 <__sflush_r+0x1c>
 8010242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010244:	2b00      	cmp	r3, #0
 8010246:	dd48      	ble.n	80102da <__sflush_r+0xae>
 8010248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801024a:	2e00      	cmp	r6, #0
 801024c:	d045      	beq.n	80102da <__sflush_r+0xae>
 801024e:	2300      	movs	r3, #0
 8010250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010254:	682f      	ldr	r7, [r5, #0]
 8010256:	6a21      	ldr	r1, [r4, #32]
 8010258:	602b      	str	r3, [r5, #0]
 801025a:	d030      	beq.n	80102be <__sflush_r+0x92>
 801025c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	0759      	lsls	r1, r3, #29
 8010262:	d505      	bpl.n	8010270 <__sflush_r+0x44>
 8010264:	6863      	ldr	r3, [r4, #4]
 8010266:	1ad2      	subs	r2, r2, r3
 8010268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801026a:	b10b      	cbz	r3, 8010270 <__sflush_r+0x44>
 801026c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801026e:	1ad2      	subs	r2, r2, r3
 8010270:	2300      	movs	r3, #0
 8010272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010274:	6a21      	ldr	r1, [r4, #32]
 8010276:	4628      	mov	r0, r5
 8010278:	47b0      	blx	r6
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	89a3      	ldrh	r3, [r4, #12]
 801027e:	d106      	bne.n	801028e <__sflush_r+0x62>
 8010280:	6829      	ldr	r1, [r5, #0]
 8010282:	291d      	cmp	r1, #29
 8010284:	d82b      	bhi.n	80102de <__sflush_r+0xb2>
 8010286:	4a2a      	ldr	r2, [pc, #168]	@ (8010330 <__sflush_r+0x104>)
 8010288:	410a      	asrs	r2, r1
 801028a:	07d6      	lsls	r6, r2, #31
 801028c:	d427      	bmi.n	80102de <__sflush_r+0xb2>
 801028e:	2200      	movs	r2, #0
 8010290:	6062      	str	r2, [r4, #4]
 8010292:	04d9      	lsls	r1, r3, #19
 8010294:	6922      	ldr	r2, [r4, #16]
 8010296:	6022      	str	r2, [r4, #0]
 8010298:	d504      	bpl.n	80102a4 <__sflush_r+0x78>
 801029a:	1c42      	adds	r2, r0, #1
 801029c:	d101      	bne.n	80102a2 <__sflush_r+0x76>
 801029e:	682b      	ldr	r3, [r5, #0]
 80102a0:	b903      	cbnz	r3, 80102a4 <__sflush_r+0x78>
 80102a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80102a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102a6:	602f      	str	r7, [r5, #0]
 80102a8:	b1b9      	cbz	r1, 80102da <__sflush_r+0xae>
 80102aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80102ae:	4299      	cmp	r1, r3
 80102b0:	d002      	beq.n	80102b8 <__sflush_r+0x8c>
 80102b2:	4628      	mov	r0, r5
 80102b4:	f7ff fa92 	bl	800f7dc <_free_r>
 80102b8:	2300      	movs	r3, #0
 80102ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80102bc:	e00d      	b.n	80102da <__sflush_r+0xae>
 80102be:	2301      	movs	r3, #1
 80102c0:	4628      	mov	r0, r5
 80102c2:	47b0      	blx	r6
 80102c4:	4602      	mov	r2, r0
 80102c6:	1c50      	adds	r0, r2, #1
 80102c8:	d1c9      	bne.n	801025e <__sflush_r+0x32>
 80102ca:	682b      	ldr	r3, [r5, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d0c6      	beq.n	801025e <__sflush_r+0x32>
 80102d0:	2b1d      	cmp	r3, #29
 80102d2:	d001      	beq.n	80102d8 <__sflush_r+0xac>
 80102d4:	2b16      	cmp	r3, #22
 80102d6:	d11e      	bne.n	8010316 <__sflush_r+0xea>
 80102d8:	602f      	str	r7, [r5, #0]
 80102da:	2000      	movs	r0, #0
 80102dc:	e022      	b.n	8010324 <__sflush_r+0xf8>
 80102de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102e2:	b21b      	sxth	r3, r3
 80102e4:	e01b      	b.n	801031e <__sflush_r+0xf2>
 80102e6:	690f      	ldr	r7, [r1, #16]
 80102e8:	2f00      	cmp	r7, #0
 80102ea:	d0f6      	beq.n	80102da <__sflush_r+0xae>
 80102ec:	0793      	lsls	r3, r2, #30
 80102ee:	680e      	ldr	r6, [r1, #0]
 80102f0:	bf08      	it	eq
 80102f2:	694b      	ldreq	r3, [r1, #20]
 80102f4:	600f      	str	r7, [r1, #0]
 80102f6:	bf18      	it	ne
 80102f8:	2300      	movne	r3, #0
 80102fa:	eba6 0807 	sub.w	r8, r6, r7
 80102fe:	608b      	str	r3, [r1, #8]
 8010300:	f1b8 0f00 	cmp.w	r8, #0
 8010304:	dde9      	ble.n	80102da <__sflush_r+0xae>
 8010306:	6a21      	ldr	r1, [r4, #32]
 8010308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801030a:	4643      	mov	r3, r8
 801030c:	463a      	mov	r2, r7
 801030e:	4628      	mov	r0, r5
 8010310:	47b0      	blx	r6
 8010312:	2800      	cmp	r0, #0
 8010314:	dc08      	bgt.n	8010328 <__sflush_r+0xfc>
 8010316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801031a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801031e:	81a3      	strh	r3, [r4, #12]
 8010320:	f04f 30ff 	mov.w	r0, #4294967295
 8010324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010328:	4407      	add	r7, r0
 801032a:	eba8 0800 	sub.w	r8, r8, r0
 801032e:	e7e7      	b.n	8010300 <__sflush_r+0xd4>
 8010330:	dfbffffe 	.word	0xdfbffffe

08010334 <_fflush_r>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	690b      	ldr	r3, [r1, #16]
 8010338:	4605      	mov	r5, r0
 801033a:	460c      	mov	r4, r1
 801033c:	b913      	cbnz	r3, 8010344 <_fflush_r+0x10>
 801033e:	2500      	movs	r5, #0
 8010340:	4628      	mov	r0, r5
 8010342:	bd38      	pop	{r3, r4, r5, pc}
 8010344:	b118      	cbz	r0, 801034e <_fflush_r+0x1a>
 8010346:	6a03      	ldr	r3, [r0, #32]
 8010348:	b90b      	cbnz	r3, 801034e <_fflush_r+0x1a>
 801034a:	f7ff f8cf 	bl	800f4ec <__sinit>
 801034e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d0f3      	beq.n	801033e <_fflush_r+0xa>
 8010356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010358:	07d0      	lsls	r0, r2, #31
 801035a:	d404      	bmi.n	8010366 <_fflush_r+0x32>
 801035c:	0599      	lsls	r1, r3, #22
 801035e:	d402      	bmi.n	8010366 <_fflush_r+0x32>
 8010360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010362:	f7ff fa0c 	bl	800f77e <__retarget_lock_acquire_recursive>
 8010366:	4628      	mov	r0, r5
 8010368:	4621      	mov	r1, r4
 801036a:	f7ff ff5f 	bl	801022c <__sflush_r>
 801036e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010370:	07da      	lsls	r2, r3, #31
 8010372:	4605      	mov	r5, r0
 8010374:	d4e4      	bmi.n	8010340 <_fflush_r+0xc>
 8010376:	89a3      	ldrh	r3, [r4, #12]
 8010378:	059b      	lsls	r3, r3, #22
 801037a:	d4e1      	bmi.n	8010340 <_fflush_r+0xc>
 801037c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801037e:	f7ff f9ff 	bl	800f780 <__retarget_lock_release_recursive>
 8010382:	e7dd      	b.n	8010340 <_fflush_r+0xc>

08010384 <fiprintf>:
 8010384:	b40e      	push	{r1, r2, r3}
 8010386:	b503      	push	{r0, r1, lr}
 8010388:	4601      	mov	r1, r0
 801038a:	ab03      	add	r3, sp, #12
 801038c:	4805      	ldr	r0, [pc, #20]	@ (80103a4 <fiprintf+0x20>)
 801038e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010392:	6800      	ldr	r0, [r0, #0]
 8010394:	9301      	str	r3, [sp, #4]
 8010396:	f7ff fca3 	bl	800fce0 <_vfiprintf_r>
 801039a:	b002      	add	sp, #8
 801039c:	f85d eb04 	ldr.w	lr, [sp], #4
 80103a0:	b003      	add	sp, #12
 80103a2:	4770      	bx	lr
 80103a4:	20000020 	.word	0x20000020

080103a8 <__swbuf_r>:
 80103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103aa:	460e      	mov	r6, r1
 80103ac:	4614      	mov	r4, r2
 80103ae:	4605      	mov	r5, r0
 80103b0:	b118      	cbz	r0, 80103ba <__swbuf_r+0x12>
 80103b2:	6a03      	ldr	r3, [r0, #32]
 80103b4:	b90b      	cbnz	r3, 80103ba <__swbuf_r+0x12>
 80103b6:	f7ff f899 	bl	800f4ec <__sinit>
 80103ba:	69a3      	ldr	r3, [r4, #24]
 80103bc:	60a3      	str	r3, [r4, #8]
 80103be:	89a3      	ldrh	r3, [r4, #12]
 80103c0:	071a      	lsls	r2, r3, #28
 80103c2:	d501      	bpl.n	80103c8 <__swbuf_r+0x20>
 80103c4:	6923      	ldr	r3, [r4, #16]
 80103c6:	b943      	cbnz	r3, 80103da <__swbuf_r+0x32>
 80103c8:	4621      	mov	r1, r4
 80103ca:	4628      	mov	r0, r5
 80103cc:	f000 f82a 	bl	8010424 <__swsetup_r>
 80103d0:	b118      	cbz	r0, 80103da <__swbuf_r+0x32>
 80103d2:	f04f 37ff 	mov.w	r7, #4294967295
 80103d6:	4638      	mov	r0, r7
 80103d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	6922      	ldr	r2, [r4, #16]
 80103de:	1a98      	subs	r0, r3, r2
 80103e0:	6963      	ldr	r3, [r4, #20]
 80103e2:	b2f6      	uxtb	r6, r6
 80103e4:	4283      	cmp	r3, r0
 80103e6:	4637      	mov	r7, r6
 80103e8:	dc05      	bgt.n	80103f6 <__swbuf_r+0x4e>
 80103ea:	4621      	mov	r1, r4
 80103ec:	4628      	mov	r0, r5
 80103ee:	f7ff ffa1 	bl	8010334 <_fflush_r>
 80103f2:	2800      	cmp	r0, #0
 80103f4:	d1ed      	bne.n	80103d2 <__swbuf_r+0x2a>
 80103f6:	68a3      	ldr	r3, [r4, #8]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	60a3      	str	r3, [r4, #8]
 80103fc:	6823      	ldr	r3, [r4, #0]
 80103fe:	1c5a      	adds	r2, r3, #1
 8010400:	6022      	str	r2, [r4, #0]
 8010402:	701e      	strb	r6, [r3, #0]
 8010404:	6962      	ldr	r2, [r4, #20]
 8010406:	1c43      	adds	r3, r0, #1
 8010408:	429a      	cmp	r2, r3
 801040a:	d004      	beq.n	8010416 <__swbuf_r+0x6e>
 801040c:	89a3      	ldrh	r3, [r4, #12]
 801040e:	07db      	lsls	r3, r3, #31
 8010410:	d5e1      	bpl.n	80103d6 <__swbuf_r+0x2e>
 8010412:	2e0a      	cmp	r6, #10
 8010414:	d1df      	bne.n	80103d6 <__swbuf_r+0x2e>
 8010416:	4621      	mov	r1, r4
 8010418:	4628      	mov	r0, r5
 801041a:	f7ff ff8b 	bl	8010334 <_fflush_r>
 801041e:	2800      	cmp	r0, #0
 8010420:	d0d9      	beq.n	80103d6 <__swbuf_r+0x2e>
 8010422:	e7d6      	b.n	80103d2 <__swbuf_r+0x2a>

08010424 <__swsetup_r>:
 8010424:	b538      	push	{r3, r4, r5, lr}
 8010426:	4b29      	ldr	r3, [pc, #164]	@ (80104cc <__swsetup_r+0xa8>)
 8010428:	4605      	mov	r5, r0
 801042a:	6818      	ldr	r0, [r3, #0]
 801042c:	460c      	mov	r4, r1
 801042e:	b118      	cbz	r0, 8010438 <__swsetup_r+0x14>
 8010430:	6a03      	ldr	r3, [r0, #32]
 8010432:	b90b      	cbnz	r3, 8010438 <__swsetup_r+0x14>
 8010434:	f7ff f85a 	bl	800f4ec <__sinit>
 8010438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801043c:	0719      	lsls	r1, r3, #28
 801043e:	d422      	bmi.n	8010486 <__swsetup_r+0x62>
 8010440:	06da      	lsls	r2, r3, #27
 8010442:	d407      	bmi.n	8010454 <__swsetup_r+0x30>
 8010444:	2209      	movs	r2, #9
 8010446:	602a      	str	r2, [r5, #0]
 8010448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801044c:	81a3      	strh	r3, [r4, #12]
 801044e:	f04f 30ff 	mov.w	r0, #4294967295
 8010452:	e033      	b.n	80104bc <__swsetup_r+0x98>
 8010454:	0758      	lsls	r0, r3, #29
 8010456:	d512      	bpl.n	801047e <__swsetup_r+0x5a>
 8010458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801045a:	b141      	cbz	r1, 801046e <__swsetup_r+0x4a>
 801045c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010460:	4299      	cmp	r1, r3
 8010462:	d002      	beq.n	801046a <__swsetup_r+0x46>
 8010464:	4628      	mov	r0, r5
 8010466:	f7ff f9b9 	bl	800f7dc <_free_r>
 801046a:	2300      	movs	r3, #0
 801046c:	6363      	str	r3, [r4, #52]	@ 0x34
 801046e:	89a3      	ldrh	r3, [r4, #12]
 8010470:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010474:	81a3      	strh	r3, [r4, #12]
 8010476:	2300      	movs	r3, #0
 8010478:	6063      	str	r3, [r4, #4]
 801047a:	6923      	ldr	r3, [r4, #16]
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	89a3      	ldrh	r3, [r4, #12]
 8010480:	f043 0308 	orr.w	r3, r3, #8
 8010484:	81a3      	strh	r3, [r4, #12]
 8010486:	6923      	ldr	r3, [r4, #16]
 8010488:	b94b      	cbnz	r3, 801049e <__swsetup_r+0x7a>
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010494:	d003      	beq.n	801049e <__swsetup_r+0x7a>
 8010496:	4621      	mov	r1, r4
 8010498:	4628      	mov	r0, r5
 801049a:	f000 f884 	bl	80105a6 <__smakebuf_r>
 801049e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104a2:	f013 0201 	ands.w	r2, r3, #1
 80104a6:	d00a      	beq.n	80104be <__swsetup_r+0x9a>
 80104a8:	2200      	movs	r2, #0
 80104aa:	60a2      	str	r2, [r4, #8]
 80104ac:	6962      	ldr	r2, [r4, #20]
 80104ae:	4252      	negs	r2, r2
 80104b0:	61a2      	str	r2, [r4, #24]
 80104b2:	6922      	ldr	r2, [r4, #16]
 80104b4:	b942      	cbnz	r2, 80104c8 <__swsetup_r+0xa4>
 80104b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80104ba:	d1c5      	bne.n	8010448 <__swsetup_r+0x24>
 80104bc:	bd38      	pop	{r3, r4, r5, pc}
 80104be:	0799      	lsls	r1, r3, #30
 80104c0:	bf58      	it	pl
 80104c2:	6962      	ldrpl	r2, [r4, #20]
 80104c4:	60a2      	str	r2, [r4, #8]
 80104c6:	e7f4      	b.n	80104b2 <__swsetup_r+0x8e>
 80104c8:	2000      	movs	r0, #0
 80104ca:	e7f7      	b.n	80104bc <__swsetup_r+0x98>
 80104cc:	20000020 	.word	0x20000020

080104d0 <_sbrk_r>:
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4d06      	ldr	r5, [pc, #24]	@ (80104ec <_sbrk_r+0x1c>)
 80104d4:	2300      	movs	r3, #0
 80104d6:	4604      	mov	r4, r0
 80104d8:	4608      	mov	r0, r1
 80104da:	602b      	str	r3, [r5, #0]
 80104dc:	f7f0 fbf0 	bl	8000cc0 <_sbrk>
 80104e0:	1c43      	adds	r3, r0, #1
 80104e2:	d102      	bne.n	80104ea <_sbrk_r+0x1a>
 80104e4:	682b      	ldr	r3, [r5, #0]
 80104e6:	b103      	cbz	r3, 80104ea <_sbrk_r+0x1a>
 80104e8:	6023      	str	r3, [r4, #0]
 80104ea:	bd38      	pop	{r3, r4, r5, pc}
 80104ec:	20008a30 	.word	0x20008a30

080104f0 <abort>:
 80104f0:	b508      	push	{r3, lr}
 80104f2:	2006      	movs	r0, #6
 80104f4:	f000 f8bc 	bl	8010670 <raise>
 80104f8:	2001      	movs	r0, #1
 80104fa:	f7f0 fb69 	bl	8000bd0 <_exit>

080104fe <_realloc_r>:
 80104fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010502:	4680      	mov	r8, r0
 8010504:	4615      	mov	r5, r2
 8010506:	460c      	mov	r4, r1
 8010508:	b921      	cbnz	r1, 8010514 <_realloc_r+0x16>
 801050a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801050e:	4611      	mov	r1, r2
 8010510:	f7ff b9d8 	b.w	800f8c4 <_malloc_r>
 8010514:	b92a      	cbnz	r2, 8010522 <_realloc_r+0x24>
 8010516:	f7ff f961 	bl	800f7dc <_free_r>
 801051a:	2400      	movs	r4, #0
 801051c:	4620      	mov	r0, r4
 801051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010522:	f000 f8e3 	bl	80106ec <_malloc_usable_size_r>
 8010526:	4285      	cmp	r5, r0
 8010528:	4606      	mov	r6, r0
 801052a:	d802      	bhi.n	8010532 <_realloc_r+0x34>
 801052c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010530:	d8f4      	bhi.n	801051c <_realloc_r+0x1e>
 8010532:	4629      	mov	r1, r5
 8010534:	4640      	mov	r0, r8
 8010536:	f7ff f9c5 	bl	800f8c4 <_malloc_r>
 801053a:	4607      	mov	r7, r0
 801053c:	2800      	cmp	r0, #0
 801053e:	d0ec      	beq.n	801051a <_realloc_r+0x1c>
 8010540:	42b5      	cmp	r5, r6
 8010542:	462a      	mov	r2, r5
 8010544:	4621      	mov	r1, r4
 8010546:	bf28      	it	cs
 8010548:	4632      	movcs	r2, r6
 801054a:	f7ff f91a 	bl	800f782 <memcpy>
 801054e:	4621      	mov	r1, r4
 8010550:	4640      	mov	r0, r8
 8010552:	f7ff f943 	bl	800f7dc <_free_r>
 8010556:	463c      	mov	r4, r7
 8010558:	e7e0      	b.n	801051c <_realloc_r+0x1e>

0801055a <__swhatbuf_r>:
 801055a:	b570      	push	{r4, r5, r6, lr}
 801055c:	460c      	mov	r4, r1
 801055e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010562:	2900      	cmp	r1, #0
 8010564:	b096      	sub	sp, #88	@ 0x58
 8010566:	4615      	mov	r5, r2
 8010568:	461e      	mov	r6, r3
 801056a:	da0d      	bge.n	8010588 <__swhatbuf_r+0x2e>
 801056c:	89a3      	ldrh	r3, [r4, #12]
 801056e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010572:	f04f 0100 	mov.w	r1, #0
 8010576:	bf14      	ite	ne
 8010578:	2340      	movne	r3, #64	@ 0x40
 801057a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801057e:	2000      	movs	r0, #0
 8010580:	6031      	str	r1, [r6, #0]
 8010582:	602b      	str	r3, [r5, #0]
 8010584:	b016      	add	sp, #88	@ 0x58
 8010586:	bd70      	pop	{r4, r5, r6, pc}
 8010588:	466a      	mov	r2, sp
 801058a:	f000 f879 	bl	8010680 <_fstat_r>
 801058e:	2800      	cmp	r0, #0
 8010590:	dbec      	blt.n	801056c <__swhatbuf_r+0x12>
 8010592:	9901      	ldr	r1, [sp, #4]
 8010594:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010598:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801059c:	4259      	negs	r1, r3
 801059e:	4159      	adcs	r1, r3
 80105a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105a4:	e7eb      	b.n	801057e <__swhatbuf_r+0x24>

080105a6 <__smakebuf_r>:
 80105a6:	898b      	ldrh	r3, [r1, #12]
 80105a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105aa:	079d      	lsls	r5, r3, #30
 80105ac:	4606      	mov	r6, r0
 80105ae:	460c      	mov	r4, r1
 80105b0:	d507      	bpl.n	80105c2 <__smakebuf_r+0x1c>
 80105b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105b6:	6023      	str	r3, [r4, #0]
 80105b8:	6123      	str	r3, [r4, #16]
 80105ba:	2301      	movs	r3, #1
 80105bc:	6163      	str	r3, [r4, #20]
 80105be:	b003      	add	sp, #12
 80105c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105c2:	ab01      	add	r3, sp, #4
 80105c4:	466a      	mov	r2, sp
 80105c6:	f7ff ffc8 	bl	801055a <__swhatbuf_r>
 80105ca:	9f00      	ldr	r7, [sp, #0]
 80105cc:	4605      	mov	r5, r0
 80105ce:	4639      	mov	r1, r7
 80105d0:	4630      	mov	r0, r6
 80105d2:	f7ff f977 	bl	800f8c4 <_malloc_r>
 80105d6:	b948      	cbnz	r0, 80105ec <__smakebuf_r+0x46>
 80105d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105dc:	059a      	lsls	r2, r3, #22
 80105de:	d4ee      	bmi.n	80105be <__smakebuf_r+0x18>
 80105e0:	f023 0303 	bic.w	r3, r3, #3
 80105e4:	f043 0302 	orr.w	r3, r3, #2
 80105e8:	81a3      	strh	r3, [r4, #12]
 80105ea:	e7e2      	b.n	80105b2 <__smakebuf_r+0xc>
 80105ec:	89a3      	ldrh	r3, [r4, #12]
 80105ee:	6020      	str	r0, [r4, #0]
 80105f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105f4:	81a3      	strh	r3, [r4, #12]
 80105f6:	9b01      	ldr	r3, [sp, #4]
 80105f8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80105fc:	b15b      	cbz	r3, 8010616 <__smakebuf_r+0x70>
 80105fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010602:	4630      	mov	r0, r6
 8010604:	f000 f84e 	bl	80106a4 <_isatty_r>
 8010608:	b128      	cbz	r0, 8010616 <__smakebuf_r+0x70>
 801060a:	89a3      	ldrh	r3, [r4, #12]
 801060c:	f023 0303 	bic.w	r3, r3, #3
 8010610:	f043 0301 	orr.w	r3, r3, #1
 8010614:	81a3      	strh	r3, [r4, #12]
 8010616:	89a3      	ldrh	r3, [r4, #12]
 8010618:	431d      	orrs	r5, r3
 801061a:	81a5      	strh	r5, [r4, #12]
 801061c:	e7cf      	b.n	80105be <__smakebuf_r+0x18>

0801061e <_raise_r>:
 801061e:	291f      	cmp	r1, #31
 8010620:	b538      	push	{r3, r4, r5, lr}
 8010622:	4605      	mov	r5, r0
 8010624:	460c      	mov	r4, r1
 8010626:	d904      	bls.n	8010632 <_raise_r+0x14>
 8010628:	2316      	movs	r3, #22
 801062a:	6003      	str	r3, [r0, #0]
 801062c:	f04f 30ff 	mov.w	r0, #4294967295
 8010630:	bd38      	pop	{r3, r4, r5, pc}
 8010632:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010634:	b112      	cbz	r2, 801063c <_raise_r+0x1e>
 8010636:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801063a:	b94b      	cbnz	r3, 8010650 <_raise_r+0x32>
 801063c:	4628      	mov	r0, r5
 801063e:	f000 f853 	bl	80106e8 <_getpid_r>
 8010642:	4622      	mov	r2, r4
 8010644:	4601      	mov	r1, r0
 8010646:	4628      	mov	r0, r5
 8010648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801064c:	f000 b83a 	b.w	80106c4 <_kill_r>
 8010650:	2b01      	cmp	r3, #1
 8010652:	d00a      	beq.n	801066a <_raise_r+0x4c>
 8010654:	1c59      	adds	r1, r3, #1
 8010656:	d103      	bne.n	8010660 <_raise_r+0x42>
 8010658:	2316      	movs	r3, #22
 801065a:	6003      	str	r3, [r0, #0]
 801065c:	2001      	movs	r0, #1
 801065e:	e7e7      	b.n	8010630 <_raise_r+0x12>
 8010660:	2100      	movs	r1, #0
 8010662:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010666:	4620      	mov	r0, r4
 8010668:	4798      	blx	r3
 801066a:	2000      	movs	r0, #0
 801066c:	e7e0      	b.n	8010630 <_raise_r+0x12>
	...

08010670 <raise>:
 8010670:	4b02      	ldr	r3, [pc, #8]	@ (801067c <raise+0xc>)
 8010672:	4601      	mov	r1, r0
 8010674:	6818      	ldr	r0, [r3, #0]
 8010676:	f7ff bfd2 	b.w	801061e <_raise_r>
 801067a:	bf00      	nop
 801067c:	20000020 	.word	0x20000020

08010680 <_fstat_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4d07      	ldr	r5, [pc, #28]	@ (80106a0 <_fstat_r+0x20>)
 8010684:	2300      	movs	r3, #0
 8010686:	4604      	mov	r4, r0
 8010688:	4608      	mov	r0, r1
 801068a:	4611      	mov	r1, r2
 801068c:	602b      	str	r3, [r5, #0]
 801068e:	f7f0 faef 	bl	8000c70 <_fstat>
 8010692:	1c43      	adds	r3, r0, #1
 8010694:	d102      	bne.n	801069c <_fstat_r+0x1c>
 8010696:	682b      	ldr	r3, [r5, #0]
 8010698:	b103      	cbz	r3, 801069c <_fstat_r+0x1c>
 801069a:	6023      	str	r3, [r4, #0]
 801069c:	bd38      	pop	{r3, r4, r5, pc}
 801069e:	bf00      	nop
 80106a0:	20008a30 	.word	0x20008a30

080106a4 <_isatty_r>:
 80106a4:	b538      	push	{r3, r4, r5, lr}
 80106a6:	4d06      	ldr	r5, [pc, #24]	@ (80106c0 <_isatty_r+0x1c>)
 80106a8:	2300      	movs	r3, #0
 80106aa:	4604      	mov	r4, r0
 80106ac:	4608      	mov	r0, r1
 80106ae:	602b      	str	r3, [r5, #0]
 80106b0:	f7f0 faee 	bl	8000c90 <_isatty>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d102      	bne.n	80106be <_isatty_r+0x1a>
 80106b8:	682b      	ldr	r3, [r5, #0]
 80106ba:	b103      	cbz	r3, 80106be <_isatty_r+0x1a>
 80106bc:	6023      	str	r3, [r4, #0]
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	20008a30 	.word	0x20008a30

080106c4 <_kill_r>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	4d07      	ldr	r5, [pc, #28]	@ (80106e4 <_kill_r+0x20>)
 80106c8:	2300      	movs	r3, #0
 80106ca:	4604      	mov	r4, r0
 80106cc:	4608      	mov	r0, r1
 80106ce:	4611      	mov	r1, r2
 80106d0:	602b      	str	r3, [r5, #0]
 80106d2:	f7f0 fa6b 	bl	8000bac <_kill>
 80106d6:	1c43      	adds	r3, r0, #1
 80106d8:	d102      	bne.n	80106e0 <_kill_r+0x1c>
 80106da:	682b      	ldr	r3, [r5, #0]
 80106dc:	b103      	cbz	r3, 80106e0 <_kill_r+0x1c>
 80106de:	6023      	str	r3, [r4, #0]
 80106e0:	bd38      	pop	{r3, r4, r5, pc}
 80106e2:	bf00      	nop
 80106e4:	20008a30 	.word	0x20008a30

080106e8 <_getpid_r>:
 80106e8:	f7f0 ba58 	b.w	8000b9c <_getpid>

080106ec <_malloc_usable_size_r>:
 80106ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106f0:	1f18      	subs	r0, r3, #4
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	bfbc      	itt	lt
 80106f6:	580b      	ldrlt	r3, [r1, r0]
 80106f8:	18c0      	addlt	r0, r0, r3
 80106fa:	4770      	bx	lr

080106fc <_init>:
 80106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fe:	bf00      	nop
 8010700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010702:	bc08      	pop	{r3}
 8010704:	469e      	mov	lr, r3
 8010706:	4770      	bx	lr

08010708 <_fini>:
 8010708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070a:	bf00      	nop
 801070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801070e:	bc08      	pop	{r3}
 8010710:	469e      	mov	lr, r3
 8010712:	4770      	bx	lr
